ccopy_reg
_reconstructor
p1
(c__main__
Cart_Pole_DA
p2
c__builtin__
object
p3
NtRp4
(dp5
S'symbolic_output'
p6
g1
(ctheano.tensor.var
TensorVariable
p7
g3
NtRp8
(dp9
S'owner'
p10
NsS'index'
p11
NsS'tag'
p12
(itheano.gof.utils
scratchpad
p13
(dp14
S'trace'
p15
(lp16
(S'denoising_autoencoder_cart_pole.py'
p17
I32
S'__init__'
p18
S'super(Cart_Pole_DA, self).__init__(*args, **kwargs)'
tp19
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p20
I58
g18
S'self.initialise_symbolic_output()'
tp21
a(S'denoising_autoencoder_cart_pole.py'
p22
I60
S'initialise_symbolic_output'
p23
S'self.symbolic_output = theano.tensor.dvector("y")'
tp24
a(S'/Library/Python/2.7/site-packages/theano/gof/type.py'
p25
I317
S'__call__'
p26
S'return utils.add_tag_trace(self.make_variable(name))'
tp27
asbsS'type'
p28
g1
(ctheano.tensor.type
TensorType
p29
g3
NtRp30
(dp31
S'broadcastable'
p32
(I00
tp33
sS'dtype'
p34
S'float64'
p35
sS'numpy_dtype'
p36
cnumpy
dtype
p37
(S'f8'
I0
I1
tRp38
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p39
I00
sS'name'
p40
Nsbsg40
S'y'
sbsS'bias'
p41
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p42
g3
NtRp43
(dp44
g11
NsS'container'
p45
g1
(ctheano.gof.link
Container
p46
g3
NtRp47
(dp48
g40
S'b'
sS'storage'
p49
(lp50
cnumpy.core.multiarray
_reconstruct
p51
(cnumpy
ndarray
p52
(I0
tS'b'
tRp53
(I1
(I429
tg38
I00
S'0h\x89"\x1c\x80]\xbf\xde{\xe39\xe8l\x81?\xf5\x86\xc2\xb7\x9b\x1d\x96\xbfg\xe8bA\xdd\xce_\xbf\xa0`\x11\xd7\xe2\x08z?#m\xdeA\xfe7\x9f\xbf\xa1B\x8b\x91C\x9a\x91\xbf\x94Z\xe6\x89\xd3\xb9\x85\xbf\x8f\x16\xcd\x98\x81\xf0\x9a?\x95=GD\xacd\x9b\xbf\xef\xfb\xdb7\xd8I\x97\xbf\x9b=\xc6zJK\x8a?F\x80\nBlFs\xbfP2zJ\xce\xa4\x82?\xe0\x02\x90\xf0\xb0(\x95\xbf\xe1\x9e\xb6!=@n?\xf7lZ\x1e\xf2\x8f\x8b?\xb7\xd8\xc4\x91,\x03o?FB\xa1\x8b\xddS\xa1?\xac\xf1\x15n\x08\xce\x96\xbf\x0c\x89}7\x95Y\x83?\x06\'\xf5\xbe>\xf8\x96\xbf\xef\x81\xaf\x9d0\xa28?\x07s\xec\xae\xde\xde7\xbfe\xc9U\x8e\xb2\x7f\x9c\xbf\xb4B\xae\x17;\xd9y\xbf\x1a\xba\'\xc6\x1a\xf5\x81?\x977\xbbZy\xe5c\xbf\x1d\xeafM}>\x81\xbf_Mt\x17H\xfd\x84\xbf\xd92f\xd9\x98\xe3\x9e\xbf1\x13]J\xa0\x87\x88?\x8e^#\xed\x8c#\xa2?m\x83\x98\x020f\x98\xbfa\x88\x05\xee,n\x95?\n9\x05\xd8\xd5\xde\x95?\x08\x94\xc2\x0cS\x9bc\xbfm\xd3&\xe8\xafv\x8d\xbfm\t\x00\x81q)\x8d\xbf\xde>mO\x1b\xb5e\xbf\xa0Y\xe8\xd6\x00Pk\xbfA\x03\x82\xa8\xf5!\xa1?q_\xee\xc4=\x8dY?RK>\xc6\xbb\xa5k?\xeaXv\x17R\x11\x98\xbf\x7f\x07m\x13\xff\x17\xa5\xbf\xa4"\x83\xec\x05xv?-\xba\x8b\xb3`Px\xbf\xe8\xb3%\xfa\x19\xa6r\xbf5\xd4\x1aWOz1?%\xdb}\xfa\x1b^\x7f\xbf\x8d\xabU\x01#\xca\x8c\xbfCn\x96\x0726H\xbf\xb3(Z\xa1\xfd\xde\x81?]#\xe1\xbd\x98\xf4t\xbf\x99\xfa\x16\x9e\x89R\x80?\xa7Ai\xf1\xbf\xe0v\xbf\x10\x10\x957\xe8\x8f\x9b?\xdd\xb8\x9c8\xa4\xccr\xbf\xb2\x1e\xbd\n\xe4\xfe\x8f\xbf\xeb\rD\xa7\xd8\xeb\xa2?!zeC)K\x89\xbf\xbfy\xa8\xc19\xb2r\xbf\x14a\xe4\xfbYx\x8b\xbf\xfb 5\xf3\xe2\x9a\x92?\x88\x06\x94\xccG\x81\x9b\xbf\xae\xf6<V\xf4\xe8\x9f\xbf\x8f7\xf1\xd9\x96\xd9\x9a\xbf\xa5f\x94\xa8 \xec\x85\xbf\x18M\r1\x8b\xf3h?LcO\xa96\xb1\x9f?\x18\x0b\x8d\x92\xe3\xebW?\xfe\xf4\xc95\'P_?\xfc\xb8kh\xee\x12\x88\xbf\xeb\xd4Y\x13\x89]\x8c\xbfL\r\xde@N\xb1\xa3\xbfT1\xd6\x93` \x97?\xe2\xdb\xf8\xd6\xa0\x85\x90\xbf6\x01\x9c\x8a\x8e\xe0\x80?;\xda&\xea\x81\xc0f\xbfcY\xd8\xe8\x0c\xf6\x94?W\xb5\xd9Z\xacT\x89?,\x8a\x88a\x9e]\x84?\xb9p \xde\xf0\x93\x95\xbf\xd8k\xf2\x01\xe0\xfax?\xc5%\xe9bl{\x92\xbfA\xa1=\x8a,\xc4n?{\x0c44^\x98\x94\xbf\x0eY\xbe:\xc6tl?\xc6\xb3f\xa9\xa2Q\x86\xbf\xcd\x82\x86\x9329\xa6?(i\xc2j\x8e\xb1\x8d?\xb8\x16\xfc\xf0Y\\c?\xa8Z\x8384\xc8\xa0\xbf\x1eX\xa9\xcc;\xe7f?\xee\xe8\xd8}\xf8\xba\x89?\x95\xa6\xab\xa7*\xa0\x9d?\x9f\xf73$WGY?\x00\xbd\x9f\xde\xc7\xc4\x99\xbf\xfc\xb8(nP\xc5\x88\xbf\n\xfd\x90\x85r\xbf\x8b?\xba`&h\xe6go\xbf\xc0\xed9\xbf\xc79\x96?Wu\x18\\\xde\x0f\x9d\xbf\xa1\x1c\x8d\x8f\xb7CQ?\xc7\xf6\xfa\x81XT\x90\xbf?\x19\t\x92\x1f\x0e\x9a?s\xfb\xd4$\xad\xb3\x90\xbf\x07O\x8dj\xaf\xdc\x9d?\xe2\xadG\'M7\x92\xbf{a\xee\xff\x99D~?F\xc8\xdaI00t??k\xfao\xae\x10\x8d?*\xeb\x90\xfa\xf3\xc8\x96\xbfw\xb1\xb9Xy4\x94?\x0cC\xcaT\xad\xe3\x93?\xeb\xe4k\xb2\x12\x12\x90\xbfG/K`+t\x90?|\xd90\xd9\xd6Nc\xbf5\xa0veM2\x84\xbfe\x8c|\xa8=\xdex?i\x07\xb6:\xb8\t\xa2?*\xfc=\xe8\x8c+x?\x1db\xf0\x88\xf7\xc8\x91?\xf3\xfa\\\xb2\xc5!)\xbff\x0f\xe9\x8a\x17\x8a\x89?PTk\xc7t.\x90\xbf\xfe\xcf\x16\x85Q\x88\x8e?^o\xe9\xae\x06^\x84?\x84\xf0q\x97`JH\xbfv\n\xb9\x06\xd4\xde\x8f\xbf\x0e\xe2T\xaeo\x94\x8f?\xc5{\x1f\x87\xcb\xec\x8d?MP(\t\xa9\xbbs?LmK\x84\xdd\x93\x90\xbf\x0eJo\x94d\xe7s\xbfu\xd6m\xf4\x8e\x86j\xbfen\xff\x12-\xe6\x8c\xbf\xa5\x87\x82.\x9b\xf9u\xbf\xb7\x93\x87\xc4\x0b\x99\x9e\xbf\xef?\x7fz\xd5\x92\x8d?\xef\xce\xdeZ\x97\x8b\x92?\x08y\xf2\x8e\xd99\x96?\xf8*\xf9\x12\xad\x84\x84?\x8fms\xa8\xb5J\x96?\xd6\x19C\xae\x17\x0c\x97\xbf\x80\xf8\xa3\x15<\xe3\x88?F\xd2S\xf9}\xf9\x95\xbf\xf8\xefCK\xef\x06\xa1\xbf\xa0\xea\xe3\x19x<\x81?\x84_\xffa\xa0\x80\x84?Rf22\x02Qi?@?IAz&\x82?\xfd\xeb9\xbaC\xb4b\xbf\xc5W\x91\xda\xdf{\x84\xbf\x11\x89\x8d\xc9;H\x83\xbf\x82\xc7\xe3\xce\xb3\x01\x96?\xfbN&\x08\x82\xb1\xa8\xbf\xcb\xb2\x1cl\xec\x07\xa1?\x0c+\xfd\xbeZ\x17\x91\xbf\xef\x83{l\x13\x14v\xbfgJd\x16\xde\xaf\x92\xbf\x93$\xe0\x89\x9f\xcd\xa1\xbf+\xbd\x1c\x1c\xed\xe3\x90\xbf\x02\xc5\x8e\xa6\xe8fw\xbf\xd3\xed\x96ug\x9b\xa1\xbf\xb2\xc9:1#_Y\xbf\xc3\xd3 \xb0o\x89\x8a\xbfSw\x19\xfa\x01r\x82\xbf\xa7\xfb\xb4\xf8\xad\xbd\x8e?\x1b\xa1?\xb8\xf7kr?\x94,\xedvg\x0ew\xbf\xc3m\xa0m<p\x88\xbf\r\x12\xfb+\x08\xadt?\x1a\xbf]\x17\xa1)\x8a\xbf\xa8C"\xf9W\x88w?\x05\xa8\xde\xaa\x98\n\xa5?\xe5\xd3\xc4A\xf5\x03\xa4?6O\xe7H\x11\xb3\x81\xbfCZ\xee\xd6\xd6\xcf\x87?\xe5\x05\x13\'\xffJ\x96\xbf\x0c\x07\xda\x02,/\xa1?\x8c\xca\xf3\xe1\x11\x81\x93\xbf\x8ex\xd3\xd6o4\x80\xbf|\xe3P\x90\xdf?t\xbf\xf7\x92\xea\xf9\xeb\xff\x94?\xb5\x90s\xb8\xcc\xdf\x88\xbf\x92\xa5\x8f\x8c\xc0\x12h\xbf0\x82\xb3\xf5u\x15\x86\xbf\xae\xb7\x9b\x85\xed\xc4\x85?\xf3iH\xf4\xa5#\x9a?\xd8\xa5\xd2Jw\x89\x9e\xbf\x9b{\xa3\xc0\x9c\x13\x96?\xd3]HG\x8ci\x8e?-\x8d\xbb\xb5\xcf\xd2\x81?\x03T\x9ez9\xc6\x88\xbf\x95d\x9eiem{?\xc79\xacl\x80@\x87\xbf\xf6\xd7*\x9b\x82\xab\x9f?\xcc\xdf\xac\xa1)z\x82?%B\x1a7\xc4\xbb\xa1?{\x95\x918\xf1\xda\x9a?\xc8U\xa6B\x8e\xab~\xbfC\xdbLK\xcc\xc9\x87?\xaf|\xdd\xb8\xfbrt?\x12\x8dKo9~\x8b\xbf\xcbF\xf9\xf1\xef\x98\xa6?\xc7G\xc5P\'V\x82?\x82\xc6\xcb\xc5\x04\x8aV\xbf\xb4>\xe3*\xd0\xaf\x9c\xbfn\xb43\x8e\xda\x93\x8d?\x16\xe3NJ\xc3\xdeA\xbf\x80\xab\xb7\x16s\xdb\x99?\xa3Ew\xc6s\x93\x81?}\xf4\t\x1e\xbfa\x90\xbf\xedh\x1agP\xcf\x89\xbf\x8baE\xf9n\xae9\xbf\x91\xf1$\xf6"\xc7u?m\xd0}\xea\xff\xf49? \xbb\x91\x04\xe3D\x8f?4\xb7\xfa\x92\xc6\xf8\x97?b\xc3\xcc\x8c\x19A\x8f?Q<d\x84\xaa\x03f\xbf\xa5\xc3aM\xdd\xfd\x93\xbf\xcbL\x9c\x8d\x9b\xd2\x8c\xbf\xa0\x07Ht\xf0,\x84\xbf\xf8\xf7\x13\xa3\x96S\x8e\xbfX\xfdY\xe9\t\xf7\x80?\xbe\xad\xd1\xd7I\xa0{\xbf\xca\xdbi\xce\x02\x8d\x8f?>LL_\xf5\xf6\x91\xbf\x0b\x94\x0cED\x0fl\xbf\x9c\xa9n\xa9?\xa0\x93\xbfi|\xc7U\x92\xfb\x8c?\xc2_5l\x1a\x83\x99\xbfi\x1dA\xd8@\xc6\x90\xbf.\x01\xb5&\xd7\x8di?\xaef\xb3\xcc\xd9\x86\x96?\x8cr\x16-\xe8?e\xbf\x17\\\xee\xb4m\xc3\x87\xbf\xf6_\xf67\xc3No?\xec:\x84\x17\\W\x96?Ef\xa4\xf8\xe5\x91\x93?\xaa\xb3UQ\xbd\xc4\x9e?>\xcc\xf2,\xea\x9e\x98?\xbe\x17\xfd\xf0\xad|k?39\xc8\x04\xa3\x1c\x9e?\xb1\x85\xee\x0bo{\x8a\xbf\xefT}\xd8\xda\x19\x85?\xe4v{)\xb6\xe2\x88?mt\x1e\x91a$\x87\xbf\xd3\xc3\x9d\xba\xd4d\x8f?\xef3\xf3\x1fW6n\xbf~w\x7f\x7fX8\x8b?\xa6\xc0\x89\x9b\x0b\xb9^\xbf\xfbD\xfd\xdb\\W\x9c?nw\xa8\xb7(\x9f2?\xec\x1b\xb3E\xa9Fa\xbfh+\xb8\xc0\xc4\xbfK\xbf\xa4\xbf\x82\xf6i\x86G\xbf\x99\xcf^\xab0L\x85\xbf\xab\x0f\x9f\x80\xb8\xf6\x95?J\x16\x9d\x99,`\x80?\x12Ne\xd3\xdc\xc1\x95?\x14.\x93\x90+\x81g\xbf\xb8\x0e\xe9\x1f\xb5\xe4\x8b?\xd4\xe3\xf0\xdd\xe4s\x83\xbfPfu\n\x07\xc4\x92\xbfg\xe8^K\x9bS\x91?\x00\x86\xa4\xf5\xab\xe1\x8e?\xdc\x96\xf1#Q\x95#?\xb6X\xd9\xa1\x1bx\x84\xbf\x07Xo\xec`\xd5\x99?\x15/\x13\xc6\xb2\x85j?\xbbz\x19/\xe2\x03}\xbfe\xd2\xfaDC\xe7x\xbf\xb4\xde1$N\xe0\xa0?:\xd6\x9e\xf1\xcd\x02\x94\xbf\xd5\xf8\xa8DK\x1e\xa0\xbf(\xf15\xf3\xcfh\xa0?fBU\xa8\xa4Wv\xbfS 0ifN\x94?\xe4\xb66\xac[q\xa4?\x10\xd5\xba>}\xf1\x8e?c\x9e\xbf{\xcfyQ?\xec$\x13\x1c\xabZ\x93?\xf6~Y\x95d\x12\x17\xbfcZZ\xc5\xe3\xfa\x9e\xbfxQE\x04\xca\xbcT?\xa9\xe1\xc4\xc9\xdb@e?\xd88\x93\x01\x7f\xaa\x98\xbfy.\x8eA\xd9\x85\x96?\xc8|\x83\xc233\x93\xbfm\xff\xa6\xe4{\x98\x8b\xbf\x81L\x16\x1f@t{?e\x90[\xdfHu\x99?\xf4Al\'a\x0b\x98?\x9eLy\xf3\xee\xf5]?\xed\x18\x92s\xb6]\x92?\xe3\x14\x13fr\xdeh?\xe8\x03\xaf\xb0:\xe0\xa1?\x84\x96U/D\x85\x80\xbf\x85\xf8\xc3\xf3\x19\x04q\xbf\xb4\xb0<Pa$f\xbfbB3\xfd\xf1Wd\xbf\x96"\x1d\x1d\xa1\xc0u\xbf\r!m?\xac\\\x83\xbf\x16\xc0f\x8aL\xc0\x92?\xecY\xe9Z.\xd1\x91?\x89\xdfYe\x05P\x86?P\x9a\xea\xfb@+\x8d\xbf\xb7n\xa4\xf0\xab\xfb\x9a?\xca\xac7\xcd!\xad\x8e\xbf\xa2\x0e\xd9\xf5\x13Iu?.\x8251\xee\xd5\xa0? \x08\xa8\xb10\x82\x83?z\xce\xa4\xa2\xef\x0fy?\xfa\xea\x1b\xd5\x0e\x9ay\xbfa\xb8\x8f\x15\xc3\x04b?\xb4\xa6\xc4%\xd4\xd6\x0f\xbf\x8fi\x8f\x9c\xf3\xd0\x93?D\xad!\x1b\x03Ls?Z\xde\xeb\xe5Yy\x91?f\xca\xb3E\x87\xb6\x93\xbf\xc2_#P\xe8\xf6\x95?\xfb\x94Hq\xb3\x02\x99?\x95r\x1b\x81\xc6\x0ch?\xd5\xe8wm7.y?\x1c\xc4\xc9\xd3r\xf1@\xbf\xec\x86\xe0\xf8T\x14z\xbf[~\xe3D\x83\xd8\x98?\xfe\x93q+$\x0e\x92\xbf\xfd8\xff+o\x8f\x92\xbfK"\xc8\xbdUdx?\x87\x9cj\x96/\xeap?\xd9\xe0\x83%\xdb_\x94\xbf\xed\x19\'\xf0\xf6\x0e\x80\xbf\x85,\xabx1@\x90\xbf{\xad\xcb2l\x19x?\x84~\xdbr\x14\xad\x84?\xddG\xbc}aD{?;\x90\xb0$\x1b\xce\x81\xbf \r8\x1fv<\x89\xbf\xae\x81\x97\x95\xa4\xb3\x91\xbfu?\xb3\x04t\xa4\x8c\xbf\xf7\xee\xa3Z\xb4\xa5\x88?U\xbb\x9eg\x10\x01s?L\r\x87%\x1ek\xa2\xbfO\xcdu\xd6\xf1\xb7\x96\xbf\x83G\xa6\xd87\xd3x?\xd6\x00\x804\xcd\xeb\x95\xbf\xf8\x16\xd5\xa5:\xbb}?\xca\x1a\x12\x99\xfd\xdd\x83?\xdd\x08\xa6\x80FFl\xbf\x1fh\xb9c\x920\x96\xbf*\xb4\xf7\xf4g\r\x8c?\n\xf4\x06\xe4\x9d\xf0\x80\xbfI\x8e\xa5Q\x92\xba\x7f?\xd0JL?\xb7\x00\x88?84\x9f\xd6\xe3:W\xbf\xf2\xfe\x15;6\x13\\?\x1b\xc8=?D6v?\xb1[\xfa\x9e\xde\xc0\x86\xbf\xbb\x98*\xc1\x18\xd1\x92?!\xfe\xdc\xa8\xdf4T\xbf\xf8\x93\xee5`\x04s?\x81\x05\xd4pB\xc9\x8f?\xbf\xd7\xab4\x89BS\xbf\xc1\x07\xf7\xd6\x08v\x8c\xbfmvh\xe3>\x7f\x8a?\x14\xcf\x88q\\=\x97\xbf\xad\x16\x8e\xe5)p\x8e\xbf1s\xdb1+\xf0\x9d\xbf\xe2Qo\xb8\xc8W\xa0\xbf\x92Q\x84\xa4A\xef\x82\xbf\x10\xee\xae$\x12\xd5\x82?b7C\x05\x97\xc5{?\x1enw\x8c\xed*c?\x88\x7fw\x1b\xee)P\xbf\x95\xc2v\xd2\xed@\x91\xbf\xd5\x8b\x86\n(t\x82\xbf\tI\xb3\xe8s*\xa1\xbf\x13Ci\xa1Ro\x8c\xbf\xf44\x9c\xc7\xa7\xff\x99?\x96\xca%Y\xffZ\x86\xbf2\x88\xea\x85\xd7w\x9c??\xfb\n\xcb\xd5<e?H\x08r\x9e\xb6C\x88?\x8fW\x89\xae\x1bR\x91\xbf\x04x\xdc\x08\x83\xd1}?\x9a\x83t\xfc\xf9\xb5{?FW\xd9\xaa\x0fq\x94\xbf\x8eq\xcc\xd5\x83\x00i\xbf\xbcSy\x7f[?f\xbf\xbb\xc8\xa3\x00\xcb9R\xbfR \x88\xe1\xa1\'\x87?\xaan\xb4$Q\n\x8b\xbf\x1dT\x88\t\xed@\x84\xbfPm\x1d\xedq\x94\x94\xbf\xa3\xb5|~\xb7\xcb\x93?\x16X\x03\x16\x9dv\x83\xbf\xe5\x94f\xecU\xf8t?v\xc8:\x05\x0cX\x90\xbf_s\x9d\xd4\xc7\xa3\x82\xbfiw;\x93\xf4\xaa\x8d\xbf\xcf\xd7\xa1ik\xa8z\xbf\x96P\xa2i\x9d\xf1y\xbf\xbe\x8fy\x03\x13,\xa2?R\xa6\xfcw\xec\xbf\x9e?\xb7\x82c\xa9\r\x05\t\xbf\xf1\xcb\x82\x1ex\xe4\x9b?ts\x83W\xed\xb2S\xbf5\xfaM+\x8bMq?WiZ\x1cT/O\xbf\xcc\x88\xd8\x08{\xb1\x8e?\xd3\x88\x8e\xf7\xe9!\x97?\xaf\x04\x01\x84\'w\x82\xbfF\x8b\x06$Q\xd3H\xbf\x0f/]8\xc2N\x87\xbf\x05\x90\r\x8b\xffK\x92?\xaf\xab\x8dP5\xc4\x88?\x18s\x15\xb1\xf5h|?\xda\xa3\xa16\xf6\xfc\xa2\xbfs\xf7\x03\xe6\x1aY\xa2?.\x8e=\xc6\xd0s\x8c?y\xd15\xf8\xe6\xca\xa2\xbf\xe1l\xb5\xcb\xe8\x8c\x93?\x1d:\x1cW\xfe\xad\x85\xbf#\xfb\x8e\xc8\x8a\x88\x84?'
tbasS'strict'
p54
I00
sS'readonly'
p55
I00
sg28
g1
(g29
g3
NtRp56
(dp57
g32
(I00
tp58
sg34
S'float64'
p59
sg36
g38
sg39
I00
sg40
NsbsS'allow_downcast'
p60
Nsbsg40
S'b'
sg12
(itheano.gof.utils
scratchpad
p61
(dp62
bsg10
Nsg28
g56
sbsS'reverse_bias'
p63
g1
(g42
g3
NtRp64
(dp65
g11
Nsg45
g1
(g46
g3
NtRp66
(dp67
g40
S"b'"
p68
sg49
(lp69
g51
(g52
(I0
tS'b'
tRp70
(I1
(I20
tg38
I00
S'|\t(\xf8\x99\x00\x95\xbfC$\xebm?X\xa3\xbf%\x927\x11\x0e:\x84\xbf\xb2G\xef\x177i\xbe\xbf\xfb\xb0\xdc$\r.\xa1\xbfP\xa1\x08\x16k\xb9\xb8\xbf{\xb4\xd1Q \xca\xbd\xbf\xbfb\xeb\xb1,\x9d\x99?\xf2\xe6\xad\xe8\x87w\xa6\xbf8a\t\x8aT\x8e\xb0\xbfh\x12\xfe\x07\xc2\x9a\xa5\xbf$\xbdy\xbc\xe1\x10\x80?\x8c\xa4\xf6\xf2uo\xa1\xbfMl\x84c$\xeaw\xbfg\x11;}\xe5\xa9\xa9\xbf\xd3\xa2\x14\x1f-\xd8\xb1\xbf\xbc\xc2\x97#\xb97\x82\xbf(\xaa\\;\x88\x96\x88?\xf3=\xfe\x893\x03\xa0?N\xbd*M\x97 q?'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp71
(dp72
g32
(I00
tp73
sg34
S'float64'
p74
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
g68
sg12
(itheano.gof.utils
scratchpad
p75
(dp76
bsg10
Nsg28
g71
sbsS'symbolic_input'
p77
g1
(g7
g3
NtRp78
(dp79
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p80
(dp81
g15
(lp82
(g17
I32
g18
S'super(Cart_Pole_DA, self).__init__(*args, **kwargs)'
tp83
a(g20
I54
g18
S'self.initialise_symbolic_input()'
tp84
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p85
I155
S'initialise_symbolic_input'
p86
S'self.symbolic_input = theano.tensor.dmatrix("x")'
tp87
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp88
asbsg28
g1
(g29
g3
NtRp89
(dp90
g32
(I00
I00
tp91
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
S'x'
sbsS'symbolic_corrupted_input'
p92
g1
(g7
g3
NtRp93
(dp94
g10
g1
(ctheano.gof.graph
Apply
p95
g3
NtRp96
(dp97
S'inputs'
p98
(lp99
g1
(g7
g3
NtRp100
(dp101
g11
I1
sg40
NsS'rng'
p102
g1
(ctheano.tensor.shared_randomstreams
RandomStateSharedVariable
p103
g3
NtRp104
(dp105
g11
Nsg45
g1
(g46
g3
NtRp106
(dp107
g40
Nsg49
(lp108
cnumpy.random
__RandomState_ctor
p109
(tRp110
(S'MT19937'
p111
g51
(g52
(I0
tS'b'
tRp112
(I1
(I624
tg37
(S'u4'
I0
I1
tRp113
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'k\xf9\xe3\xcb\xd6\xf58\xc8\xa6A\xae\x00C\x13\xeb\xcb\xb5\x1f\xfe\xdd\xfb\xd7G9\xf8w\xf28\xf6Nx+\'i\x16\xdce\xc7\xee\xbf\x87\x9f\x06\x8c\xf2\x14\xafO\xbc\xd1\xd8Dl\xe5\x0bz&\xee-\xeec\xc8\xbb\xeaf\xec\xbc)\xb1e\x0eg@\x16\xe4V\x03q\xbc\x00K6\xbc\xe83\xf2j\x82!\xc09\xb8\xd6S\x8eM\xc1\x8dG\t\xf9\x14\x84\x84\'\t\x00\x8e\xe5\xc2\x912\xb9\xd9/\x86\xc7\xfb\xf7\x8d\xfc\xf7u\x9c`~Y\xd15\n\xef\xe1h\x14]|\x90\x05\xcb\x9b\x93"\xb7e3_/&\xfcpm\x8d\xb0\x99\x10C\xcf\x923;\xd7\xc0D\xbed\x10i4\x94\xbd\x07\xbc\xa9\x97\x91=\xeau\x92\xd8\xa4\x9c,\n\x91\xabq\xe1 N\xa6\xdcy<\xbf\x12\xe5\xfc\xf2E6\xf9\xe1\xd8+o\x99\x9b{S\xf10\xba\xb9\xa5\xf9\xc3\xc5\x16\x1f\x96?\xb7\xfdo]\xe8\xf3\xb5u\xb3\x8d\x98\x11nZ\x12|5|R\xfc\xa1\xa3oHg\x84.\'F$\x1f`Y\x12f/l\x83\x0er\xfc\xa6f\x01-B\xb3\xb2E\x9a\x90\xec|sn\x8dK\x9c\xf7\xdeE\xd2\x9f\x91\x03\n\xc6\xe0w\xd9*?\xbe~~\xb1>v\x0c\xf8\xd7\x92\xf0\xde\xe9\xe6\xfe\xb1\xe8H\xf1];\xb0\x08\x90,F\xb4\xf8\xee\xf4Z\xd5rn\xf0\xd6\x1f\xf0\xad\x0eI4]\x97X\xa9X\xc2Gy?\xdb\xc5g\x9d\xf6=h\x8d\xd1\x81\xb6\xbfM\x03"\xcc\x06\xd6\xdd\xe9P\'eb\xd7)7\x8d\x8c\xdc\xc9"QX\x8f\xc8\x93\x12WqR\xb8\x06(\x8a^4D\x9b\xed4\xcd\x18M\xb8\xb7\xe0\xb2`\xce\xabjw=\xcaymfA\xf8g>\xc5m [U*V\xfd\x94U\x8d\xfe\xf9W\xd6\x1e]\xd1\'\xbb\x06&\x00]\xdc|\xd4\x1bH:\x08\x19\xbe\x9d\xd3\xd9\xa7\x8a\xf9A\xf8\xc1\n\x04\xda[\x11K\x82\xf5\\\xb0+\x9d\x19\xa7\x01\xaf\x04\xe3\xad\x0ec\xec\x06S\x8b:\x10\x10\x0e\xf4\x04a\x9c<Q\x8e\xa4\xea\xf75**\x06KM\xbe`\xc1\xcd\xe6\xa4\x03\xc3Zrb\xaeD\xf2\xab\x0b6D[\xc7Q;\xa2i\x80\xeaX$\xdfH!5\x0b\xa3#!\x92\xb0\xde\xd1\x8fRJ\xf53\xea\xb9<\x8a\xff\xf1\x8a\x81\x0bY\x1c\x07\xee\xfa!\x8c\xe9\x95\xbaJz\xd8{\xcb\x88\x9c\xf6b\xef\xce\x10V:\x1d\x14\xc3\xd0\xc6\xee\x0e\x9e\xc3\xf3X\xdfx\xf0\xddj\xbf\xe9\xbet4\x191\xa6 \xba\xa6\x00\xf5\xf0\xcdJ\xd6d|!\x90\xb5L\xd9 C1\\\x1d\xe5\x05\x9du\xd3\x076\xa7[\xe1\xf5{\xb6\xdb\x90=uZ)\x19F\xd8\xb9\xb12\x1b\xa8\xf91\x8a\x9f<\xc1\x1c:4\xbd\x90\xe3sN\xdcPow\x9f\x03\x14Z3pI$\x1e\xae\x0f\xb7\x8b\x06\xe5i\xb9G5\xbaN\xf1\xff\xd0\xd18\xc6\x94\xa3\xb4*\t\x18\xf2\xa5\x12:\x0f\x808\xf3d\xbdJN\xe6\xfdt[u/\xb9(\xdaM\x0e\x85\x9b\x9a\x05\x04\x83\x12\xdc~\x01\xfe\xbde\xce\xdb\xe0\xddN\x82\x89\x12\xd9I/q\x96\xb8^<K\x18\xfc\x9e\xf4]H\xb9\xc8p\x9b\xf4#;O#]\xea)FT\xfbr\x13\xa2\xe8O\xc1-\x12\n/\xf9\xc8\x05\xc9\x90\xda\x10\x18uEe\xc2F\xf5\xe2\xc1\x8eFY\x8b\xdcF\xe8\xcen\xc3\x1an\x85\xf1%\xf1\x10\x8co\xa3\x8aV\nQ%\x96\xa3l\x98\xf9\xffF\xf7n\x9c*!\xc1\x8b\xbct\xc0\xa0\xa6sRZ\xea&k\xa34\xf7`5\xdf=\x9e\xd7e\x136\xf6\xe4\xe3\xcd\x8e\x96\xd9\x846<2F*\x96\xc6\xd8#]\xc8\x0fn\x99\xe6:\xea\xa8\xcc96iiv\tw\x1b\x1f#\xf8~M\r\xde\x17\xa5\xb3}\xc3>u\xc0X\x85\xc3XwWM\xb7\xd8\xa6a\xe06\x08x&\xd2]\xe2\x93ZD\xee\xe9_\xf9\x05\xfcl\x0b\x1c\x0b\x97\x8e\xb9\xf1\xb8\xa1jJ\x8b\x07\xe2*q\x12$\x18\xa1\xaa\x19X\xdcA+\x01\xb7\x1b\xc7j(K\x1dBql/\x05\xeaR\xff\x85z\x1b;rT\xf9\xd8\xe80\x9d\xaa\xf3:)\x00\xe3\xb2\xba\xc9S\xe8\x07q4\x14\xc1-\xf1=\xe0\xd3!\x9f\xb3r\xde_\xe2\x92np\x8e\x7f\x82\xf8=\x0e\xbab\\\xee3\t)m\xdb\xa7\xcb\xd3\xe0\x0e\xd4b\xff\xd8X\x95\x97\xd17\x18nC/I]\x1f\x97M\x14\xd5\xfc_\xb4$,\xb54\x1c\x96zb@NQ\xa3\xd8\x15y\xf4\xfd\n\xac\x03\xa2\xdct8P\x19\x19\x98\x8b\x90\xd0\x86!=:\x97\x95\xd6\t4\xfcF\xdcQ\xa7]\x92\x0478\x89O\x06\x0fh\xa7\x99\xe8\x06\xc6\x0e\x0c\x8e\xb1\xb0\xb4K\xcaS\xa9\x99\xe5)\x1c\xeb\xcb\xe4\x11\xc1\xd6\xbdb\x9d\xb8\x0b\xdd\xab=\x061\x132\xfd\x01\xc2\x12L \xcd.\xd88\xfd.\x0f\xc4\xda\x02\xb6\x8e\x94I\xbcY\xc2\xc0\xe4\xf6\x1a\xab\xac\x1a\xfb\x91`\x8d\xa3\xf2\xfe\xed-`\xf3\x0c\x80\xacd\xea\xe1\xe2\xcb\x17\x8b\xb7\x82A\xe4Q\xa5)T\x04Pc\xb4\xd0\xa56\xa0\x13j\x87\xb6\xc7\xedb\x15oK\x9f\xe9\'\xc4\xe3\xcc\xd2#\xc1\x7f\xda\xa27v~]\x85\xb8\xa0\'lM\xd9\x89\xc1\x9c\x8d\xe85(\x93N\xaf\xc5\x0f\xa2\x00\xb5\x9b@\x9f\x8c\xb3q\x82\x95\xea\x87\xa75\xc4\x06\xdc.\x15\xae<a\xf5\xc2\xab\x0f(7Y\x12n\x8f\x1b\xdc\xe02\x89\xb6\xf4(\x1d$\x19B\x9cQ\x1d%>=g\xbb\x966M\x97\x9a\xf0h\x07\xb8\x818\xf6pU\x04\x81\xa3\x8b\rK\xe5\xd2n\xe1\xd9 )q\xc5N\xdf\x9c\x08F\x82\xf2k\xda\x05\x13\xdb\xc0\x15\xca\x86\xa5\x102R\x03\x90Tm\xbc\xffXN\x8dR\xaa?t0\xfa:\xbf\xae\x96\xc1\xc4b\x82\xfe\xef\'\xdb\x19`\xd2\xf8,\x9f\xb8\x0e\xde>\x82\xcf\x1fe{\xb6\xc6y\xd4"b/<\xacP#\x91\xe5U\xce\xe5\xfey\x06\xc5\x1aG\xc8\x97\xbd\r_\x1e\xf7\xba\xc5\xc9\x12\xad\x1agZp\x92g\x03&\xa9\x01u\xc4LS^p\xab\xb2\xb9\x14\x0e\x9b\xa8\x00h6\x03\x00\x08\x12\x1fpd\xc1l\xc3\xf1LU:\x00T\xdc\x81\x07\xfc\xa96\xa0K\x1bD\x91*\xa3\xa4S\x1a\x99\xd8\xfc\x8e)EB\xb10\xc0\xf4p\x02\xe9\xb9\x11A\xea\x9c\x90)k\xf98\x8b\r\xa9,\xb0*g\xa9\r\x81\x16\xdc\xb4\xcd\x19\x8e(\xdb\xf1\xe9g\x99\xde\xd6u\xe0\'!\xcc\xace$\x91\xe06\xa8\xa9\xe11\x8c\xa1\xf6\x10\x83\x87\xa1wUW\xd7\xed\xcd!\xc8\xc3\xeb)!\x0e\xfc\xd9N\x99*\x06\xc5\x0f\x15\x0f\xa2P"\xc3\x8a\xa8\xe7Q\xe9P\x18\xb4\xc3t\x89\xea\xcd\xe4V*\xf7\xef\x8164h{\xa1j\x06+C\xd7\x0b\xd5o\xc2x\x1f\xd4\xbd\x9d\xc1Da\xaaft=\x8a\x1f\xe9\xa6\x84\xe0\x92$`\tu=\xa9D|\x8d\xa8q\xfbD\xec\\\xbb\x98\x9f\xe1\xfa{2\xe1\x1d@Cu\xd7\x8d\xf2\xd6-:\xd4&:\x0c^\x06o\xb7\x0b\xe9\x996\xed!q\xc2\x86<\x10{\xa6Lp\xf9\x93c\xc9\xdf\xa2\xdaC\x88\xe7\xf3UA\x15l\xea\xb5\xe5\xbd\xb9T\xab\xcb\xe5\xc2\t\x8b\x183\x95X}\xb9\x8fpF\x98\xaa<M\xe9kd\x1d\xa3\x8e\xce\x02\x81-\xc1\xc5\xfc{\xb4\x00~$T\xa1\xc1m\xfe/w\xa3\xb3\xa4\xb04=\xfe C\xe6\xe7\\]\xa6k@\xdc\x15\xc6\xd2\x84\xffgJX\xcf\xf6Y\\\x81T]~\xf2\xa0\xf2\x1d)\x83\x19(\x9bu\x04\xb0\x99\x13L1\xa1\xd5&\xcd2P`\xdce?b+\xb0\x05D\x84l}\x89{\xdc\xe8BXe\xba\xb4\xdfq^\x8d\xc6\xbb\xdcw\xff\x1e\xb6_#yiu\x0f\xa0i\xea\xab\xcf0\xe7\t\x020S,\xb8\xb4\x8cx\xa3\\\x96Z%\xa4}\x91c@\x83#H\x11\x16s\xc9\xcf\x91\x9c\xe9=\xc6\xf9\xb3\xb8\x0f\x07x<\x01\xf0\x15\xb4\xf1\x03\xd6\xed\xfd\xdaW\xe2\xaca\xebe\xc1\x8ep\x89?.j\xe1$\x18\xa7\xc3\xf4\xc60\xed|\\M\xb3\x95\xec\x1b&\x8a\xd3\xfa\x10)a\xcd\x12\n\x06\xed]\xed$}\xaa\xf0R\xb3\xac\xe2\xfd\xaf\x9f\xcc\xb9\x9d\xab\x9b.~\xd4\xa8\x9bp\xeb\xf8a\x9fH\xfeb:?\xb4\xfc=\x04\xe2\xa5[\xb3\xea\xab,*&\xa2x\xf2\x1a\xe1\xfd&\xcb\x16\xde\x92\xf0\xdd\xdf\x004\x12\x89!\x19\x8b\xcb\\\xaf\x91$\xa4\x0fv\x8c\x8b2\xe2\x90\xda\xca\n\'Ww\xfd\x08\x06\xdf\x94\xce``x\x04\x987\x89cm\x94\xfb*\xc4\x7f\xda\x91\xb8\x07\xc2N\xf9Jh?\nhY\x93\xbdy\xa0]N\xd4\x12\xe7\x85\x11\x04\x88\x80\xa9\xbcN\xe8\x1b\xe0z\x934\x19T\x15#?\xd5\xa5\xf7\xe1\xe6\xb7\xb1\xc3^\xb9\x83\x0b\xe0\x81\xbbBI\xa245\xd0\x06]6\x8bC\x0ch\x85XH\x81\x1e#%\xda\x7fB\x7f\xb08\x17\xded\xdb\xfa\x84`\x0f+\xe3\x05\xac\x13w\x12\xb2ZWY\x19\x82\t\x8c\xd1u\xf5\'<\xe3\xdc\xa0\xf8/;\x97\xefZ"\x03\x1a/:\x8ci\xbe@RN\xfc\xc1%\xc5\xa8\xb5\xa6\xb7\x10\xd1\xb5@\xc3\n\x12\x07C\'\x1d\x90xS\xfd\xf3\xbbEM\xd6+Q>\x8e\xd4u>|\xc3E\x94\xb8\xf5>A\x9a\xedZ\xdd\x01\x8c;\x84\x181\x0f\xce\x85\xf325N\xee\xb1\xc3b\xb64\xd0r\x8fbI\x89\xcc\xe0&\xd7S \x8e\xc5>))\x0ct\xdc\x12VLn\x11\x8d\xf7)4E\x15K\x1a\xe5\xb0;\xdcrN\x0b\x0c"\'\xf5J\xa5\xa3\xb0\xad\xa6a*\x98\xee\xfbn)En4\xab\xb0y^CS;\xd3\xe9\x02F\x16$) \x9c\xe4\x90\x1e\xe7FhF\xbe\x1d\xd8\xe2\xa4}a\x97~:,\xc9\xd0\xca\xc8\x08u\x97\xec\xd9\x98d\'h8\xa97"2{(\xd2}\x02\xb8Z99\x97\x07f8YQ*&\x1b\xa4\xef*D\'\xd4\xc4\xc7H\x02\xc7\x12\xceR\xc6\x916^\xbcv\x06\xed\x81{d\xba\x8a\xf4,\xfc^d/\xca\x8d\xf5K#\xa1\xb9n\x07c\xc1cU\xf7\xde\xbeox\x14\xa31\xa3\xd5\xc5\xbb\xc1\x91O\xcc\x93K\xb7 \xcdd\xc9\xb9\x9f\x82\xc1\xdc\xd7\xaa:E\'<b\x89\xc9\xf3VL\x1e?\x1b.Q'
tbI232
I0
F0
tbasg54
I00
sg55
I00
sg28
g1
(ctheano.tensor.raw_random
RandomStateType
p114
g3
NtRp115
sg60
Nsbsg40
Nsg12
(itheano.gof.utils
scratchpad
p116
(dp117
bsg10
NsS'default_update'
p118
g1
(ctheano.gof.graph
Variable
p119
g3
NtRp120
(dp121
g10
g1
(g95
g3
NtRp122
(dp123
g98
(lp124
g104
ag1
(g7
g3
NtRp125
(dp126
g10
g1
(g95
g3
NtRp127
(dp128
g98
(lp129
g1
(g7
g3
NtRp130
(dp131
g10
g1
(g95
g3
NtRp132
(dp133
g98
(lp134
g78
asg12
(itheano.gof.utils
scratchpad
p135
(dp136
g15
(lp137
(g20
I74
g18
S'self.initialise_corrupted_input()'
tp138
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p139
I80
S'initialise_corrupted_input'
p140
S'size=self.symbolic_input.shape,'
tp141
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p142
I255
S'<lambda>'
p143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp144
a(S'/Library/Python/2.7/site-packages/theano/gof/op.py'
p145
I401
g26
S'self.add_tag_trace(node)'
tp146
asbsS'outputs'
p147
(lp148
g130
asS'op'
p149
g1
(ctheano.tensor.basic
Shape
p150
g3
NtRp151
(dp152
S'_op_use_c_code'
p153
S'g++'
p154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p155
(dp156
g15
(lp157
(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp158
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp159
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p160
I1140
S'make_node'
p161
S'return Apply(self, [x], [lvector()])'
tp162
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp163
asbsg28
g1
(g29
g3
NtRp164
(dp165
g32
(I00
tp166
sg34
S'int64'
p167
sg36
g37
(S'i8'
I0
I1
tRp168
(I3
S'<'
NNNI-1
I-1
I0
tbsg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p169
(dp170
g15
(lp171
(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p172
I499
S'binomial'
p173
S'ndim, size, bcast = _infer_ndim_bcast(ndim, size, n, p)'
tp174
a(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p175
I386
S'_infer_ndim_bcast'
p176
S"return ndim, tensor.cast(v_shape, 'int32'), tuple(bcast)"
tp177
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p178
I1110
S'cast'
p179
S'return _cast_mapping[dtype](x)'
tp180
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp181
asbsg147
(lp182
g125
asg149
g1
(ctheano.tensor.elemwise
Elemwise
p183
g3
NtRp184
(dp185
S'__module__'
p186
S'tensor.basic'
p187
sg40
NsS'scalar_op'
p188
g1
(ctheano.scalar.basic
Cast
p189
g3
NtRp190
(dp191
S'output_types_preference'
p192
g1
(ctheano.scalar.basic
specific_out
p193
g3
NtRp194
(dp195
S'spec'
p196
(g1
(ctheano.scalar.basic
Scalar
p197
g3
NtRp198
(dp199
g34
S'int32'
p200
sbtp201
sbsg153
g154
sS'o_type'
p202
g198
sg40
S'convert_to_int32'
p203
sS'ctor'
p204
cnumpy
int32
p205
sbsS'destroy_map'
p206
(dp207
sS'nfunc_spec'
p208
NsS'inplace_pattern'
p209
(dp210
sS'__oplist_tags'
p211
(lp212
S'casting'
p213
asg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p214
(dp215
g15
(lp216
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp217
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp218
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp220
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp221
asbsg28
g1
(g29
g3
NtRp222
(dp223
g32
(I00
tp224
sg34
g200
sg36
g37
(S'i4'
I0
I1
tRp225
(I3
S'<'
NNNI-1
I-1
I0
tbsg39
I00
sg40
Nsbsg40
Nsbag1
(ctheano.tensor.var
TensorConstant
p226
g3
NtRp227
(dp228
g11
Nsg40
NsS'cached'
p229
I01
sS'data'
p230
g51
(g52
(I0
tS'b'
tRp231
(I1
(tg37
(S'i1'
I0
I1
tRp232
(I3
S'|'
NNNI-1
I-1
I0
tbI00
S'\x01'
tbsg12
(itheano.gof.utils
scratchpad
p233
(dp234
S'unique_value'
p235
Nsbsg28
g1
(g29
g3
NtRp236
(dp237
g32
(tsg34
S'int8'
p238
sg36
g232
sg39
I00
sg40
Nsbsbag1
(g226
g3
NtRp239
(dp240
g11
Nsg12
(itheano.gof.utils
scratchpad
p241
(dp242
g235
Nsbsg28
g1
(g29
g3
NtRp243
(dp244
g32
(tsg34
S'float32'
p245
sg36
g37
(S'f4'
I0
I1
tRp246
(I3
S'<'
NNNI-1
I-1
I0
tbsg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp247
(I1
(tg246
I00
S'\x00\x00\x00?'
tbsbasg12
(itheano.gof.utils
scratchpad
p248
(dp249
g15
(lp250
(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p251
I848
g173
S'return self.gen(binomial, size, n, p, ndim=ndim, dtype=dtype)'
tp252
a(S'/Library/Python/2.7/site-packages/theano/tensor/shared_randomstreams.py'
p253
I135
S'gen'
p254
S'new_r, out = op(random_state_variable, *args, **kwargs)'
tp255
a(g172
I509
g173
S'return op(random_state, size, n, p)'
tp256
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp257
asbsg147
(lp258
g120
ag100
asg149
g1
(ctheano.tensor.raw_random
RandomFunction
p259
g3
NtRp260
(lp261
g173
ag1
(g29
g3
NtRp262
(dp263
g32
(I00
I00
tp264
sg34
g35
sg36
g38
sg39
I00
sg40
NsbaI00
aI0
absbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p265
(dp266
g15
(lp267
(g172
I509
g173
S'return op(random_state, size, n, p)'
tp268
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp269
a(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p270
I198
g161
S'[r.type(), self.outtype()])'
tp271
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp272
asbsg28
g115
sg40
Nsbsg28
g115
sbsS'update'
p273
(g104
g120
tp274
sg12
(itheano.gof.utils
scratchpad
p275
(dp276
g15
(lp277
(g172
I509
g173
S'return op(random_state, size, n, p)'
tp278
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp279
a(g270
I198
g161
S'[r.type(), self.outtype()])'
tp280
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp281
asbsg10
g122
sg28
g262
sbag78
asg12
(itheano.gof.utils
scratchpad
p282
(dp283
g15
(lp284
(g20
I74
g18
S'self.initialise_corrupted_input()'
tp285
a(g139
I83
g140
S'dtype=theano.config.floatX) * self.symbolic_input'
tp286
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p287
I144
S'__mul__'
p288
S'return theano.tensor.mul(self, other)'
tp289
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp290
asbsg147
(lp291
g93
asg149
g1
(g183
g3
NtRp292
(dp293
g186
S'tensor'
p294
sg188
g1
(ctheano.scalar.basic
Mul
p295
g3
NtRp296
(dp297
g192
ctheano.scalar.basic
upcast_out
p298
sg153
g154
sg40
S'mul'
p299
sbsg40
S'Elemwise{mul,no_inplace}'
p300
sg153
g154
sg206
(dp301
sg208
(S'multiply'
p302
I2
I1
tp303
sg209
(dp304
sS'__doc__'
p305
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p306
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p307
(dp308
g15
(lp309
(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp310
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp311
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp312
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp313
asbsg28
g1
(g29
g3
NtRp314
(dp315
g32
(I00
I00
tp316
sg34
S'float64'
p317
sg36
g38
sg39
I00
sg40
Nsbsg40
NsbsS'label_bias'
p318
g1
(g42
g3
NtRp319
(dp320
g11
Nsg45
g1
(g46
g3
NtRp321
(dp322
g40
S'lb'
p323
sg49
(lp324
g51
(g52
(I0
tS'b'
tRp325
(I1
(I3
tg38
I00
S'\xbb\xde\x15  _y\xbfj+%\xab\xfe\xeb{?\xf5ezX\xf4fD\xbf'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp326
(dp327
g32
(I00
tp328
sg34
S'float64'
p329
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
g323
sg12
(itheano.gof.utils
scratchpad
p330
(dp331
bsg10
Nsg28
g326
sbsS'activation'
p332
g1
(g183
g3
NtRp333
(dp334
g40
S'sigmoid'
p335
sg188
g1
(ctheano.tensor.nnet.sigm
ScalarSigmoid
p336
g3
NtRp337
(dp338
g192
ctheano.scalar.basic
upgrade_to_float
p339
sg153
g154
sg40
S'scalar_sigmoid'
p340
sbsg206
(dp341
sg208
Nsg209
(dp342
sg153
g154
sbsS'reverse_weights'
p343
g1
(g7
g3
NtRp344
(dp345
g10
g1
(g95
g3
NtRp346
(dp347
g98
(lp348
g1
(g42
g3
NtRp349
(dp350
g11
Nsg45
g1
(g46
g3
NtRp351
(dp352
g40
S'W'
sg49
(lp353
g51
(g52
(I0
tS'b'
tRp354
(I1
(I20
I429
tg38
I00
S'\x9cT0::\xfb\xc6?,Uq\xc5\xeb_\xcd\xbf\xa5\x04>V#\xb4\xd6?\xc1\x1e\x7f\x12f?\xc1\xbf0\xaaW\x0e!\xc7\x9e?b\xae\x8e\xdc+\x0e\xd8?\xe8;\xa0\xd2\x12p\xb0\xbf~\x0f\xd7\xfb\xdbs\xdc?\xbc.\x90Q\xa5\x0e\xa6\xbf\x95\x7fH\x86\xd8<\xd6?\xaeE\xd7\xc3\xfd\x96\xd3\xbf\x14\x9c-\xacL\xee\xc9\xbfK&M9(\xec\x98\xbfe\xb0\x8e?\xc3K\xd1\xbf\xdaR\xdf$\xdd\xc2`?/\xc9\xdf\x02\xd40\xd8\xbfq\xe0rp\x9bQ\xd0\xbf+\xe5\xce\xb2\xe1\x1f\xd8\xbf\x0c)r\xf8+\x0f\xd7?\x90-\xaa\x1a<\xec\x92\xbf\xccts\xec\xe4\r\xa7\xbfu\x9f\xff\xa4\xd6\xa7\xda?\x95\x11=\xf2tf\xd5?\xecp\x82\xce!\x1a\xb0?\xbb]^\xae+8\xc2?\x86\xc7K\x10,=\xc3?\xb5\x8f\xde\xdfq\xd4\xc4\xbf\xf4\x86eK\x86\xd3\xdc?\x1ba\xef\xd4\x88#\xcc\xbf#\xe5<Q\xbc\x0b\xbc\xbfn\x91\x8fnK\x0c\xdb?w$\xfc\x88\xd6.\xae?-\xbd`(\x87\x9dc\xbf\xa9\x1b\xce\x96\xc0\x10\xdb?\xe9\x19\xadr\xfeq\xda\xbf5\xbe~!\x1f\x8f\xcf\xbf\xd4\xee\xb7B\xad\x86\xd7?\xbcr4\x1c\xf4\n\xd5?7\xb1G\xe9\x92;\xb4\xbf)f\xdbc\xd9\xdc\xb5\xbf1\xba\\\x17^v`?I\xa8\xe5\x0ee\xca\xdd\xbf(\xd4\xcc4\xb9\x1d\xa3?\xa0\xfb\x03%\x00_\xa8\xbfL\xa9\x7fC=\xf1\xdc\xbfG\xe1TQ\xf9\xff\xce?\x1aa\\\xf6\xea[\xcf\xbf.\xcc\xd4\xd6\xf1+\xc4?\xe3y\x02\x8b\xae\xc6\xd9\xbf\xe25\xc5\xedL\x19\xd9\xbf\x80\x90\xaf~\x925\xda?V\x83!\xf5E\xe9\xa5?\xees\xaeC\xc4\x11\xd0\xbf<\xc2J6\xb1c\xdb?\x879<vrP\xda\xbf:\x95I\x92\x81M\xbf\xbf\xb9B\xd7\xc40\xfa\xdd\xbfF\xfc\xae$\xbf\xd8\xd9?M\x82\xf2%\xfa{\xd0\xbf5\x1f(\xff8\xc3\xdb\xbfn2\x8a1b\x95r\xbf\xef\xe2\xbch\xc2G\xd5\xbf>6\xdb\xc2\x17w\xca?\r\xf5J(}t\xd5\xbfO\xb1\x15r\xcb+\xd4\xbf\xdc\xdb\xde\xdd\x8d_\xcc\xbfp\x06\xb1\x9c\xc8\xd7\xd7?c\x05\xa7\x8f\x86\xec\xc8\xbf&\xc2\xafY1\xaf\xc9?\xf9\xd3\x81oFE\x94?\x97\x91XR\x0e\x9b\xd4?\xc7\xac\xbb\xae=\xbb\xc7?+1\xe6ya\x8a\xc0\xbf\xb9\xf38f\x97n\xd0?\xb5\xf3\xba5\xd1\xf7w\xbf\x19\x1a\x11n\x86\xf9\xa5\xbf\xfe\xaa\xa5`\xff\xc0\xdb\xbf>.\xc1H\xa1\x08\xc8\xbf:\xa8\xb72?\xd0\xcc\xbfk\x13\x0e\xf1}\x95\xd3\xbf\x13lj\x19\x14\xc3\xb1?\x98\xc3\xe3|6E\xb0\xbf\x00\x03\x94\x1d\xf2.\xc8\xbf\x13\x9c\xee\xabS\x9a\xd4\xbfU\xbc\xd9\xe2\xdb\xff\xb0?W\x8d\x90\xeb[\t\xbe?#\xa9N\x9c\xff\x16\xde\xbfmww(/b\xd8\xbf`0*\x8f8\xbb\xcf?\x857G\x13 \xbd\xd1?f<D\x99L\xb4\xd1?\x94\x87\x96\xabj\xf2\xd7?\xa7)\xb0\xc5\xac\xf7\xc8\xbf\x1aq\xf2\'K\x91\xc9\xbf\xd4\xa5m)\x94H\xd3\xbfW\x19\x14\xd9\xdd\x05\xde\xbf\x8f\x04\\r\xd5\xe9\xce\xbfH\xec\xb6#\x08\xdb\xca?\xe6\xc1\x84A\xa6\xcd\x17?X\xd4\x0b\xf1\xcc\x9b\xc7\xbfW|\xd7\x9cq\xf6\xb4?\xbe\x9c\xb5\xce\x89\x9e\xcc\xbfz\xdf\x0f\x9e\xfcO\xbc\xbf&\xf9\xfbBT\xea\xc7\xbf\xdd/l\x11I\xc4\xc0?4\xd5C4>6\xd8\xbfw\x90\xaay\xc5\xd0\xb9?\xc1\x1c\xac\x93\xf5\xb9\xca?\xa9w=\xa8\xf1\xf9\xbe?5L\xf7,\x8a\xb1\xcb?u\xf7$\x96b\xa7\xcb?\xb7cj`J\xdc\xd6?\xe5\x9a\xb5<\x1c\xaa\xc7?G\xe7\xf9]\x19\xeb\x94?`Zi\xcasF\xab?\x023g\x18\xdd\x95\xb3?\xd4>\x0b~\x00q\xc4?\x04f:\xf5N\xec\xb7\xbf\x90\xf5\x1a\x03\x02*\xc3\xbf\x08$;o\r\x11\xcb\xbf\x1eP%\xc4|8\xca?\x02\xfc\xc2y\xa0\xfb\xc8\xbf\x9ao\xc23[\\\xca?\x9d:\xe7F\xcdq\xdd\xbf\xa9.\xc3\x0c\xc2n\xb2\xbfPD9J\xa1\x90\xb0?\xf0\xee\x9fYTJ\xd8\xbf\xdd%\xe3\x85B\x02\xd9\xbf\xbd\xa2\x86s\x0f\x12\xb4\xbf\xff\x0eo\xdc \xb6\xcb\xbf\xec\xe9\x85\xa3\xdeI\xc0\xbf0HN\xd88\xca\xc4\xbf\xd6q\x8f\xb3\x94\xa1\xd2?r\xd2\x1e\xb9\xd9M\xc5?\xef,]\xa8U\xa0\xda?\xb12gE<<\xb8?\x17\xac\x95+\xfeF\xba\xbf\x87\x14\x17_\x7fu\xd2\xbf%4\x80I$\xf7\xbe\xbf\xda\x1b\xdeM\xecl\xdc\xbf\xf5\xf5\n\x10\xec\xaa\xdc\xbf\xee+!o\xe1\xb2\xc4\xbfo\xc2\xfd.\x7f\xcf\xd9\xbf_\xfa\xec\x85%V\xdc\xbf\xe0\xd7\xc2\xbd>>\xce\xbf\xa7\xad\xe4(\x04\xff\xc6\xbf\xb6\xe5\xd2\x86; \xd0?\x83J\x98\xbb\x9c\x15\xd1?\x8f\xf6\x9e\xef\x17\x01\xd0?\x99\x16\xdf\x8dx\xfc\xd8\xbf\xa5J=\x8a\x94_\xd6\xbfr\xce\xe1\x15\x19\\\xa9\xbf5\xe9\x8bZv=\xcc\xbf\x10\x82y\x94x\xfa\xcc\xbfJ\xa9\x14\xfc!\xdbq\xbf\x1e\xd0\xeaG\xcf\xfe\xb2?(\xcd\x9e;]S\xd4\xbf\xf1\xf2-\x08\x8d\xfd\xc9?\xc1\x02\x93\xf4.l\xd0\xbf\xc5\xed\xd5\xa5\xac;\x96\xbf\x015\xb0\xbe\xb1\x14\xc2\xbf\x9c\xfc\xc0\xb8\xcf&\xde\xbf\xac!O\xbf\xa9M\xcc\xbf\x1d?I\xf3\x8e]\xb9?Nl\xe6\xae/\xec\xcd\xbf\x04\xf1\x8d0\xfb\xfb\xcf\xbf\xbc\xd1\x94\xbfRG\xd5\xbf#A\xca\xfe}\xba\xab\xbfJV\x8d\x0f\xb2\xf6\xcc?\xad \x0b\xc6\xc3G\xc8\xbf\x88\xa6\xd5`|\x9b\xd7\xbf\xefI\x17\xc3\xf1-\xd1?M\xffa\x1b\x06 \xda\xbf1\x9fo\xc8\xd8\xca\xd2?\xb0\xbf\x9b0J\x02\xce?AQ\xda8G\x90\xd1\xbf5\x97\xb0\x0e\x18\xb8\xd7\xbf\xb9\n)0d0\xa9\xbf\xa7E\x145\xe4L\xa0?\x01\xa2\xbb\\d}\xc3?\x80\xcd\xa1J\xaa\xd4\xd8\xbf-\x8f"\xe6\x87\xf7\xc2\xbfl\x88\xa8M\xbdn\xcc?r\x7f,Yx\xbe\xd9?\xae\x8a\x94\xba\xd7{\xaf?\xdaP\\\xe5/\x9a\xd4?\xaeO6s\xb7{\xbb\xbf\xfa\xa8y\x9c\xcdX\xce?\xb1\\R\x9d\xa8e\xd3?|\x9e$r\xf8\x9d\xd9\xbfK\xbc\x88\x11AP\xca\xbf)T\x9d\x04\xfer\xc6\xbf\x9d\xac@R\xa3e\xda?g\x01\xf5uhR\xcf\xbf\xc3\xe5\xaa5\xed\xa8\xd8?\xd8\x15"^`\xa8\xda?Mv\x13u\xcfU\xba\xbfY\xd5\xb4\x1e\xd0\xb6\xc9\xbf\xbe\xebnx\xea.\xd0\xbf\xb5\xb66\x14\x8f\xc0\xd2\xbf\x9f\xb0?B|b\xc8\xbfV\x0b\xd7\x89\xf0\xa1\xb5\xbf6\x13\xd5\xad\x16\xcb\xdc?\x8e\x98u\xdd\x12]\xd1?\x9d\xed\x8ep\xec\x8e\xbf?F\xa6\xcb.\xed\x92\xa4\xbf\x08\x9eKZ\xf4s\xa5\xbf\xc5\x19F\xc3O\x8f\xba\xbf\x90\x94\xd8\xab\xae\x97\xd7\xbf\x08\xeb\xb0G\x0e{\x92?\x1f\x97X\xa4|\xa0\xd6\xbf\xec)\xa0\x1c\xdd)\xcb?\xdbP\x89\xa8\xd12\xc3\xbf\x9d\x9f12\x8f\x95\xc8?\xffK\xe6k\xb4\x82\xd7\xbf\x1eC\x1d$V\xb3\xca?\xd7\xd6\x10\xff<\xce\xcd\xbf\xed\xe5f\x91x\x9c\xbc\xbfu\xf6-R\xdc\xcd\xd4?\xbdb@C\x07)\xda\xbf\xc35\xd3@\xba\xaf\xcb\xbf\x82P%\\n\xc9\xd5\xbf\xd3v\xc9\x1a+\x14\xc3\xbf*\x06\x13w_\x02\xd5?\xfa\xc3\x99\xc8\x8c]\xbb\xbf\x9a\xf5\xb9\\\x1d)\xcf?~x\x10\xb06\xe8\x8d\xbfR\xf1\x92\xab\n\xdf\xc9\xbf>\xc1<\xf9\xec8\xcd\xbf\xae`\x7f\xa1\x9c\x0e\xc6?Q\xff\x98\x0e\xe2\xec\xb2?\xb0\xdd\xe6\xe9\t\x1e\xbb\xbf\xeb\x8a\xa2;Er\x8e\xbf,[\xa8\xa3h\x89\xda\xbf\x1a\x9bNo!\x8c\xd2\xbf\xcdX\xca\x97\x83W\xd2?f\xa9\xac\xd9f\xee\xd9?\xc4\x07\xf2_-$\xa2\xbf\xe1N\x12w\xf9O\xd0\xbf\xd2\x84\t\x8f\xfa\xbb\xd5\xbf\xb4\xa3.\x84\x13^\xb7\xbf5\xb0\x8d:\\\xf5\xc7\xbf\x97\xfc!\xb0\x99c\xd0\xbf\x94g\x06\x92a6\xdb\xbf\x97ioA1\xdd\xd5?\x9b\xc5n\xf22\xbd\xd8\xbf\x82\x87GB%\x9a\xd9\xbfT\x19\x00\xd7G;\xd5\xbf\xcfs\x14v\x88f\xd2\xbfLmnL\x15\xad\xc4?\x9c\x08u\xc6\x00\x97\xd3?c\x97\'\xb9\x17\x1c\xd0\xbf\xb5B\x94\xa5I\xd2\xc5?\xa6\x9db"m\xb3\xb9?nM\xf3\x86\xaf\x80\xd2?g\x1d\xa2/d6\xa8?,`\xa9}\\:\xa0?o\xf6\x98\x97~\xa3\xb4\xbf\xd6\xaa\x8f\xc0\xe3\x01\xba\xbf\x8f\xe3\xb0\x04\xc7]\xd9?d#c\xc07\xa1\xd3?qe\xd9g\x88\xac\xb0\xbf\x81F\xa9\xb0\xd8\xe3\xb4\xbf<\x1b\xebo\x06f\xcc\xbf\xde&!\x98\xc7\x1a\x8d?\xd6AS\xa3EG\xb3?\x85a\xab\xa0\xbc\xbe\xdb\xbf\x13\xcb\x11\xfa\xaf\x85\xb4?mH\x95p\xe5\xb5\x9b\xbf\xc5\xbd_\r\x9ftz\xbf1\x15\xabL)-\xcc?\xdd<\xd7 $\x04\xd2?0+Y\'k\xeb\xc8\xbf\x99\x18\xac\xb6\xe0D\xc4?^\x1f30\xf3\xdb\xc5\xbfu\xa2\xa9\xba\xdah\xcc\xbf\xfe\xb7\xab\xec\xf0\xb7\xad\xbf\x11\xc3\x93\xdd\xc5\xd5\xc2?\x12\xf9w4h\x1c\xdb?\x1bk\x85>?\x98\xd4?\xed\x18p\xc6\xf7D\xd4\xbf\x10\x1cB\xd7\xda\xe0\xd6\xbf#}\x13\x1c\xe0\xbd\xcd\xbfT&\xe9\xb6\xdd\xa7\xdb\xbf\xc2\xc62$\x08%\xd8?\xb1\xc3\xfeB\xb2c\x9e?\xfd\x96\x15\x06f\x13\xcd\xbfd$\xfc.\xf4\xf7\xd6?\x17.\xe9\x94\x7f\x06\xa7\xbf\xc0\xe4\xf9B\xfb/\xdd\xbf\x01\x90\xf9\xd7\xcd\xf5\xdb\xbfv\r\xb4\xc1w<\xa0\xbf~h0[\xb1\xf5\xce?g\xcfz\\g\x18\x93?\x97\xcf\xb8?O\xc8\xc7?\xf8ri\'\x99\x95\xdc?z9\xda0\x15\xeb\xd4\xbf\x9a=O\xc7\xfc\xc1\xb1?h\xcbQ\x86}\x13\xb7?\x17K\xfcJ\x8e\x7f\xd4?r<N \xd7s\xdc\xbf\x01\xd3\xda\xe1E\xbc\xd0\xbf^\x92Fiw\xf1\xd1?8=\x92$%\x93\xc7\xbf\x03\x13&m\x007\xd6\xbf\xf5"\xfd\xec\xae\x1d\xd9\xbf\x14\xde\xc3:\xd69\xdc?\xa7\x10`\x19\xddN\xc8?mq\x0eH\xc3\x1e\xc0?>\x04-\'M\xa1\xdd\xbf\xb0M\xebn\xe2O\xd7\xbf<\xe1\xc7\x1d\x8c<\xde\xbf\x95\xceB\x94\x80\x01\xd8\xbf\x00\xf8"\x96\xddZ\xc5?f>\x1e\x7f\xcc\x9e\xb5\xbf\xa0\xb5\xca\xc0I \xb7?|\x84J\xbd\x80I\xc3?\x99\x04\x17__\x14\xd7?R\x8f\xc8\xd7&\xde\xd7?YE\x8cR\xf0\xde\xd0\xbfO\x91\xcc_9\xa9f?x\xc7\xd7\x9b\xf5\xd1\xca?+:/QB%\xdb\xbfl\xd0\xf2\x1b\x01r\xd5?{\x1d@\x17\xad/\xd3?2/\x1a\xd6\xdd5\xd0?>\xad[\x8aS\xc9\x98?\xd2\xae\xc3\x1dlT\xd4\xbf\x9e\xfcC\xd2\x19}\xc9\xbf\x92$\x8d\xaf<<\xcb?\xe4\'\xe9Z\xaf\xd2\xc1\xbfl\xac\xe6t\xd0\x9e\xd2?\x82\x06\x82#\xbaY\xc5\xbf\xb7%\xe8c\xe5f\xda?U\xb5\x89\x8eTd\xc6\xbf\xecHO\xb1\xbfv\xc4?\xc4I\x81]\xab\r\xc8?\xcd\xff\x9a\xaf\xf7\xc3\x8f? \xc9\x10\x8c\x9dJ\xda\xbfT\x7f#(\x8c\xfe\xbd?\xb3\xc6x\x00T)\xba\xbf\x8f\xcaFS\xaf;\xc0?\x87E\xb6\xd3\x9c\xcd\xd9\xbf\xc3\xf0\xc9\xd0\x0b\xfa\xdd\xbf\x10e=X.\xb3\xda\xbf]\xfc<q9:\xa9?\xd0\x00\x01||\xba\xd6\xbfN\xcf\'+\x97\x95\xc9\xbf-\xe7\x18|\xad\x88\xcd?\xd5\xeb\xaf\xdb\x0cN\xd4\xbfU\xb0\xa5E\x8d\xa0\xb7?\xaa\x1e\xc3\x9d\xf8\xbe\xce?\x9f/\xe3!\x92\x10\x9e?\x9f\x9b\xb1\xce[\xf0\xce?\x9b\x99\xfdS\xd3\xac\xd0\xbf\xe7\x0f=\xf6n\xcd\xb2?)\x88\xef\xea\xe9\xb7\xc6\xbf\xbf\x17A\x04}\xf1\xdb\xbf\xbd\x13\x9c\x907\xb7\xb8?\x15\x08\xb3\'\xc9N\xc6\xbfM\xcf\xc6\x12W\x90\xb7\xbf\xf4\x98\x8f\xde\x88\x1a\xd2?R\xb0\xa7\x04\xf1\x83\xa3?\xa1\xb7+\xde\\\xfc\xc8\xbf\x1e[/\x81z\xeb\xd2?|\x93z\x19##\xb0?}\xfe\xa3\x8d\xd0U\xd9?\xf1r\xb7\x90\x14\x11\xb5\xbf\xfdo\xf7e\x90\xc3\xd2\xbf|\x19c\xc1\x17\x02\xc7?\xff\xef\xcc\x95#\x11\xcb\xbfr\x8d2@^"\xd4?z\xdf\xd2\x1bw\x7f\xd3\xbf\xcd\xbf\xc5\xb7C2\xc8?\x86\xf1\xdb\x13\x03M\xbc\xbf\xd6i\xbe\x94\xf0|\xd6\xbf\xbe\xdfUZ\x92G\xc5?m\x0b`\x1eve\x85?v\xdf\x8d\xca\x01\xe3\xa5\xbf\xcc!$\xa6k\xd9\xc9\xbf_O\x82Y\x9a[\xd2?\xac9\xfe\xc6\xbf:\xc9?\x08\xa3(O\xa0\x9e\xd8?e\x17\xf01\xed\xe8\xc7?\x05\x88\xe0\xedoI\xab?<[*p\xcb\xae\xda?\x16\xe3\xed\x88\xc68\xd2\xbfn\x17\x90\xb3g\x83\xb1\xbf8$\t\x0e\xc0\x19\xd0\xbf>X\xca\x12\xb26\xc6?\x88\xe4\nD\x82\xa4\xdb\xbf\xd5\xc9\x9e\xeaY;\xd7?\'Y\xd3\x98\xeb7\xce?\x86\xd0\nZ\xc5\x10\xda?\x0b\x97\xcbs\xc6:\xd6\xbf\xfb]7\x90\xc9r\xd8?\xeb\xbf\xcd\xa9ev\xca\xbf\xceM_\x92\xe2\xa3\xd0\xbf\xa1\xd1[Da\xcc\xc7\xbf\xbe\xb2\xf3}N\xe8\xc3?\xdc\xfc\x97\x08\xef\x03\xc4?!\xe7_\xb3|\xf7\xd0?\xfa\x0fc}\x9c\xfc\xdd\xbf\xc41p\x14\xbaR\xd6?\xc9\xb2\xa3I\x97i\xd7?\xcf\xb9\xac\x9e K\xbb\xbf{\xa8"\x01\xec\xd0\x9d\xbfTe#t)\xd9\x8f?\x10w\xf2\xcdy\xc9\xd2\xbf\x85\x81\xeey\xdeH\xc1?\xa7\x0e"G8\x88\xcb?b\xaf\xec\xd2&\xb5\xd3?\x84W\x13\xc9*\x85\xb1?\xaa\x82@r\x13|\xcd?<H\xf7\xdd\xb9q\xd0\xbf/{\x07^\x12\xf0\xa3?F\x94\xd5\xabM\x1a\xb5?\x9e\xba*\xc3\xa5\xa2\xd3?F3[)\xc8\x83\xaa?\xbf>\xc1\xac\xd7\xb5\xda\xbf\x07!\xe8AyJ\xda?\xb4W\xf6zO\x01\xbd?NL^\x15~\x01\xd1\xbf\xcf\x95\xaa+\xbc\x8c\xc5\xbf\x13\xd7O\xc8m\x9b\xdc\xbf\x18?\x89\x02\x0c\xbe\xbe\xbf\xdeH\x98M\x82\x97\xd0\xbf\xbdT/\xe8\x14\xc8\xd6\xbf|Q\x02\x81\xe5)\xdd\xbf\x01*\xf9\tD\xbe\xb9\xbf\x07\xdfx\xbc\xe0\\\xb9?e\x82\xe9B\x99\xba\xd7?\x1e-\x9e\x8b\x05j\xc5\xbf\xd9\xce_\xfbJ\xac\xbb?I\x07"#)\x8c\xda?u\x03W@\x1fA\xd1?\xc2%\x19LV\xa3\xd3\xbf\xedA\xa7$\x9d\xae\xd7\xbf\x99()\x07\x94$\xaf\xbf\xd2N\xbc\x95\xa7\x00\xc3?Fl\xaf\xf3\xb2\xc6\xb2\xbf\xf9\xd1\xda\xa2\xd5u\xd2\xbfU\x97\x1d;\xb7\xc5\xd8?LK!\x06r\xc1\xdc\xbf<\xfb\xd8:\x91\x8b\x92\xbfX\xa9\xbe1\xb7\x98\xd3?\xee\xfa\xae\x9d\x11\xe0\xdc\xbf8\xb0r]z\x83\xc5\xbf\xba\x1c\x89\xee0\xff\xb3\xbfH\x11\xf57\x9c;\xdd\xbfp\xec\xfexd\x98\xbe\xbf,i\x18\x8c/\x16\xbf?\x90Ob$\x95\xc4\xd4\xbf\x9dL\x1aSn\xde\xbe\xbf\xf1\xf2$\xe3\xa2\xc6\xc9?\xaf-\xace\x8fd\xca?\xcd\xdb\xbb\xed\xbf\r\xb1?8\x84\xcc\x16N\x10\x98?\xd2\xf5Xf\x00\x13\xd6?Z\xfb\x82\xc4\x89\xb9\xc8\xbf\xd8\xc8c+T\xcc\xb3?\x94\x8fi\xc1^ \xc3?\x1e\xed\r^\x0b\x8a\xd3?v\xbb\x10e\x84M\xb3?\xc1\x9d\x04zu\xbd\xd6?\x93=\xd1\xbe\tG\xa0?\xaa\xeds\xebK\xb1\xd1?A\xfe\xb9\r\x9f\xd6\xd1?e\x15\x1e\xe5,\x9dX\xbf%\x7fq\r\x81\x1c\xce\xbf\x8ae\x02\xda\'s\xce\xbf\xfcHm"\xa4\x81\xda\xbf\xe8\x8f\xa8L,\xb9\xd6?D\xe1\x94\xbbt\x11\xcf?\xaf\x97\x04\xfc>I\xb7\xbf\x19Fg\xcd\x90\xf4\xca\xbf\x02\x07\x99\xe7m\xa9\xd5?D\xa6}\xb1c\xc8\xd3\xbf6\xa9\xd8\xd6\x82\xf5\xcb?Z\xc6Z\xd3\xbb\xa8\xc1?\x08\x97\xabU/\x80\xd9\xbf$\xeb\x1e\xc7\xa3\xd1\xbc?\x04\x03\x87\xfa46\xdd\xbf-\xf2\xba\x9f\x8b\xa4\xbf?"\x158\xe8\xae \xb3?\xfe\xef\xc0\xd8\xcf\x88\xa5\xbf)I\xb2\xe8l\xf9\xd0\xbf\xd5\xdf\x92G\xbb]\xd2?\xad\xc2\xf9G\x94\xfd\xd9?t8\x11.=\xfa\xc6\xbf\x93%\x05>\xf5\x10\xaa?\xee\x980\x06r\xfb\xd2?\xef\'.\x96.\xa6\xcd?\xeaa\xe3\xd2u\x85\xd1?|\xfeY\xbb!\xb1\xa9\xbfi\xc6\xf0\xeb\xf8\xc0\xda\xbff\xd3\xea\xbb\x950\xce?\x12]\x13\xa4\x1f\xf0\xc4\xbf\xaaX\xf7\x0ev\\\xc3\xbf?.0U\xe4\xb0\xd3\xbf \xfb\x80\xec\xda\xc5\xc8?\xe5^%\x7f\xb1A\xd6\xbf8\xb1x\xdf\xff\xa6\xc2?\xbcJ\x1e\x8d\xed\x7f\xb2?\xe1\x07B\x9bUY\xdb?\x8f\x06\x8a\xc8\xe0\xbc\xd2\xbfL\x11ES\x8bJ\xc9?\x9d\xae?\x82\x9a9\x86?\x05P\x90\xe5?{\xbf?\xb3!W\xbb\xd6\xee\xc7?Z\xf9\xcd\xc3\x13\x1e\xb4? \xba\xaa\x95\xc1\xb9\xc0?+\xc4g\xdbW\xc1\xbd?\xc0X1]\xb4\x8b\xca\xbfk\x8c\xc4/6T\xb3?O\xc0A\xd2\x93 \xd8?\x13%,\xc9b\xcb\xd4?\x88[\x0f.\x94\x04\xbe\xbfY\x80\xb5\xc1\xfd\xac\xd7?p\xab\x92\xe6,i\xd2\xbf\x896z\x99\xf7\x93\xd8\xbf0\xa4"\xbe\xecl\xd3?\xb6\xb8\x84i\x0f\x11\xa0\xbf\x19\x9c1F\xcf\xa1\xd4\xbf\xf0\xfc\xb3\x10^r\xd8?k\xe5H-9m\xd1\xbfp\x06\xef\xac\xdd\xe7\xdc\xbf\xcbVC\xb4\x92%\xb8?\x1b\x98\'\xa1\x06\x1f\xd7?\xbb\xce\xe9\x15\xd2\x12\xa4?\x8cx\x1d\x1b\x0b\xad\xdc\xbf\xacB\xb9\x96\xb5l\xd2\xbf\xfb\x91u\xf2\xe8t\xc9\xbf\x8f\xa5\x19\x92h\xb2\xbc?\xf4gjU\xfaL\xb2?\xf0\x9b_/6\x02r?>3>g\x84w\xd0?$\xd4t\\lI\xca?\x8d\xc8\xd1\x1bE{\xd3\xbf\xbf\xceq.>;\xb6?*\t\x9c{7\xd4\xb9\xbf\xcc\xd1\xe5YtJ\xc6?\x04\xf2\xd9(\xbe\x1e\xdb\xbf\xa8\xb05R\x93\x12\xd5?\x89\x03\xea.\xe0\xab\xb7?uv\xf4\xba\xf3\x89\xd0\xbf<G_\xc6\xad\xb1\xda?\xd7\xad\x01\xcd\x80\xc1\x99?-\xe0.%\x1a0\xbb\xbf\xb0\xa1[\xb8\xa62\xb0\xbf\xcf\x14\xa5y]\xc6\xd5\xbfe\xaf\x7fcn\xb2\xca\xbf\x0e_\xde\xb6hq\xdd\xbf\xda\x0f)]<\xac\xc1?\xf4\xb7F\x16-\xfd\xb3\xbf|H\xcap}Z\xd5\xbf\xe8\r)\xfeu+\xda?\xe5\xc9)\xf2\xbd\x90\xd1\xbf5\xdc\xabw\xbb[\xbe?\xb9=$\xf2F\xfe\xc3\xbf\xbe\xdc\xdfX\xf0j\xc8?\x13\xf5\x9dq\xd5A\xd4\xbfZ\x99ta\x83x\xaa\xbf\xad\xcd<\x8dd\xe6\xbd?b&\xaa\xbe\xc7\x11\xcb\xbf\x06\x90\xeb\xf9-\x07\xd7\xbf\x82\xcf\x8c\xbc\xe98\xd4\xbf\x93e8\xd1\x0e\x95\xc3\xbf D\xa6s"\xd5\xc9?\x8cv\x93\x12\xfeT\x7f?\x08-\xe3\xa7\xfc\xc1\xc8?\x15\xbb\x81\xa0\xc1-\xda\xbfUw\x15Om\xcau\xbf\xact-\xd0\x937\xd0?\xb6+.\xd6\xbd!\xa1?-p1&\xca]\x9c?\xd1p&D\xecT\x9e\xbfnc\xb9\xbe\x7f#\xd4\xbf(@\xbf\xbe\x10z\xdb\xbf\xdeb\xf4\xcb\x17{x?I\xdb\x9d\xc3\x16\x02\xc3?O\xeaa\xdbo\x8e\xbd?\xb0?nLS\x0c\xc2?\x85@\xdbY\xf4\x00\xd2?~P\xd6\xc8\xeaR\xb1\xbf\xb9\x07\\\x0fV\\\xb6\xbf\x9c\x8ciA\xa8A\xd1?\x8f\x85\xb4\r\x00\xdc\xc4\xbfp\x9b\x0b!\xb3\xf9\xb9\xbf\xf3*@\xf9\xba+\x92\xbf4\xb3s\xdf\xa9*\xda\xbfk\x1c\xdd\xff\x02\xfe\xbf\xbf\x1f\xb4\x00\xb1\xec\xf0\\\xbf\x1a\xf5,\xc7Z&\xb3?\x1b\x04C"=\x08\xd7?\xb5p\x178sq\xcd?\t\xd5n\xb4n\xb0\xd4?\x17B\xef)1\x87\xc8\xbf\xf3\xba\xe9\x86!\xab\x87\xbf\xf4\xa8\xe4\x8fWW\xad\xbf,<W\x82\x19\xf4\xc7\xbf\xb6\xa6\xf7KF\xe9\xc4?\xaa\x84,\xcb\n\xc2\xad?|\x08\xcb.Wi\xc6\xbf\x10\t\x90U\x8e\xb7\xd5?1\x83\x9c\xa5\x05?\xd8\xbf\xe7\x7f\xc1\xb5(\xcf\xdc\xbf8\x01&\xc4\xca\x99\xbf\xbf\xa5\x13"A\x939U?4\xa0&cr\xf4\xd4?s\xce\xa28\x97\xef\xd9\xbfEj;\x18&\xe0\xc6\xbf\xe4:L\x1f\xa1\xfc\xc2?\xc2\xbc\x8b4\x8f\xd9\xd9?\xb7\x1c~\x87\xac\x9e\xd3\xbf-C\x8c\xfe\x8e\xa4\xd1\xbf\xc3$\xa9\xed\xc5\xb3\xbd\xbfj2I\r\xf3#\xbc\xbf\xc434m\xd5\x84\x81\xbf\xa4\xdf\x86Y\x07?\xd0\xbfit\x9a\xbb\x11\xee\xc6\xbfp\x84\xf9\tv\xde\xbd\xbf\x87\x11\xf2\x89Gj\xcf\xbf\x94<\x83\x91\xd8\xba\x99\xbf8]\x8e\x85\x12\x07\xbf?\xa2\xcc\xa5\xa6\xbc\xb1\xd4\xbflc(\x8e\xc3\x8b\xd5\xbfe\x19g\x90\x82\xa6\xdb?\xc3\x7fG\x11\x02\x9a\xcc\xbf3d\xf9>6\x82\xd0\xbf\xdfR\xda\xe6N\xbb\xd8?\x0b/\xad\x8f\xca\x82\xc8\xbf\xc6/\xd3=\xe2W\xdd\xbfZ\xda\xe6\xb0G\x96\xdb?\xf9\x9b\x94\x90\xfc\xe3\xd8\xbf\xa7*{\x98\x9e\'\xc8\xbf\xa3\x19\x1b\xb3=d\xca\xbf\x98\xed\x9ea\xfe\xb3\xca?\xf3\x10\xac\xf8\xafi\xd4\xbf\xa4;\xbf\xe2\x98\x9a\xd8?`8\x85\xf8Q\xe7\xd1?\x81\xb2\xb02#\x1b\xd1\xbf\x15}\xfa:\x04\xdd\xbc\xbf#\xf4\x0f?\xa0`\xd4\xbf\xac\x94\xebqh\xbb\xd2?\x80[;\xec\xeb\xec\xd2\xbf!\xd4*\xca\xca\xba\xd4?79\xd6I\xd3\xf4\x93\xbf\x17\xe9\xe9T\x9c\xc0\xd8\xbfl\xf0\xda\xc8\x01!\xb0\xbf\xe3/%\xb5\xa6>\xd6\xbf.\xe2\x8e\x03\x87\xf0\xb7?\xd5;\xea\x0c"r\xd2?\xc3\xf5\x0c\xb4\xe7p\x97?E\x18\x1a\xd2K\xaf\xd1?\xa8)`Ds\xc0\xda?\xeaL\xba\xe6y\x08\xd6\xbf\\VO\xa4\x97o\xda?\x19\xc56\x85c\xa2\xcd\xbf\xe1q0tc\xd0\xd7?\xde\xb4\x17k\xe5\xd1\xb3\xbf\xb0w\x87e\xd1\xf2\xca\xbf\x1e\x16\xf0T\xeb\xf7\xd2?\x8e\x7f#\x98v\xbf\xb9\xbf\x15\xcf9\xc6_J\xcf\xbf\xe9\xeay\xfe\x88\xd5\xd2?\x0c;}\xf0\x16\xee\xd0\xbfv1\xc4\x1d\x13\x9e\xd6\xbf\xaf\xe9p\xe7\xe5\xd6\xcb\xbf\x13E/\n\x92L\xd5?\xd1h\x18\x19\x7f\xce\xd9?\x01\x14\x8e+\xe7@\xd4?]h\xe3W\xe9i\xa7?\xa9\x83\'\xf9\x91L\xae\xbf\xa3\xbd\xe8b\xae\xa1\xa2\xbf\x894\x9es\x81\xef\xa6?%\x1eb\xe4\xe0\xef\xd7?\xf8\xb0\xe5\x926\xd7\xd0\xbfRKF\x7f\x8c|\x96?\xe9\x0c\x91\x06\xca\x1b\xde\xbf\xa4\xc1\xb7j\x19\xea\xd3\xbf`\xf1\xfe\x17\xac\x18\xde\xbf\x98\xce\xd7{~#\xda\xbf\x12O\xc6\xd3.\x7f\x8e?\xf5\xbdc\\\xc2z\xdd\xbfg\xc2\x93il4\xcc\xbfULY\x1eiq\xbb?\xc0ma\xdb\xefg\xd6?w\xdcf?\xfb\xc9\xd1\xbf\x16B\xed\xa3V9\xc0\xbf\xd41W/\xf3O\xd5\xbf\xd1\xb5\\s\xff9\xcf\xbfdW,\x97\xed(\xd4\xbf\xf2\xbe:\x9f\x12Y\xbe\xbf\xb8\xdb\xc7\xb2\xef:\xc7?T\xab\xab.\xf5!\xd0\xbf\xc0\x8c\x1b\xbb/n\xde\xbf\xfe\xbb\x18\xf2\x86h\xdb\xbf\x92\xdc\x9f+\xec\xf6\xc0\xbf\xcfc\x1cD\xd6\xbe\xa2?s\xb2\xde\xf1\xa3\xe3\xd0?\xad\x9d\x17\x18\xd7\x9e\xd0\xbf_\xbc\xd6\x1a\x19\xcd\xb7?\xdf\xedG\xd4H\xb6\xd8?\xca\xc8Q$oG\xd8?\x1fS\xdd\x06\xf3\x1a\xd3?\xf1#G\xd5\xa2\xa7\xa3?\xd3\x95\x11\xf7\x8f\x9e\xd7\xbf\x06\xf5\xcba}\xc2\xd6\xbf\xb0\xe4N\xfb\x14\xb5\xa9?\xbc38\x0b\x9c\xd2\xd5\xbf\xfb2\xba\xeb\xca\xab\xd9\xbf\x99\xc0\xa9\xf8\xc2`\xda\xbf5\xaa0,Z\xd3\xd3?\xf4\xb4\xe1\xa7\x92/\xd1\xbf\x0b`\xcbG\xa6\xf0\xdd\xbf,\xaaE\xb3\xf2\xad\xd6?\x98\xba*\x1eJ\xb5\xa5\xbf:\xa1k\xd8\xcdT\xd0?O\'\x82\xc62\xa7\xc5?~\x86\x1b\xcd\xfd\n\xce\xbf\x001S\xa1\xda\xd1\xb0\xbfM\x80J\xc2\xb5\x9a\xd5?,\xb4kn\x19\x9d\xc3\xbf@\xe0(rX\x07\xb7\xbfa2\x81\xb4\x1cp\xd5?\x19\x82l\x9dW\x08\xd4\xbf.\x7f3\xd7\x16\xb8\xd9?\x0f\xd2\x96\xec\xdb\x9a\xd6\xbfs\xa24\xd9T\x10\xb1\xbfA\x07\xee?;\xc3\xd2\xbf\xee\xeb\xb9\x88\xde.\xc4?\xfb\xf2\xad\xa8W\xc8\xdd\xbf\x91\xac\x94\xae+|\xc8?\x0f\xee\xc1\xcb\xb1\xd6\xcf?\x8d\x8d\xc3\x91\xcf\xeb\xd3\xbfN\xb17\x0c\xa4h\xb6?JJ\xb6&A0\xd2?\x8d|\xf2\x18\'\xfc\xcb?\xa0\x10\xe20\xc4\x19\xd7?\x9be\xb1\x16%\x95\xd6\xbf\x80)\xa4H\xe2\x99\xae?\xbc\xc2_(\xbd\x1e\xd2?lY=\x9f;+\xd3\xbf\x1d\nQ\x93\xe7@t\xbf\xd7/\x92\xb6Y\xc6\xd4\xbfID\x9aU\xfa\xce\xd2?\xcb"\xb5\xb3\xfd<\xc3?c\xf8\x05\x08F\xac\xdb?\xef\x96\xab^\xab\n\xad?\x00\xc7;\xee$\x84\xbc?\x9c\xb2\xedn\x15\x9f\xd3\xbf\x83\xd9\x8c$\x82\xa5\xb3\xbf$\xbd@`9\x04\xbe\xbf~&z\xadv\xb9\xd9\xbf\x07M\xf3\x13\xd3\x85\xba\xbfWj\xfd\xb5(\xaa\xc2?\xa4\x1c\xba\xb6A\xdeb\xbf\xf5\x1dB^\x18\x96\xde\xbf\x9c.\xba&\xa4\x1f\xb9?\xc7\xcccSo\x97\xdc\xbfy\x9b\xab\xa5\x1e~\xd1?\xab\x10p\xfe\xedF\xc9\xbf\x0b\xe5\xaeG\n\xa1\xd3\xbf\x1dj\xb2X\rQ\xaf\xbf\xbd\x02>\t\xcb\xe0\xc0\xbfu!\xdf\xdc\xca^\xd1?\x15\xb7\xe2\x1e)G\xd0\xbf\xda\x1e\xc3K\xdf"\xa3\xbf \xb1\x01E\x81\xf2\xc0?s\xc7\xd0\xa8\xa3\x87\xda\xbf\x06Z\x01eq\x8a\xc0\xbf,\x11Tm\xc8M\xd8\xbfl\xf8\xc5\xa7\xe2\x9e\xb9\xbf\x88\xe85\x9d\xc0\xea\xd2\xbfV\xff7g*5\xd3\xbff.q"-\x96\xcc\xbf\xfa\x80_V\xb8\xfe\xd8??Pc\x9c\x93\xa1\xab?\x93h\xf4\xba\x18:\xc5?\xca\x0e\x9a.\x10\x1dx\xbfB\x92"\xac\xa9`\xdb\xbf:p\xd7\xbd\x13\xab\xd6\xbf\tj3\x83\xcad\xd5?\x81/\xa7\x9d~\xc4\xc6\xbfQ\x11\xcd\xd9\xd2\x94\xd9\xbf\xe4&)\xab\x03\xbe\xc8\xbf\x85\xf3\xb2\x81\xd0\x8d\xde\xbf\x17=^\x97\xb2\xed\xcf?X\xb8)\xb9YN\xd6?\xec!w$\xdb!\xd3\xbf\x84\xbb\x9a\xb1\xce\xce\xc0\xbfK\x06A\xb6\x97\xee\xbe\xbf\x1aQ\x1c1V\xda\xbd\xbf\x07\x9a$\x15\xc8-\xd8\xbf\xed\xed\xb1\xfa\x82\xacx?\xe1\xb4\xb3\x8a\x85\xf7\xdc\xbf\x7fZ\xb8\x80VB\xad?n\xb6v\xe9\x1eu\xca?\x85&\xf9J\xc2.\xd9?\xf7\x91\x85#i\xf5\xa8\xbf\x07\xcc`\xc5\x13\xc5\xc3?\xe5T\xef)\x9eM\xbb\xbf\xd3^A\t\xf58\xd8\xbf\x9a\xb4\xdd-\x19\xe2\xdb\xbfnw\xe5\xab\x9c\xf4\xc4\xbf\xc1\xd6\xc1\x7f\xb7/\xce?\xf0U\x10\xea2\x9f\xde\xbf\xcb\xa3\xf4)\xef\xe6\xcd\xbf\xff\xad\x08Glh\xd4?\t\xfa1e\xe8\xa2\xd5??\xbb\xe2A2k\xdb?\x10\x9e\x17\x06\x0b\xb3\xc4?\x8c\xd4?\x89\x13\xe4\x88?\x80foQ\xe8\x1d\xd0?\xc0L\xb3\xf0\xa3\x8e\xd2\xbf\x90\x085\x90h\x0e\xd5?\xe6\xa1)\x81\x90\x14\xc5?\xf1\x01\t\x86\xf1\xf7\xc4\xbf\xfc\x96&\xb3Lt\xaf?O\xdd$\x93\x9a\xd7\xd3?y\xa5\xac\xf0;\x9f\xce?z\x85\xd4\xf0\x86s\x95?C\x01\xf7y\xafz\xcc?|gM4\xda\x03\xc7?\xa2\x02\xb4\x9cp\xee\xdb?S\xcb\x953\xdf{\xd9\xbf\xb62\xc2\xc52\x8c\xbb?\xe1l;e\xf1\x8a\xd6\xbf\x14\xe40D\x93\xb7\xb9?\x07;DH]@\xba\xbfg\x91\xbb\xf8\xb3\xa0\xd2?\x123DM\xd3\x00\xda?\xd2\x105\xffx0\xcf\xbf`\x86\xb6\x00\x91\xa7\xd0\xbf\xb9\xa9\xad\x8a\x83\xe3\xc8\xbf\xbb\xa4\x9c\x9a^\x94\xd5\xbfp-e\xcc\x96\xc4v?\xe7s\x9a\x84\x02\x1e\xd6\xbf\x17\xc4\x89\r\xd0\x7f\xcf\xbff\xdaGCJ\xfa\xb8\xbf\x17\xf3\x93(\x7f\xb2\xd6?\xd3\xda\xbdh\xd1\x9d\xc6?\xbdD\x80,\xb3\xa8\xc4\xbf[/\xfay\xd3\xb8\xb6\xbf\xd0\x1c\x8c\xab\xfd\xc0\xbf?t^\xab\'\x98\xd0\xc7?\x04\xa8\xebq\x8d\xe6\xc7\xbf\x807\x9f\x18\xdc\'\xdc\xbf\xbd(O\xa8\xba\x80\xd6\xbfty\xa2\x99\xc2-\xcb\xbf\xbc\xe5B\xe5\x80\xa1\xc9\xbf\t\xca-\xc4\xfao\xdb\xbf/\x17\xff\x17\xc6\xb1\xcc\xbf\xf1\xc7?\xdc4\xab\xd6\xbf\xb8\xf1\x1c\xc1\x98\x9d\xbc?n\xac2(\xa0v\xd8?\xd3b\x01c\xa6z\xd2\xbf\x11s13%\xbe\xd4?\x9e-\x8c;\xcbk\xbb\xbf#\xb9rN\x81v\xd8\xbf\x13Gg\'\x90\x82\xd3\xbf\xa3\x1a\xc7\xc8\x99\xb4\xd3?xT\xfb\x0f\xbd\xae\xaf\xbf\x8f\xc7\xae`\'\x06\xbf\xbf\xf5i\xaaV\xc6V\xcf\xbf\xdbb\x963\xcb\xa3\xc4?\'\xcd<,\xf4r\xdc\xbf\xec\xc3\x80\xb4s\x1c\xd9?\xc5\xad\xc4m!\xc1\xc8?\xa2V\x81\x0c\x14\xe5\xd6\xbfY\xa0\x86\xcei9\x9a\xbfG\x9f\x0e\xfe\x8f\xf5m?\xc0J\xa5\xa4\x8aq\xdd\xbf)\x07\xb4\xb3\xe5{\xa1\xbff\x17\x03\t\xda\xc4\xb7?\xe7\x9dV\x18J\xe0\xc3\xbff\xa3d\xb4\xfc\xf0\xd8?*\x97R\x03\x92\x96\xc9?\x19P\xcf\xcf\x83\xd4\xb6?\xed\x1f\x97\xb9[X\xcc?\x89\xb8\x16\xf9H\xff\xd9? p\x8d\xc7v\xf3\xd0\xbf\'\xdc#\xde\xf1\xf9\xd0\xbfI"\xbd\'I\x9f\xd2?:U\xa0s\xa6\x16\xb4?\xec\xcf[\xdc\xfc\xf1\xd9\xbf\xb8e\xaf\xad\xaa\x02i\xbf\x95\xc6\xe6\xc8\x9f\x9b\x9e\xbf\x98v\x9fT^\xe0}\xbfr\xdc\xbbX\x90\x07\xd5\xbf\xc4\xbe\xa8\xfd\x92\xf5\xde?\xa5\xee\xffc`[\xdc?\xde;\x87\x0e\x95\xfc\xa9\xbf\x9d\xa3e\x89\xc9\xb1\xb9?\xdc\xc7\x067\\\xe3\xb0\xbf\xd7\xd2\xe0y\xa5\x10\xb4?\xc1\x01\xcbM\xc5X\xd4?\n\xa8\x9a\xbb\xee\xb5\xa9\xbf\x106\x92\xb7\x13\x82p?\xe4\xb0`8\x12I\xd1\xbfK\xb2\x10\xd0\xfb\x87\xa6?\x0c.\xd9\x1c\x80\xda\xd2?\xc0rn\xbe\x95\xc1\xd1?VIY{\xa9\x1d\xca?\t/\xe2T\xcf\x10\xaf\xbfz\xc3{\xb0\xe6\x99\xd8?\xb1\xb8\xad\x9c;]\xd9\xbf\x88\xd4\xec\x88+\xd4\xdc\xbf\xb6\xfb\xde5\x02y\xc6\xbf\xa6\x0f-\xa1!E\xd7?\xe7E\x12A}\x10\xc4?\xe7\xcc\x00\xb0\x03\xc7\xd0?\x90\x85\xd0\xa7\xb0~\xd3\xbf\xa5\x84\xffP\x0e\xc1\xc9\xbf\xf5\xc8=\xf1=\x16\xda?;\xa9\xe5\xa4\x9d\xf9\xcc?<\xcf\x97\xe3&\xb5\xb7\xbf`\xab\xca\x9fE\x16\xd5?K\xdfU\xef\x80\xbe\xd8\xbf%\xceo\x1e\x9d\x18\xae\xbf+\xab<\xe0\x14\x14\xcf?\x19\xde\xea\xc9\xf8x\xcb\xbf\x99\xa0\xfd\x84\xf8\x14\xd1?\xd7\x89\x1e\xa8\xfc<\x93\xbfH\xf2\xff\xf5\xfd_\xdc\xbf\xce>\x18\xbd4\xe2\x93?\x18\x0eB4\xa9W\xa9?\x853I\xb9FR\xd1\xbfk\x1f\xdf\xf2\x81;\xac\xbf\xb7\xa2\xb1\xad4n\xb1\xbf\x9eG\t\xf9\xc3\x8d\xc2?\x83\xa1\xfb9\x14g\xb9\xbfd\xe0\xd7t\xaf\xf4\xd8?#\xeb\t\xf4\x8b\xc5\xdc?\xe5\xe0\xfe\x90\x85\x19\xaa?[\xbd\xac"\x8c\x93\xba?\xaf\x18AS1\x9f\xbf?U\xefe\xd1\xccz\xd9?\xf5K\xf88*\xa6\xc4\xbf\x0f,\x9a\x89P\x03\xc1\xbf1\x07\xc1~\xc7\x88\x8a\xbf\x82\xf5\x8aP`_\xd5\xbfK\x8c\xaa\x9d\x92\xb8\xd7\xbf\xefI\x84\x97\\\xaf\xcf\xbf!\x177\x8e\xf5\xcd\xd0\xbf-\xe4\xcf\x91\\\xd5\xc3\xbf\xbf$O\x14\x9f\x8c\xd4\xbf\xaf\x1f\x1b4\xea\xf0\xae?\\\x08\xb6d77\xd2\xbf8\xa5\xf9\xee\xb4\x8d\xbd?\xc3\xfb-\xf5-\xc4\xd1\xbf\x1a\xd2\xa4\x1cS\xd7\xb1?N\xa1\xdf\xf1lU\xd1?D\xf3\x01K\xc0\xee\xdd?\xc5\x01}\x81?\x1e\xbe\xbf\x02iM\xee\x13\xec\xc1?CC\x8f\x9a\xcd\x99\xda\xbfb\x99\xffP\xe4D\xd3\xbf\xf8\tU?\x91*\xd9\xbf\xce\xe8\x8f\x1e\xc0}\xd5\xbf\r\xf0L\xf4<\xa9\xd7\xbfB\x17U\xe0TP\x8a?\xf0.Y`\xf4\xfa\xb4\xbf%\xf8<\x11\x89\xb8\xd1?\xf2\x13\x16&\x99\xc0\xd8?\xfb\x95U4o\r\xcd?p\x19\x13\xb8v\xce\xd6?\x8a\x17\xa8\x0c\xfa\x04\x8c\xbf\xd4s\xc3\x1dT[\xde?\x9c\xc1\xd0RT\xe8\xc5\xbf\x93\x99\xe9_\x01F\x99?|v/k\xcaz\xbf?\xd8\xe2d\xa9uy\xd5?J\xff#\xaf\xe4\x11\xca?\xe2w>\xe8X\xaf\xd7?\n\xf6\x94718\xd7\xbf\x04\xa3\xbd\x87\xbf9\xd8?[\xeb\x06\xb44H\xa3?.\x9b\xdc\x02\x1a\xc8\xca?\x1f+K\x96%\xa9\xba?\x18\x8d\xec\xdb\x90X\xd7?\xac\xd3\x89\xb9\xb5\x0c\xd7\xbf\xf5\x1c2\x98\xbb\x07\xdc?\xf6\xd7\x84\xc43\xf4\xdc\xbfGGq\xa2\xa87\xda?\xe5\xc5\xca!-*\xbe?\xb4\x0b\xddH\x9e\xa0\xbf\xbf\xb5e:\x19\xf6\xbd\xa9\xbf\x1d\x1f\xffZ\xf1\xd6\xd9\xbfi\xbe\'<\xfb\x9f\xd1?\x17\x1a\x97-P\x84\xcc?\xe9md7\xdb\x8a\xa6\xbf\xc4\xf2\xc7\xb3S\xdf\xc2?\x03A\x043\xf2g\xd3\xbf^\n0\xc6\xe7A\x83\xbf\x98\x19J\x0bu&\xda\xbf\xdd\xda\x16\xd1\xee\x18\xc2?\x11 \xa3F\x9dD\xd0\xbf)\xf2F\xb1O\xa1\xdb?\xf8\xfbM\x9f\xa5\x87\xbb?\x86\xe5\x90\x05\xc0i\xd7\xbf\xd1\xbe\xfd\x12\x16\x88\xd6\xbf\nX?\xa3x\xe4\xc0?Y\x97\xbc\xba\xda\xc3\xd9?\xbc\x9fN\xa6zt\x93?\xbb\xf9^\xb0\x04\xd3\xd6\xbffm\xe5.\x87 \xcd?\x86B)\xf3I\xc4\xd2\xbf\x14\xb4\x9b?tU\xb6\xbfD\xa5P\xa6g\x00\xc5?\xbd\xb0\xb0\xab\xf9!\xd4\xbf\x0f\xd8\xe0\x14\xab)\xac?4\x9aO\n\x96\xa1\xa1\xbfEP\xae.\x91\xcf\xd4?\xe0\xdf`4Nx\xd3?\x8a\xf8=\xe7\xa9&\x8e?\n\xe6,\xa3N\xe1\xd6\xbf\x9a\xdbi{;W\xd3?\xf1\xb2v\xe9;}\xb4?\x17\xfa\xa2\xf4\x13P\xc9?G\xb9\xe6\xf6X\xcb\xba\xbf.Yp\xcb\x9ec\xc3?\x1e\xa7\xccl\x9bH\xa7?:\xe4F\xf0\x19\x16t\xbf\x13t\x0b\x84F\x08\xd3?H\x8d\x8e\x8dk\xd6\xc0\xbf\xd1"\xb5\x8e\xa5\xc2\xc5?\x0c\xac\xc0l\x16\r\xd4?b\x04\xee\x97D\xa9\xc1\xbf\xff\xd2\x9ez\x0c\'\xd5\xbf ?\x84\xa8h\xaa\xd8?\xa8\x14n\xe1\x00X\xd7\xbf\x96e\xde\x14\xb7\x97\xce?\xec\xff\x08\x06e\x9a\xac\xbf],\x11P4\x82\xd0\xbf\xad\xdf(N\xd46\xd9\xbf\x1d\xe5\x1fV\xd6\xed\xde\xbf\xfa9\xf8|vF\xa3\xbfL\xc8\x85r\xec\xd4\xc4?_F\t\xae\xb3:\xd7?\x81\x94\xaem\x18\x86\xd9\xbf\xfd>\x17*\xab\xba\xc3\xbf/\xbc\xbd\x84\x07\xf5\xd0?\xc4\x1f\xe6\x19\x8c\xc9\xb8?o5\x0b\x04\xae\x9b\xd8?B\xb3v-\xb8\xfb\xb6?(\x94\xaa\xce\xbc~\xda\xbf\xb4\xc2]F\xb1E\xb5?\xbc\xac2\xca\x1f\xc4\xe0\xbf\x9b@w\xd6\x8e\xc0\xc3?\x9b\xdf\xd0,]\xc7\xd4\xbfAL\xe1{V\xbf\xc2?\xec[\xc9!\x15\x9c\xd1\xbf\xfe\x8fNKZ\xc7\xce\xbf\x82\x8a\x8a~\xaes\xd6?Y9@)Y\x87\xd5?\x97\xc8P\x87\xbbh\xc5?\xd8\x1du\xd7\x8cM\x8d\xbf\xcb\x8e\xbb\xe1I\xe4\xc3?\xa8TyB\xf9e\xc8\xbf!\\\xe5PB\xa5\xd9?7\xf0}\xdbr\t\xdb\xbf\x95\xbf\x9c\x12\xd7\xce\xd1\xbf/(\xb2\xfb\x92!\xdd?\x85\xbf\xfcsD\x19\xc3\xbfh\xaf1\xef\x96<\xdc\xbf\xfe\xf8\xe7\xea\xb3\x00\xd7?\x93\x05 \xf9\xf2?\xcc?\xa8e\x7f\x07\xc7Y\xb9\xbf}\xcb8#\xda\xc0\xc4?\x94DB\xbf\xe8J\xd8?\xc8m\xb4s\x1f9\xd8\xbf\xfdB\xc2\xbe@\x84\xd3\xbf7L[\xedye\xda\xbf\xa5\x8f\x9bU\xb1\xc8\xc9\xbf\x0c.\xbfx\xf0\xb6\xc4?\x0b1\xec\x93\x1d\x03\xd5?<\xfe\xd6\x90\xbcB\xc4\xbf\xdd\x7f]\x89L\xf9\xc1?\x85yM\xfb\xb57\xc2?2Tg\xcd\xa7\x8a\xa3?pZ9\xe7\x0eU\xc5?\xac\x92\x99\x08<G\xd8\xbf\x8eke>o\x9f\xcb?\xf5\xe1tC\x02\xec\xc4\xbf \x19\x1aa/\xba\xc4?4\x81$7\xcd|\xc8\xbf\x18s/\xc2\xbc{\xca\xbf\xb9~m\xb2y\xcb\x9f?+.F\xa6-t\xaa\xbf\xbc\xd7\x1d{F5\xc0?F.\xd9\x10\x00\n\xd0\xbf\x06j\x1d\xc7\xb6F\xc0\xbf\x0b\xd2\xa7p\x0c\xd4\xdf\xbf\x1e\x8c\xed\xea\xba\xd0\xa6\xbf\x1a<\xf6\x8a\xcf\x86\xcb?u\x07!L\xca?\x9a?\xa9\x9b\xbe\x93)\x1b\xd7\xbf \x1e\x91\x98\xd8\x9d\xcc\xbf\xcf\xc0X\xaaOW\xdd\xbf\xa5\xe1F\xe2-\x88\xb2\xbf%\x8d>\xcd\x99W\xc6?\xeb>2\xd9\xe8>\xc7?\xbd\x03\xe7\xd2\x19\x8b\xa4?8i\xbd\xb3\x9c\xaf\xa6\xbf\x8a\xbc;\x7f\x8d\xc9\xcf\xbfX|\x95+\xd1\x85\xbf?\x10\x13\x96xMu\xcb\xbf\x12#[\xed5c\xc1?0\xccF\xc3\xfc4\xbc?\xbe\xb0\x98\x85;}\xcb\xbfH\x81\xbf\x85\xfau\xc9\xbf\x8c\xa7\x08D\xedp\xda\xbf\xfc=\xc7\xa4\xd4\xa5\xd6\xbf\x16}\xfe\x17\xb9\x0f\xc9?jTF\x85\xa4#\xb9\xbf\xf9\xdec#\xf0E\xc7\xbf\x96a\xc7W\x7f\xbc\xb5\xbf\xc1N\xc1\x11\xa5\x16\xbe?\x9e\xd6(\x81\xa8R\xd7?\x00\x8b\xd2\xc3\x96\xba\x83?\xc4]if\xfa\x10\xc2?\xe6\xd8\xf1Y\xf8\x02\xd5?P\xecO!\x13h\xd9\xbf|\xf5\xa5\x994s\xd6?\x1fLZ$>8\xcb?\x13\x04\xe4\xbdJY\xc2?\xaf\xf7\xcd\x84Aq\xd7\xbf\xb1\x90PW\xf3\x96\xd3?\x1c\xaf\xcb\xb5\x8f\xb6\xda?(\xac\xcb}p\xbc\xab?\x91F\xcc1\xf6\x0fg?G\xbf\xe8\xd6s\x02\xcd\xbf\x86a\xe3\xe6\x87\xb0\xc6\xbfQ\x13OL2\xdb\xc9?\xc6q.\x81Iu\xd5?\xb2E\xf4\xe0\xc7\xb7\xcc?\x98i\xf9\xfd\xa0\x9a\xc0?\x85/\x88\xac\x987\xdd?\xae\x8f\xa70\xa4\xd3\xc6?\xc8\n4P\xaf\x8b\xc9\xbf\x18\x1b\x9c70\x8b\xdd\xbf \xd0\xce\xeb\xfa\x8c\xc6\xbf\xc6\xf4|\x16\xcab\xc1?A{\xd3~\xa4v\xda\xbf[n\x84i\xf6\t\xda\xbf\x00\x9c2|\x9f>\xd5?1\x15#\x91k\x13\xc1?\xf6\xdc\x7f\x15B\x88y\xbf\xb3\x83ji\xbd\xc4\xb5\xbf\xdd\x88\x93.\xf4\xa1\x88\xbf\xd7\xf7C\xb3\x06\x0c\xb9?A\xba\x04U\xc6\xa2\xc1?zY\xccS\x1d\xcb\x9d?\x9b\xacRN\xbc\xdd\xaf?\xfb\x96\x94\x04\xe7\x84\xdc\xbf?\xa3\xc7\x96~\x8d\xbc?l\x14\xef\x13\xec\x95\xc7\xbf\x8dd`\xd2\'\xb8\xdc?\x9e\x05\xed9\xa5\xcb\xd2\xbf!\x93s\xdc\x88\xf9\xd7\xbf\xf2\xaa\xcd\x1d\xfas\xcc\xbf\xefq\xfa\x11Wt\xd9?\x8b\xce\x18UT:\xb1?\x02\xbc\x18\xa8\x0c\x92\xd2?\xaa\x8c\xd6o\xe6.\xcd\xbf\xb1+=y3\xa2\xd7?\x0130f\xe6\xc9\xb3\xbfL\n_\x81\x1d\xf3\xb5\xbfb\xbcS\x86x\x8f\xb3\xbf\xf8\xfd9\xa1\xfdE\xb5\xbf\xb5S%\xd7?6\xc6?\x99\x99\x96X}\xdb\xb3\xbf#;,\xd7\x0b\x89\xd7?W\x15gcBQ\xd3\xbf\xfc3)\xa4\x00\xf5p?d!\xdcT\x92.\xcd\xbf\xf6\x07\xcb*\xd1#\xcb?\xe6\xc02Q\xc6G\xdd\xbf\x96l\t\xcf\x7f\r\xa1?\x0b\xfeYYmI\xd5?X\xe5\xf4\xd8m#\xc9\xbf\x8e\xbf\x8e\x17\xce\x97\xd8\xbf\xc9U\x08\x93\xa0I\xd7\xbfn\x91\x9al\xe8c\xd0?\x92\x88\xb2?\xac\xe1\xde\xbfh\xd37gx\x1d\xb6\xbfa\xf0\xa6D\xc6\xae\xdc\xbf\xa2H\x07\xf2\x1b3\xd2?c)0WD(\xd0\xbf\xb7-\xffV\xe5;\xc9?\x0ej\x10\x9d\xe2\xdes\xbf\xba\xd9A\x84\x0f\xe4\xaf?\x8c\xad\x80\xc0u\x9a\xc3?\xf8\x91\t\xf8\xa2\xb6\xd6\xbf\xa5\xbahI\x12a\xcb?y\x16y\xbb\x1ab\xd8?\xbc\xa5\x8b\xb01K\xcc?\xb1/\xf7z\xca?\xd2?\x95\x1c]q\x08\xf0\x9c?Z)\'\x12\xcbp\x94\xbf\\\x06\x98J\xb7\x9c\xcc\xbfZ\x04\xf4:\x89f\xd7?\x02{\x8d\xd9.S\xc4?\x17\x0fi\xc3\x94\xdf\xbd\xbf\xce\x8c\xdd\'f%\xc5\xbf\x91\x93\xdc\xc0\xda\x9f\xbf?h\x19\xef\xf7\xffB\xda?N$\xee\xc5\x0c\xac\xc7\xbfp\xd4\xaf\xf8\xc6u\xd4\xbf\x87\xefw\xcf(e\xd6\xbf\xa8\xd2x\xba`5\xdc?\x98\x1f\xe7\x0f=\x1e\xd7?\xf1\x80\xddTC/\xd2?W \xe6\x18(\x1c\x9f\xbf\x16\x8cV\x82\xb2-\xd4?*B\x07\x87\xc4\xd9\xd6\xbf\x91v\xd6\x00$\x8a\xd4\xbf\x8c\x89\xb0Hu=\x85\xbf&m"\xcb\x06!\xdb?CuB\xef5\xf8\xc0\xbf\xbb\xaa\xae\xa0\xf0\xb0\xd9?\xf7\xf6s\xd9\xa1\xa8\xa6?\xc0\xee\xfa_\xc1\x1a\xab\xbfD@\x86D\xa4\\\xda\xbf RTWJ\x86\xd9\xbf\xa5\x1fM\x1b\x10\xa8\xce\xbf\xbd\x99\x9f\xa3\x0f\xfc\xba\xbf\xb1\xc5\xfdi\r\x84\xa1?\xd4g\xda\xb1\x87\xb8\xbe?\xde:\x1c|m\x12\xd6?\xb2y\xb9\xc2B,\xce?\xf6C\x03\xcf\xe8=\xd4?\x91\xb2\nQ\x99\xf9\xde?\xa7\xef\x9d\xab{y\xa2\xbfs\x0b\xe2\x10\xee\xa1\xd9?\x92\x93;:\xb4\xcd\xd1?\xd1\x11:\xbbr\xe6\xc8\xbfc\x7f\x83\xcc\xfd\x0f\xc5?\x96\t\xc2\x9fS\xb8\xd4?w0\xe4\x0f\x13C\xbc\xbfy\xe4\xc9\x89*\xf7\xd3\xbf\x93QG\x18\xf7\x1a\xc0\xbf\xc7\xd8\\\xf2\xaaw\xbd?\x04A\xb2g\xee\xa7\xae\xbf0\x1d\xcd\xe3\xcb\x82\x96\xbfS\x0fV\x0fq\xd1\xd3?\xecy\xf6_5\x89\xc2\xbf\x8d\xfa\'\xc2DT\xc6?Y3!f4\xb1\xb4\xbfp)k\xd1D\r\xdd?\xc6\xc1CPt\xb7\xc4\xbf"\xe4\x81>\x0e\xb9\xd0\xbf\xb9\xd4\xe5N\xf1\xe8\xcb\xbf\xfe\xe7\xc2\x1c\x06\x06\x96?\t\xda\xc2\xca\x07\xff\xd9\xbf\xef\x873\x19\xcb[\xd9?\xbe\xb1<\xcf\x8bP\xd2?\x85\xee\x91\xf1\xa7W\xa2\xbfm\x8d\xb6\x8d\xc44\xa0\xbf\xb7\xad\xef\x11\xae:\xd3\xbf\xddvR\xa8\x9f\xff\xd4\xbf\xa7|i\x89I\xa3\xd0\xbf#V\x12\x182\xeb\xc2\xbfh\xc2\x1d1=\xf0\xad\xbf\xe8\xf9di\xfb\xdf\xd6?\xb0\xd5\xa5\x11\xd5\x92\xd4\xbf\x0b\xe90\xba\xf4/\xc7?\xdf\x99q}>*\x9e?\xf4\xbb\xf9\x01\x9ck\xbb\xbfIhl\xde\x94:\xd1?|\x84\xc0}T*\xdd\xbft4\x1a\xa4!\x83\xba?N\x01\xe8[\x92t\xd5?\x90\xa1P\xb9\xff\x89\x94?#\x1b]\x9euh\xd8\xbf|\x0e\x10V\xf2\xd3\xbc?5\x1e\xfcMd\xd5\x87\xbf\x07\x02\xc8\t\x90\x10\x98?\xd0\x19\x88I\x8f\xbf\xc6\xbf\xed\x0f\x9c6\x86\xea\xc7\xbf-\x86c\x1f\x14\x1e\xd6?\x96S\xd4\xd8\x93\x8a\xca\xbf%v5\xe5\xbd\xcf\xb5?Ug\x07\xf8*\xdb\xd5?\x86hE\xadx\x83\xde?|\x93d\x9b\xe2\x1d\xba?%\xb8\xbb\x02\xe4\x80\xc4\xbf\x1e\x91x\xf9\x8d\xb2\xdc\xbf\x818u^\xaex\xd6?\x9f\x127-\xd6\xd8\xd6\xbf\n\x94Q\xc9!\xb7\xd2?\x0c\xc7\xaa9\x9f/\xe0\xbf:\xed\x12\xa5\t\xed\xb8\xbf\x95\xbb\xca\xe4\xeb\x15\xdb\xbfelE\t\xd6\xc7\xd8?\xb8\xdf\xc6\x92\xc8\xbe\x99?\xfd\xf3\x1b#[.\xdb\xbf\x7f$\xb0\xb7\x96~\xd8?\xcetM\xb2\\\xe1\xe0\xbfz\xb7\xd7\xcd\xb9\x16\xd5?\x84\xe7k\x04+4\xb6?\x86\\\xe5\xecFt\xdb\xbf\xef\xc9^\x9e\x00\xfe\xcc\xbfx\x84\xfb\x1a\x12C\xd6\xbf\x83_x\x15l\x9a\xc2?\x91\x10\xa3\xbc\xf5\x95\xd7\xbf\x99:^\xfcaU\xcc?\x1d\xe2.\xc3t\x85\xc4?s\xdc\xff\xc4d\x18\xd3?|\xe1\x11\xdb{\xa5\xcc?z\x0f\xc4\x8c\xdf"\xd9\xbf\xd2\x1dUB\xabN\xd7\xbfH\xd4\xbe\xeep\xdfn?\x9d$\x1cVip\xd7\xbf\xb8]\xcc\x7fJP\xbd?1\x027\xe1\xc9}\xc0?C\x19\xb7\'d\xcb\xdf\xbfe|\tb\xb9\xce\xd1\xbf\x1b\x05\x10\x99\xb6\xfd\xd1?2r\xf5N\x7f\xec\xda\xbf\x8f\x12]\x01\x9d\xac\xcf?\xe2\x8e\xb0RMu\xad?\x8f+\xa0m\x11R\xc4?K\xbe\xe9\xed\xc2b\xd1?\x84\x16\xcaJ\xed\xb3\xa9?\xbb%\x0f=Wg\xc1\xbf\x1c"S\xdf\xc2^\xda\xbff&\x82<\xcb5\xd0?\x0c\xe6\xbc\xb2\t\xa5\xb2?\x9f0)\xd2\x02\x1d\xb7?K\x1d\xc0\xbao\xe8\xc5?\x16\xeeefe\xbe\xb9\xbfW\x1cB~q\x17\xc9?\x1f[X\xa6_N\xc9?D/\x11\x0c\x0b\x91\xd1\xbf\xb3Q\x80.\x1c\xd6\xc0?\x18\x1fC\xechQ\xd9\xbfz\x1d\x9axU+\xca\xbfO\xed\xd6\x1cv\xd3\xbc\xbf\x98\xdb9^,\xf7\xc5\xbf\\\xb9\xad\x1f\xc1\xc0\xca?\x95\xcbI{\x05\xcc\xb6\xbf1\xd9\x026\r\xa2\xc7?Db\x87\xc7\xf3\x86\xcf\xbfdK8\xf4\xe3\xea\xcb\xbf\xef$:Q\xdc\x18\xdd\xbf\\\xd6\x86\xc9\xea\xf1\xd4?n:\x08\xe0\xefm\x9a\xbf\x01TF`\xd1\xe4\xd1?c\x8bM\x96\xb0\xbc\xd3\xbf\x15I\xbc&\x92^\xcb?\xad.\xd2\x0f\n6\xd3?\x12\xd86P&\xfc|?5\x84\xee;\xf7d\xd5?\xb1\x1e\x86*WA\xca?\xc7\xd5\x17$\x08v\xd4\xbf"\xde\xd5\x06<\x9b\xd0\xbf\x8d~-&\xb1\x93\xc7\xbfD\x0e\x148\xfb\xf0\xc7?:\xb4\x8e\xd3\x1d2\xca?\x00\x88i5\x1f1\xaa?IE17&\x0f\xd1?\xfc\xd7\xd3\xe3u-\xbd\xbf\xf7E2\x06]\xa8\xcf\xbfg\x89\xf8\x18}\x0c\xb5?\xec\xf5\xa4\x7f/\x01\xd7\xbf\xae\xf3\xcf\xf8\xf0\x91\xde\xbf\xbb\\\xa9\x7f\xbc\xf7\xc8\xbfyi\x00\x80\x0f\xc8|?\xcc\xd1N\xef\xbe\xb7\xb9?\x8c\xf1\xe4i\x8f\xaa\xd5?\x9e\xf2\xee9\xa2\xa3\xd1?\xee\xa5\x88^Ad\xd6?\xd1\xd59\xf7\xf28\xc5\xbf\x7f\xaa.r\x01\xb5\xa3\xbf;\xd2\xa8@k{\xde\xbfL\xd6M8p\xa2\xc9\xbf\xd1\xab.V=G\xc2\xbfC\x92\xa4z\xa6\x8e\xc0?\xf6\xacgK P\xdc\xbf\x99\'6\xe0\xb3\x1d\xb2\xbf\xdb3\xff;\xc3\xe0\xd8\xbf|\xba\x10\x8a\xf6B\xb9?\xf0#\x00"\xa1\x9b\xd4?\xcd\x1a\x08\xdf\xcaA\xd8?o\r/\xcd\x1bg\xc4\xbf\xb8h\xe4\x97\xdb\xa9\xdd\xbf\x94\xf2>\'U\xb1\xd6\xbf\xec,Pv\x0e\xf3\xd7?\x17\xc7a\x05\xbc\xb1\xdc\xbf\xb8\xdb\x1b\x17^/\xca?\xafyz\xbe\'\xe9\xb3\xbf#\x14&1\xc7\x81\xd8?\x10\x8cy0\xa6\x13\xdb\xbf\x01n\xe8\x12\x88\xf2\xce?\r\xe4U\xd1\x1b\x86\xda\xbfW\xdb\xc4wA\xde\xc3?_\x1b\xeeh\x1a0\xbb?0\x0f\x05\xac Z\xc1?\x17\xc2f\x0e}\xa6\xb5\xbf\xe7s\xb6\x03P\xca\xa1?\xeb\xf1{`\x9b\x87\xd4?\xe0F_\xf3`\xc1\xa5\xbf) \xfeT\x85S\xd8\xbf\xde\x84\xb1\xbe\x84=\xd6?\x16,&\x04\xcdK\xd1\xbf\xc5^u ]\xb5\xbf\xbf\xb4G\xc7\xea^\x03\xcb\xbf3[4\xd1>\xdc\xcf\xbfm<Y\x10!\xea\xc0?\x94\xbe\xdd\xfeD\x9c\xdc\xbf\xff\xa5\xef\x86#\x0e\xb9\xbf\x91p\x81\xba3\x08\xb6?\xe9$>m\xd2\xce\xd6?\xb6r\x12\xdd\xd3@\xae\xbfg)\xaa\x96A\n\xcc?U/R\x83\xc5\x92\xc6\xbf\x98\x81\xf0\xfa\xe6\x85\xb6\xbf,y\x04\xc0\x0e6\xd1\xbf\x9c\x07\x84-\xe0W\xc5\xbfM\xbe\xa8@\n\x81\xd7\xbf\x06\x11\xbc\x19\x92\x96\xd9\xbfz~\xcc2\\;v\xbf\x83\xb9"`j\xf2\xd2?\xc9\xc8y8\x8ck\xd8?\x9e\xb8\xf0\xa5c=\xc3?\x8e\x8dU\x83\x87+\xd5\xbf\x0b\x1c\x91\xb3\x8f\x1b\xdc\xbf\x08`\x82\xc5+\xfe\xd5\xbfY"\xac\x19\x1f\x90\xc4?\xa7pq\x03e\x16\xd8?\x0b\xa7\x02\x1c\xd6\x8e\xbb\xbf\xad\xd1Dy.i\xd5?x\xa65E\xdd_\xb5?L\x04\x172F\xf2\xcf?\x80\x9d\xfc\xcd\xfc\xf9s\xbf\x9d\x9f\n\x0c\xfe/\xd9\xbf?X\xa4\xb8\xed\x14\xb8\xbf\x11i{&+\xf4\xc6?\xbf\xda\xb3\x1b\xa0\xfa\xde\xbf\xdfR_\x0b\x08\t\x9b\xbf\x01\x9b\x95s\xba\x01\x95?\xba\xad"Cqe\xd5?\x8fv*\x80\xd5m\xd4\xbf\x11\xa45\xca,\xb2\xcb\xbf\xee\x87M\xa3#\xc1\xc9\xbf\xa49\x03\x96o\xaa\xd3?[\xff\xe4\x04\x88\xf6\xbd?\x91\xe2\x7f\xa2\xa3Y\xd0?3C\x9e\xf4\xba6\xc3\xbf\xd6\x8f\x0e\xfbxk\xd8?\xa1\x02\x88\x83\x8bM\xdd\xbf\x8a\xd9\xab\'\x84\x8e\xd7?\'\xa1\xe1\xf2\xcd>\xd3\xbf\x1d\x9a\xd8\x98\x11\xce\xd3\xbfQT\xb3\xed\xa6\xe4\xc6\xbf\x16\x07\x04u\x0fy\xdb\xbf\xcea\xd9:\xb6\x93\xd2\xbf\xd3\xd6b^;\xdab?\x96FC\xc1\x94s\xda\xbf\x98E\xdf\x18\x90\x89\xce?^\x89\xb1\x9a\x88\xfe\xdb\xbf\x0e\xaa\xf6\x98\xf4\r\xe0\xbfR\xfd\x12|\xd6PS?\xd6R8%^\xb42?\xb7\xfeP2L^\xb9\xbf\x14\x85:K\x89H\xd1\xbf\xc0\xf3\xb5m\xe8\x05\xa4?f\x7f\xd6,\x16 \xd3\xbf\xe7\x1e:$\xc4\xb8\x86?\x15\xf1d\x13\x1cS\xdb\xbf\xd7r\xc39\xe1\xe3\xaf?\xc3\\y\xb2\xa0V\xd6?e\x94\xda\x807\xc0\xd2?\xba\xf8\x14\x97\xcdt\xcd\xbf\x93f\x81&\xc3\xcf\xd8?}\xaf\x80\xdb\xc0\xf4\xda?j[\x80\xc7\x17\xec\xd0?k\xe5\x96\x1c\xfa\x97\xd7?nH\x98}]\xee\x81?~K\xf7\x1c\x90!\xd9?\xa6\x13\x00nb\xb2\xc0\xbf\x8f\xc3@Y\x99\xe0\xd0?7\x1aIU\xdf\x19\xd6\xbf\xe6]\x04\x8d]\xd9\xa9\xbf\x00^\xe4\xb2\xdd\xdc\xda\xbf\xbd\xaa\xa5\x81\xf2-\xaa\xbfu\x81\xe2\x01{\xe7\xc1?\xdcOT\x94\x8a,\xd1\xbf\x14\x14\xf9SH\x94\xc5?i\xe1\x02\xea\x1dH\xc1?\xbdX\xbb\x1e\xc7\xdc\xe0\xbf\xc7\xc5MM\xa0\xfa\xa2\xbf\xf5n\x98\xc6\xdaV\xd9?\xd6-l\x00\xb5\xcd\xcc?\x99\x96\x1b\xaa?v\xca\xbf\x04\x15\xe6T\xe6\x8f\xd3?\xd8[\x92\xe6\xd3\xd8\xdf\xbfO\xd7\x1e \xf7\xb0\xd6\xbf\xcbc#\x11\x9b\x07\xc5\xbfJ4\xb4\x9fHF\xb8?\xa4[\xedv\xc1|\xd8\xbf\xba]\xb9\xb1L\x83\xd2\xbf\xa2\x14\xe0isS\xd9?\xac\x7f`g\xaf;\x98?u\xb1\x04(\xc3\xb1\xdd\xbf\xfa\xd6^r\x08\xc2\xd8\xbf/Y\x11\xb1Y\x87\xca?\xbcC\x9dt\xc5P\xc3\xbf ?\xfe-\x8b\x9f\x9a?\xe7\x10\x84\x935\xb2\xab?\xb7\xb9:\x96|i\xa4\xbf\xd4:/Y\xa9\xdb\xd6\xbf\x82\xe4:\xd8&\xca\xbf\xbf\xf4\x11/\xed\x80\x07\xcf?/\xc1\xc7\x80\x9e\x89N\xbfp6k?\x9e8\xd9\xbf]v\x99vk\xe5\xd6?2\xfeC*p]\xaa\xbfE\xa3\x96\xfc\x914\xce?\xc9\xf5L\x92I\xa8\xd6?\x19\xaaA\xef2\x81\xa7\xbf\x01\xcc\xb2\xcec\x18\xda\xbf\tdq\xd9\xb6|\xd8?\xeap\x96\xed\x04\x96\xcf?\xa7V\x06\xdd_\xcc\xd1?\xe1^\xbe\xe8\xc9\x18\xd0\xbf\xa3\xc0s\xf7\x1a\x85\xd6\xbfC\xbd;\'I)\xa8\xbf\xcd9\xb9I\xdfq\xc2\xbf0\x13\xc8\xd8\x98Q\xbf\xbfJQ\xa7Y\x08u\xda\xbf\x04\x95\xb6J\xd41\x87\xbf\x87.\x86\xce|\x0f\xd0?4\xd5 9\xea\x90\xb2?\xeeB\xfdn\xc6\xa9\xc1?\x13z\xe7\xfe\x863\xd0\xbf\n(\xf4\xebn\x9b\xb8?9;7Vc\x9b\xd5?\xbc6\xc5\xe0\x94d\xbb\xbf\xb2b6\x1e#Ow?2\xfc:1\t8\xd9?FC\x88\x9106\xb1?\xd4\xcc\xc5,S\xa3\xd3?:\x8d^\x00\x1e\xd7\xd6?\xf8\xf8\xc6<\x7fp\x92?\x12\xa7\xa3\xff\x85L\xc6\xbf\x06\x9d$}\x15\x9a\xd0?\x0f\xc9\xf6`\xb3A\x94\xbf$\xe7\x0762\xb1\xd7?\xf0\x83\xde@j\xc1\xd1\xbf\xe5\x0f\xae(bG\xd9?\x97y\x99\x89\xdc\xaa\xc7\xbfq+E3]\xa9\xd9?Uf\xa8\xd2\xa27\xc8\xbf\xdf\xc6\x9d\xca*8\xd7\xbf\x8a7\xb9m\xe0\xaa\xd2?\xd30\x84\x0em\xe4\xd5\xbf\xa5\xc4\xa1\xc5\x1c\x15\xd4\xbf\xdf\xa8\x15f\xadj\xbe?\xdeJ\\\xaf\xea\xa6\xd9?\xfcnf\xc0N\xa0\xd9\xbfQ\n\xb1\x08F\r\xba?o\x03\xcaP\xbd<\xca?\xd6NA\xf0\x91e\xbf?\xa3\xcb\xe0p\x169\xd0\xbf\x03\xdf)\xab\x1d-\xd0\xbf\xa4o\xbf-\xeb{\xda\xbf\xb3J\xe1\xbc[\x96\xc3?\x08\xe0\x81(j\x96\xca?\xb9\xe4\x02\xd2\xea\n\xdb\xbf\xaf55\x1a\xdd\n\xd5\xbf\xb67Z`Cf\xa5?j\xdb\x11\x82\x82\x8e\xc6?\n\xea\t\n\x1a\xea\xd4?\xf7p\xef\x86\xbd<\xd7?5\xf5\x8e\xc2G\xf9\xd3\xbf\xf5\x10\xf1\x8b\x96\x1e\xd5?\x9b\xcf9D\x7fj\xc7?\xbf\xd7_Yb\xfe\xac?\xe5\xaefc\xc4O\xbc\xbf\xe8\xa9\xa5\\\xac\xfd\xdc\xbf\xaa\xa8\xe5\xf6\xe3\x80\xb9?}\xcb\xfbL\xd5\xa5\xe0\xbf\xbc\x80\x95I{#\xbd?\xf0P\xe4`\xe1\x12\xdd\xbf\x12\xad\xc8h\x0c\x13\xce?\xb7\x1e\x06\x91\'\xa8\xd7\xbf\x0f\xa6w\x87\xe7\xb9\xd8\xbf\'\x03\xa8A%\xd6\xc5?U\xdd\x85\x065\x03\xc9\xbf\x1b\xafL\n\x13j\xd1?\xea!\x7f\x8c\x85\x02\xb8\xbf<I\xe0;j\x8c\xd4\xbf\x96\x11\x0f\xa9\xc8\x07\xd1\xbf\xb4=\xfaeG\xc6\xa6?C|\xffy\'U\xe0\xbf\xcd\x07h\x1e\x90t\xcc?\xbb\x01\xfcgx\\\xc2?\x02M\xc6\t\xf3\x8c\xd6\xbf\x98\xf8\xeb\x06:w\xdf\xbf\xdcR\xe3\xd1\xc36\xdd\xbf\xf9\x03\x8a\xdc\x11\\\xd8?\xdd1\xa0m\x96\x91\xaa\xbf\xe8\xd5\x9f\xce\xbfv\xb5?#\xa9\x12(|D\xdd\xbfu\x8c\xdeR\xa6\x13\xb2\xbf%\xd9| \xf4J\xbf\xbf\x1f"k4?L\x91\xbf\xce\x18#(\xfd\xb2\xdc\xbf\x11=ZK\x9fh\xd6\xbfZ\x01\x99\xe0\r\x85\xc0\xbf%\x9b\x92\x02y\x13\xd6?8\x02h_\x9a=\xac?\x7f\x02\x83\xb6\xdf\x0e\xc5?\xeb|b|\xe4\xb2\xd8\xbf\xb3\x0e\xd5\x14\x02\xf6\xd9?\xa3\xcdo\r\x95\xf9\xcb?+q\xae\xea\xf2\x19\xcb??m\'\xcaR\xc0\xd5?C\x03A\x95\xd8\\{\xbf\xb4\xa0\xfaQ\xa8\xd3\xb4?\xdc\xfd\x89\xbb\xc1n\xd6?R\xc1\x9c\xb0M\x0c\xba?\xbd\x07\x8e\xe5%\x9a\xb1?\xa9k|O\xf4"\xcf\xbf\r\xb1bzd\xf7\xc5?b\xef:-\xca\xac\xc3?{\x17;v\xbba\xca?V\x18A\x12M~\xa7\xbf\xd4M\xdd\xd4\xf0\xc3\xbc?\xf5-\xfb\xba\xd4\x06\xd6\xbf\xef\xaeV\x02\xf0\xaa\xd5?\x94#G\xe2\x8b\xc3\xcf\xbf\xef\xf7\xc0\xce\xfa\xe9\xa0?\xa9\xb3\x99\xb8\x1fg\xc3?\x07\xbd\x1d\x8e\xd7*\xda?\x04 s\x11uJ\xd8\xbf*\xe0\x92\x7f\xf8\x8b\xc0\xbf\xfa\x07\x0cQH(^?W7|\xea\x17\xf7\xd6?\xf9d\x1d \x88\xd7\xc0?\xd0{UmgU\xd8?\xacH}\x91\xa8\x06\xb9?C\x12\xc9\xcbG\xbe\xd7\xbf\xd6\xd6\xed\x9285\xe0\xbf\x86f\xaf\xd3\xa8K\xd7\xbf\x15D\x90\xcd\xf0\t\xcf?\x10\xba\xe2\xc1l\x13\xd5?\xc5Uc\xb2W\x18\xc2?F~d\r\x04"\xdf\xbf\x98a?fL\x1a\xdb\xbfc\x9b\xfaa\xacb\xde\xbf\xa0\'.\x14R_\xd7?\x98\xd6K\x15}\xf0\xd2\xbfw\xecV\xaa7\x10\xda?\x8av\x15\xf7\x9c\xf8\x90?C"s\xb9\xbf(\xc7?\xe6]\x00,\n\xe7\xc7?5\x19\x98\x89\x99B\xb9?7\xeb\n\xb3x\xd1\x92?\xce\x06\xbe \xf1\x89\xc2\xbfX`\x14\x07\xf0a\x96?\x84\x84\xf1\xf8\xf0\xf2\x8a?\xb7\x0fQ\xed\xe5e\x83\xbf{}\x85\xe2\x99J\xd9\xbf\xc5\xf72\xe6\x14\xb3\xd9?5\x86+\x87}j\xa7\xbf\x86\x0c)I\x9b\xb1\xdb\xbf\x947\xca\xea\xed\xc7\xba\xbfI\xb6\x8f8]W\xd1\xbf\xf0=\xac{"\x1c\xd7?\x11\xba\xa6\x84\xf4\x9f\xcb\xbf\x1b$N\x0c\x00\xc1\xc0\xbf\x06\x13J\tn\xcf\xc6?\t\xdb\xbb\xe3\x83\xdb\xcf\xbf$\xc8\x10k]\x97\xc0?{\x16\xa7O\x9e\xb3\xa9\xbf\xd67\x07%ct\xd5?\xc1\xe5Jf2\x16\xcb?\xd9\x158\xbc\xc6^\xdb\xbf@\xae\xa2-\xa23\xd3\xbf\xcc\x05\x8d)\xca\xae\xce?s5\r\xc3\xfeg\xd2?\xaa\x8f\x08\x01\xe6\x9f\xc0?\x85\xe6\x05>F\xed\xc8\xbf3\xc0R\xd6F-\xd8?HE8\x9c\x86b\xa9?B\x7f\xe9_N\x0c\xb9\xbf\x9f\x8f\x03\xce[P\xb1\xbfp$\xbb\xad\xa8F\xd2\xbf\xdb?\xf1A\xc6Dl\xbfIJ\x13p^$\xdb\xbf\xd0\x94\x15I\x03z\xda\xbf\x1c+8h\x97\xfc\xd3\xbf]P\xea2\xce\x96\xd0\xbf\xf6\xf6\'\xdf\xdb\xe8\xbf?b\x98\xc6\xb0\xd0\x03\xd6\xbfK\xd6\xde|\xd4\xcd\xd2?\xa7\x0e\xa4\x12YJ\xd6\xbfH\xa7c{\x9d\xb1\xd3\xbf\x0eP9>Dw\xc9?\xda\xd5\xb0M/+\xad?[/`kn\x90\xb2?IMk\xf2.\x82\xd1\xbf\xc9\xa8lU\xb3\xc8\xd1\xbf\xdf\xbf\xb2\xe3\xa0R\xa0\xbf\xc7\xb5\x10\xc2\x7f}\xd1?\x08)7Zn\x9e\xc9\xbf\xaem\x94\xee@z\xb2\xbf1\xc8\xf0\xf2\xd8\x1f\xd3?\xbdv\xd7(\xb6\x0f\xc1\xbf7C,\x86\x91\xd4\xbf?\x88\x1dX\x14\xe9M\xce?U\xc2\xa1si\x13r\xbf$%\xbc0\n\x0f\xb8\xbf-\xd1\xa7LwX\xb7\xbf\xe3\xca\xaem\x9a\xaf\xb9\xbfK\xbd1VM\xbd\xc7?o\xea\xae\x8f]\x18\xc5?@\xffi\x10}\r\xc1?@\xe0i\xa0\\!\xce?\xa4\xa6\xbf)\x0e>\xd0\xbf\x7f\x96B\xf9:\n\xc7?Y\xba\xad@\x85\x9c\xd4?\xdf\x03\x8e~:\x88\xc2?\xd3\xf7\x8e\xc9`\xed\xd8\xbf\xbd\x1du5\xdaq\xd3?m\xa3A\x83\x06\xde\xc5\xbf\xea\xc9GR\xda\x87\xb7?\xaf\x86\xb9\n\n`\xd1?\xbb\xe1\x0e\x01`\x87\xae\xbf!\xb0,9\x889\xb4?b\'\xad}\tK\xd7?Cv\x95\x12Q1\xc3\xbfyz\xe3X\xec\r\xa9?\xaa>6\xe8\xd8\xd2E?\xd6\xa8\x04\xbf\x80u\xd8?!\xdf\x96\x99\xd8\x9e\xc4?\x17x\xc2e\xc55\xd7?\xdbf\xb7\xa2 [\xd4\xbf\n\x96\x15\x80/W\x86\xbf\xb0\x99\xdd&Q\xef\xcd?\xec}\xd4\xea5W\xcc?\x95J\x07\x87\x90\xe6\xd7?Q;\x9a\x85\xbf\xce\xb3?\x95\xfb\x85\xf0!\x8c\xd1\xbf\x9b\xdfRP\x8f$\xcf\xbf<\xf7m"\x01\xdd\xa0\xbf\xc9z\xfft\x19\x9f\xc7\xbf\x91UA\xc1\xfbR\xc2?u\x8c\xa9\xed\x82\xc2\xd7\xbf\x0c\xe4\xb6\xe9\xb2|\xd4\xbf\xc4\x9b\x89\x93\x85y\xda?vzN\x9c\x9c\xf6\xae?\xc3)3h\xe3\xa3\xd0\xbf\xbd\x13z/\x8d\xd9\xc7\xbf\x15\xe6\xcb\xc2\xd9\x05\xa9?A\x18\xc5\xc9oV\xd5?\x96\x860\xf3%\xec\xa0\xbf+\xc8\xf6\xb0\xcd]\xd2\xbf+\xf8\xf7\x07\xf3\xbe\xb8\xbf4C\x18\x89\xcf\xc5\xc8?#I\xd4#\xe6\xe1\xd2\xbf!6\x93\xf9\x87\xb8\xda\xbf\xdd\xbb\\Q-\xe8\xd7?!\xa9r\xeb\xb0\xc8\xc2\xbf\x99\xe37\x84\xe51\xd4?\xd98\xf2\xecW9\xd3?0\xa5\xc6\xbdPx\xbf\xbf\xb2a\x02\xa1\x04a\xca?\xd2\x9b6\x82\xb0\x0f\xa0\xbfY\x8fE\xd9\x01P\xd7?\xca\xdcx\x008\x88\xb0?=\x14q\x02M\xbah?\xe0\x1c"m\x0e\x08\xdd\xbf\x8fp\xe6\xda\x83\xb2\xcd?\'\x17\xf5O\'c\xc8?\x87\xe6A<\xbbu\xca\xbf\x9b\xdc\xbd\xfbBA\xcd?\x11\xad\xe0v\xbc\xb5\xd3?$q\x01\x17\xa1\x19\xca?\xbaO\xdf\xd8\xd3\xd6\xdc\xbf\xe2\xf0\xbf\x15\xa8e\xd0?\xf4f\xaf\x97\xce\xad\xc7?e\xf9\xf7\xd0Ou\xd3\xbfr9P\x81\xcb\xdc\x90?\xcd\xbcU]\xf3\xe8\xa7?\x90\x97\xab\x84\xf8e\xde\xbf\xb3N\x102\x1b\x1b\xd4\xbf\xe9l\xc1B\xfd \xd1\xbf\r\xfc\xc8\x9a\xb4\x13\xc2\xbf\xdaZ\xc6\x12\x95\xbb\xb9?]\xc6\xab\x11\xc3y\xd1?\xba\xc5j\x1a\xd1\xc1\xb1\xbf\xe8\x17!\xbcVA\xdb\xbfzT\xdd\xa5\x86\xb3\xde\xbf\xf1\xa7\t\x0fF\x1c\xbc\xbfN|\x08d\xea\x83\xda\xbf\xe1\x04\xc6\x0f`S\xd8?\x03\x17\xa0\x19\xfet\xd0\xbf\x9a\x00\x05\xfd\x05U\xb9\xbf@\xda\xa7\xaf\xc6\xdb\xbd\xbf\x92\tCaqm\xc6?rQ\xc6C\x81\xfa\x90?\xb6\xe2\xd2\xb5\x8d\xfc\xd9\xbf\x15\x89\xce\xa8|\x06\xd5?\xf68O\xc5\x86\xb4\xc3\xbf\xa5Z\xf7@\xaey\xd0\xbf\xe3\xd2$\xa4\xb0\xfb\xda?_(PWA\xe0\xd1?\x95\xa5\x01\x92b\xbf\xd3?\xd8\xa3\'\xb4&3\xd0?\xa0\xb3m\xea\xf4\x0c\xd9?\x97\xa0\x12\xa1\xa1\xdc\xd3? :X\xa0\x88v\xd5\xbf\x9e\xea\xa9\xb6]K\x80?5>;\xe9\xbf\xdd\xd9?\xaf\xd1$\xa3=/\xd6?W\xcc\xb7\x18U\xed\xaa\xbf\xcb2\xd5\x12\xf2Z\xdd\xbfx\x0b\x85\xb8\xe5\xb2\xdb?\x1cG\x96Q\x84\x16\xd6?6\xc0\x8d\xf0\xdd\x1d\xda?r\x1c\xa8\xf0s@\xd9?\x8c}Ry\r8\xdb?hQ\x98\xf7\x92\xce\xd3?R/Lm~\xf0\xd6\xbffc\xb9\x9a\x85l\xd3?\xb7\x95\x08A\xbf\xba\xa7?2_\xcc\xe9\x80\x04\xc2\xbf\'\x91\xae!\x10\x1b\xc9?]p;|\xfe"\xd4?\xd1\xfdTC\x82\x14\xc4\xbf\xdcH\x1f\x993\x81\xd9\xbfM?\xb6\xdb\n\xe0\xdc\xbf\xc0%2\xc4\xbb=\xd2\xbfk\xdc\xab\x08%\xfc\xa9?\xb1\xc8x6\xc9/\xd0?\x05\xa5\x1e\x99\xd4\xa4\xc2?@\xe5e\xca\x98T\xc0\xbf\xc1\xe0\xf4\x16\x86\xb8\xd6\xbfV\x13\xc9\xd5\x81\x05\xb8?UK\xde\xea\xed\xde\x82?\xc0\x98\xeb\'\x07\xe4\xd6?k\x0f\x15\xf5\x1b.\xb5\xbf\xa2w\x03\xd8\x19\xe2\xc7\xbfM\x90\x98\x83P\xf1\xc8\xbf\xe7\xbe\x1b\x95E\x97\xad?\xb0\xdf\x97^w\xf8\xd2\xbfK\tH\xe0\xec{\xd7?uT\xf9\x8b\xe4V\xd2\xbf03tg\x93\xf3\xd1\xbf\xce\xb7t@\x95\xa7\xc2\xbfA\xb3\xe0\xaf\x87\xde\xb9?\xb4\x87S)Rn\xd2\xbf\xdc#\x18\x91\x0b\xf1\xc8\xbf\x16cp[b2\xd6\xbf\xc0\x9b;G\xbfm\xde\xbf\xca\x95\xf6\xa8r\x87\xcd?TV\x1dd<\xa2\xd1\xbf\x92/\xf1&\x94W\xb2?R\xbd\xd3\xd2q\xc8\xd2\xbf\xc2\x86\x16\xd5\xde\xef\xd0\xbf\xdb\xaeQ\x87\r\xb1\xbb\xbf\xda\x8ex\\\x8dS\xd2?\x12\x98|\xe4\x1a\xbb\xda\xbf\x83v\xfd\x13\x1c\xff\xb7\xbf\xf8\x01\xcd\xb5d6\xce?\x12g\xbb\xdc\xbc#\xb1\xbfUe\xfa\'\xb6x\xc1?\xad\xf7\x97\xa4\xd6\x8b\xd8?_\xb7,\xd1\xd0\xda\xc4\xbf\x00\xcf\x98\x051*\xb7\xbf\xd9u\x82~\xc4Z\xcc\xbfe\x06\xed\xbb8/\xd6?\x9f\xbf\xf8\xde \xc5\xc8\xbf>\xaf\xc7\x92a\xfc\xd0?pT\xc3y\xd1g\xd9\xbf\xe5\xea\x8a=\x9c\xdd\xdb?d\xa4}@{\xeb\xcd\xbfa\xce\xb33\x7f\xe4\xcc\xbf2\xb9\x99\xdd\xfc\xea\xd0?\x96\xda\xaa\xb7l3\xaf?\xd7\xc7\x91\xcd9\x7f\x83\xbfn\xd2x0+)\xc1?w\xb7>,L0\xa9?C\xa6/B1\x80\xb5\xbf\xd0\xdb\xe5\xe6_\xcc\xd4\xbf\x92K\xadB\xa2*\xb3?x\'\x88Uw\xfc\xda?|\xf7\xf1\xc0\xfc:\xd1\xbf\xfa\xd0\xfac\x1c\xbc\xc0\xbf\xa9\xd3T\xe5\xe8M\xf8\xbe\xdf\x7f"\x0c4\xa9\xbb?\x1bi\xf5\x11#x\xd0\xbfL\xd4\xc5)\x0c\t\xc3\xbf\x13\n\x08\xf8\xca\x80\xd5?\x91\xf0\x9fn\x13#\xca\xbf&|\x9f\xeb=y\xc9?\xd3\xb8\x15\xed\xe2\xc1\xd3\xbf\xe5\x9cwY\xf9:\x90\xbf\x12\xfe\x9biDb\xd3\xbf:@>\xace\x95\xb7\xbf\xa4~\xb3S\x8c\xfd\xd4\xbf\x1d\xa6\x04\xd9\xc9\x8b\xa4?R\xd4\x938;A\xd6\xbfr\xe3=\x10u\x10\xc3\xbf)\x83\xf9\x05\x98\x94\xcd?1a\xca\xeb\xca\xfe\xd0\xbf\xc75/!\xbb\xef\xce\xbfc\xe6%\x10\xf6\x19\xc9?\xef\x16\xef\x12\xa7Q\xdb\xbfO\x88\xcaW\x87V\xde\xbfV\xe3\xab\x93\xa61\xda\xbffl\xe6\xdb\xaf\xa1\xae\xbf\xa3(\xb5\x9f\xa6Y\x9e?\xba\xa5\xf8\x9fS\x87\xd8\xbf\x038\xafy\xaf4\xb9\xbf\xc4c\xbb\x9bd\x1d\xcd?A?\xf3\x14\x9fo\xdc\xbf\xcc\xa6\xc41iz\xcb\xbfn\xc6\xde\x98[\x89\xd9\xbf\xbbJ\x87\xfet~\xd9?\x8bc\x8e\x87\x02R\xd9\xbf\xaa\x99X\xb9\xbew\xdd\xbf\xb6_\x14\xeb\xc2\xc7\xdb\xbf\xf0\x02,7\xbc\xfa\xc7?\x96\x00\xf0\xb2\xad\x1e\xc7?\xad\t<`6^\xc6\xbf\x82\xc7\xff\x03\x9d\x8c\xd6\xbf|\xcbK\xe6[&\xd0?\x1fYsA\xc1\x08\xd9?\xfb\xd2\xf8G\xdd\x8f\x85?\x9c\xbbUy!7\xd0\xbf\xa1\x90eq\xea\xf7\xce\xbfNsvmo\xd1\xae\xbft\x98\xf7\x91J\xd1\xd9?\x1b\xc1\xacn9\xa1\xb7?\xba\xeb\xc7\xec\x0cE\xb5??\x96\x14AAD\xd1?\x10i\xc5k]\xe8\xca\xbfp\xda\x1e\x15}X\xc9?\xbc\\\xd5\xa1\xd1\xff\xd0\xbf\x97\xa2\x13\xd3\x9aJ\xd6?8\xed(\x8eK\xff\xb0\xbf\xd9\xf2<$",\xbd\xbfW\td[\xbdv\xdb?\xe1\x95\x1d\xfc$\xd8\xd0?\xb3\xd7\x9eNn\xdc\xd0?\x0fA\x01\xc2rP\xb7\xbf\xfe\xed\xb1`\xf3I\xd9?\xd4\xce\x84U\xbc\xfd\xaa?&\x04\xda_\xad\xab\xdb\xbf\xff0\xe90\xce\xd1\xd0?\xa3u\xc2\xab\x08\xa5\xd5\xbfH11w\x1c\x1b\xcc?\x8d\x94\x88\x90\x00\xe7\xbe?*$\x1bYNY\xd1\xbfe\xbfy\xe2"\x02\xd1?W\xdd(\xd1\xc7=\xd6\xbf\x1a6Hw[\x8f\x9b?\xc9\xa2 \xff\x96\x05\xc6?\xd4\x97\x02\xe3\x86\xbe\xd2\xbf-\xafr?\xb6y\xd2\xbf~\x90\xac\xd0$\x8b\xd8\xbf\xf4\x9fF\xd8fq\xd2\xbf\xc2\xc0\x94\x08b\xf5\xcf?O[\xc9T\x1bE\xc8?\xa4\xc6W$\x9e\xa0\xda\xbf\x1f\n\xa8~\x06\xed\xc5\xbf\x17\xad\x88\xa1\xa8\x1e\xc8?K\x12\xff\x18\xf4Y\xd2?`\xd7\x02ac\x95\x87?\xa2\x01%\xe5N\x8b\xd8? s^lr\x11\xd1\xbf\xccr\xa8r\xd1\x9c\xc4?\xab\xac\x136l}\xb9?\xd5t\xaa\tA\xc2\xdb\xbf#\xdf\x8b\xda\xa1\x1b\xd6?\xa9\xa3\x05N\x8e+\xca?$?\x9d\x82b\xba\xcf\xbf\r\x86>\xab`\xae\xd3\xbf\xa1\x99\x16&H4\xd1?$\x9c\xc0\x1c\\\xfb\xc2?9\x88\xc5f*\xcd\xd8?\xa2\xceA#\x87\xc2\xd3?\xfeJ\xe1\xf0\xc5\xa9\xda\xbf\xa8\x98^\x12\xd6*\xd6?)\x0b<\xce\n4\xdc\xbf\xd8\x0e\xfcP\t\xb0\xc1\xbfl\xd0y\x17\x0e-\xd1\xbfVB\x1e\xde\x7f\xea\xc6?i\xc1\x00\xeb\xe03\xd6\xbfh\x9b>:\xe1+\xd2\xbf\xc7a\xda\x8as;\xde\xbfCN\xfb\x15\xff\xc3\xd3?\xfb\x96[#\xdb\x83\xb9?\t\x11\xed\x00-\xb8\xd2\xbfkm[\x026\xcd\xc4?V\xe4\xbcA\x86/\xd1\xbf\xc0}\xcd\xf52\xba\xc4\xbf\x01?O\xff\x8cn\xd2\xbf\xda\x83\x1c\x92\x8bI\xd2\xbf=oP\x1f3\xfd\x9d?!bK\xae!\x1d\x91\xbf\xdc-M&d]\xde\xbf\xbf\x84\xff\xa4Y#\xdb\xbf\xa2M\xd9\xa3N\xa8\xd6\xbf=q/\xeb\x08a\x94\xbf\x1abf\n\xe7\x8bc?\xb4\xc1I?Y\xbd\xc1\xbf\xd8\xdeg\x02\xfep\xd8\xbf\xd0`\xef\x8b\x14\x89\xca\xbf\xc3w\xd6\x14\xc7,\xd9\xbf\xca;r7z\xbc\xda\xbfy\xa7\x88\x14\x9b\x1e\xd6?\x0f^\xa4\x19B\xcc\xd9?\xd6b\xca\x8f\x04\xef\xdc\xbf0\xa4\xca\x89q\xe9\xd5\xbf\x8e\x1f\x1e\x94A\xb7\xda\xbf\x85\x8e\x937&9\xb7?\xfa\xbe@\x98\x97\x0e\xce\xbf\xad\xae\xe6>\x86\x1a\xb9\xbf\x97\xec\xbf\xaa0\xf5\xc5\xbf\x82\xb1\x04\xe1v&\xdc\xbfv\xdb\xde\x83\xbb@\xa6\xbf\xf5s\x17\x03\x9f\xdd\xd9?H\xf4\xf8)!\xf2\xb0\xbf\xafn\xea1\xcdJ\xa3\xbf\xe8\xc5\xbd\xab\x98\x0e\xd7\xbf\xdf\x15\x11F\x0b\x80\xda\xbf8"\xb5H^\xbc\xd1\xbf\xad\xc9e\xe8gz\xda?\xcc\x7f \x99\x1e\xd4\xaf?[\x0f0W\xd3c\xd7?\x87\xd0\xe6\xac\xdc+\xc8?\xf2a\xe6\xec\xf6\xd2\x93\xbf3\xce\xa5\xe0\\:\xde\xbf\xa9\xdc\x04\xce)*\xc0\xbf\x9ezL\xcf\\\x01\xd7?n^=\xf7\xc7\x02\xbd\xbfP\x95E1\xdfO\xd3\xbf\x11!\xad,\xee\x02\xd2?hI\xb9\x017P\xb4?qu\'\xdd=\x90\xc8\xbf\xb1\xf1pC\x02\xec\xce\xbf\xa3\xd3m\x02\\\xf2\xd6?*\xacU\xcd\x8b"\xd7\xbf\x7fZ&#\xce\xf1\xb7?l\x16\x0eg\x0e\x05\xb9?\xa2V\xe4\x18\xc1f\xb5\xbfgx\xbd\xb9\xf51\xd1\xbf[krM\xec=\xb4\xbf\xec&\x0b\xfa#V\xcc\xbf\x01\x02)\x9b\xec\xc3\xdd\xbf\x14V\x83\x08\x8e\x87\xd9?\xbf\xb2\x96\x81ON\xd7?\x9c\x1b\xc1\xc1|\xc0\xce\xbf\xe3Xh\x1f\x14:\xd7\xbfj__!*\xbd\x8a\xbf\xf7\xeb\x85x\x8e\xc2\xd6?x\x8agg\x19\xbe\xb9?\x19\xef\xffo=\xc6\xdb\xbf\'T0\xc5\x00\xad\xd1?\xd6\xe2H\x1c"|\xd8\xbf\x9a\x07\x0b(\xc5\xb5\xd7?KZZn\x93\xcc\xd7\xbf\xca.\x164\xb3Y\xae?\xdad[\x83\xc9\xbf\xca\xbf\x08\xee\x87\xc9\x86\xee\xd1\xbf\xefM\xe4MnN\xd0\xbfT2S\xa9\xaf\x1a\xd3?s\x04\x04\xeaQ$\xa1?\xea\xecO\x86\x19\xd8\xdd\xbf1v\xd0\xfc\x9f3\x90\xbfA\x9dYy\xe1\xa0\xa1\xbf\x82\x17\xf9\xe6\xcb\xd6\xc7\xbfI\xf2\t2\xac \xce?\xea\xe4\x9c\xe3\xe5_\xd5\xbfs\\\x1a\x1b\xc9\x03\xd2\xbf\xbd\x06\x8fS\xc1\x90\xc4?\xa5\x88*\xb4\xd9\xb5\xaa\xbf\xf1-\xf7\x88>L\xdb?\x18C\xf8X\x10\x8f\xbf?mb\xabq:\xbc\xd8\xbf7\x87\xa3\xed\x8dj\xca?+\xd5\xcd\'\xf1\xea\xa4\xbf\x0f\xc3\x16\x8f|4\xbe?g\xb0|?\xd1Y\xb1\xbfC\xe4\x93:\\\xe3\xd1\xbf\x13Wa\x19\x13H\xc5\xbf\xf6S\xa5z\xc5U\xa0\xbfNMF\x85\x8a\xb3\xc7?\x8a\x81\xd6:\xd7\x1e\xcf?m\x0e\xe2\xe0\xcd_\xd3\xbf\xa6b\x81dM\xbb\xdd\xbf\xfd\x00L|{[\x99\xbf\x03\xb9\'3\xf1\xd3\xd7?u\xa9\x15\x88"B\xcb?}~.<\t\xb9\x9b?\xae}7!\x06B\xc4\xbf\xb1\xd24ml9\xb1?J\xc1\x19\xdc=z\xc6\xbf\xba\x02\xc3\x19(\x99\xdb\xbf\x84\xa72\x088^\xc1\xbf\xad\xa4\x16/3\x05\xbc\xbf\xe2\xd0\xf0\x8c\x87\x8c\xc7\xbf\xf3H\xdf\xa1\xa4c\xce\xbf\xc8\xa5\xda_\xf1\x04\xc0?&\xde9G\x7f\x95\xcd\xbf(\xf5\xbb\xf8\xac>\xb4\xbf\xd7\x07\x0cn\xc9\xf5\xcc\xbf\x0bN\xda\xec\x14m\xd1?\xc6\x98a\x92b\xa1\xd8\xbf,\xf9\xa5c\t\xcc\xb0?\x8b\xe5}C\xb5\xbc\xc9?\xcdN\xbc\xfd\x0c\xad\xd5\xbfAI\xf4\xa9j[\xd6?\x87\x9617\xae)\xcf\xbf\x0c0\x00\xc9\xf5\xc0\xd3?J\x8c\xd0\xb8\xd70\x92?\x97wF\xd5\xf4\xa5\xd0\xbf\r0\xc3\xb9u[\xc7?\x18\xe5\xce?\x87\x87~?\x97\xdb\x07<9\x19\xc8?\x10\x8a\xe4A\x85\x07\xaa?\xc3\x91\xba\x95R\x8c\xa6?~U\x12$r\xd5\xc0\xbf\x04l\xbf\xf2k5\xd5\xbf\x00\xf9\xc4\xdc\xbb\x14\xbf\xbf\xe6\xc8\x85\xd0\xaa\x8c\xd0\xbfm1\xd2\x1b\xd4\xce\xda\xbf\x89\xe8\xe3A\xd7:\xc3\xbfP\xff\xd5\xcf_\xc9\xbe\xbf\xa9\x96\xea-\xfde\xd8?n w\x9b\xf6\xf4\xd3?6\xaeD\xe3k\xab\xd6?\xc9\x84\x04\xe4a~\xc4\xbfDL\xc6\x1c\x9e\x92\xcf?\xb7\xf1n\xcf\xc0:\xc4\xbf\xdb\x12\x13\xbc\x13\xbd\xca?\xcc\x16ZcXA\xc8?\x1b\xf1j.\x1e8\xa4?\xcf\xd3\x90\xb5t\x9d\xd8\xbfs9\x9f\x952\x15\x86?K\xd7\n\xd1\x90\xb9\xd7?==\xf6\xfc\xfc\xba\xbc\xbf\xb2\xe1\xcau\x18\x88\xc1?.\xdc\x90M\x8c\xbf\xd7?9\xec\xd1a\xfbL\xd2?D$\x9dF\xd7@\xdc\xbf0O\x8e\xc0\xd4\x1c\xc3?\r\t\xf5\xf7s\x11\xd7?\xf5\x0b*xY\xb9\xd5\xbf\x1d\x02m[n\x86\x8b\xbf3\xc0\x18\xf0\xa9e\xd8\xbf\x1d\xfb\xa2\n\xea\x7f\xbb?`m\x87\x93s~\x99\xbf\x9b\x89mT\xf7\x0c\xb1?\xb6\x8a\n\xd9\xad\x97\xad?\xdd\xf5j\xbcjy\xd4\xbf\xe90Y\x14JD\xc9?4\x82\xb1z\x90\xb2\xda\xbf\xb4\xdf\x15\xe3\x96\xa7\xb3\xbfb\x10(t_\x95u\xbf\x08\x90\xbca\xc2\xbe\xd6\xbf\x89D^\xfa\xcb\x8d\xb1?K\xc4\x87\x0c\x0bJ\xb3?\xf0\xe7\x03x\xe0%\xd7?\x14\x95\xe8\xc2\xd4@\xdc\xbf4\xe1}\x19k\t\xd2?\xdb\x9a\xc5\xa6\x82\xef\xd7?*kfw\xeb\xc5\xaf?\xf6s\xfa6\xa6\xae\xb7?\xcb&\xaa\xcc\x10\x08\xc7?4\x1e\xe8\x18\xf6=\xc1?\xc2\xfe\x06C\x05o\xe0\xbf\xcc*>\xec\xac\x98\xd3\xbf\x83\xab\x9e{S\x91\xd2\xbfx\xbfXC\xbc\x10\xc8\xbfH\x05q\xab\x0e\x11\xd9\xbf\xd0\x7fm\xb1\x94\xdd\xac\xbf-Lzp\xa4\xdc\xd9?\x05\x14OR5\xeb\xd8\xbfq~;Pc\xcd\xca\xbf:\xa4\xfc\x1d\x01\xb2\xd1?!\x1d>\xd8m\x0f\xcc\xbf\x0eW\x066%\xcc\xd8?\xb6!\xf1\x81\xf9\x13\xc4\xbf\xbd\x95V\x9aP\x12\xd1?\x0f\x1b\xb2\xa4\xa1\xb6\xa8?E\x82\x98Z\xb2\x99\xdb\xbf\x02s\xd2sJ\x0b\xd1\xbf\x19l\xb2\xe0\xd4\x14\x89\xbf\xed\xfa\xde\xf0\xd6\x1f\xcf?\xb8\xb1$$;\x1a\xde\xbf\x87\x8cE\x12\x00U\xce?\x18\x08\xea5F_\xbe?\xac\xfaK\xa6:\xd9\xd0\xbf\x0c5\x1d\xae.h\xdf\xbf*\xf6~\x8d]\xf7\xd1\xbfq\xean\xc8\x1c\t\xbd?\x99eCX\xd6\xee\xd8\xbf\xe8\x866\xd9"\xae\xd2\xbft\x90D\xb9<\xde\xd1\xbf*\xd4\xbe\xcds\xcf\xd4?\xbe\xdc-\xa0\xe3\xd8\xdf\xbf\xdd\xb1\x1e\xb0\x0f5\xd8?\xcd\xb16\x03\x0fT\xd4\xbf\x04l\xd2^\xbb\x88\xd8?\xd1V\x9ag\xd0\xce\xad?c\x10\xbc\xc0\x84\xb1\xde\xbf\x9d\xdf\x01\xa3\xe0\xe4\xdc\xbf\xc25l\x90wP\xc2\xbf\xb7\xd2O\xa5\xbb\xf7\xb1?g1\x93vi2\xd2\xbfX\x8e*3UQ\xd2?t\xf9\xbfKu\xbb\xcd?\x9e\xc8\x14{B\x07\xdf\xbfu\xee\x84\x1f\xfdI\xd8?~\xbc^\t\xe8\xc9\xa6\xbf\xb9\xe0\xf9\x96\xad\xf4\xcf?\x9f\x9c\xc8\x8dO!\xba\xbfBb\xbae+b\xc2?\x1a(\'\x08\xa61\xd4\xbf6\x1c\x93g\xb0\x99\xd4?\x8aK\xe8{O\x15\xca?j\x8d\xa9\xb7\x1a\xd1\xa5\xbfR\xe43#:-\xdd\xbfQ\xc9v\xc3*j\xd2?\xe3\xa0e\xd7\xadT\xc4?\x1e\xb2\x9bY.\xbb\xd1?\xe9\x0es\xccc\t\xe0\xbf\xb0\xb90\xf0\x05d\xce?>%79\x85c\xc6\xbf\xd1It\xb1\t\t\xb2\xbf\xa4\xe5\x8bD+\xa9\xb8?\xfe\x82\xd4&\xd7o\xcd\xbf\x8f\xa4Z\x15\xdd\xfb\xd7\xbf\x98\xb9\xdd\x90\xa7\x9f\xcd?N\xaf\x13\x9d\x01\xe7\xc4?P+\xf4\xf5\xfe?\xc6?\xc7:\xab\xfa\xd2~\xc6\xbf\xbd~>\xbc\x85m\xd3?W\x00?\xe7\xc2@\xd8\xbf\xbd\x9er\xa6u\x15\xa0\xbf\xd9\xdb6\x862B\xb0\xbf\xd3\x9aWg\x1e~\xd6\xbf\xd7IH-v\xf1\xac\xbfrx0\xbe^\xfd\xb3?)\xd2\xa0I*}\xc6\xbf\xac\xd1\x9d{\xef.\xc2?\xdd\xb8\xe7Q\x94\xdd\xd7?\xb5\xc5;TFe\xd2\xbf\tu\xd2x\n\xf2\xc9?\x17\xbb;\xbd\xff\xa1\xd9?\xe8\\\xdc\xea\xebn\xcd?}\xb0\xa68U?\xd0\xbf\x1bZ9\xae\xdeD\xd6\xbfu^\xc8\x98\xa7>\xcb\xbf\x9a#\xd9\xf3\xea\x9b\xb8?\x008\xeb\x14\x0fe\xd1?p\xb5KV\xba\xc7\xd4\xbfq\xe2\xa1\xd6\x14\x08\xdc\xbf(\xc2\x87t`\xa2\xae\xbf\x15\xb47\xc8uP\xc5?\xb7\xbe\xd9\xfe\x04\x07\xe0\xbfa\xfd\x13@\xd5\xb2\xaf\xbf\x00\x08\xa7y\x13\xfe\xd2?\x8e\xa1zi)\x9a\xd0?\x04\xac)\xd0\x81\xd7\xcd\xbf\xe2\xf8\x8d<\x93\x8f\xcd\xbf\xed\xf28U\x97\x06\xd0?\xbd\x1d\x9a\x95\x98"\xd1?\xbf\x06"5)\xcc\xab?\xd4\xc1\x0ejV\x8c\x9a?+`\xf2\x17\x16a\xd5\xbf\xa9\x968\x90\xf6y\xbd?U\x9c\xb3c\xbb\xa5\xd8\xbf\xbe_/\xa8\x96\x9a\xd8?Rx\xf6\x0e\\\xf1\xc2?-\xce\x92\x9d\xbd\x94\xc2\xbfK\x803\xe51\xf0\xd7\xbf\x13x\xc0(\x8d\xd9\xdc\xbfH\xc4%\xc2\xbf.\xd2?\xb2\x02\xc5 *\x9e\xda\xbf\x04\x83\xe2\xae\xfeD\xc2\xbf\xfbxN\xbf\xe2\xd0\xbe?\x9f{\xf3\xd3\xea\x9b\xd3?\xc0\x0bp\xec\xce\xb9\xd5?\xff\x89M\xba\xb4;\xae\xbf\x06\xdf\x94\x01\x8c\xb1\xaa\xbfS\xd5\xddz\x92\xf7\xdb\xbfY]\xa2\x9a\x9a\xdf\xb4?\x1cp\xee\xca\xdb\x90\xc4?\x9a\x92\xdeS\xaf\x08\xd3?\xa0\x82\xe4\xe0\x90[\xd0?\x92\xbb\x8d\xbc\xd3\xb2\xd2?\xb3\x16\x02\xded;\xb6\xbf\x08\xfaq1\x99\xd6\xd4?\xbb\xb5\\\x06\xe6\xdc\xb0?B\xf9\xa4\xfb"\xc4\xd5?/\xb1.Xu\x00\xbf?\x0b\x83\xc3\x14\xf08\xdd\xbf\xed\\\xb0qd\xdc\xd7?!\x16\x18\xaf\xe3\xd9\xde\xbfT\xed\xca\xc56\xb3\xd8?y\xdd\x1e5\xab/\xd2?J\x1fw8\xa8\x9b\x99?\x8d\x0b\x0b:\xf2\xb1\xd0?\xc1,\x01\x9f\x94\xd0\xd2?\xe4\xdb\x8cx\xb9\xc9\xb7?r\x005@\x99\x99\xd5?\x84a\x89\xcc\x84\xc5\xd5\xbf`e&\x11+\x1d\xd5?\x89\x922\x19\xff\x85\xda\xbf=\xca8\x99\x05\xe7\'?\xde\x1c\xe4\xcb[\xf6\xc0\xbfZ\xac\xda\x83\x82\x8c\xdd\xbfg\xe3c\xee;[\xba\xbf\x9a\x19\xb0x\xa4\xa8\xbe\xbf\x92\xe3\x824v\x9c\xda\xbf\xed|io4\x94\xaf\xbf\x9e\xa6\xff\x9d%\xd9\xad?\x94~!\x17]i\xd0?\x83\xf6P\xfb[\xd7\xd9\xbf\\m^V\x9c=\xde\xbfY\xefX\xb3\xe7\xeb\xd3?\xf30\xbf\xe6\x1f\xa7\xca?!-\n\xbdP\xe1\xd3?,\xa1\xe1A\xdd\xf8\xc9\xbfT\x9e*N\xd1\x01\xda\xbf\xabb_U7\x95\xc4\xbf\x14\xa20\x13d\x88\xb1?w\r\xc9\xdb\xe7:\xdf\xbf\xc714\x1c\xd4\x9b\xc4\xbf\xb8\xa9v\x92\x1e\xae\xa2?\xf0n\xacm\x07\x99\xb6\xbf\x940\xc1\x0c\xf7\xd8\xde\xbfP\x92\x80\xac\xce\xe7\xcc?0\x13\xa8\xfe\x01G\xcb?\x99\x06\x16\xc3\x9f\x9e\xd0?\x84\xa3\xac\xcfq\xfd\xb7?Wb3j\x9f$\xa6\xbf\x0e\xaf\xae\x82NB\xb0?\xf5y~\xaf\x81\x84\xbd\xbf5u\x94\xdb\xa8\xfa\xd5\xbf^K\x91\x16<\xe8\xd7?\xa1%\xfb!n\xad\xb4\xbfq!\xf4@\x1e\x0eb?\xed\x8dl\xc2\x7f\x1d\xdc\xbf\xdec\xbfQq\x81\xab?\xb5\xba\xdb8\xbd\xf6\xc8?\n\x8esZ\x8e\xb0\x8d\xbfPc][=\xd9\xd7\xbf\x87\xd5\xcf\xbd\xe3\x8a\xb3\xbf\x83,\xfd\xab\xe9\xa0\xd5?H\x1bt\x81o\xd1\xb6?\x1b\x93\r+\xec\xd8\xd8?!4Qa\tv\xc5\xbfo\xf7\x19\xd5\xc4\xd1\xc3\xbf\xd5\xb9\xdfi\x8dn\xdd\xbf\xc3X88\xcf\xc3\xd4\xbf\x02\xff\xab\xcas0\xd3?7\xeb\x03\xf5\xb6\x85\xbd?\x9a_\x9fh\x98\xf2\xa1?N\x85\x9b\xd5,\x96\xbf?QI\xd6\x90Q5\xd9\xbf\x89\xda\x8a\xbd\xb7X\xd4?\xab\x14\x89\xa2P\x95\xcc\xbfI\x8f\x9a\xff\x98\xbc\xdc\xbfg\xd33\\5\x13\xb5\xbf\xcc\xd9\xa3GD\x82\xc0?\x9d\xb5\xd5M\xd5\xa9\xb8?\x9em5\xd1\xa9\x8e\xd6?\x15X6\x8a\x89\xd3\xd9\xbfB\x84\'64\x12\xcd?j\x94\xf8<\x94\xc9\xbf?&\xb1\xb3\'\x98\xd3\xd0\xbf\xa29\xc8[-M\xc2?\x07\xfb\xc6[W\x8c\xdd\xbf&\n\xcc\xb8\x14U\xc1?\xa2m\xda\xdb\x917\xdc\xbf\x1b\xe2\x1dI\x0bk\x91?\x1f\x80\x94^\xb8B\xc4?\x1a\xd7TD2z\xd0\xbf\x8b\x11*;:\xe2\xdd\xbfR\xbc\x81\xfa7\x90\xcb?\xc1L\xc7\x86\xe9_\xdf\xbf[yw\x1e\xa6q\xd4?\xca!<W"\x01\xa2\xbf]\x90\xd7\x8cs(\xae\xbf\x19\xd18\x86\xdb\xc8\xc4\xbfs\x050u\xcd(\xca\xbf65\xa8\x9eo\xd0\xc1\xbf\xf0\xe1.\xfc\xcd\x12\xd5\xbf\xaa\x87\xdf]\xabU\xaa\xbf\x9cL\xcc\xf8S\xac\xdf\xbf\x90\xc2uQ\xa9=\xcb\xbf$/\x1e\xae\x05\xe7\xca\xbf\x15\xc7\xdc\x9b\x92\x8e\xc5\xbfS\xcbwa\x08R\xc6\xbf\xf9\xd8tZ\x07\xb8\xb2\xbf\x84`\xa8\xfb\x15\xad\xb4\xbf\xbbz\x01\xf2\x8d\xd6\xdc\xbf"#\xa1\xd8\x7f\xa3\xdc\xbf\x12\xf0_Ik\xab\xcc?\x1d\xc6\x16\x06\xe5\xe4\xc0?\x8a\xa7b\xd0\xeb\xb4\xc9?\xbehB\x9an\xc4\xb3?\x18\xd6\xf2\x98~\xfd\xa1\xbfv\x1b8Bv\x19\xbf\xbf|]\xda\x81\x94\xad\xd7?u/Q\xe9\xa8\x9e\xd9\xbf\xdc\x8d\x95\x8a\xc3\x19\xcd?Kv\xc0\xaago\xbe?\x95\xcc\xa03\x1b\x8c\xa9\xbf\x9fA\x08L\xba\'\xd1?|\xa1 \nA\x15\xe0\xbf(6x.\xa6\xf5\xc5\xbf\xd2[Op\x11\x96\xd8?\xe6\xdc>\xe4N\x19\xc5\xbf)co\xbb\xec$\xc3?\xcd\x0c\xa9\x00Q\xf2\xbd\xbf\xa8\x1e\xd3\xc3\xf6\xc9\xdc\xbf\xf3\x10x\xde\xb6\xb7\xb0\xbf\xf0\xbcU\xbb\x87J\xb9?\xe9\xb2\x90\xcd\xdd\xae\xb6?\xd0\x91-\xe8\xf6+\xd7?GP\xef\xb9\xb2\xd8\xcf?)\x1302pY\x94\xbf\xb8N\x1f\xbf\xa0_\xb2?`\xc82\xf7\xd2\xd1\xd5?\x98\xa2\xff\xb8\x86\x8b\xde\xbf\x8a\xbd\x896\x82\x91\xd0?\x88=\x83\xb9\x0b\xc8\x94?\xd4w\xef\x00\x93\x89\xa6?6\xeb\x8f\xeb\x7f\xca\xdb\xbf\xd2-\xde\xf3\xedQ\xd7\xbf\x98C\x17\xe5\x1a3\xd3?AO\x1b\x1a\xd5\x1e\xdd\xbfr\x8d\xfc\xa9\x86\xf2f\xbfj\xbd\xd7\xdc\xb0=\xae\xbf\x8e\x15\xbcr\xf0+\xd1?\xed\xbc[\x0f\x10\xf7\xd4?\xc2\xf7LK\xa8Q\xda\xbft\x1e\x16\tH"\xaa?\xdc+\xfexgi\xb3\xbf\xce\xcc\xc2\x96\xbe\r\xd0\xbf@m\r\xa6\xe5<\xc0\xbf\xfd)\xf4\xab.b\xb1\xbf\x8e\xdbNu\xa7\xfa\xc0?\xdd\xcd\x7fo[\x82\xd8?zh5\xa6e\x8a\xd6\xbf\xff\xe3^\xb5F\x18\xc5?\xcb\x17Y\xb2P\x9e\xd0\xbf\x13*\xc8\xfbB\x8e\xdb\xbf\xaf\x99\xe0DL\xa3\xd3\xbf\x7f\xfb\xa8\x9e[@\xc5?\xfb\xa9\x16\xa0\xab\xde\xc4?\x0c\xc61\xa6\x17\x8e\xd7?\x19\x80\xd4Q\x08o\xd5\xbf\'\xf9\xad\xb4(Y\xd7?U\xe3\xe0\x89\xfe\'\xdc\xbf\x07\xe0\xaf\xfbk\x88\xd1?\xe5}+d\xa9A\xd7?S|\xed\x9a\x0e\xbf\xc7?\xc0\xed\xfcl\xe8\x02\xdf\xbf\x84\xb7\xf3\x99\n\xeej\xbf]\xb5\n\xc0\ts\xd4?\xb2\x01\xe5\xe4ka\xbc\xbf\xe6\xe8\xebl\x16P\xd5\xbf`\x08\xe0\x12{\xf9\xd9\xbfy1\x8b\x8d\x97\x99\xc2?P\xbb1D\xf3\xb1\xc8\xbf"\x86\x96]\xc1\r\xba?\xb3\xe0.{s\xaf\xb1\xbf[f\\S\xad\xab\xcc\xbf\'\xf4b\x8c\xb9P\xd5?\xf1t\xef\x1b*\xf1\xc9?\xad\xdf\xd2\xa1T\x87\xac?\xe5\x8f\xfd\x07\xe6\xf6\xd8\xbf\xf0\x04\xdb\x05C\xf6\xcc?\x19\t\n\xf1\xc0F\xd3?!\xde#u\x92\xc5\xb2\xbf\x17\xf8 4\xf55\xc0\xbf\xf6\x00\x9b\x1eZW\xd1?\xc6z\xbb\x97\x03K\xbf?D\xa3\x96"L\xc4\xcb?a\xe0\xdf\xab\xa7\x16\xd7?U\xf5\xbe\xdal\x1d\xd8?^!\xb1oN@\xa0?;\xb5\x9d\x1d\xcf\xc9x\xbf\xee,\xe2\xd5\xcb&\xdd\xbf\xe9\x06#!)N\xbd\xbf\x84\x01\x1a\xa0\xecx\xb0\xbfs\xe3\x87\x94:\x03\xcc?&z/q;\xb3\xb8\xbf\xbb\x93\x92\x12\xf2\xae\xc5\xbf\x17\xd4\xc7\xdd\xf69\xb1\xbf;\xb0%\xf11\xb4\x91\xbf\x99\xbe\xd4\xdf}\x1c\xc0?\x1cN\xf6\x16\xac\xbb\xc5?\x0e*1>\xce5\xa0?\x00\x01\x90D\xc7r\xc0\xbf\x81\xe4{\x962\t\xe0\xbf_y\xf2}\x04\xfc\xb0\xbf\xea\xaa\xda\xdc\xb0+\xde\xbf\xd7\xd4\xf5U\xf9b\xbd\xbf01\xa1M\x07\n\x92\xbfW\xceU<,\xc2\xde\xbf\xd4\x11\x96B\x9f\xdb\xd3\xbf\x03\xca$\xac\x08\x03\xe0\xbf\x87\xb4\xa8\x9aT\xb8\xb4\xbf\xa4*+Z\xe1\n\xda?\x1ad\xe0\x197\xfc\xd6?\xad\xdb\x9b\xafF\x13\xbd\xbfQ:\x1d\xd6\x9e\xec\xd3?\xdd\x1f\xdb\x02\xf8\xd3\xd1?\xd8][\x97zG\xcf?\x9e\xc9~\x0bv\xd3\xc0?\x82\xef\x94M\x16H\xd2?)\xb3\xbc\xca\xfd`\xdd\xbf!\x90w(s\n2\xbf+\xb3\xf5M\xc3\xff\xdb\xbfw\x14\x88~\t\xe2\xcb\xbf^\xe3,.f\xb4\xcc\xbf\xd1\xcb\xba\x91\x17\x81\xb0?~o;-\xe9i\xc1\xbf\xeet\xb5\xef\x19t\x99\xbf\xbf\xc9\x93\x9f\x13\x1a\xc8?\x04\xd0\xacq\x7f^\xb8\xbfQ\xb2G!\xa4\xf8\xc2?.\x04p\xac,#\x98?\x03xa\x8bR\x82\xd6?01|xJr\xe0\xbf0<_\xc6^\xb0\xca\xbf\x12{\x15\xba\xb2q\xcc?J\x85\xbf\xd8\xd1Q\x98\xbf\xd0iGe\x0f\x01\xd2?\x9b\xc7O\x08\xa8\x8b\xd3\xbf\x9f\xe5\xd4p\xbee\xd3\xbf\x03k\xc6\xf2\x92\x1d\xd7?;\xfb\xfb\xd3\x15.\xc3\xbf/\xad\x1eJEu\x93\xbf\xf9|\x07\x9f\xd8\x89\xa1?\xad"\xb7\xd1\xfd\xc2\xdc\xbf\x14\xa6\xcb]*\x7f\xc1\xbfc\xd0\x8b\xec\x8a\x15\xd2?\xf2\xb2\xda\xae>h\xdf\xbf\x13z6\t\xcc\x8a\xc0\xbf\x86\x1aq:\x94\xc8\xab?n\xaci$=\xa6\xca?\x16\x87\x85\xbdl/\xd6\xbf\x05;\x85b\x90\x99\xd4?\xe4IP\xe6\xd4\xe2\xb3\xbf\x1d\xb8\xf6\x12\xa3\x90\xcd\xbf\xfa\x83\x1e\x9dp\xf7\xc6?\xdbc\xc0:\xdc\x81\xc0?\xb9\x84K\xac\x8a\x19\xb3\xbf\\\x10\x9d\x1c<\x04\xdb\xbf\xfc\x9d\xb8\xe9*8s\xbf\x9d\x08\x10\xe15\xbe\xb9\xbf"\xd1\x13>\xf8A\xd7\xbfIP<7>o\xda?6\x9cl*\x90\x07\xde\xbf\xec\xf9Sr\x00\xfd\xd6\xbf\xb8\xa0\x90\n;\x15\xd4?\xcbU\xceJ\x0b\xb3\xaa\xbfjVf#rd\xc0?\x12\xd4 f\xbb\xea\xca?1"\x8c\xb1\x95\xf2\xd4\xbf\xdesl3\xc8\xf7\xbc\xbf5\x1c\x01\x8fM\xc3\xd5?\xfc\xed\xa9\xc6\t\xcf\xdd\xbf\xa40:\xa1\xc9\xc1\xc4?\xa4$\xa7\xc0`\xea\xb1?\xfdY\xfac\xc9\x03\xd3?\xadA\x9e6\x01\xf1\xcc?\xa9e\xf9\x81\x8ean\xbf\x99\xe3\xd0a\x00\x0e\xaf?\xe3\xd3\x17\xb8\xa3\xec\xc8?ro8eXk\xd2?s\x9aI\xee\x1dT\xc7\xbf|\xee(\xb9\x9d\xfc\xd7?\xa6\xde\x17\x03)\x8c\xd9?)\x1af\x93\xde\x80\xd1?\x89+h\xb7le\xb7?@\t\xf6\x00\x19\x07\xa5?6/a\xd4\xc7\x85\xd6\xbf\xab\xd6\xccP\x8d\x19\xd8?\x96\x81\x93^\x94g\xd9?\xef\xd6b\x99?i\xc8?\xb4K\nR\xa3@\xb3?\xb9)\xc5\xec\xd3\xd0\x84?\xfe\xc7\xe1]t\xde\xd2?_\x87\xd1c~\xf3\xd5?|6\x89\x8c\xd8Q\xd0?\xcdu\x8b-@\x15\xc1\xbfq\xa1\xf5\x9a\x1cZ\xba?I\x82\xadJX\x9f\xcd\xbf\x1f\x93\x87\x9e\xbf\x94\xd9?f\xf8\x1d\xe5*\xf6\xd2?\xf8\xd5\xb4\xc0\x7f\xa6\xd9\xbf\x1f\x97KE\x07\xf5\xd1?P\xe1\xf9S\xdc\xd6\xd2\xbf\x91`15\x07V\xdf\xbf\xf2T\x1d\n\x9c\x1a\xdd\xbfS\x07\xbc\x1a\xd7\xa1\x94?\x97\x00\xe0\x11\xfb\x8c\xd0??\tq\xa5\xb0H\x95\xbf\x80\xeb\x95d:\xf4\xc2\xbf\x07]\xe8\x83f\xbd\xe0\xbf\xef\x1c7\xaaN\x12\xb5??\xaaH\xa5\xc2\xe3\xd5\xbf:\x10@{9\xb3\xc1?\xd0%\x10M\xe8\x00\xd8?EE\xf0\xbd\xd7\x85\xd6?g\x18\xeb}\x7f\x10\xe0\xbf5\xf5\xb6\x0c\xa3\x88\xa9?\x12\x9b\xb3\xcd\x05E\xd7?\xa3k\x9a\x08L\xfb\xd0?\xf5E\x08\xd2\x00\xa3\xcf?\xc3:oy\x14\xbf\x93?\x0f\xab\xc2\x1f\x1f\x03\xce?\x07\x06\x9b\xda\x83g\x83\xbf\xee\xce\xd5;\x1aT\xb9\xbf\xaf6\xadu\xf7\xbf\xd9?\x0f\xce+.\xc6c\xd6\xbfy#z\x98{\x99\xcc?\xe7\xb2\xc5\x10~\xc3\xcf?\xb3\xbd\xbc\xd9\xc5\xc1\xe0\xbf\xc1\x99\xafg\x88\xff\xd4?\xf2_\xf4@`\xec\xb7?\xfc\xe1=.\xd1\x85\xd0\xbf\xe3\xf2\xf8\xa9\xfd\x81\xc5\xbf\xdb\xb1Gk\xc4\xd7\xc9?X\'T\\\x93\x9e\xd1?\xde\xf7,\xfd\x1b\xf8\xcd?\xbd\x00X\x9f2z\xce\xbf\xa1!\xf9.\x01B\xca?\x9cA\x1f\xcehx\xb7?{\xfc\xbeb\xfe{\xd7\xbf\xf7\x9f%\x1b{.\xd9\xbf\x8fb:\x9b\xe2\xfb\xc4\xbf~c\x93\xccp\x02\xc3?\xb7\xda!\xbd\xe1\xd0\xd7?\x8c\xfa\x96\xcd\xfc\xe7\xd6\xbf.\xdf6`\t\x0f\xd1?n\xc2}\xb6\xd0\xe7\xc4?\xd9\xf2\x1d@\x1af\xd1\xbfi-\x15\x06t\x01\xd1\xbf\x97\xb0\x87{\xea\xc6\xcb\xbfJ&\xdb\xb5\x05z\xa8?\xc4\xfa\xbe\xb5\xf2g\xbf?\x17(\x11\xc5.\xd2\xbf\xbf2\xd4J\x9f\x99\xa8w\xbf_\xab\x19k\xcd\xfa\xc9\xbf#`\x1f\x89H\x9c\xa4?I(j\xaa\xae\xfb\xd9\xbfU\xf2\xca\x06\xdcG\xd0?\xb1zB/U\xac\xd5\xbf\x0e0srF\x95\xd2\xbf\x8e\x10\x93\xe6\xd5%\xb2\xbf\xaf\x10t)\xe9\xb9\xd7?\x80\xc3\r\x07R\x83\xd0?\x18\xee\xff\xd9\x81\'\xde\xbf\xd6\x02\x1c\xc8\xce\x88\xd4?\xb8j\xd3\x99\xe4\xa4w?\xd6\x19D\xef{\xbd\xc8?\x81\n\x84\x19e\x9a\xd4?\xcaa)\xe5\x83\xc8\xac\xbf\xf1l\xf0\xd7\xbf$\xca?\xea\xa9\xa7<\x90\x0c\xd8\xbf\x05\xd4\xb4J\x92\x13\xb1\xbf\xa6\xdc\xd7[s=\xd5?\x9b\xde\x12N\x9c\xaa\xd8?\x1f\r\xcb\xf2\xcf\x95\xb0?;y>\xdf. \xd3\xbf\xde\x81\xb2,M\x17\xd5\xbf\x8a#X\x9c\x7f\n\xa3?\xf1\xc4\xf4\xb7\x08\x8b\xe0\xbf\xbc\x8a\x1b\xf80\xbe\xd3\xbf-$\xb9\xecd\xae\xd8\xbf/\xf0\xdf\t,\x7f\xc0\xbf\x07\'\x0c^\x81\xda\xd6\xbf\xb2x\xd9\x8e\xa2\xde\xde\xbf^\xc4Lj\x12S\xc6?\xac\xf7L\x93\xd6\x08\xcd\xbf\xe9X4O\x9e,\xb0\xbf\xfc\xb5\xea\x9c\x1dJ\xdb\xbf\xf6]\xda\xa1\x85\xec\x9f\xbf\xfa\xf2Z\x92\x12\xf5\xd4\xbf\xff\x1e\xe0\xb9d/\xb8\xbfx\x08Zt\xc6T\xc0?\xc25\xf2\xb4\x8b\x02\xb7?F\x8c\xa6+\x809\xd0?\xd2A9\x8f%w\xc7\xbfv\x06\xdc\x08\xa8o\xe0\xbf\x97,:B\xfaf\xd1\xbf\x1f\x1by\xd1\xe63\xd5?\xaf\x81\xa2\x9b\xe3f\xd5\xbfs#z\xc9\x0e\xa8\xdf\xbf\xdd\x13\xd6\xa2\x99\x83\xd2\xbf\x13lC\x01\xd5\xd6\x93\xbf\xab\xb0\xe8ME\xf1\xd2?\xe8\xcd\xff\xc7\xa1=\xcc?\xfaz\xe6i\x02\t\xc6\xbf\x9b\xc6lQ\xcd\xdf\x8a?\xa8{\xc9\x8a\x8dA\xc6?\xeb\x13"\xdc\x87\x04\xd8?\x12\x10\xeb L\x15\xd0\xbf\xc9U7F[z\xbe?\xe6\xcf\x06\xcc8\x11\xd8\xbf_\xde\x80\x0bp\xa1\xd0?.a\xbah\xe7K\xda\xbf(\x0e\xd9l\xb1\x18\xbd\xbf\x9a\xbfw\x85\xd9h\xe0\xbfj\x04F?+8\xd5?\xe2)6\xb2\xac\x8d\xd9?bB1\x0b<E\xcf?\xa8\x19\xe9-aw\xb1?BX\xf9\xf4PD\xe0\xbfL\x14:\x80\xce\xbb\xd5?P\r\xd9\xad\xedci?\xe90\x8c\xcd\xc4\xb8\xd1?\xab6\xfa$.\xb4\xac?\xbb\xd5\xf3{XF\xdb\xbf\xf1&\xc4\xcbS\xec\xd7?\x13\xf8\xa1\x1d\xdb|\xa8?w(7`\x84Z\xbb\xbf\x97\x93\xfa\xcb\xaao\xbe\xbf\xc0\xe8\x1eO\xd7j\xc1?D\xf4\xd6;\xe8\xb1\xd3?\xc72\xcc\x04\xcaZ\xd8\xbf\xb1\xe8:^\xf9\x81\x9b?R\x8a+\xa1\xf8\xab\xbb\xbfu\x9a\xc8\\L\x8a\xd0?m/\x88\x8b\x80x\xbf?\xe6\x18\xfe~$P\xd0\xbf\xefP\xae\xf5a\xda\xc4?\x1e\x01\xf5\xea\xcc\xc1\xc2\xbf\x1e\xd5\xacrx\x86\xae?\xe6\x01S\xdd\x86\x8e\xc9\xbf\xf7\x16\xfb=\xb8\xe2\xa8?P{\xdfG\xd4>\xd8?Sr+*\xe1\xc5\xd1\xbf\x1b`\x88\xe2\xca\x95\xbd\xbf\xb1\n\x9b|\x0f\x83\xc0\xbf\xe7"\xba\xc4\xa5N\xcf?\x0e\x8a\x11\x1aE\xe2\xd1?\x13\xe1\x9d\xcd\x9d\x08\xd4?\x1a\xfeDe\x0c?\xdc\xbf\xe16=\xf7\x90B\xd5?@\x0b\xc7\x00\xed\x7f\xd4?\x1a\xca\xbe\xeaA\xc9\xc5?~\x07\xdbU\x87\xb3\xa9?1\xf5c\xf2B\xf5\xd3?\xf1|)\xe5}\x92\xac\xbf\x0f0g\x1b\xa4@\xd6?\xbe]\x1b\n@\x8a\xd6\xbfd\xa2(!\xff\xa7\xd8\xbf-\xea\x1c0\x10]E?\x9f\xf3\xc0/\xbd\x8f\xdf\xbf"\x95\xb8L&\x03\xcf\xbfk\x83{\x9a\xdeW\xaa?M\xe6\xf0\x93+\xa1\xbc?\xbe\xb6l&\x0bz\xc2\xbfbU\xab\x1a\x8b\xe8\xab?\xf75\x88\x93\x8f\r\xd3\xbf\xbf\x0b\xd7\x87{=\xaf?\x00X?\xb0\xb7\xf3\xc5\xbf\xa6\xe33+\x92S\xe0\xbf\xf3\x91\xdejmY\xcc\xbf.\xa5\xfc\x11\x92T\xdf\xbfO\xde-\x05U\x86\xdd\xbf\x87&\xbd\x0e6\xb4\xd2?\x88\x87\x98\x02E#\xca\xbf;\x17\xee\xf3R\xa0\xd3\xbf\xb7\x86\x9c\x18\xa0U\xd4\xbf+\xaf\x89DI\xe7\xa5\xbf\xf66\x15\x1c\xc6\xaa}\xbf\x8f\xf9\xd7\xef\x1b\xa0\xcd\xbf\xb4\x91\xd5\xe9\r\x18\xcf\xbf\xab\x7f\x16\xbe8\x1b\xad?\x15\xd9T\x14\x95$\xba?\x10\x07\xf6\xd0\x18\x96\xa3\xbf\x1b\xfbT1/\x1b\xb0\xbf\xcd\x8b\xdfl\xf1\xf7\xd2\xbfh\x81\xf40\x18\x1b\xd6\xbf\xed:\\\x17\x0bX\xd2\xbf\xacV\xe4\xfe\n8\xd2?a\xbd\xbfZ\xec\x15\xb8\xbf\x8a\xb3\x16\xceJ\xb3\xd7\xbf\r\x9fv\xf8kw\xd9?\x05Usox\x1b\xb5\xbf\x04X\xf6\x17\x05q\xc1?\xab6\xfb\xbc\x1e\xf0\x85?Za\x8f\xc0\x86\x8b\xca?\x89M\x97\x88\x17\xec\xd8?\xeep>\x83i\xe0\xce\xbf\xd6\xcd*C\xdb\xd2\xba\xbf\x8d\x9aI_b)\xd5?a\r\x15\x90\\\xf4\xd1?\xca\xedw\x10\x11\x89\xd7\xbf\x93\x05E\xa0\x82N\x9b?a\xb9\x8e\xb6\xc8\xbf\xd0\xbf\x0eg\x05\x11\xbd\xdb\xdc\xbf\xec\x1cl\x1e\xf3\xd0\xcf\xbf\x86\xed\xf7\x88T-\xb9?\x7f\xd8\xc3\xe2ir\xd6?\xcaq\xf5k\xeb"\xc3\xbf\xde|\x16\xb6,\x90\xe0\xbf\xe5\xcd\x8b\xfdt\xe9\xd5\xbfk\xd6\xf8rV\xb1\xd0\xbf<"\x1e\x08\xae\xb3\xdb\xbf\t\x1a\xc1\xb1\xd4G\xc1\xbfL\xa7\xcd\xc1\x14\x82\xb2\xbf\xcb\xbb\xbd\r3]\xbe?\x16\x8al\xa0b\x84\xdc\xbf\xe1)j\xb1\xe3\x8f\xd8\xbf_$6\xd4\x8c\xb5\xbc?Y\xab\xdf\xa2\x1a\x8b\x98?\xd2J\x9b\x90\xc1\'\xd4?\xbe\xdd\xcbO\xc1U\xdc\xbfd\xa8\xdb\x82c2\xde\xbfG.i\xd3Ca\xa8\xbf\xe6\t\xef0\xdf\xc6\xdb\xbf\xc4\x00\xe2\xce\xf7a\xd4\xbf\x11\xded\x8a\xe3Y\xc4\xbf\x10\xa3\x0f#M\x14\xca\xbf\xef\xf9W\xa4\xab\xc5\xd4\xbf\xa5\x13\xa1\xeb\x8a\xc8\xd1\xbfd\xc7\x82\xf4i\x90\xc2\xbf\x86t\x7f\x1a=*\xc8\xbf\r\xf7\xa8\xc9\xa9H\xc0?T\xb6\xaa\x03\xda\xba\xde\xbf\'\xd8\xe7v\x8d\xf2\x97?\xe3\'\xae\xf4\'\xe3\xcb?\xed\x17\xcc\x14\xaf\x06\xd6\xbf\xb5Q\xa2\x8b\x92n\xc1?\x92|\xdeIT\xde\xaf?B\xd7\x90\x9d\x89\xba\xd2?\xc5\xdc\x9dCxO\xe0\xbf-\x04\t\xddG}\xb9\xbf@\x01`r\xc4\xfe\xc9?+{)|\x94\x8e\xdc\xbf\r\xbe|x\xb5\xf0\xc5\xbf\xb4|\x1d]\xad;\xd8?\xba\xf3\xb3\xe1\xce\xa4\xd8?\x8bk<\x96Z\xee\xb5\xbf/\xa3\xe5\x8a\x8e\xf4\xd8?\xb7\xd9\xc4C\xaf\xcd\xd8\xbf\x19\xc5\xa9v\x04x\xb1\xbf\xb7\xb9\xe4\xffL\x94\xd0\xbfvU\x9b\x16\xc2\x8f\xcd\xbf\x8b\xf0W\xfbh1\xc8\xbf\x99\x8c\xe7\xb4\x12b\xd4?\xcd\xfb\xac\x8e\xea\x7f\xc9?F\xe5\xa1\x9b({\xac?t\x8296M\xeb\xd2\xbfZC#\x80Y\x06\xd1?\x11\x9e\x96\x17\x85v\xc3?\xcd\xfa\xca\x80)\xef\xd8?\xb7\x04\xab\xd9\x02\x9f\xb4?<l\xa6/\xf5\xf2\xd9\xbf6I\xee\x11\x06+\xb0?\x0f\xb4\x1a\xea5,\xb0?\x88\xd2\xe6@+P\xc6\xbf\xdc\x8f\xc0-\x1f\xbd\xcd?J\xc5\x1a\xb5\xec!\xd2\xbfaZ\xcb\xd7\xdc>\xc5\xbf\xf7\x1a\x1a\x9d\x96\n\xcf?\x00P\x102\xd1Z\xda\xbf\x8d\x02\xbb\x13\xc4^\xd4?\x08\xa7[\xaa\xc7\x1a\xa9?7\x1fb\xaa\x02J\xb8?\xcc\x13Z6\xb8\x16k\xbf\x90\x9b;\xac\xfe\xeb\xda\xbf\\\x15\t<\xc4\xca\xc5?\xfb\xd9\xf0\xccr\xbc\xd2?\x99\x14\x87(\x92F\xd7\xbf\xef\x05(8!\xcd\xc5?\x07\xbf\xef\x17 9\xc8?vQ\x11\xf7\xb5\xe6\xd2\xbf\x1a\x10\xa6\xc1H\xfe\xdd\xbf\xc1\x1d[m7\x80\xc8\xbf[\xf5B/\x04Z\xcb\xbfn\xb5n \x1a\xae\xde\xbf\xc8\xec7\xc7\xd7\rk\xbfV]Zf]\x15\xb5?%\x96\x1c\xa58\xa6\x84\xbf\x9d\xac\xfb\x89\x00t\xcb?\xecO\xcd\x9f-\xbd\xd6\xbf\xdd\xec\xbc\xa4/ \xcd?\x01\x03v\xca$r\xdd\xbfX\xeb\x05\x9c\x1b\xe1\xbe?\x06\xdb\xaa\xa0(\xdc\xab?e=A\nmC\xd3\xbf~\xf5\x9b\xf8P\xb5\xd4?*OWc\x0f\x9f\xd8\xbf~%\x1c\\B\xde\xc3\xbf"\x9e\xf3\x8e-!\xd5\xbf~wB)\x1a\x11\xa3?\xdc\xbaD\xdb&n\xd1\xbf\xd5g\x8cc\x99\xca\xd9?k\xb6\xf9N\xcb3\xd9?Y\x8d\x0fd.=\xda\xbf\xff\xea\xab\x93\xd4\x10\xd7\xbfi\xcet\x92\xc3\xa6\xba\xbf\xf6\x12N\x8e\xca\xd1\xd0\xbf(\x01\x9a\xdf\x0em\xbb\xbf76>\xd9\xa5\xe4\xd7?2\x97\x16\x15<\x89\xcf?\x85\xde\x05\xb8PV\xbd?Q\x04rZ\x18\xbb\xc2?\x91\xcc\xf6\xcd\x07\xef\xdc\xbf\xc8bO\xf8o\x88\xcb\xbf\xc6\xa4EJ9A\xd4?\xa4f:\xf6M\xc9r\xbf\xa7\xaf\xb9%\xf0/\xb1?`\x11X\x1a\x87\xd9\xd0? x_\xa7\x97o\xa6\xbf\x88\x89{\x0f[E\xc4?\xb6\xcf\xe9k\xd4\xd5\xdb\xbf\x0b\xfc\xd5%\xa1\x8fz\xbf\xa2Vw\xec\xe0\x9f\xd9\xbf#\x0b\x12Uy\xc2\xbf?\xbd\x91)\xed\xb3\x9b\xd1?\xde@U\x8e\x06\x84\xb8??c\x87\xdb6\xe9\xb6\xbf\xac\xb4\xce\x94\xd2x\xc1?\xa3\xf4#q.\xbc\xc9?j\xe9\x17\x8f\x83)\xd7\xbf\x9c\xe9\xe9\xb0D\xfc\xd1\xbf\xdd\xe3!\xc3*\x0f\x92\xbf\x8b\xc5\xb6q\x86L\xd7?t\x0c\x0f\xc7\xda\xa3\xbe\xbf\x8e\xf4\xb4\x18\x8a\xdf\xb8\xbf"\xc9\xaf\x08F\xfe\xca?\xcd}@P\xbc\x9e\xd7\xbf\x8a\xfb\xee\x1cmP\xd6?\xea\xbd\xe3[\x82\x7f\xaa\xbf\xf1\xf9\xdd\xe4X\xc8\xca?\xe2\xe9\xe5\xa1\xa7\xc8\xd8?6\xb4p\xbdzn\xd7?\xf8\xe03\x16\xce\xe6\xcb\xbf\x13g(\x94gS\x9b\xbf\xf6\xd4A\xcd\xc7\x01\xca\xbf\xf2Rl4\x86\xd0\xc5\xbf\xe7\x16\x9b\xb4\xd7\x11\xc6?\x96\xa3\xa3g\\=\xd3?\x0f((V\xbe\xfb\xd5?_\xddY\xe7@\xff\xd4?\xcfF\xe98\x02Y\xd0\xbf\'\xd4\xf35\xbb\xc0\xc7?\xf4\xd8\'\x1e\xd2i\xda\xbfY\xf9~1\xd3\xa6\xc0\xbf\x84\xbf$@\xb8\xc1\xd6?\x8f\xbbs\xfd@\xca\xc9?\x94\xa4\xea0\xeb\xdf\xb2\xbf\xb5\x9c#Q\x87-\xd7?\xe4A\xa4z\x1cJ\xcc?VL}\'\xf9\xb6\xcf\xbf\x82>\xa6)\x15\x1a\xbc\xbf^\xc92\x01\x94\x81\xb0?\xd4R9&\xdc\xe8\xda\xbf\\\xb61\xf9\xf5\x1a\xd3?\x87\xe41$,\xba\xcd\xbf{\xbe\xf3\x01\xacc\xd5?\xaf\xec"d$\x02\xc3\xbf5\xd5\xa2\x13\xb1h\xd0?\xb6\xd5\x9f\x03\xf4\x17\xe0\xbf\xe5r\xf9\xd3\xff\'\xd1?9\xd7p\x13w\xda\xd5?\x15\xab\xe4X\xbd\x04\xd2?!\xad\x8d\x9d\xd0\xe0\xc2?\x16\x15Da\x80\x16\xa9?La\xb5o\x16\x86\xc8?={\x05Y\xcb\x17\x9f\xbf\xef\xaa\xe5\x8d\xf9\xb8\x99\xbf\x82\xea\x9fRE\xb5\xac\xbf-*\x0f?C\xad\xdb\xbf_\tM#1\x7f\xdd\xbf|h\x1c\xb6\x87\xd7\xda\xbf\xecx,\xfcu5\xbc\xbfa2\xc2.|\xec\xd0\xbf\xfbf%\x88\x04.\xd4?]V\xc9\xcc\x8f\xc2\xcf\xbf\xcbX\x90bA\xc7\xb1\xbf \xa7\xf9\xba E\xd1\xbf;\xe5]b\xfd\x10\xa1?\xf7\xc2\xa8\xa8\xc5H\xb6\xbf\xdc\xda\xf6\'\x8b\x13\xcf?\xd5y\x18\xa7\xf1;\xde\xbfUC\'\x93H\xd3\xc9\xbf\xed\xc5\'(\x03\xb6\xd6?\xf2\x99\xb8,\xab\xac\xd0\xbf\xc02\xf1\xc4\xddt\xbc\xbf\xeb\xe4\xc4\xf2\x0f\xfa\xda\xbf\xd5\xa7Z\x02\xba\xb1\xb0?9\xbd\x1f\xa38\x04\x82?n`|IkR\xbc\xbf\xaf\x87\x1a5c\xdc\xdb\xbf\xe5JOgC\x00|?\x87\x06\x87\xed\xb6P\x9c?\x1e\xfe\x1b\xae\xe1T\xbd\xbf\x8d\x00\x0c\xc3\x97\x8e\xc9?!,M<\xfc\xc9\xd2?\x06\xef\xa7\xde\xa3N\xdb\xbf\r\x0e<\x17\x88\xb5\xd1?\xc7\xbf!)\xf9v\x85?\xc9\xe5\x0b=\xe7\xc0\xd0?e\xd1\x1f\x12\x81\x8c\xd5?\x8fN%\x0e\x17D\xd7\xbfT\xe4Z\x8f\x15\xf5\xd4\xbfe\xc3\xd8xqA\xda?\xccrX\x1d4\xb9\xc7?j\x0c!\x9a\x05\x10\xb8?\xb0v@h\x91\xcc\xda?p\xa6{\xb1_\xfb\xd9?=\xac\xaf\xcd\xb3\xb7\xb1\xbf%!\xd8\xdfV\xa5\xd6\xbf\xbb\x0c!\xe8\xc5=\x91\xbfh\xb1K\xeb`\xa2\xb5?\xd6)\x1ai\x18\x06\xa0\xbf\r\xd3S\xe1=\xcd\xd4?D\xcb\x11]`\xa2\xc7\xbf_O?\xf2f\xc6\xda\xbf \xf3\xed\tPO\xc0?0G4\xc4\xda\xba\xd5\xbf\xa9E\xb6wd\xc6\xd4?E5:\xd0\x0b\x82\xd7\xbf\xfe\t+9\nq\xd5?\xd8G\xf6\xba\xc4\xd0\xaa\xbfQU\x02\xb6\x1e\xfd\xda?S2\xa02!\xad\x91\xbf\t\xbe\x0e\x00\x96~\xc7?\x8c&@g\xa3\\\xc0?\xc0\xf0[\xa7\x99G\xad\xbf\xc6w\xa2\x96^\x19\xb5?P\xb1\xed\x8c\xe4R\xd8?\xeb\x12\xe5\xc2q\x82\xb1\xbf1\xf2 \x94\x1e#\xa3\xbf*H\xe2\xe6\xf6\x7f\x94\xbf\x00v\x15\x0e/\x10\xca?{\xc7\xf9\x19\x8a\xf4\xbd\xbf\x15\xdc\x9ae\xf8X\xd0?\xc9\xf2\xb5\xd0\xae%\xd0?\xf7\x0b\xcb\xaa\xe0D\xd3\xbf\xbd~\x8e\x98\xe3\xb9\xcb\xbf\xed\x97\x00\x18\xccL\xb5\xbfzR\xc8\xea\xe7\x81\xad\xbf\xf0\xbc\xb6\xac)\xcc\xb4\xbf\xb9^\xa7\xca\xef\x95\xb5\xbf\xe5\xdde\xccp\x97\xd7?/+`\xd0z1\xc4?Gz\xaa\x9a\x1b\xff\xcf?\xcc\xf9\xd5\x8b\xc5\xa2\xc5?_,r\xd4\x06 \xdb\xbf\xe8\x85\xc6y\x92\x01\xd0?\xf6\xbf\xc4,\x12>\xd7?\xcdVj\xca\x86\xf5\xd0\xbf\xdf\xf2u\xb4\xc2L\xd8\xbfTQQ\x02[\x00\xb3?\x8d\x9e\xc9\xf4\x0bm\xbb\xbf\xc0\x80\xd8\x13\xb7\xb0\xc0\xbf}28\xff\x887\xb4\xbf\x8e<\r\xbb\xdd\xd3\xbf\xbf|\x9bS\xdd\xe9|\xd0\xbf_I~\xae\\C\xd2?\x8b\x8b]\xd0 i\xad\xbf(\xd8\xd8\x0ef\xa9\xbf\xbf\x86\xcf\xa5SP\x17\xd7?\xa0\xf8\x12\x00LG\xc9\xbf\r9\x8dT#\x9e\xd3\xbf\x85;\xed\x1c8*\xd6?\xb2\xfd\xad&\xf7\xcd\xbf\xbf\xed\x1e\xa9A\x0f\x92\xd3\xbf\xd6\x03\x99"E_\xd5\xbf\xe0\xa1\x0bd\x9c+\xb5?\xa8c%\xff>\xc0\xd3\xbf&\xb4\n\xfc"\x16\xd7?\xd1Q\x98\xf3"w\xc2\xbfW\xfd\xee\xba\x05\xc7\xcd?G\xad \xdd2\xc0\xd1\xbf\np\xfbS\x1bd\xb6?\xb6\xde\xb7\x16\xd6\xd1\xb8\xbfb\xdeZ\xfc{w\xb6?g\x10\x90\xf8\xa0-\xd7?\xb0\xba\x1a\x06\xa8\xa1\x83?\x1aw\xd5\x8f\x03A\xcf\xbf\x0c\\\x8e\xe7\xd0\x8f\xb9\xbfy5\xb5\x86\xf6/\xdb\xbf\x91\xd6\xd6\xd5\xfa\x1f\xc1\xbfE\xf1\xe3[\x02\xbe\x8a\xbf\xe1\xe4\x96\xdc\x1b\xce\xb6?\xfceI\x9b\x7f)\xb5?\x1e\xf8A\x8d\x1dc\xcc\xbf\xd36A?\x08J\xb5?\x8a\x06\x04SG\x84\xd2?\x9c\xaa\x04&\xdf\xd1\xd8\xbf\x0f\xdaao,\xd8\xd2?*%_H\xc2\x06\xde\xbf\x88\xbeD$R\x01\xce\xbf\x9c\n\xda\xaejO\xcf\xbf$\x1a#<\xb42\xdc?\xc4*\xb1\xea.\xbb\xc8\xbfy\xc2\xc3QQ\xc6\xcc\xbf\xe4,\x196Cx\xdb?}\t\x9f\xbc\xa7\xa7\xd4\xbfh\x17\xfa\xc1H\xd8\xd3?.\xb5\x8d+%\x03\xd1?o\x89bA-_\xd9\xbf\xa4\x02\xba]\xf7\xbf\xda?`\xc5\xc6JSO\x8d\xbf\x87\x05\x8d\xc8\x03\xde\xc0?\x19\x8a`\xd5\xaa\xd5\xa9\xbf\xf2<\r3\x86\xe1\xc8?O\x01\x87lkL\xd0\xbf!7\r\x86\'\x15\xc2\xbf\xa9\x84\xbf\x8d\x7f\xb1\xb5\xbf\xd4\t\x80<k\xef\xd8\xbf\x90\xd3\x8an\xadn\xb0?8T\tol\x88\xa1?Qe\xa7\xa2^%\xdd?\x8anf\x88\x84\xb8\xd8\xbf\xd0\x80c\xaf\xd1\xc0\xd7??\xec):\xd5\xd5\xb1?5zbC\xe7\n\xd8?g\xec\x8d\xacfO\xce?M<\xdc\x1a\xfb\xa8\xa2?_7Z}\xac\xcc\xd5\xbf\xf5Fr\xb4fK\xdc?<\x87\xbd\x96\xc5\xb6\xc9\xbf\x9b\xfa\xf7>/M\xb5\xbf\\|j\x9d\xf5\xa8\xb7?}s(\xe5\x03\xe7\xd3\xbf\xc9\x81\x98\x08[\xfd\xdc\xbf\xc0\xcb o\xa8C\xa4\xbf\xf5F\x1c\xb6\x05\xb8\xd8\xbf\xc0\x00\x1b\xc07\xc5\xd6?\xca\xfa\xd8k\xe5\x15\xcf\xbf\xb1\xb7\xab\xc0\xf6w\xd7??$\x9c\xcd\xbc\xed\xd8?\x89!c\xd9\xc3\x11\xc8?\xff \xeeT\xa8\xe8p?h1\xae\x85k\xde\xc5?9R\xce\xb3i7\xd8?w1B\x9aX\x1b\xb6?\xc2\xf1\xf1\xc2+<\xc2??\x17\x06\x8f\xe2\x17\xaa\xbf\xaf\'\xa1$\xad\xb8\xd1?\xc9s\x19&}\x04\xc7?W\xa4;\x9a\xce\x7f\xd4?\xd0LY\x02\x90!\xd6?\xa90\xb2U\x8c\x9b\xb8\xbf\xc9\x04nqN\xad\xd8?L\xa4I|\x1c\xc5\xda?\xebF\xbe\xbeo\xa7\xdc\xbf\xbf4\x11\x7f\xa8v\xc0\xbf\xdc\xb9\xc0It3\xce\xbf\xebZE\x1c\xec?\xd9\xbf\x86Z\xfe\xca\x19\xd6\xd1\xbf\xbe\x82\x93\xe6\x97Y\xd7?\x02\x9eS\x1d\xf7!\xb7?G\x1a\xbf\xab\x06\xf4\xaa?\x9f\x11\xf7G\xa3\x9d\xd8?\x9b\xc4\xb9\xd4\x0f%\xab?Y\x1f\xbeCbU\x88\xbf\xe3C\xc3\x8aDR\xc3\xbf\x14\x1d\x03]#B\xd7\xbf\xa3\x05\xc6\x0f\r\x82\xc6\xbf\x978L(+\xb2\xc3\xbf\x02\x94\x17\\\xccI\xd4?!\xe2.l\xe0\xd7\xcb\xbf\xae\x97\x00=\xbd\x8am\xbfy~C\x80N\xb3\xd8?W[\xd5\x06|A\xb2?U,\x11\x08\x0b9\xda\xbf3\x84\x11\x000\xa4\xd1?\xf8\x0b=\xf9\xe3E\xc8?\x14\x08\xb9\xd9\xe5o\xba\xbf\xaa\x87\xcdX\xc7-\xa0\xbf\xd5\x00tD\xc7\xea\xcf?\x9f\xdd\xb7\xc7\x92G\xcb?\\k\x1c\nxL\xba?\xaf\xedZH\xa3.\xd0?Z\xe2\x02\xb8\x97\xdb\xd8\xbf\xd8\xa3\xd7\xed\x05#\xd7?9B\xfa\xef\x08&\xa2\xbf\x89\x0fH~\xab\xb9\xde\xbf1\xf5\xdcn\x951\xc9\xbfq\xab\xb2\x8da\xa9\xa9?@\xa1\xac\x86N\x9e\xdc?\x94\x92\xb8*\xe8D\x90?g\x80\x8ak\xac\x90\xc6\xbf\xc1\xbe\x95\xf3\xcc\xd7\xc4\xbfc\x97\xad9\xcbt\xad?\xfe\xe36\xa4\xd3\xd4\xda?f\x83\x89`$\x93\xcc\xbf\x8e\xdd@\xdc\xfe\xad\xda?\xb1\xc7[\xd9\x01"\xca?7\x94\xa2\x95\x96\x1f\xc3\xbf\x17\x06\tG\x88~\xc2?\x9f\x99N\x06C\x91\xc9?O\xdd\xfa\xd7\xe4\xd1\xd4?D\x19\x135Uv\xa3?\xbe\xbc\\\xbd?g\xac?\x9d\xdf\x1c\xd5};\xc1\xbf$\x0e\x9e\x01\x93H\xd5\xbf\xd7S)\xd7\xf7B\xd2\xbf\xec+\x88\xf02\xd7\xd0?\xda\xee.\xa3\x83\xb0\x97?\xdf\xe9\xd9\xda\x13\x13\xb6\xbf(\x13\xe4\x15\x1d+\xd1\xbf\x1c#\xe2\x80&UU\xbf\x00\x958\xfe(\x05\xa0\xbf3\x15`\x9e\x10\x94\x8e\xbf\x9c*\xc2\x82\xa1\x1c\xd5\xbf\xdb\x14m6qb\xb9?5\xa1\x86H\x97\x93\xd2\xbf\xef\x97\xcb(+\xf3\xcb\xbf\xcem\xc7\xa6\xc8\xcf\xd6?\x14%\xeb\xfd\xdf\xec\xd7\xbf\x04<\xcdC@\x11\xc5\xbf\x15)\x1d|\x17\xf9\xc9\xbf\t>\x01\x93~Q\xd2\xbfr\xde}\x82\xc5?\xc0\xbf\x94h\xa0$\x058\xc4?\x19\xab\x93N\xc1\xe4\xd9\xbf&z\x10\xaa\xd2\xeb\xb6\xbf\r\x17,\x8c\x83~\xd5?\xd6\x8c\x80\xce"\xff\xd2\xbf\x01\xd3\x00\x02\x083\xc3?(\x8f\xd5\xfa5\x99\xc6\xbf\xd0qv\xc1}T\xc6\xbf]:\xb8\xbd%\xdd\xd4?u\xee\xf2h/\x17\xc1\xbf\x83dn[\x18\x86\xd8\xbf\xd3J\x83\xe9\x16\xe0\xd2?\ro\xbd\xb7\xbf\xf2\xd5?\xbe\xa1\xed\x91k\x1b\xc5\xbfi\xe8K!.\xea\xa7?_V\x8diJ\x9f\xc4\xbf\x0ffw\n\xdb\xe0\xb8\xbf0\xbf\xcbS\x08\xa1\xc1\xbfA\xa8\x806\x03Z\xd5\xbf\x00\x86\xaa\x00TL\xc9?\xc6\xf0\x17\x9e \xd6\xa4\xbfP\xd7\xce\x15o\xbb\xdb\xbf\x1b\x94L\xe6\xb7y\xb7?x8\xea\xe3\x99y\xb3\xbf\xd9\xb8\x19\xa9\x87X\xcd\xbfM|\xd7\xa1\x93\xf5\xd2?\xdbW\t\xbbN\xae\xc9?\xb2\x87\xb0\xc2%<\xb8?\x18\x9aW\xb4\xe3\xee\xd9\xbf\x15&\xac\x13L/\xc8?n\xa7\x8e\x01\xba\xc6\xd1\xbf\x9e{\xd2(\xd2G\xc1?L\x9e\x02B.\xf4\xdc?D\xc37Fk\x9f\xbf\xbfI1\xe3\xfa\x96N\x8f?\xca\x9b\x99W\xadE\xa0?gH\xfd\\\xe7\xd4\xda?\x01\xf5hV\xcb\x9e\xbb?\xae\x17\xf2\x91<\x83\xd9\xbfQm\x0c\x06K\xad\xc8?\x98\x9e\xbc\x1dQ\xef\xda?\xd2}\x97u2\x98\xcb\xbf\xd1\xed\xd5\x9c(\xdc\xd3\xbf\xdc)\xa5\xdcUY\xdb?\xd1\x85/Y2\xd6\xcc\xbf\xea\xcd\x90\xc8p\xb7\xd5?\xf8-\xa9\x8e\x9az\xd6\xbf@<\xc7\xd7\xe1,\xd6\xbf\xc1\x08\xc2\rh\xc5\xc3?O\x02,\xcf\x82w\xa3?|\xdeX\\\x0f\xee\xc3?\xf1\x95\x03\xbf?/\xc3\xbf\x86\x18\xe3\x8b\xeeu\xa4\xbf\x16\xe6j\x03\xdb\xdd\xab\xbf\xe7\x06\xca\xaan0\xbd\xbf\xf2.\xd8\xf6\xe0\xb7\xbf\xbf\xfb~\xbb\xb5\xbf\x9c\xc9\xbf\xcb\xabGB\xfa[b?\x85\xccv\xef\x94\x9f\xc0?\x18@\x80\x04\x0b\xb3\xc6?\x87U\x91\x85\xd8\xfc\xc0\xbf\x085\xaaPs\x97\xd3?\xb9\xdeB\xb8\xbe\xc3\xd2?\xd1\xb2Q\x90\xef\x00\xb6?\x15\xe1\x18\x96f+\xc6?\x9em\x11c\x8f\xea\xc5\xbf\xb0\x9b6\xff\xe7\xcf\x92\xbf\x0f\xea,`\xa0w\xdd?\xc2\xaa\x1c\x8f\xe9\xee\xd0\xbf\x11\x01\x0b\xe6\xcb+\xbd\xbf\xb2k\xe5\xbdm\xd7\xcd\xbfd\xcbi\x9bI\x19\xd1?C\xcen\xab\xfe\x06\xaf\xbf)v\x92\xd8\xbc\x1d\xd2?f\nc\xceW\xb5\xce\xbf\x0b\xf0\x1c^N\xd9\xb8?\x07\xf7m\x0c\xdca\x91\xbf\xca\x12\xeb\x067\xad\xd2\xbf\xea\x00\xf3\x08V;\xc8?Da\xa1\x8b\xb1\xd6\xbb?^G\xfb\x83\xcf\xb5\x9f\xbfGax GQ\xd2\xbfi$[\x01h\x96\xd0?^\xcf=\xeb9\x90\xd4?\xe7\xde\x7f\x12\xacG\xc7?\x84\xc57ho\xc0\xd6\xbf\xcc\x91\xfaxp \xc6\xbf\x06\xfb\x99\xb5x\xbc\xd6\xbf\xf4\xcf\xde\xc6\x85]\xd7\xbf\xbf\nW\x16\xb1\xbe\xda?\xd4\xfe\xb1\xcd^\x97\x81?\xcd\x90t\x86ADb?Y\xb1n\xfeB\x83\xdc\xbf>\x1b\x86<\xba\xf3\xd0\xbf\x7f\xbab5\xf8c\xc1?/.\xf9\x93\x92`\xb4\xbfW%X\x16\xc1\xeb\xa6?\x18\xb3\x87\x93\xeb\xdc\xc1\xbfe\x83\xb1\x84\xab\x0b\xd5?l=\xed\xfb\x04\xd8\xd8\xbf\xa7\xc3\xc9\xcaJ\xe9\xd6\xbf785\x02\x1f\xbe\xd6\xbf\x9a\xda\x8c\x9d)\x99\xc5\xbfY\\~u\x0e\x17\xd9\xbf!D\x8f~\x17\x94\x81\xbf!WY\xf2\xcc\xf0\xcc?\x82\xe3\xb8q\xcd\x88\xd4\xbff\xb2\xd5E\x8c\xfe\xd8\xbf\xc1\xbd\x92\x8c\x93\xa3\xd9\xbf\xdb<\x9f\xe8\x10\xd0\xd8?\xb8\x81\x86\xf0bT\xd8?/\x94l\xa6\x05D\xd6\xbf>x\xa0x\x19\x91\xb7\xbfd\xe8\xf4Nh\x89\xd5?\xa6\xf2ScGw\xcc?\xebUb\x8d\x18\x1a\xb9?\xee\xa72\xf2+4\xd0?\xb0\xaf\x1c0\x11\xc3\xd9\xbfc\x84\xbf\x9eIN\xd0\xbf\xac\x7f\x07\xdc\xc8\xd9\xab\xbf\x06\x16\xecnb\x8c\xd7?S\x8ce\xc1*<\x99?\xb5\x9d\xdb\x12>\x9c\xc0?\xa6\x91\xeb\xa3\x9a\x0c\xd8\xbf-\xe6H\xf2\xa6\xcf\xd7\xbf\xa6\xd9\x8f\xfat\xd9\x99?\xff>\x80\xc7\\\xa8\xd5?\x8c\xd3\xf7S\xc8q\xd0?\xd1\x8eA2(\xd4\xda?\xdd+\xcdA\xb9\xff\xd1\xbf:wRBk\xa4\xbe?4xgq\xa1B\xc2\xbf!\x9dB\xc7d\xcb\xbb?5\xd8\xc5\x97Q\x7f\xd5?C\xa4@zf8\xd5\xbf\xce\xcc\xd8vh\xbd\xd1\xbf\x89EN\xc6\xb9\xf6\xc6?7&\x08\xcfw\\\xa3?\xb8\xd8\x10`\xca\xdf\xb3?\xc9\xb2\xbb\\.\x13\xb5\xbf\xa1\xab\xbf\\\xbbp\xc7?\xed\x03\x0b\x1c\xe4m\xd5\xbf\x15\xe0\x8e\'\xdcZ\xcd\xbf \n\x96\xc5\\\xff\xda?\xe2\x0b\xfd\x838\x01\xc1\xbf\xdc\xfe\xc5\x1f\xa1\xf9\xc8\xbf7\xc4\x9cJE^\xda?\x06\x1a5z.m\xc0?A\x028h8\x85\xd7?r~$\x06\xfa_\xc5?\x9a\xb1\xfc\xdf\x8eg\xd2\xbf\xa8\x8aEJ\x1b\r\xd7?\xc4B=\x02E<\xcf?mA\xeb\xf9<\x9f\xd9?C$k\x19\xb5\x1eW?\xa0\xb45\xe9\xc9?\xd7\xbf\x9b=\xf1!\xd6`\xbc?\xb3\x10^87\xae\xa6?\xfe\xf9\x8d(\xf0=\xc8?\r\xad\xce\xf1\x8a\xf0\xd5\xbf\xbc\xfe\x16\xb2\xdc\x10\xd4?1\t\xce\x1b\x8e\xfe\xc3?\x08wb\x1c\xa1\xf9\xd2?\xe8\xae%\xddbSY\xbf\xb1\x9b\x02\x85jK\xd4?\x90\xd7\x90\x9dE\xb2\xc7\xbf\x03\xb4+\xb57\xd7\xd1?o\x12\xe2Q\xaa\x8c\xda\xbf\x16\xc6?\xe4z;\xb9\xbf\x93PJ\xdd\xe3#\xd1\xbf?\'U\x10_\xf5\xd9?x\xb2\xe7\xce;\xde\xbb\xbf\x18\\\x81\x99\xf5\xea\xd6\xbf\xf3\xbc\xf7\xb9\x94U\xa3\xbf\xcb\x8e?\xf4\xdei\xd7?~K<\x9e\x87\t\xc0?\xbbL\xd2\xa9\x98n\xbf?\xcb&\x88\x94\x11\xaf\xb3?#\xa9P\xa45\xd3\xd0?\xeds<=\xa2\x03\xcd?\x1b"\xb3!7t\xd3\xbf\xa8\xfcp\xcd\x0f\xda\xce?\xd0\xda\xfd\xdf\xbe\x08\xb8\xbf\xc6\xd9\xa4\xaaZ\xe6\xd1\xbf\xa6h+V\x1a\xb8\xd6\xbfT\xf2\x18\xf7)\xd6\xd5\xbf\x8e\xe6\xe4\xe5\xf4B\xd6?s\x8e \xb36\xd9\xc9?\xbf\x9eI(e8\xd0?o\x02u\xc1\xfd\x05\xa3?\x11\xc8L\x1c\xdcs\xca\xbf\xe7\x1e\x9eI\x82\xbc\xcc?\x8eM^\xc1\xd8\x0c\xd3?Lc\x02\xc4\xee\xfe\xd4\xbf\x8f\xf9/a\xe0\x9a\xd6?\x10\x04_\xd84\t\xcf?\xe3L?\xd9\xb1J\xcb\xbf\xb0\xe5.\xd0\xc6+\xd9\xbf\xc2\xbb\x14\x83\xf7x\xdd?\xa2b\xe0\x87\xb8\x0e\xd4?p\xf7\x07\x96\xf6t\xc0?\xdf\x7fZ\x15[\xa9\xdb\xbf\xf5\x91J\xba%5\xa4?k?\x01\xb2\x9e\xaf\xd0?\x86\xc9kL\xc7\xe1\xd8\xbf2l\x97v8\x0f\xdc\xbf\xd9" \xaf\x8f\xad\xbf?\xbf/nue\x07\xd8?>.3=-\x18\xb6?\xcf\r"\t\xfe\xa5\xd1?\x80\xf0\x04\x12\x86d\xd4?i*\xcf\xa7_g\x8d?by\xe8\x08`\x17\xb0?yk\x95\x96\x8bC\xcd\xbf\x9b\xeb\x1a3I\x86\xcf\xbf;\xca\x91\xc7\x92\xc6\xdb\xbf\xaf)\x7f,\x19\xd7\xac\xbf\xa9&{]\xa1&\xc3\xbf!\xd4\xeeh?\x0e\xce\xbf\xfb\xfb\x00\x0f\x82\xd4\xd7?/\xa0U\xcd\xd4N\xa1\xbf\xef0t\x08\x0f\xcc\xd0?\x07\xb6\xc9=\xe4\xae\xc9\xbf\xec\x8e\xb9\xa2\xc9\n\xc5\xbfcA=\x02 \xc3\xc2?\xf8[u3\x97\x0f\xb6?\xb9\x1e\xb8\x83\x03 \xd1\xbfu<\xb2\xde2\xa4\xd3?JA\xf3\x04\x9d\xa0\xd4\xbf\xecGW\x91p9\xde\xbf\x17\xd1\xb7\x98$Z\xda?\xf8b\xa4\xc6\xf5\x81\xd8\xbf\xe1\x9c@$\\\x11\xd7\xbf\xa6\xea{#\xac\t\xdc\xbf\xdag[G\n\x1e\xd9?\xd8N\x86G\xb5\xd5\xd0?2\x83\xfc u\x08\xc4\xbf\x04y\x93_"\x94\xc1?\x9cQ&\xb9\x1b\x18\xc6\xbfU\x87\r\xe2{d\x93\xbf\'\xa4-\x1f:\xed\xcf\xbf\xabi\x92\xc0\xcff\xd9\xbfmE\xa5l\xe3\x92\xd5\xbfy\xbf\xb8\xb7\xcf\x0f\xce\xbf\x91\x10B*a\xbd\xcd?\x8ed\xbc\xc2(6\xc3?\x80W=\x81c;\x84?;5|y5a\xd8\xbf5E.oh\xf1\xd1?(\xce\x9ev\x0b\x80\xb9?\xf5l\xaab\x14\x17\xce?\xb4\x98\xd1\xed\xad\xa7\xa0\xbf\'!:J\x01b\xd0?1\x8e\xa4=\xc9\xc3\xd4\xbf\xeb\x03h3z\x0c\xc7\xbfJ-u\x85\xdf\x85\xd5\xbf%\xd1\xc7\xb3`\x13\xcb?4\xb4=-c\x14\xcc?|\xcc\xfc\xd6\xfa[\xba?<\t\x17\xecU\xa1\xc1?\xe5~_\xa1k\x19\xc8\xbf\x1d\\\xf5\x9d\xb3\x02\xd1?\xa5\x9d\xd4R\x0c\x08\xbd?\x10\xc1_\x17\xf7v\xb1\xbf~S\xda%x\x9f\xca\xbf\xe8~\x0b\x06\xfe\\\xb4?\x01\xc4%9-\x02\xce?\n\xe4\xb75!d\xc6\xbf\xa5\xa3D\xac\xfde\xa1\xbfF\x83O}\x1aC\x93?\xe4\x99T\xa4\xbcv\xdd\xbfq&\xb7\x8f}\xd8\xd3?\xf0\xf1q\xb4\xe5(\xd5?\xd1\x8c\x94\n\x14\xb2\x91\xbfHu\x90|\xee\x8b\xd8?"\xb4\x80\x93]P\xaf?p\x13\x83+\xb3}\xcb\xbf/:\x10?\x9b4\xab\xbfjf\x18\xbf\x12t\xca\xbfC\xec\x9dt\xa4J\xd3\xbfkym\xcc\\\xc3\xbb\xbf^\xb1v]\xce\xe2\xc2\xbf4+\xe3}\x96\x0f\xd6?/s\xd5\x17\x88\x99\xd4?"o\xfe\xff\x1c\xac\xdb\xbfV\xa1SUz\\\xcc?xu\xcf\x16\xdf\xb8\xd6?\x9a\x08#Y\x95\x17\xd9\xbf\xb9M\x80|\xf9\xf8z\xbf=n\xee{\xb7\xe2\x9c\xbf\xe9s\x9f\xdei\x14\xbe?\x83g\xbaO\xf9o\xc8\xbf\x1e1y\xa5\x13A\xb1\xbf\xe5\xb4x\xd7vw\xc0?\x9eP\xcc\x88\xfes\xb5?\x1eF\xff\x98\xa73\xbc\xbf\'\xef\x0e3p\x10\xd4\xbf\xef(\x04\xcc&\xe9\xcf?\xfe\xf6^d&V\xc5\xbfo\\\x8b?\xa5\xf7\xd5\xbf\xf8\x87<\xff\xf0\xbd\xb8?\xf1\xb3\x93\xdch\x14\xda\xbfR\xd7\xd4l\xa9?\xc5?\\(\x03\xa2\x06\xb3\xcd?\tQ1\x9f\xf6L\xd9\xbf*\xf0y&\x9b\xf4\xb3?\x05\xfd\xc5\x93\x92\xb8\xd0\xbf;w\xc6T[>\xd1?\xdf*\xf3^\xca\x9c\xc1?\xdb9\x1e\xcfo\xce\xb5?\x97b\xf5\xc7O\xc3\xa8?s\x9c\x11\x0f\x1fq\xb4?\x84\xa04\xbd\x87\xa4\xd8\xbf\xcf\x0fJ\x9eQ\x04\xdc?\xd8L\xfb\x17\xa2n\xdd\xbf1\x11-\xc9\xdc\\\xcb?\xc4\xfeM\x84\x1b\xe8\xc6?]S(\x8f>\xaa\xda\xbf\x017I\x818\xee\xd7?\x13\xf5 \xfe\x06\xf2\xd1\xbf\x08ZP\xef\xc6&\xd2?>\xe0(\x88\xfe\x0f\xb0?\x92N\xdc\xbc\xdf\x02\xcc\xbf/\x17\xc4K\xdd\xc6\xc9\xbf+\xb8\xf0\xe0\xd3.\xc6?y\xddm;\xe9\x0f\xd7?\x1f6\xc1L\x04\x87\xd4?!@\xfd\x86\xe6_\xac?j\x88\xdc\x969P\xcd\xbf\xcc\xe8\xf1\xea\xbf\xd5\xac?zB\xc4Z\xed\x9a\xc2\xbf\x7f\xfb\xeb\xcbd\xb1\xd7?m\r8x\xa44\xdb\xbf\x00\x17\xfb\xa0\xec-\xca?\x880\xf0e_\xb8\xd2?\x84\xaa\x19\x08\x9eK\xd1\xbfG\xe4\x8a\xce\x14\xf2\xb3\xbfx\xf0\xa8\x02\xcd#\xc0\xbf\x19J3\x03\xa2A\xd8\xbf\xb5\x17\xf0\x15\x1dBq?\x0425P6\xa7\xd9\xbf0.\xd6m6k\x95\xbf\x1d m\xfey>\xdb?\x0b)w\xcb\xec_\xc7\xbf7\xf1~\xf1sk\xd0?\x17\x84\xa6\xb58\x15\xc2?\xf0\xf9\xb1\x8e\x82a\xd4?\xca\xc7\xb8\x86\x8f?\xca?\x81\x0f=\xcd\xe1\xe1\x94\xbf?\xd0\xf7\x91#\xe7\xd4\xbfy\xe48\x95X]\xc1?z\xc1\x9cIg\xf6\xdd\xbf\xda\x88e\x8aGk\xd9\xbf\xce\xcb5\xbe\xe2&\xc1?\xa7t\xc6\xc2\xe0\xa0\xc5\xbf"\x05\x05f\xd0\xe2\xc8?\xc2\x93G:\x10\x02\xde\xbf\x85\x9d9\x85\xd4\xba\xc4?M\x1b5\xc0a\x1b\xd9\xbf\x062^>0z\xb0?\x90L\xac\xb6\xdc\xb9\xb4\xbf\xb9\x99\xd3B=\xb9\x98?\xbe\xb624\tZ\x8b?\x1e\x94\xdc\x18!\xf9\xc5?\x80\x0fHu\xa8|\xc2?\x1f\x94\t\xdb\x07q\xc6?\x80\xf4\x1c\xae.\xb3\xd3?\x89p\xf7\x94;\xa2\xcd?$\xa9i\x97\xc4\xc8D?\x12\xbcY\xe2~\xae\xa0?\x97R\xbb\xe8\x14\x8c\xd9\xbf\xd4\xf6\x18\x17\xb5\xdb\xa4\xbfI\x9c\x0e\x8c\x1e!\xaa?\xd2\xb8\xe4\x04\x7f\x82\xd5\xbf\x80\'\xc34\x12\xc3\xd3?\xa5\xfcqT\x107\xdb?\x07\xf5@D\r\x11\xc6\xbf\xe8V\tr\xc1\xc2\xd1\xbfC\x0c\xb7\xe4\xd9M\xd3\xbf^\xa1X\x8cw)\xcc?\xfe\xd5v\xdd`~\xda?\'\x01\xfe\xa2\xf3\x89\xc2?\xaf\n~\x12\xd6<\xd2\xbf\xb3z\xb2U\x01\xe6\xca\xbf}|\x08\x111C\xdb?I\xe4\xf2\xfe\xce\x99\xd2\xbf\x9cDLpX\x99\xd3\xbf\xffi\xdes8\xd9\xc2\xbf\xebo\t\xcc\x04U\xc7\xbf>\xb9\xf9NU\xdf\xcd\xbf\xb4vZkH\xe9\xdb\xbf\xe9A3\x80;\xcf\xc2?\xf1km\x1c\xbe\x92\xd6?\xfd\x1e\xadj\x97\x84\xd6?4\xc0\xba\xb5X\xaa\xc9?\xd3/\x84\xf4tX\xb5\xbf\x98z\x01\\\xfa\x16\xd7?\xfak<yRv\xcb?5\xf9\x1d\xa0\xf5p\xdc\xbf\xf6\xde=_-\x88\xd0\xbf\x94^\xf8J\xcd\xb5\xd9\xbf\x81NM\xe3mh\xdb\xbf\xc5\x11Y\xb1~\xcd\xd5?0\xe4\x07<\xb2\x10\xc1?|\x0f\x9d\xb7\xe5\x8c\xc2\xbf\xb5\xfd\x9d\xc6\xbf\\\xd3\xbf\x97es0\x8dT\x91?\xc8\x95\xcb\xda\x93\xb4\xd7?\xdd\x9f\xd0#\xebS\xd2?\xfd\xa4\x14\xed\xdc\xce\xad?\xef\x0e\x83.\x03\x89\xdd\xbf\x8a\xc5>1\x8eB\xcf\xbf\x1f\xf3z\x0e\x81\x16\xcd?N\x8f~]\xb1w\xd9\xbf\x13nV7\x82\xa1\xd3?\xf9\x15\x03\xef\x8b\xcb\xc0\xbf(4Y\xd9\x16\\\xc3\xbf\xb9U\xa9y\x84\xe2\xb8\xbf\xb1Ne\xfa\xd8\xbf\xc3?`\x05\xeb\xd4w\x81\xa4\xbf=R\xd1O\xd6b\xd4\xbf\xd8(\x929\x93]\xc0\xbf\xe3\xabsf-\xd1\xd2?Y@y\xe2\x14T\xc0\xbf\x19\x08\x14\x9d\xd33\xa3?W\xc8\xe3\x04/\xa8\xd7\xbfM\r\x88\x05P5\xde\xbfK\xbahb\x84]\xaa?\x1b\x8a\xf7\xe49\x9d\xd9\xbfu\xd1\xbd\x17En\xd4?\xaf+\x0f\x81Y\xc4\xda?\x02\xe4g\xe0_7\xda?x\x12\x9e\xf8\xc5I\xb4\xbf\xd3D\xb9F\x18l\xdd\xbf;\xc62\xdfQ\xb3\xd7?s\xe3\xdd\x0b\xb2o\xdd\xbf\xa6W\x82\x04\xb9\x0f\xc8\xbf\xa1\xcb+\xc3X\xb1\xd7?\x07K\x87\x85h,\xdd\xbf\x80B&7)\xd3\xcc\xbf|.B\xa8\xdc\xd9\xd2?\xb9+\xcd!\xf6\xf5\xcb\xbf\xffuA\xdf\xafJ\xcd\xbfi9\x88\x87\x84\xd2\xd5\xbf\x06p8\x8d\xec\xae\xd4\xbf[%3a\x12\xbf\xc1\xbfer\xb4\x14\xd1\x93\xd5\xbf\xd2\xf4\xce\xb5!2\xd6\xbf\xeeFo\x00wf\xb0\xbf\x1f\xd2\xd6\xf9\x15\xa0\xce? \xc9i,U\xd6\xd4\xbf\xeb\xf6\xa9!JiG?\xd1\x1f\x0b\xb7M\xb3\xd6?pQ\xca\xab\x81\xc8\xb8?]\x96\x05\xb0Vr\xcb?\'\xac\xf0\xafA\x04\xdb\xbf\x06]\x9c\'\xdd\xc0\xd5?\x818b\xe3\xf3\xd3\xb0?.\xe9l=;\x85\xbb\xbf\xb1\x8e"/J\xe5\xce\xbf=\x8d\x86\xaa\xcb\x14\xd1?\x81I\xd8\xa0ht\xcf?\xf9\xb9\xe0\xef\xc0P\xd7\xbf\xdb,\x0e\x8a\xb3\x89\xc0?\x94\xf7\xe8v\x07\xf0\xce\xbf\x91\x8e\x94\x13\xceV\xdb?p\xc5>\xfa.\xd4\xba\xbfn\xe5\x84\xac\xe8Q\xce\xbfq\xa1\xeb\xf4\x8fa\xd7\xbfm\xd8\x81\xb4\x88L\xc6\xbf\x0c}\x13-\x8f\xeb\xbf\xbfM\xe7\xce\x80\x99B\xdd\xbf\xa9\xd8\xd7:\xe8\x80\xcc?\xf8\xf8\xeb\x07\x93^\xdb\xbf\x9c\x87\xc7\xa4T\xb7\xb7?\xf4\x8b\x14\xe4\x96\xebz\xbf\xfe\x80z\xd4\xde\x98\xce?\x87=g~\xc5@\xc9\xbf\xcc7\xc5\xf1)8\xd3?\xa4(\xd5:xi\xc9\xbf\x83_\xc6\x00\xf8C\xd3\xbf^i\x94\x8e\xd8X\xa5\xbfi\x8c#\xc1\xce\xc2\xc2\xbf;y\xa7\xc7I\x10\xd2\xbf\xa2J0\x86\xea\x1e\xc1?\x04\x87\xda\xde\x95\xe7\xcd\xbfEp\xc2$\xc6\x16\xcf\xbf\x07\x1d\xc0@~4\xce\xbf#%\xd1\xc5\x8e\x8e\xd8\xbf\xb6\xf7\xf0\xbf\xe3q\x9c?o\xaa\xaf\\\xe4\xa8\xda?\x82\x99\x9d\xef\xe4\xa3\x8a?&%g\x1aIT\xd6\xbf\xa0\x0f\x17\xfe\x9c\x85\xd8?\x08\xd0\x876\xa19\xc1?\x1fxBE8=\xc2\xbffl\x88*p\n\xd0\xbf\xb3t\xeb\xa3f=\xd9?\xe2\xe1\xcd\xc5\x97\xf4\xb6\xbf\xfa\xde\x8dpd\xc6\xcd?\xbc\x02]x\xe6l\xd8\xbf\xce\nV\xe1\x14\xc6\xdd\xbf\xc4\xe6\xad\xf5\xc4z\xca\xbf\xf0\xd1\x19>0@\xcc\xbf\xff\x86$\xcf7\x12\xc8?+.H\x00\xbc\xf3\xc2?N\x169!\xde\xa8\xd7\xbf\x03LJ\xabw\x7f\xc8\xbf\xaeL\x16:\xb4\xdc\xad\xbfk7?yp\x82\xc3\xbf\xeb\'N|\xcd\x80\xb7?\xcf\xb9\x8c\x1c\xf1\x17\xd1\xbf\xec\xa8\x82\xdc\x17\x0f\xcc?\xdc\xa9Uh=6\xd4\xbf\xef\xffD\xaa\x9bS\xd1\xbf^\x7f\xbe~\xd9\xd5\xc9?s\x1f\xa1J\x16\x10\xb0\xbf\x8d,\x9c];\\\xd5\xbf\xe9\xf4Y\xd6\xbe\xfc\xcb?\xc5\\L\x0c\xce\x9f\xd0\xbf\xca\x1e\xfa\x9b\xcd\xbc\xd1?9\x84\xdbD\r\x05\xd1\xbfp\xf86\x0b\x16\x85\xc2\xbf\x08\xe5\xb3\x06\x00\x00\xcc\xbf\x81\x8c \xbf\x1e\xad\xb2\xbfVW\x0fl\xf6\xb2\xcd?Z\xc2\xd4\xb9qK\xd7\xbf\xcf\xe4\xe6\x98\xcf{\xdb\xbf\xc3\xf0\x17\xe6\xac\x12\xd9?\xfe\xd64L\x8f\x89\xda?#\xed8"\xa8i\xd2?;\x95b\x14V\xed\xb9\xbfh\xddH\xfct\x03\xca?\xb4`*v\xb12\xdb\xbf\x1f\x1b4\x9c\x1a\xd8\xd2\xbf\xff\r\x84\xd8\x94\xbb\xd6?\x8da\xb7l\xa8\x9f\xd8\xbf\x00\xc2\r\xf2\xdf0\xc0?\x92\xbb\xc8\xca;\xea\x82?%J\x89]x0\xce?\xc8Nz\x06\xd93\xdb\xbf\xb0G\x91^\x85\xd5\x84\xbf\xe84a\x19\xcd[\xab?\xd2\xe3F\x1c\xf9\x1e\xc9?=\xb7\xcb\xc9\xd2\xa7\xda\xbf\xa1\x04\x8cT\x18x\xd9\xbfKJ\xef\xaeYy\xd5?R\x80Vi\xa1\xe6\xb5?\xbc\xbb\x0c\x12\x95\x8f\xc1?\x13\xe6\xcc%\xa4\x1d\xbd?\x92\x9f\x1c|\x95\x9d\xb7\xbf\xb4B\x9a]\xaa!\xc4?\x89\xa6\xdb\xb6\xd1\x07\xc2\xbf\xfe\xa7\xdd\xda\x05M\xb5?&>\xdb\x07\xd6\xc7\xcb\xbf\xc9\x9f\x1b\xcf\x97K\xb5\xbf\xa1\xea\xe3\x10\xd7\xe9\xd2?\xe9\xc3\xf4\'\x10\x93\xba\xbf\xff\xe4+\xff\x0c?\xcc\xbfb\xb4\xa2\x8b\xfb\xfe\xc5?i\xb3\xf7\xd1J\'\x82\xbf\xcf)\xea\x88\x9e?\xcc\xbf\x10>\xcb\x00\x8b\xd2\xd2\xbf\x1d\x88\xe9\x15g\xc2\xc5?\x9686\x88L\xe5\xda?\x08\x7f\xe3\xf3\xc1\x99\x95?\xa0)mW\x9b\xe7\xc0\xbf\xd0L\x04@7\xfa\xd9?\x1b\x7fI\xff\x90\xe3\x9c?cz\xf1F\xc4V\x9e?\x13\x01\xc6\x04\x11\xcb\xc6?p\xaf\xd6\xf9\xf9^\xca\xbf\xf4P\x13t\x13\xa8\xd5\xbfx\xb3\x07\x84L\x8e\x97?\xec\x1bJ\xae\x10\xd6\xdc\xbf6)KO\xdcU\xdd\xbf9M\n\xad{\x13\xc2?Dq\xe0\x9b]\x15\xb5\xbf)\x92 \xa02\x07\xcc?\xe0M"\x08\xc5\xa3\x9e?\x1a\x07a:EG\xc1?8#\xd3\xe9\xd6m\xc4\xbf\x83\x7fYh\\]\xb1?[\xee\xf2\x89\xfd\xdf\xd3?W\x92z\x9e\x98\xf7\xd2\xbf32*\xe4\xfb\xb2\xc8?\x9e<7\x8b\x15\x19\xa5?\xb9\x99\xebB\xc5\xdd\xb1?w\xef\xa5\xc3\xbb\x06\xd4?\xcb\x08a\xe3S\xa8\xd1?\x13\xbf\xaaS\xad$\xdc?\xa7b\x91\xa3\xc52\xc5?\n\xc0\x95\xb6pq\xc3\xbf\xe8\x97\xdf\xf33\xf3\xd1\xbf)_\xff\x02Is\xdc\xbf#\xc08>GW\xd0?S:n\x1c\xcd\xab\xda\xbf\xc2\xe7\xb3@\x10e\xd2?\xfc\x1d\x8dG\xf7O\xd1?\xf4\xf7\xea\xe9\x9b\xc3\xd9\xbfw\x06w\xed\x92\x11\xd6\xbf\x8aBp\xdf\xde/\xc8\xbf\x88-\x84\xeb\xda\xa7\xca?\xb9\xf1kOX\xa7\xd3\xbf\xc2/\xa5O\xa67\xbe?\x8bdHV4\xca\xb9?\xe99\x0f\xff\xf8(\xc1?\x9e\xd8O\r\xd5\x19\xd0?:\x93\xeb\xd5\xe1\x84\xc5\xbf3\xeaX\xfe\xe8\xfc\xca?M\xac\xde`sl\xcd\xbf\x98a\xca=\xa68\xc9?\x8d\xc9\xa8\xc11{\xcb?\xcd\xd0`\xf4\xc3\xd3\x86?\xca\x9a\xf1yL!\xd9\xbfA\xab\x80\x9e\x90\xe0\xd5\xbf9\xb0^\xfa\x18Y\xc4\xbf\xe0\xda\x15l/\xa8\xd7\xbf\xc1\xc9>\xd5\xa6\xa1\xbf?\xcf\xae\x06\xc9\xc0\x1c\xd5\xbf\xceda1\x8f\xa2\xd9\xbf\xf7@\xe5J\xcdj\xd6?\xcf\x95\xed\'\xba\xe2\xda?u\x92\xa6\xd9\x01X\xbf\xbfvfG*?@\x9e?\x82#\xc0\x08\xfdH\xd5?"i\xb9,\xdf\xe3\xd7\xbf(\x89\xd5W\x0cT\xd2?\xf8\xee\x98\x8aX1\xb5\xbf\xc5\xeen\xbd\xc94\xd0\xbf%\xf1\xael\x93_\xc2\xbf\x9d\x8dl\xcc\x8c_\xc5?n\xab\xf8\xe2\xce"\xd2\xbfj\x04+\x82\x1aE\xd8\xbf\xe1\x81\x83\xba|\xe2\xda?\x85J"\xf4\xc3\x8c\xb0\xbfk\xe7X\xd8\x11\x80\xcd\xbfC\xd7m\x1a\xf7\xd0\xb9\xbf\r\x99^"BF\xd6\xbf\x0f_e\x80\xa2\x80\xc9?\x98?\xe9Ybj\xc9\xbf|\xf8\x15\xf5s\xb0\xcd\xbf]Y\xf2$\x01\xfa\xd1?\xa4E\xbc\x9b\\\x18\xd1\xbf\xde\xa8\x81\x0bR\xa4\xc5\xbfFp\xd0\xe3\x00G\xcd?\x00\x9fSj~\xd1\xdd\xbfIE)\xfe\xf1\x8b\xca\xbf\xfb2\xfb\xed\xe8\xe0\xbc?\xdd\xa5\xdb\xb2 \x86\xc3?\xa5\x92(!\x9f\x10\xd2\xbf\x0et}\xf1\xf2\xd4\xcc\xbf\x07\x93\x88\xf9d\x03X\xbf\xb7\xe44\x13\xc0(\xb4?\n>\x97o\x86*\xc0\xbf\xea\x87\xd1\x1b\xd5\xf0\xad\xbf\xb8\xba\x96\x90\xcf\x9a\xcb\xbfq\xc5\xb7Q\xad\xf2\xcf\xbf$\x14\xe1\xa5"\xfa\xd5\xbfQ\xd0\x1e4\x1a\xe8\xcc?\xb8\xcf5\xe5\xe2\x18\xd1\xbf\x1b\xb3#\x9b\xfd\x15\xc9\xbf\xd6\xb4k\xc9O\x83\xd3?\xdfM\xf2\x93[z\xd0?s\x87\x1b6) \xc5?\x8b3\x02\xe0{\xad\xcc?Q66)\x8e\xd9\xcc?\xcb\xdb\xf7\xf2\xd53\xd8?\xafH$K\xa0\r\xc3\xbf^\xc4\x90\xb2\xf1\xcc\xc9?\xf3\xf7\xa1\x95T\xe1\xc9?1\xa2bp\xe3\xf4\xd7?\xae\x96u\x94\x89:\xc3\xbf\xd3>/\xa1(\xe8\xd0?x\xed\x10\x08\x89\xa7\xd0?\x97\xf0Tae\xf2\xd7\xbf\x89\x81G\x81\xe5\x14\xd3\xbf\xcd\xa8\xfe5\xdae\xd3\xbf\x8bRr\xcf\xd6\x81\xb0?NK-\xd45\xfd\xda?2\xaf\xac\x7fZ\x8f\xb6\xbf\x14\x17\xa5\xd5\xe9\xb2\xb5\xbfc\xa4\xd4\x02\x8b,p?\xb8"\rrV\xd9\x90\xbfG\xd6\xdac!\x13\xde\xbf\xf5\xed\xb5X[/\xc5?\xf8\xe1O8\xbe\xaa\xd8\xbf\xa9\xe6\xe4\x94L\x9a\xac\xbf\xaf>;c?>\xd1?"r\xcc\xf7\xba\xa4\xda?\x96B_\xaa\xa8-\xc3?gh\x03\xb6\x045\xc6\xbf\xd3\xb8&\x9a\x90F\xa1\xbf\xa4\x83\x7f\xdf\xbb\xa7\xda\xbfj\x88\xaf7yP\xd2\xbf9\x82\x8a\xe4\xce\xd7\xc1?\xef6Y\xad\xae\x9ey?\xd0@\x01\x813s\xcc\xbf\xe6\x85%\x98>\x87\xc7\xbfZ\x00\xf91sq\xb8\xbfx\xd7p@\xe7\t\xd9?\x89\x16*\xe96\n\xbe?\xe7Z\xe9\xf7^\xd9\xda?\xf6p\xb7\xf9I\x12\xdd\xbf\xd4\xc7\x8eE7<\xd9?\xc3\xd5`\x9f\xd7\xbb\xd7?e\xcc\xa2hw#\xd7\xbf/\xc3\x03\xed\xa8\x08\xb4\xbf~\x82\xa8m\nc\x8c\xbf\x8f\x17\x90(\xe2\xac\xc8?\xf1\xdcL\xf0\xb4%\xd1\xbf\x93\xc4\x85\xfd\xd89\xd0?\xef\x9a\x089B<\xd9\xbf\xcd\x01\xd0\x0f\xe3Q\xdb?UY\x1a\xb3\x9c\xf7\xd9\xbf\t\x06\x01\x86qQ\xca\xbfj\x08K{"2\xbf\xbf\x8d\x03\xe4\x7f\x87^\xd5?\xe97N\xbc\xb4c\xdf\xbf\x84\xf3#\xeb\xe6\xf0\xda\xbf\x8b\xc3\xec0v\xc6\xc8\xbf\x99+a\x19\t\xd0\xc6?y+D\xfd\x0b\x11\xc2?\x85\xfc\xe9\xe0Zy\xc8\xbfg#\xa5\x93\xf8\xd7\xd1?\t\x1ek\xe2\x9d\xac\xb8\xbf\x1f$\x0e\x8b\xa3\t\xd6\xbfWl\xf5\xb2P\x9f\xd1?\x9d{\xe2Y-:\xdb\xbfx(\x1f\x0f\xcbh\xda\xbf\x81qV[\x81\xd1\xd1?\x98B-\xa4zH\xc6\xbfM\xee\xe21\xd0>\xbf?\xe9\xd7\xe8\xabY\x81\xaf\xbfa\x92\xb2\x13\xc69\xbc\xbf\xe8R\xeaf\xd3\x88\xc0\xbf\xf6k\xf1\xae}\xdf\xd6?e\x98\x19\x9d\x97\xee\xd5\xbf}a\xa5\xc8\xee\x00\xa4\xbfh?\xecN\xe4\\\xd5\xbfc\x14\xff\x02~\xd9\x88\xbf\xc8yH\xd6\xdc\xee\xd6?\xea\xecI\x87^\xc2\xc1?w@\x8f\xc3\xde\xaa\xce\xbf\xb5\xa7\x01@v\xd0\xde\xbf\x86\x0e\xaaH\xfdd\x88?}e\xe4\x1c\x957\xbf\xbf[\xc2\'\x0f>\xe7\xcc\xbf*\xf1\xe5\xd2\xbc}\xa2?\xa00\xa2o\\N\xd0?cZ\xe6+\xcc\x8d\xdb\xbf~\xc4\xba\xee\\K\xd5?\xbc\xc4\x05\xaf\x00G\xd8\xbf\x9b\x08\xceir\xb2\xc2\xbf\x1e\xe3?\x10M\x0e\xc1?\xf7y\xee1\xe4\x02\xc9\xbf\x81RQ\x86\'\x81\xcf\xbf\xef\xdfy\x8e(\xd7\xb8?\x0c\xab\xcdx;\xbf\xab\xbf\xbe\xc1\x91\xd9z\x88\xd1?|\xf9\xd6\xd8~\xb0\xc5?F\x1c\xf1\xb2Av\xd5?\xa6\x0c\x96\xaf\xee\xaf\xc4?\xf8%\xdc\x96\xb9O\xda\xbf\xf5\x962\xeb\x97=\xc7?\x9a\xc0\x1c\xb3\x9f)\xcd?\\\'t\x1b\xc3W\xd1?\x1eM0\xe0\'+\xd4\xbf5Rfx.\x84\xca?\x07d\x07&\x08Y\xb0\xbf\xa9q\xfe\xb0y\x84\xda\xbfM\'\xdc\xa2\xf7\xd8\xd2\xbf\xf4\xf7#l0\x14\xcc?\xa1^*\x88\xc2\xbf\xd4?Pe\xe9\xfd\x93\xd4\xc8?\xec\xf7\xfb\xd7Wh\xcf\xbf<\x11\x9eh\x81\xdf\xd1\xbf\nC\xd1\x82s\xa6\xd3?\xdc\x9b\xc1\xf3\xb8*\xd0\xbf\x92u\xce\xb4\xc2\xdd\xc8\xbfF%<\x1b\xc9\xb2\xca?\x97\xe9\x15\xe4J\x90\xd5\xbf\x1bV\x8bC\xe6/\xa5?\x82|\xf9\x1b<\x9a\xbb\xbf\xc2\xe5\x90\xe3y\xb1\xac\xbf\n\xb7\x04\x04\xbc\xb6\xc8?\xcaizmVH\xda?\xf8\x9d\xf5sF\x87\x82\xbfW\x93V\xa2f\xf7\xc2?\x0b%c\x87\xc2\xf9\xd1\xbf\x9a\xe0\x9d\x10\x87O\xd0?r\xf5h\x03\x0f\x19\xb4\xbfr\x1b\xda\xce\n\xbd\xc6?\xc8\xdd\x98\x14J\x0e\xc3\xbf4\x97H\x017\xcb\xb6?H\xff\t\x08\xc8\xcc\xc7?\x02\xac\x13\xbc;\xff\xd5\xbfc\x06\xc7\x06\x15\x11\xc6\xbf<\xd8\xc2Kp-\xc6\xbf\xdd\t\rB\xf25\xb7\xbf\xcd\x10\xa7\xe8\xc9F\xd5?\'\xd2\xed~\xe8C\xaa?\xacX/\xdc~\n\xc3?=j\xfe!\xa0%\xbb?\x0c\x1d\xb7\xa8\x91I\xca?L\x11\xb90\xe3\x82\xcb\xbf?\xf3?\xd7\x909\xa7\xbf\x15\xfe\x9e\x18\x15\x0c\xb6\xbft\xbb\x85\x8aWT\xdc\xbf\xc8-\xf4\xe5\xda\xe7\xc3?\x9f\x95s$\xf9\xa1\xd6\xbf\xdf\xb5\xea\x00\xe3`\xd1?#?:\xedQ\xed\xd4?\xb8\xb6\'\x92\n)\xc0\xbf\x93\x9e\xd0S\xe1\x05\xdd\xbf\xe6\xea\xd7\xc0\x94\xed\xd0?R\xaf\xcc\x89\n\xd2\xd2\xbf\xcb\xdf\xd8\x0f!]\xc5\xbf9)?\x8c\x17\xd4\xb6?\xbf\x86\xc4D\xe9\x19\xbc?J\xf8\x94\xc8R\x89\xd7?ns*N\xb4\x14\x9c\xbf6\x91t\xd0H\xde\xd6\xbf\x14k\xe0!al\xc5\xbfX\x94\xa1\xab\xcc\x8b\xd1\xbf\xc4\x02s\xa4\xa8\r\xd4?\xdb\xf0ZT\xf7\x11\xd3\xbf\x9b}\xcfo\x1e\xdc\xbf\xbf\xe4\x13\x19\x92\x7f\x15\xc3\xbf!\xd4\xa4\x9e\xec@\xce\xbf\xa1l@\xd8\xeb\x83\xca?\x16C\x0e\xc7o\x94\xb9?h\xbd\xf9b\xe6\xc4\xd2?\x7fM\xd2Uz\x98\xbd?\x0b\x07H\x13\xcbj\xda\xbf\x0c\xc9\x83\xcbG`\xd9?\xeb\xf4\xed\t\xfd\xf7\xcc?\x9c\xe2\xd0*N$\xab\xbf1\xda4\xd8\xe0\xb9\xb3\xbf\x80\xe0\xe8\xc9b\xdc\xbc?p\xf5\x82yV\x80\xd3?,\xa3o\x96{\xa2\xd6?\x03\x8a{!\xc3\x90\xcb\xbf\xb0\x93~=\x92\xd8\xd1?\xff\x02\xe2\x95\xe7\xb4\xda?\x0f\xb5\xcc\x11Y.\xd7?)\x8c<\xb0j\xbb\xce\xbfxkm\x15\xaa\xa6\x94?%\xa3\x84\xa1\xbf\x91\xde\xbf%\xfd\x16\x95\xb9e\xbd\xbf\x03&\xf0\x1e2\x83\xc8?+\x01\xc8P~g\xd6\xbf\x08\xf9\'lU\xfb\xaa?\xd8W\xac\xbe\xb4\xcb\x9d?\x86\x05`\x1e\xc3\xb9\xb7?\x9045\'\xb6T\xd5?\xe2)>\x94\x15\xbe\xcb\xbf\xa3\xdcWgp\x05\x9e?\x16]$}S\x91\xd5\xbf\x17\xbe\x8ay\xf6}\xc6?\xf4\xe0\xb8[\xe9\x9e\x91?B\x94\x13\x8b\xcd\x17\xd3\xbfMu\x08jb\x88\xbb?.\xd3M\xfe\xeds\xda?,B\x1eWR\x88\xcd?\x87m\x01\xa8b4\xd5?V\xc6$C\x83\xa0\xdf\xbf\xec!\xe2r\xda"\xd3\xbfKX\x19#B\xf7\xd4\xbf\x10G\xe5\xd3w\x91\xba\xbf\x1e R\xc8\xd2\xf4\xb8\xbfd\x15\xb5\xb7\x009\xdd\xbf\xf9\xd0S\xcc\xaf:\xd2\xbf\x959\x0e4\xe3R\xc7\xbf\t\x98M\xbe\xe6*\xbb\xbf\xeb\xad\n\xae\x0b\xc7\xcf\xbf\xf9\xd7\x1e\xc9\xbf\x8b\xd0?\xb7\xb5\xff<&\x88\xc3?\xe2\xc6\xe2/\x02#\xda\xbf\xdf(L\x8c\xfd\xa5\xd4?\xe9L\x94\x8bS\xa7\xce?\xbfe\x1b\x86\xc3J\xde\xbfJ%\x8e\xa8\xbf\xc4\xd4\xbf\x94j\x8fVx\xdc\xd3?\xb0\xef\xe2\xe8\xe6\xac\xc7?\xa6\xf2V!\xc2Iz\xbf\xb7m\xf5=B\xc9\xdd\xbf#\x8b\x95\n\xf7^\xc1\xbf\xf0\xfe.\x93\x91B\xd7\xbf\xa4\x90G+h\xeb\xc3?m\x8d\xaf\xc8\xebV\xbc?\xad\xe5\xc5\x9c\x1c\xd8\xd4\xbf\xcb\x1dx\xef~\xe1\xc8?\xd4\xb0\xcft@V\xdb\xbf\xfb1\x94\xb4\x8a\xa3\xa1\xbf\xe1\x88\x8a\xab\xab\xe8\xce\xbfbe_\x96|A\xd5?\x95\xcf\x98*\xe5=\xd2\xbf4;\x8a\xe1\xcfo\xd5\xbf\xde=\x0cd\xa3 \xda?xb\x9112\xfa\xd8\xbf:GOX\xcew\xdc\xbf^A\xcd\x92\xf6\xfd\xb7?\xca\x98\xba\xc4\xd3\x15\xcd\xbf\xac\x81\xf9\xcb\xfe\xfb\xcf\xbf\x06rT\xeb\xa3\x8c\xb9\xbf\xe9{$\xbd\xa8#\xd0?\xcb|\xdccg\xe0\xba\xbf\xca\x1ap`O\xb1\xc5\xbfD\r/\xb9\xf3\xb6\xc5\xbf\xb2A\xac\x89L\x9b\x9c\xbf\x15f\xa6R#\xcc\xbc?\xc3\xe7\xb5\xf8\xa0\x95\xb6?5\xf6o$:\xd6\xd6\xbf\xdc\x07\xf0S\xd4L\xd2\xbf\x9c\xae;\xb9\xcfY\xab?d\xcd\xe0\xd2\x81\x9b\xd5?\xbc#\xd9t\x9a\x8f\xca?\xa1\xd9\x98\xb7\x1a\x17\xc1?\xfcGx\x89\xf4E\xd5?\xc7{=\x8d\x9dB\xdb?k_>\x8a\xe2F\x9c\xbfQ\xe5\xaa\x9c=\x80\xd8?\x13\x16\xdb\xcf\xff\xe3\xd1\xbf\xe5\x0b\xfe9(O\xd3\xbf\xa7\x9a1=\x9d\xc9\xc1?\xd7^\xb3\xb3s6Z\xbf\x95$A\xd1\t\xaf\xdc\xbf\xd1i\xd3\x0e\x03\x1e\xbe?\xfeu\xac\xf0Fn\xcf?\xc3\xde.\xda\x1e\x9d\xa4\xbfn ?0\xcd\xba\xd5\xbf\xc9\\\x91\x96\xbe\xdc\xaf?\xc9\xfd\x94-\xbd\x06\xcf\xbf\x89\x85\xb9\xaa\\\x00\xd1?\xee\x8fs\xa6\x80\x94a\xbf\xf0T%\x083\xd0\xdd\xbf\xcdr;4\xcdP\xdc\xbf\xec\xf2\xa9(xJ\xc7\xbf\xae\xa1\xb2\xd0~I\xd7\xbf6\xff\x82\xb7\xd3(\xcd?\xb5\x0e\xc4+\xee5\xa9\xbf\x1f,\xaa\xe9\xb7I\xdd\xbf\xff%\x9fz\x0c\xad\xd3\xbf\xba\xd9Z\x10e\xbe\xc3?\xafK\xd5\x0b\xac\xca\xd3?\xdb\xbf8\xda\xcd\xd7\xba\xbfs\xe3M\x9a>/\xdc\xbf\xaf\xaa\xc9=+b\xb9\xbfX~\x1dH\x12\x94\xc5?\xfbW:\xf9\xa2\xdc\xd3\xbf\x06\xdc\x0b\xed\x96\xc3\xdd\xbf\xf7F\x8bVQ\x18\xb2?\x8d\xa6\x8f\xa8\xa1\'\xd5\xbf\x07&\x86\xf1\x1a\x19\xc6\xbf\x12Gr\xe3\xc7\x91\x90\xbf\xa4^\x17\x1a\xa4J\xd3?g\x81\xe2\xb9\x9a\x82\xd1\xbf\x8d\xa5h\xe2a\xd1\xb2\xbf\xe4\xcd\xe7\xff\xcf\xb2\xd0\xbf\'\xc4\xc5\xb5~\x06\xd0?\xa8!Y\x97\xf0\xa2\xda?\xde\x05\xcc\xfa\x1fh\xba\xbf\xa6Lt\xf1\x14k\xde\xbf\x14w\xb4\x14E"\x80?`;\xa2\xe4\x1f\xf9\xd2?\xeb\xf29M\xd8[\xd4\xbf\xc2\xdcA^\xd6=\xbd\xbf\x86b\xbdv\xf7R\xb4?\x96\xfc\xfa\xd8\xc8]\xd2\xbf\xd5tx\xa4\x00d\xd9\xbf\xfb|\x1c\xa2\xbd\xdb\xd7?\xb1\xe5\xd8\x16N\x03\xa2\xbf\xab\xa9\x92\xd9\xc0\xe8\xd7?B\xab:\xddbA\xab\xbf\x83W6\xf7\xc0\x8e\xbd\xbfI(\x08\xb9M\x9a\xcf\xbf`2>\xc9\x95r\xd2\xbf\xc4\rR,]p\xb0\xbf\xe4K\xe5\x17\x9a\xc2\xc3?\x1e:qI\x96\x1e\xde\xbf\xfcF\x86\xb0w\xb9\xd8\xbf\xda\xb3\xa5\x02M\x04\xda?\x83\x1bL\x1a}\xb0\xda?\xc5N\x9179\xc7\xc2\xbf\x82\x05\xef\xa2z\x15\xd8?\x9e\x04\xa0)\xbf`\xc3\xbf\xa8\xd1:Pw\xe9\xd0\xbf\xd9\xc1\xf9\xfb?;\xbf?-\x1b6\x8f+\x16\xcf?A\xc7\xb4\xf3s\xde\xa1\xbf\xa4\xbe$\xf3v\x11\xd6?SC\xeaU*3\xda\xbf|\x12\xf8\x19#\xfd\xd4\xbfV\xbb\x1c\x95\xe6j\xc9?\xd0\x9bk\xc4\xbe[\xc4?W1\xfb\xab\xefN\xda?\x0f\x98\xb9G\xde\xd1\xb2\xbf\xa5\x98\x06\x0f\xa7\xca\xc8?X\xe1\x17\xcf-\x0b\xcf?t\xd9\x07\xbb\x170\x81?AA\x9dK\xc3\xa6\xce?\xbc\xcc\t7\xcc\xac\xd8?&\xc9\xa1]\xcba\xab\xbf)\x06\xf0F\x9e5\xd6\xbf"a\xb1\x8b\x93{\xba\xbf\xb9\x81L%\xfcH\xd6?U\x15\r4k\xfc\x9e\xbf\x8b\xddXU\xfe6\xbd?R\xe5\xf5\xbd-\xb2\xd8\xbf\x92O<\xe1\xed\x05\xd3?\xd0\xb3\xf4\x1e\x96\x04\xbd?xX;\xff3\xf5\xba\xbf\\\xc9\xd5$F\xa5\xd0?Vw\xc7h\x1b\xe7\xb1\xbf\x1f\x81\xdd\x05gP\xd6\xbf/9\x85*\xe0V\xdd\xbf\x9f\x86\\*U\xdd\xd5\xbf\xaf\xc5w1^\xcd\xd0?y;\x0e\xe2i&\xd6\xbf=\xbbUbk\xd6\xd3?U\xaa\xcb\xaf\xbf\xb8\xc1\xbf7\x1aOas\xcd\xc1\xbf\xff\xe8\xf3\t\xa6\x85\xda?>\x0b\xa1\x1d\xd0\xc9\xc9?\xfa\x13\x81\xb5\xb8\xf8\xda\xbf\x15\xdc\xaf\xf8\xb1\x96\xbd\xbf\'\x13\x92\xf9\x18\xa7\xc0\xbf\xc8>H\x96.\x93\xd7\xbf\xc85\xc8\xb5r\x87\xc4?~\xdc8i\xc8d\xdb\xbf\x13\xbb\xc1\xb1L\x9d\xc7\xbf\xfar,\x8c\xab\xa1\x83\xbf\xdc\x0f\x1bO+\x88\xc4?\xae\n\xfa\xa3\xca\xc2\xd4?\xbf\x92K\xa4]\x0e\xb2\xbfB\x0e\xe7\x8a\xdd\x04\xb9\xbf\x883\x02odw\x9f?/\x034+\xc4\x13\xa2\xbf\xba(\xae((6\xcf\xbf\xce\x8c\xca^U\x98\xce\xbf4\x1e\x0b\xed\x1bI\xd7? 3\xa1\x87,\xa6\xd5\xbf\xad\xb3\xa5\xbc\xe5\xda\xcb\xbf[\xbfa\x97K\x86\xc6?vX\xfeE\x17\xdf\xd9\xbf\xc3\xaaA\x0e?A\xc9?\xbe\xdal\x8b\x920\xd2?K)\xaa\xf9b\x1e\xd6?L\xaf\xce\x8b\x0e\x17\xc8?\xd9\x19\x10\'\xbe\xfa\xd0\xbfy\x81\xde\xae\xe2\xc8\xd0\xbf%\nq\xf1g\x0f\xb5\xbf\xf3,\x85\xbdn\x16\xd4\xbf\x8e:\xfe\x99\xe5e%?\xad\xb2\x17O\xdaj\xd8\xbf\x0eD\x08p\xd0n\xc7?\x88\xf3RI\x8a\xb5\xd7\xbf\x0eE\x12\x00\xc3\x13\xac?1\xe5\x8d\xc3(\xcc\xd8\xbf\x8a\xdf;\xba-i\xd1\xbf\xcb\t\xf5D\x0b5\xa5\xbf\xabQ8S\xc5X\xd0\xbfi\x85P2\xebX\xc0\xbf\x1ay\x8b\x891\x97\xc1?\xbcN6 \x82\xee\xc9\xbfs&\xd6M\xb6\xce\xa8\xbf\x0f\xf4-\xa5 \xec\xd8?\x0b\xfc\x89\x0c\xf6\x9c\xd2?w\xbcO\x13\xd0\xa6\xc3\xbf\x8cB&o\xed\x90\xd2?Xb\xdf_\xc3z\xd2?<\xbf\xe1\xf0\xf0*\xd7?7\xd6\x9e\xbeNJ\xa5\xbfI\xff&\xf3\xed\x18\xd3\xbf\x0f\x87\xb9\xdd\xcf4\xda?5\x929o!G\xa6?\x90\x007\xe9\\S\xd1\xbf\xae\xe6\xf1\x01\xf2\xd3\xd6\xbf\x85\xa4u\xdc\x85K\xce\xbf\x08\xd3 \x10\xb1\xc0\xd2?;sN\xba\x9a\x9d\xd2\xbf\xd6\xddn\xec\x0b\xe2\xc0\xbf\'\x14\xc3\x1f\xe9W\xc4\xbf1\xd3\x1e\xf2\x10\x08\xd6?\x9d/\x86\xcc\xcc\xae\x94?\x0f\x84\xf56\xf6\xcf\xd1?\x88\xbc\xc0\xc8\xb6\xf8\xc2?+\xe0XA\xa7e\xcb?I8\x89Bn,\xd8?\x93e\xfejg\xd1\xda\xbf\xa8T\xac\x00\xca{\xd9\xbf\x1f\xf4N?\xf0\xd6\xcd?\xff\x86\xac\xa3?\xb3\xb7\xbfU\x99J\x11\x04g\xbe\xbf\x84\\\x82B\x8bG\xc2?q1\xf0\xf3\xefx\xd5\xbf\xa3\x02@\xeeB\xd6\xd0\xbf\xf5"\x9d\xd3G\x0c\xd8?]I\xb4{\xfaO\xd1?GG$\xf1\xe6$\xb2\xbf\x88\x07Y\x83\x89-\xd1?\xef8\x10\xcc\xcd"\xb8?>\xf6\x85^0#\xb6\xbft\x18p\xce#\x0b\xb8?\xbf\x8d\x1e?\x1b\x89\xc6?aQUo\xccp\xc3\xbf\x0c\xae\xda\xd7\xd7\xb1\xd0?g\xf8\x0fz\x8f\n\xbd\xbf\xb9\x1d\x95Y*\xc3\xd5?\xb7r\xec\x89\x0ba\xd7?\xc1\x81u\xac\xde\x8a\xd2?"\xb6\x91\x0f\tg\xc7?\x11\xb9\x96px\xc7\xd6?\xa5\xac_\xee\x89\xd9\xd0\xbf\x9fp\xe1\xe2Y\xe0\xaa?\x11\x1b*\xc6\x1b-\xb6?0c\x97\xef\x15\xd3\xdd\xbf\xce\xe4#>z\xcb\xca\xbfN\xfb\xf4:\xfe\x8b\xbf?\x94\xeex\x05\xaeD\xd2?3(4\xff\xb9\xab\xd0?l~o\x90\x98\x87\xc8?\x17\x85\xf6\xf7,\xcb\xc0?\x1a\xd2\x03\xd3t}Q?z\x03%b\xe0\x85\xb5\xbf\xec\x00\xa0\x9a\x882\xc4?\x16\x92\x8f=l\xe3\xd7?_\x8e[\xd8\x01O\xd2\xbf?\xbc\xebWnw\xc3\xbf\xb1\xdc8F\xbaI\xb4\xbfp$\x1dc\xfa#\xcd?t\x01\xbf\xf4SA\xd0?]\xce\xb6\x8f\x16/\xc5\xbf\xb2\xb2\x1d0\xe1f\xd3?qB\x8c\xda\xf2\x9b\xd8?\\,\x05\x19b\xfc\xa6?v@\xd5\x0fWv\xd9\xbf\x05\x91%F\xdc\x1b\xd4\xbf\xdf\xe5\xe6&\xbb\xa3\xd3\xbf\x95?\xb1\xf6 /\xd1?\x12\xc3\xcd\xa0\x81U\xcc\xbfCL2_[.\xd3\xbfDn\x94h\xa4\xbe\xc3\xbf\x81\xce\x06\x0b\x8d\x03\xd9?A5\xee\xb8I\xb3\x90?j\x8d\x1f\'\xd3 \xd8\xbf\x928!\xe2FX\x95\xbf\xb9u\xb5\x08\xe5\x92\xc5?x\xd1\xbdS\xe8\xc3\xd3\xbf\xa9#c$\xe9\xed\xa1?X\xab5\xdc\x05\xab\xb5\xbf\xb1\xf4\xf7\xe8\x1b\n\xc3\xbf@\xbe\x9e\x06\x9d\xe4\xd1?\x8cj\x049\xd0\x1f\xd5\xbf}\xa9O\xf3\x8d\x05\xd0\xbf\x93\xae\x1f\xd7\xdc\x04\xd5?u\xf4<\x9bE\x86\xc1\xbf\x97e\xd3G5\x81Z\xbf\xa8\x07\xc7\x17\xa8\x15\xd8?\x84\xa6\xac\xbf\xc13\xa7?\x87/|\xb1\x1fX\xd3?\x11A>\x9f\xf5\x9c\xc1?\xc0\x10\xe9\x80!\xfb\xd7?.U\'@\x10B\xd7\xbfc\xca\xbb*\xec\xcb\xb4?\x88\xab\xdf\x18a\x8f\xcc\xbf6\xda\xc6\xb6\x05\xb4\xd0\xbf\xccUJ\x8b\xf4*\xd9?Y\x14\xb9,\x03\x91\xd4\xbf9\x89\xc7\xc4vR\xaf?w\xcdH\x0b[E\xd6?\xceY6xH\xda\xc6\xbf\xb4\x1b\x16\xfee\xbe\xd8?]\xcc\xc9\xb2\rk\xb9?\x88\xb8\xa2\xfd+U\xb0?_u2\xfa\x01e\xb1\xbf{LC\xa9\\-\xd7?&&M\xfeip\xdc\xbfaB:\xe5"\xa8\xc5?\xff\x07Q\xe7\x1c\x1f\xa1\xbf\x9c\xf9p0\xe0\xc9\x82?j\x87\xb6(Vk\xc7?\xc6(\x15\x925o\xa0\xbfO\x0c\x0b\xee"n\xd7?\x9d\x8f\xfc\xa6\x9e\\\xc0\xbf\x1d\x18\x94`\xf3\xcd\xc4\xbf\xc6\x0b\xe9Vq\x9c\xd2?\xbb\xbd\xc7fy\xbf\xd4?\x05d\xa4jH4\xc0?(\xd2\xec9\x81\x8e\xa4\xbf\xa1\xc9\xdf\xaeb\xab\xc8?\xe1\xa2\xe68\xf4\x03\xd3?\xeb<\x8d\xf1\xad\xc2\xc4\xbf\x03\xa6p\xba<\xc0\xd8\xbfu\xf7\x8c\xaa`\xe5\xba?;sA\x91\xca\x8e\xb1\xbf/uep\x16\xad\xd3?N\x07\xc1\\g/\xb0?"\x08&\xd9B\x0c\xda?\xcd\x02\xe6\xdaE\xd6\xc2?\xbf#\x81\xd3"\x85\xcf?\x992\xcec\x1f%\xc7\xbf\xdd\xaeo\xc8k\xb3\xca?~M7/\xe1\x01\xa9\xbfU\x03Q\xd4\xa1\x06\xdb\xbfT*\x13\xf8u\x1f\xd7\xbf\xfb\x99_p\r\x03\xd4?9\xa8\x0cb\xfda\xd1\xbf\xebVm\xa6\xfa\xe7\xd6?)\x19,\xe5_\x0c\xc6?\x0b\x93\xdch\x93\xe3\xaf?g\xec\x00?\xf2\xa5\xab\xbf{\xd2\xed\x91\x81,\xd3?\x8a\x93\x03\rI\x02\xc3?\xf7r\xd9\x07G\x9d\xaa?\xf5 yaX\xe7\xd6\xbf3/<p3\x19\xd2\xbf\xa5T5\x95\x83\xa6\xd2?\xb4\xa0\x03H\x85\xf3\xcf?\xadS\xa8\xb3\xcc\x16\xd3?\x94+\x06\xdf&\r\xd1\xbf\x03\x11\x13\xb6\xc5b\xd3?R\xa7\x9d\x15\x06\xd2\xb6?\x04\xe0\x0c0\xd2\xe9^?*A\xc3\xf4.\xf5\xc6?f:\x0b\xcbR\xe7\x9d\xbfdD\xc1\x9f\xab<\xd8\xbf\xc7\x9f~mD\x8b\xaa?!]U\n\x1b\x1e\xc8?\x14s\xdd\xd6\xec\xc4\xca\xbf|$\x82f\xa28\xa7\xbf\xd5\xb5K\xb3\xa1\xd5\xd9?K\xd0\xf1*\x03\xe7\xd4\xbfc\xd5X\x10\x17\xb7\xd0\xbfz\xbc\xbf\xf7\xf4\x92\xd4?\xc8\xf5\x9aa\x9c\xf2\xca\xbf\x0cd\xe0\x84\xde\xef\xc5\xbf\x13o\x974\xf7\xc2\xd8\xbfi\xdfV\r\x8e\x00\xce?=\xbe\xbf\x12\xe2\x81\xaa?\xd5\x03\x03\xa26\xae\xc3\xbf\xcf\x93\xdf\x80\x1bi\xc7?x\xcco\x91)\xd9\xd7\xbfU\x1c\xaa\x0f.\x8c\xcc?uIqm\xa6\xeb\xd8\xbf\x95\nG\xa4\x92\x15\xa9\xbf\xa7|`\xd2\xf3\xee\xd4?\xa8\xb5t\xb6\xefs\xc5\xbf\x04\x94\xeaU\x1c2\xc2?\xe3h\x975\xa4\x80\xb2?\xef\xcdp7\xa8\xb3\xb0?\xd78\xf9\xf4 \xe8\xc8\xbf?\xfc\x95\xf1\xba\xb8\xcb\xbf]\xcdql_O\xd4\xbft\xcco\xd0C\x8b\xc3\xbfT\xe2\x14\xecPW\xb6?v\xdc\xc5K\xfb\xa5\xb8\xbf\xe9\xdeJ\xd8C\xf5\xd8\xbf\xb1p\xe7\xe9\x00P\xb1?\xfavGg\',\xc8?F\xaa\x9a\xe2\x04\xe4\xd5?\x98\xf0\xac\xd9\xe4\xba\xb6?\xf8@\xc1\xac\xb9/\xcf?\x9d\xbej\xb5\xd0\x1b\xb8\xbf\x07\xea\xa0*\xc6\x89\xbd?=$\x08\xbe\xa6\x86\xce?\xa2\x92o1\xfc|\xcd?\x7fa27\x16W\xa0?\xec=+\x90V\xfe\xd9\xbf\xb7\x8b\xab\x87p8\xc0?+\x0e5J\xb6\xc4\xd2?u\x8a#2\xa1 \xcb\xbf\xfb\xd1\xa2\xf7Sh\xa6\xbf\x86\xf0\xb9\xaa\xcf=\x9f\xbf];\xc6\xd3:x\xab?\x9d\x85{\'\xd2^\xda\xbf\x18Rb;\x16\xd6\xc9\xbf\xa6Z`%\x8e\xd9\xd0\xbfGy\x8a\xba\xa0\x08\xcd?\xd5j\xd4\xd6#\x00\xde\xbf\xc4\tq\xb9N\x90\x92\xbf\x0e\x90Ky]\xb7\xd1\xbf\x7f\xb0\xd1\xbd}\x8f\xbf?\xe3\xc5tP\x00\xc5\xd7\xbf\xea\xb7\x07\xd3l?\xb6\xbf\xf5&&\xa6G`\xcf?\xa1\x1d\xf3#\x828\xdb?\xad\x95\x14\xe4\xf7\xc0\xb7\xbf\x91T\x8c\xdb\x11/\x91?,\xe0\x0b93\x13\xd7\xbf\xd3\xc4#\x8d\x05M\xb3\xbfQD\x92p\x1e\x9b\xd9?4\xf8\xcd|?\xf7\xc6\xbf;\x98d\x95\x02\xd1\xa2?\xben\xf6\xa24\xf0\xdb?+\xbf\x1d\xac`z\xcc?\xa8\xd7-\xa6\r\xa0\xa7?W\xae\xd7\x84\x87\xaf\xbe\xbf/Q\xa5R\xb3\x8f\xac?B\x9fU\xdbB\x1e\xd5?\xeb\xaeS\xbc\xb5\xb8\xd7\xbf\xb6\xd8\x8d\xc3\xbb,\xdb\xbf\xa8\xf7\xd0\xd1\x83!\xde\xbf\xc6Jw|FC\xa1?\x1e\xef\x04\xdd\x1c\x7f\xc9\xbf>\xd4\xeb\xa8L\xbd\xd3\xbf\xb6\xee\x1d\x15\xe5U\xc1?\xbdN\xe1\x14K\x8d\xd2?o\xb9\xceu\xbf\x89\xd4\xbfx\xeb\xae\xd6\xd1s\xa2\xbf\xb8\x1b\x15X\x97\xd2\xd6\xbf\x07PZw\xac\x03\xdb\xbf\xa0W\xe5\xa8N\xf9\xca\xbf5nI\x11\xf8\xd1\xc8\xbf\x8c5\xf0av\x8c\xd8?\x85+\x00`\x16\x94\xcf\xbf\xea\xf4>^\x00\'\x8c?\xd5\x07\x16\xcb\x1cb\xd4\xbf+\x903>\xc8Y\xcb\xbf\x01\xfd\x8c\xebq\xf7\xd7?\xd9\xfe\xc4\x02\x10y\xd2?\xf8\xd8\xe0:\xba\xef\xc8\xbf\x98\xe4u\n\xfe\xf7\xc4\xbf\xe7\xb44\x14;\n\xa6?\xfc\xab\x94x\x06\xc7\xd3?\xa2\xfe\x1e\xe8z\xad\xd2?0\x03\xfey\r[\xb9?\x1en\xf1%\xe1\x8b\xdc\xbf\xcb\xcf\xc2E\x96\xe5\xd3?7Y\x0e\x0f\xd7\x04\xbc?Y\ro@\\>\xd5?\xc9\xe8\xd3!\xca\xad\xd1?~\x173\x87\\\x06\xd3?\x91\xd8\xfb\x06e\xa1\xda\xbf\x17=\x82\x86\xd83\xce?b\x10\x9f{4\xf8\xcd?>\x91:u\xfdr\xd1?,ka\xde?\xac\xc3\xbf\x98Go,\x92H\xb8\xbf,\x124\x96\xf3\x8c\xaa\xbf\x8a\xd2H\xeb`\xcf\xd6?%X\x17\x90\x9b+\xd4?\xf3\x91\r\x95\x1d\t\xcc?\xd1\xf3O\xbe\xb0\x88\xcb?\x1d\x81\x98\x88\x93\xa8\x9c?\xdf\x90m\xa4\xaaC\xd8?\xc9\x88\x05\xf5\xef\x96\xc0?\xf7\xdeo\x85J\xc8\xc2\xbf!v\x91\xe1\xd1\xf9\xcf?\x0ej\x87\xa9\x1f\t\xbd\xbf \x87\xed\x0e\x1e=\xb1?\xb9Ch\xcb$\xc5\xd2\xbf\x96\x17!\x88\x84\x80\xc9\xbf\x90\x05\xaag\x85\xb6\xcd?S\x11y\xba\xbd\x9c\xc6\xbf\x13j\x15\xa7\xe9\xe0\xc7?\x1eL\xa2\x7f\x8a]\xba\xbf\xd5M]\\f\xb8\xd0\xbf\xa20z0\xca\xa5\xad\xbf\xbe\xc0\x9fM\xc4\xd6\xbb?\xe8\x1d\x0f\xf7[\xe1\xca\xbfI\xfe\xc1\xe7\xa6W\xd5\xbf\xc1\xfc\xaa\xe0\xb7"\x8d\xbf\xca\xb4[\xe4\x83;\xb3\xbf\xd7r\r0\xa3;\xc1\xbfb\xc2\xde\xc7\\\xbf\xd4?#3\xbfp\x08f\xde\xbf\xc4rE\x19S:\xd6\xbf\xeeL\x12\xbf\xb1\x0f\xc1\xbf\x92Q:n\xf8\xed\xd3\xbf\xfa\xb0\x17\xb3\xb11\xd5\xbf_\xbc\x80\x88Y\x9c\xd3\xbfc\xba*\x9c(X\xc8\xbf7\xff\xbc\xe0(\x08\x98?\x9f$\x8c\xf7\x98o\xd2?\x98+\xf2\xf4u\xc1\xd2\xbf\xf7q\xa9\x94\x87\xb3\xcf?\r^\xc2\x92\xd6,\xd0?G`v\xfc\x1a.\xdd\xbf\xc5\x0f\xda8\xa8\xfb\xd9\xbf\xd1\x8e\xea\x8e_\x7f~\xbf\xcdaB\xc7\xdb\xbc\xda\xbf\x03TkU%\xed\xc6?k\x11[<\xf2\xf5\xc7\xbf\xb9+"\xdb5$\xa7\xbf\x1e\xba\xa5\x0f\xd9\xae\xdb\xbf{\xa4\xacl\xf9\xde\xc1?]e\xb3\xe7\xda\xe9\xc9\xbfo%\xc4\xc6n\xed\xcb?\xfaH!R\xabQ\xd7?\xdd\xc3Dn"&\xd6\xbf&L\x05\x94h\xed\xa9\xbf\x81\xf4<\xe6\x87\x81\x87\xbf\xc4\x0bp\xf2e\x16x?\xcc\xe3\xf5\xad\xbaS\xc6?\x91\x9a8X\x87e\xd3?&\xcf\xfc&&/p?\xc6H\x04\x8a\xcb\xdc\xc0\xbf\x7fj\xe4d4D\x92?\xe8\xb3\x05zq+\xcb?\x99wN\xfc\xab\x90\xd0\xbfU\xe7\x0f\x11m\xa5\xcd?Xxg^\x87\x19\xc7?rl\xaa\xd3\xa5<\xd1\xbf\x95<y]\xc0\xf8\x95?\x96\xe5\xd5\x1a\x9a\xef\xbb\xbfVgq\nk\xff\xd1\xbfSsX\xc5\x02\x9c\xd2\xbf\x06\xc5\xab\x16wG\x84\xbf\xdaV\xcd\xf0\x11t\x93?\xf2\x0f[>Qm\xd3?\xf2QY-\xb2\xe7\xc3\xbf\x92=0g\xe84\xd3?\x90\xa2y\x81\xcd\xab\xb3\xbf\xcc\xe6n\xdf\xcb\x88\xba?\t2\xd2RSm\xc6\xbffD\xed(ea\xc0?\x9e\xbd\xbf\xb5z>\xa9\xbfX{T\x02\xb2\t\xc3\xbf\xd1J\xf7\xcb`/\xd6\xbfGS\x1b\xae4=\xd3\xbf)b-\xf32\xd0\xbf\xbf\x05\xb2\xba\xc5\t_\xc5?a\xd4\xceJ\tc\xc1?\xcfU\x8e\x95\xfd\xb9\xd3\xbf\xe3\xcb\x8cYh\xf2\xa3\xbf\x0e\x9d\x0b\xfa4\x82\xca?.\xf2\x8bZ\xdb\xc9\xd1\xbf\xccL\x94N\x1d\xd0\xc2\xbf\xb0\x89q\x86\x85\xb7U?\t|\xde\x15\x82\x15\xd9?\xf7\xb4\xa1\x05\xc4k\xbe\xbf\xec\x1b\xed\x04\x19\x86\xd5?6\xe7q2Rm\xd2\xbf\x93\xcc\xc9p9I\xd7\xbfe\xc8(\xcaq\x08\xd6\xbf\xa6+\xf1\x08\xdc\xbf\xb4?\xdd\x18\xc6\xfdR\xad\xc6\xbf|\xe1\xc3\xb4M\x0b\x8e\xbf4\xfdk\x9d\xde]\xce?\xf1\x7f\x94\x0e\x01s\xd7\xbf\xa70\xcf\xb9\xe9R\xda\xbf\xdf\x11\xfc[\xb8%\xc7?\xda-\xdc\xa4F\x04\xb9?\x8d\x87\x18\xaf\xe4\xbb\xcb\xbfoj\xa68\x98\xd6\xcd\xbf\xc3z ?;<\xcf\xbf\xb6\t\xabt\x06\x16\xb4\xbf,\xee\xf9d`8\xc0?4\xc7-\x8e\x08!\xdb?C\x9e@E\xd7\x1b\xd7?\xe4\xd2\x8fk\xc8/\xc1?\xfd\xbfe\x84Y\x83\xc4\xbfc\xf0\xc9T\x9b\x88\xc7?\xd1\x84\x1b\xa9\x0f\\\xc6\xbfm\x8e\xec\x97\x11\xb6\xa6?\xd5U\x80L\xb0\xb5\xc6\xbf;u\x0b3j]\xd1?\xf7\xe6\xda\x98\xd4R\xd7\xbf\xc5\x00upZ\x81\xdd\xbf\x17\xb7A(k\xe9\x93\xbf\x8b\xe8\x7f\x93*\x81\xc1\xbfM@\x05\x8fxl\xa8\xbf\xa4\xf3)\xfb\x81V\xd2\xbfW+[\xdb\xbek\xcb\xbf\x8fE\x80H\xf0o\xd3\xbf\xaf>\x0b\xce\x89\xea\xd4?\xd1\xe1\xf2\x1b\xf3\x13\xd3\xbf\xc0\x03\xb8^\xa4v\x84?\x96\xcc\x83V\'Sk\xbf\x8d8h\xdaX\x1c\xd3\xbf\xf0\x0cVGOe\xd4\xbf)M\xf5\xc8\xcc\x08\xb3\xbffx\xfa\xc6\x0b]\xcf\xbfp?\xc3?\xe6w\x9d?\xc1\x10\xf2&\xbe\x0e\xbe\xbf\x8c\x87\xcc\xd9lb\xcb?\xc7\x98g;P\x99\xae\xbf\xa27X\xa3\xff>\xb6?\xf3\n+\xd8\xe0\xf3\xc0?\x95[\xd2\x9f\x85~\xb3?\xae\x1ff\x85\r\xfb\x9a?\nxd\xa7G\x86\xb7?d\xb0\x13\xfb\xa0 \xc4?\xec+\xe9\x1b\xb7$\xc2\xbf\xdeg\x97\xf6\x145\xac?K\xdd\x9c\xe9\xd8\xcb\xc1\xbfG[\xb3\xba\x1a@\xce\xbf\xa4\xcf\xa0\x08QR\xc5?\x07\xdd\x9e\xf1\xa8L\xd1\xbf9\xf2\xc1\xf8\xe99\xa3?\xc2\xc5\xc5\xb6\xac\xaf\xc9?T\xf0\x10\x00\xdc\x0c\xc6\xbfU:B\x8d\xcd8\x8b\xbf\x99\x12\xc6\x9d\x85\xc0\xc5\xbf\r\x98O?\xcc\x0b\xd1\xbf\xea\xcc\x8c\xbe\xa8\xfa\xd5?q\xee\xda\xb5\x14\x10\xd8?\xa0\xdc\xf2\x9d\x84)\xc0\xbf\x93)\n\x9e N\xc1?WZ\xc8J\x9f\xb5\xc2?\xd5t\x10\xa6B\xdb\xba?#\x1e\xc2\xf0\x18U\x83\xbfD(I?\xc4\x1d\xb8?\x87n\x14&k]\xd4\xbf\xb1J\xa0\xc1\xe08\xc4\xbf\xd8\xf6u\xca\x1d(\xc0\xbfur\xda\x10E\x8a\x94\xbf=tuZ\xd8N\x92\xbfi\x0f_\rj\x9e\xd1\xbf\x02wZ\x12=\xe6\xc8\xbfO\x05~F\x0c\xa5\x92?L\xbdS\xb4p\xf9\xd3?\xc2\xcf\xf8]DY\xd2?\xf2\xa0\x8b\xc8\x97s\xcf\xbfn\x0e\xcc\xa1\xaeu\xd3\xbf\xc8\xfb\xc1H}\xd5\xb6?4\x0c\x83d0.\xbb\xbf\xc4\x84\xccM\x84\x86\xd4?\xe0\xcc\x90\x07\xe2\x06\xd1\xbf\xa2{\xbdMX4u\xbf\xca\x81\xb7*Ya\xd8?\xb8\xc7,>\xcb\x0f\xd8\xbfa->;\x08o\xcb?\x89\xafH\xd8\xbd\x14\xc2\xbf\xc4\xca\x8b\xd6\x1eC\xc1\xbf\xbc\xf1\n\xb0\xadm\xdb?`6\'\xe9\xe3\xe3\xb0??n<\xf0+M\x99\xbf\xd3f\xe3\x91\x0f@\xaf?\xd6:FX\xc4/\xca\xbfA\xe8]\xd6&X\xba\xbf7\xe3E\xb4\xd1+\xc9?qi7\xa9!\x87\x7f?1Y\xa0V\xa2\xc8\xc6\xbf\xf0\x02\x91\xc6\xd0\xb2\xc4?\xaa\xa4j9~}\xcc?\xbc\xcc\xe2\xb4\xb0\xf5\xcc?\xa6\xa2\x96\xedZl\xb0?\x03\xe85\x85A\xaf\xd3?\x074\x85\xfb\xf0q\xb7\xbf\xd5\x9dT\xb1\x94\xff\x9b\xbf\xe7\xecO\xdd\xf0O\xbb\xbf\xb9\xc2\xcbZ\x11\xca\xc3?\xef\x02\xd1rH\xf9\xd6?\x08\x17\x06\x1a\xbe\xd0\xbb\xbf6r\xcd>T]\x9a\xbf\xd1\x94@\xca\xdc\xfb\xd6\xbf\x0c\x95!\xa8\x18\x87\xd3?\xf0\xef\x96\x86g$\xcb\xbf%:a\xb1\x9c\x0e\xcc\xbf\xf2\x84\xfa\xce\x16>\xd7?\x88\x1c\xda(%v\xd1\xbf\xe4\xec\xf4\xfa\xe9*\xd8?Za\xf5\x9d0\x02\xc2\xbf\x1fu\xf3\xf46j\xcb?,\xd6\xc4-\xd1\x1f\xd8\xbfR.\x9bi\x8c\x1e\xc1\xbf\xeb\xf8\xfb\xad\xde\x07\xb9?\xa5\x0bZ\xe3&^\xb2?\x02\xd6\xd9\xdd\xcc\x05\xca?\x0c\x0b?\xe4\xeb\x9a\xd2?\xf79\xc1\xf7\xd7\x1c\xb1\xbfU\xf5\xd87\x15\xc0\xb5?\x02\xf9"\x0b\x0f\xd8\xc1\xbf\x88\x89\xbf\xe8\xbe\xe6\xcd\xbf\xa3c\xe4\xea7\x9b\x81\xbf\xeb\x0cI\x84\xe1z\xb3?U\x88\x92\xabz\xc9\x96\xbf!h,\xc4Ab\xc0\xbf\x80\xb5\xf8\x82\x1c\x10\xc5\xbf\x14\xc3l\x98O\x85\xd6?\x8fs\xf0\x94\xa5?\xc9?\xa4K\xbb\xc8\x92]\xd4\xbfy\x9e\xfa\xbb\xa5S\xab?(34e)\x7f\xb9\xbf\x8bv\x98 \x84\x08\xd0?\x1a\x14w\xed\xf3\xb8\xc5\xbf\x862\xfdz\xb4n\xc3?\\\x93\xa8\xb3$\xd1\xd5\xbff\x0e\xffa\xa0\xaa\xcb\xbf\x1b\xe0\x85 \xe9\xc3\xc6\xbf\x13X5n\r\xd0\xca\xbf\x0e\xf8,\x8a\x11\xa6\xb2\xbf^u\xd4\xd6\\\x81\xcf\xbf\xe5\xaf\xd1\x8f\x12\xbb}?"\x85\x14\x9e\x9a\xb3\xca\xbf\x11(\x9c\x12\xedF\xbd\xbfC\xa2?ZR\xd8\xcd?\xce\x80\x0eX\xe1|\xd5\xbf\x80\x18\x86\x91\x9ai\xc9?\x14\xd8\xffVZE\xd2\xbf\x98\x00\rR\xcb_\xa1\xbf1\xbf8\x0f\xc7\xb3\xb4\xbf\xd2)\xd3\xcf\x0f\xcc\xd0?\x18\xda\xc8\\\x83v\xc4?\xa8\xcc\xa4\'`(\xca?\x18H\xa5\xeb\x7ft\xc3?\xcd\xe8\x91\xa2\x9bt\xd3?\xc4{\xef\x9d\xbbN\xc8\xbf\xb4\xddT\x07\x1f\xc7\xc7?(\xce\x1fTJ\x88\xba\xbf\xc15n\x13M\x7f\xb5?\xad\xffZ.L\x8b\xbc\xbfp\x08 5\x00\xf1\xc1?\x19\xd3\x8f\xa6\xb1D\xa1?\xa2\x1b2\xb8_e\xcc\xbf\xaa\xdc\xfb\x1d\xac\xc3\xd6?aH\xc4\xc9\xfe\x88\xb4\xbf\x005\x94167j?%\xac\x83\x1f\x8e\xb0\xcf?\xa9\x1b@\x13\x98\xa3\xd5?\x87\x84\xa6\x99tw\xcb?\xf6\xebh\x04E>\xc7?\xf7\x8bAx\x99\xe1\xcc?\x82\xe0$\xab:\xca\xc9\xbf\xcf\x1e\x9fX\xa0Z\xb1?o\xf3W\xea*n\xd7?F\xd0\x08\xe2/#\xd8\xbf\xd5*\x01\x1eE\x86\xb9?\xf9-\xa9\xac\xfa\x0f\xce\xbfM3\x02N\x1f6\xb3\xbf\xb0\xe4\xe2F\xad\xdb\xca\xbf\xd8bo\xeb\xaex\xce\xbf\xe8\x9afU\xd3.\xd2\xbf(\xa6\x91L\t2\xd2?u\x9f\xc6j\xac`\xb7?\xcb\xb5AfS\xfa\xdb?4q\xe63a\x06\x96\xbfL\xc3L\xde$\x98\xd5\xbf\xf8\xef\xe0b_\xd2\xd7?\xa9\xf6r\xcaw\x03\xd5\xbf1b\xb2\x9b\x95\xa1\xac\xbf\x8d\xb6\xb7F3E\xd1\xbf\xf9\xf7*St\x84\xad\xbf\xd1|*YoY\xb7\xbf\xd327\xeaob\xc8\xbf\xf9S\x90\xd0_\xda\xd2\xbf8\xc5\xddb\x02\xf3\xc6\xbf\x11\xf6\xf3\xf9\xe7}\xcf?\xb8\x86/O\xafT\xc8\xbf\x93\x97H\\\xdd\xbc\xa4?\xb4\x9em\xf9\x7f\x00\xcf?\xf2\xd0\xdb\xf3\xfa8\xc4\xbf\x81-\x97,\xfd\xd7\xcb?le\xf6\xbfn\xd0\xb2\xbf\x85JFn\xc6\xac\xd0\xbf\xb9/m\xafC\x0f\xd3\xbf\x1fT\x89\x15\xcb\x0e\xb7?I\xd3\x85i\xe36\xc7\xbf\xdf\xf4\x06\xed\'\x99\xd1\xbf\x86\x1a\x981\xbb\xa4\xcd\xbf\xbe\x10\x81\x11\xd8n\xd2?\xd2K\xf7\xf9\x0e3\xc5\xbf\rM9\xda\xf2+8?\x8a5\xc55\x94\x8e\xc4?\xde\\u\xe1\xd5U\xda\xbf\xf6O\xb2E)"\xc0\xbf\xd8\x0eRT}\xc5\xc8\xbf,\xac\xeb\xe8\xca\x91\xcb?RU[\xdc\xfc\xc3\xab\xbf\x89\x08\x80bWt\xd1?U!\x8fRa\x15\xd6?\xe6\xc2\x17\xa5\x87\x08\xc0?\xd0\xad\xdb\x92\xcb\xef\xd2\xbfp\x9a?}\xa9\x86\x94?tM\xc8\xdf\x1dr\xd9\xbf\xeb\xa1\xd8\xear\xd9\xcc\xbf\n\xa9\r\xa9\'\x91\xcb\xbfY\x93\xcbWHp\xd7\xbf\xf9z*\x98.\xb6\xc2?\x9e/\x08Ko6\xcc?3\xb9\xc7\x0f{\x18\xb0?\xbb\xd8\x81\xf8\x1c\xd1\xb3\xbf\x05\x91\xe5\x90\xe4\x9e\xc3\xbf\xd4\x94}\xaa;3\x7f\xbf\xee\n[\x94\x91\xeb\xd0?\xf0f\xc4\x80\xe0c\xcf\xbf\xac\xaeEj\xe7\xe4\xc2?\x188_\xeb\xa9\xef\xc0\xbf\xb9N\xebT\n+\xb0\xbf\xd8C\xac\x19\xcdh\xcf?,\xb6>6\xaf\xaf\xd6?]Jh[`\xcb\xda\xbf\x7f\xd3\x95\xda\xdc\t\xa0\xbf\xd6\x1b\r\xaa\x15\xa2\xd2\xbf0\xa8\xb28+;\xcd?S\xc0\xe0d\x9eq\xc1?\x18V\xa9:\n\x94\xc6\xbf\xcf\xfb\xe6\xe2Q\x8c\xd7?\xc7\xd9l\xcek=\xcd\xbf\x8e~\xf0A|6\xd0\xbf|\xee\xb5|\xa8\x8d\xbf?\x8a@\xd1/R\x84\xcf?\x1ezm\xf2\xd4G\xa9?0\x87s\xd8\xbc\x1f\xd8\xbfv)\xae"5\x18\xcc?i\xe2R#6\xf1\xbd\xbf\x89\xfdt\x08\x9f/\xb3?\xc3B>NQ|\xaf?\xe3\xdf\xdeA\xa59\xd0?\x19]du\xa8\x19\xd0?\xb1\xd7\xa3\xae\xa8\x89\xb4?\xa4\xb6\x93\xab\x8b\xe0\xd2\xbfU|y\x04\xd5y\xd9\xbf\xb1y\x07%\xe7\xcc\xb6?:e\x9f(\x07&\xb8?\n;;\xe9\xda;\xd0?j\x93\xe7\x04\x86\xb9\xcb?\x8bW\xb7>)\xf3\xd8\xbf\xaeR\xa3\r\xe2\xca\xb2?\x11\x7f\xe0\x90\x92\xae\xab\xbf\xfd\xb44\x00\x7f#\xd9\xbf\x9d$\xf0p\x97\x04\xb5?\x01\x12\x0f\xd3\xa8\x92\xc6?a\xb7Z\xfaWu\xdc?\xac\xf3\xbem\xe7\x02\xd0?\xa8t\x95\xd2\xde\xf6\x9b?U\xa3U7y_\xd4\xbf\x95\x15\x1e%\xf3\x01\xd1?\xc3\xf8\xb7\xaa\xd9\x01\xda?p\xffa\x12/\x19\xce\xbf\xa5\xd7|\xdc\x08v\xd1?(\x00!%q \xd2?\'<\xbc-}\xc3\x95\xbfG\xc2W\xbe|\xeb\xb3\xbfe}\xe1\xe9\x01\xf9\xd3\xbf\xb7\x99Gc\xe6V\xb2?q\xa0!\x0c\xa9\x1b\xd9?\x94`4\x90\xbd\xb7\xd1\xbf\xcd\'\x0fgB;\xc3\xbf`\xbc\xbcc\xd9~\x9a\xbfGm\x80\x0b<R\xb6?*\x92D\x1a\x8ac\xa0\xbf\x10F\x1b\xe1\x14\xc2\xce\xbf\xd2o%\xd6/\x82\xd3?1w\xba\x19\x99c\xd0\xbfm\xa4\x1a\x8c\x0b\xe1\xcf?\x80B\\Rz"\xc5?W\xf3-\xa6\x95\x9b\xa8?\xc8\xc5\xbe\x8e\x82\x9e\xd2\xbf\xf9a\xf0E@u\xc4\xbf\xd9#\xaf\xa7%\x99\xd9\xbf\xb7+\xf83\xf7\x87\xbd?\xd1E%\x85\xd0\x0e\xab\xbf\x05D\xcc]\x92\xb5\xc5?\xc7M\x06I\xdf\xfa\xbc\xbf`\xfa?L\xa2\xf8\xa1\xbfm\xf9\rE\x07\xb4\x86\xbf\xb45Z\xd21+\xd9?\xf9G\xb4\xb1\xeb\xd3\xd4?\xe9\xeb\xee\x9cc"\xb1\xbf\xa7\x8eYg-\x93\x9b?E6\xf3\xa1\xcd6\xc4\xbfYe\xd3eA\x8f\xc8\xbf\xab\x022\xca\x10\t\xcf?\x97\x073\xf0\xf71\xbe\xbf\xcc\xd9\xe3\xc7\xd8\xd2\xd4?T\xa2\xf3\xc5K\xb2\xd0?\xd8!\xda\xb8\x03@\xaf\xbfU\xebU\xda\t#\xaf\xbf\xebP\xfb\x18\x15\xee\xc7?\xc2\xfb\xd4\xc5W\xf7\xa5?\x9c[h\xb9l\x9f\xd3?\xa1{\x9f2\xd4\x14\xaf\xbf\x00_\x86\xb6\rM\xc6\xbf\xd8rT+W\xdf\xb1?\xba\xc7\xff\x92\xe9?\xcc\xbf\xa3\xb4\xa1J\xfdi\xc2?t\xac\xaf\t\xe12\xca?\xb4\x0eM\xaa\xa3\xa9\xc0?\xb3\xd0w$0\xc6\xda?\xc6w\x1b\x1f\xa0\xc2\xd3?T\xd9,\xc9\xb5q\xd6\xbfV\xf1\xbc\t\xbb\xb3\xb1\xbfO\x07\xe9\xa7\xa4}\xa7?\xf8x`\xc5qP\xd2?{\xc2w\xec\xa3!\xcf\xbf\x97\x15\xf4}v\xed\xcd?\xd2\x16\xc8\xc5\xa0\n\xd1\xbfr\xd0\xfc\xcc\xc88\xc1?\x01\xcc\x8d\xd7\xa5\x91\xd0\xbf3(\xeb\xce>/\x89\xbfs\xf2Cu\x06\xcb\x92?0 \x8a1\x150\xd2?\x0b\xf6\xb4Hl\x92\xd5\xbf\xe8m#\xe2\x1d\xe7\xcd?&\xfeGVd\xd2\xd6?-\xfa\x83ao\x06\xd3\xbf\xb9\x8a\x8d\xb1w\xdd\xd2\xbf\xcc3\x0cW"\xd7\xbb\xbfv9x\xf8Dr\xc6\xbf\xe8\xd6\xe5\xfa}\xc4\xd8\xbfk\x128\t\x1f:\xcf\xbf_\xe6\x1f|B;\xa0\xbf\xb9\xa7\x0cX|\xcc\xab\xbf4|\x8eF%c\xc0\xbf\xbf\xf8j\xb1\xb7\x18\xc9\xbfE2\xf4\xe3\xcaa\xd6?\xb6\x83R*\xba\xf8\xc9?\x98\x95\xb3m\x9c\x0e\xd0\xbf\x92\xc1\x04\xc6?S\xd0?1\xf7f\xf3\x08\xb8\xd2\xbfn[`\xea\'o\xd0?\xbb\x1d\xd9a\x08\xc2\xc4\xbf\x90j\xf7F\x05=\xd1?;\xcf1\xd8-\xdc\xd6?\x1eG\xe6\x92.\xe3\xd3\xbf\x82\xbbl\xb6\x9a&\xca?\x80\xaeo\xee\xb8\\\xc2\xbf*Z\xfdU[.\xcd\xbf\xc2@V\xbd\xa0\xec\xd1?\xfa\xa8E\xb5\x06\x19\xb7??\x02\xfd\xe4\x19\xee\xbb\xbfF\xaa\x99\xdbK\x00\xcd\xbf\xef\xa1\xb6A\x07k\xd3\xbf\xdfF\x0e\x83\xcfS\xd8?\x03&\x84jYA\x9e\xbf\x94\x05+\x16\xdd \xc9\xbf\xdc\xe5\x1b*fh\xc2?\xe9m\xea\x9c\x94\xab\xd9?\xa6+\xf4r\x84\x82\xca?\x87.,\x86\xd3;\xc6?\xe8\x9d\xb5J\x85\xfd`\xbf\xceQ\xce\x10\x14+\xaf\xbfE\'\xe3\xab\xb7\x05\xd9\xbf\xf9\x9b\x9f\xa2\x1d\x0e\xd2\xbf:}i\xc4\x01\x87\xc9?4\xa7\x00s\xaa\xd6\xbd?+\xd8`\x88h\xb9\xc2?}\xb2?\n\x945\xdd?\xc6|\x0b\x95R)\x96\xbf\xc3@W\xc9k\x13\xd2\xbfcd\\\xbc\x0b\x8b\xbe?\xc6k1\x11\x12\xd1\xd2\xbf\x00\x89\xdc-Tg\xd3\xbf\xceI\xa9\xe5\x1f\\U\xbf\x0f:\xdc\xa2\xc7\x13\xce\xbf\x1e\xcbahPB\x9c?d(\x93pc\xb4\xd1\xbf\x03\xf4\xb8\x11;\xb8\xd4?u<\x86\x8bo[\xb3\xbf\xbaY\xfb\xb0\x8a\xc1\xc9?\x00w_\x84xd\xd3\xbf\xccY\x03\x16\xb1]\xcd?lT8;@\xb8\xd8?SVN\xb0\x03L\xa2?\xfe\x1dm\xe6C\x10\xc1?h\xb5\x91a\xb5\xb9\xd7\xbf"G\xd8z\xb0\xd4\xad?\xd2I!\xfe~\x12\xd9?\x08\xb8\x97<\xb2\xa9\xd2\xbfm\x8c1\x8f\xd40\xa4?\xcf\xda3\tM\xce\xc2\xbf\xd9\xd9|\xc9\x9d\xbf\xbb?6rQ\xach\x12\xda?\xbcn\xd5\xbbGQ\xd1?l\xaes\x86`m\xd4\xbf\x1f\xb2\xbf\xab\xef\x80\xb0?\xab\xd1\x1f?\x84\xf7\xd7?d\xd3\xed\xd5 \x05\xa3?nB\x89\xd0\xdb"\x8a\xbf\xfa\xd3\xa2\xd2}\xb5\xd0\xbf\x89q\x0e\xb7d~\xd3?\x17\x07 \x8aO\xf3\xd1\xbf\x88\x02\xd0B@d\xd2\xbf\x8c\xae\x94\x83\x87\xa5\xba\xbf?\xbf\xe7t\x83\xbd\x96\xbf\xb3Zd\x03\xbc\xb6\xc7\xbfj\x9f\xd8e\x87f\xd1?(\x9d\xfc\xc6\xa6\x83\xce\xbfl\xe1~\xd7\x99\xcb\x96?;\xe1\'\xdd\xd4\xe3\xd7\xbf\xd8\xc9\xa1\x80\x1cY\xc4?\xce\xa2\xb0dQ\xe3\xd4\xbf\xe0&Pu\xe7\xa3\x8a?H)9\xa2\xbcf\xd3\xbf|r\xa2\r\x8c-\x98\xbfs\xed\xec\xca\xd7\xc6\xda?Z\x10\xa4\xd4k1\xd7?\xb4\xcd\xbc\xa1^5\xd6?uBP3\x17\xcb\xd3\xbf\xd1\xcf\x04\xf8G\x0b\xd4\xbf\xeat#I\x18\x0b\xd6?\x19s(8\xba\x83\x93\xbfIA\xd0\xeb\x0b\xe0\xd6\xbf6\xa7\x9d\xc0\x17\x99\xd5\xbf?b\xa3$\xafD\xb2\xbf\xbe\xeb{\xe1\x03q\xae\xbfR\x88\x87\xab\xfb\xff\xd3\xbf\x86\x8dp\x03\x93(\xc5\xbf\xccF|\xb4\xee\xbe\xd1\xbfH\xeb)\xc5\x87\x8d\xc5?\x80\xbd\xa2\xea\x174\xad?\xe0\xdf\xde\xd1\xc4\xa4\xd0?\xb5\xedEu]\x9c\xd6\xbf\xd6\x8cb\xdf\xa0\xf5\xc4\xbfo!\x14\x940~\xbb?\xd4\x17\xc9\x9e\x15,\xc5?\xd2r\xdf\x92{\xe3\xcf\xbf\x16\xd7H\xdck}\xb2?A\x91\xa9@\x08\x15\x94\xbf\\\x10E\xb2\xf7<\xa5\xbf\xbb\xb9n\x08X\x04\xbf\xbfv\x8dk\xaa#\xf8\xd7\xbf|\xe2\x96\xfe\x92\xd8\xcd?\x97\x1fP\xad\x8b\xa4\xc6?&\x86\xc9\xc2%\xc8\xd6\xbf\xa2Y\xc3\x0e\xf2\xbe\xd2?\x10uUL\xa2@\xa7\xbfi\x15\x1b\xc5}\xcf\xc2\xbf\xe3\x98\xc8\x90t\n\xc3?R|r\xcef/\xa9?\xc0d\x97\xed85\xce?\x9c\xd6\x10\x1d\x10.\xb7?D)\n\x8f\x1b3\xc8?\x12\xf2\xce\xb2\xf0\x03\xbe\xbf\x02\x06\xf3\xbc2\n\xc1\xbf%|\x82\x13\xcf\x9d\xc1\xbf\x05\x13\xd5\x7f\x88\x16\xaa?>\xbaP\xc9\xce\xef\xa1\xbf\xac\xc3\xa2\xaa\xa5\x13\xb8?\xbb\xb3\x9c7\xe0\xbd\xd1?\xdcc\xf6\xb2\x1a\xd7\xba\xbf+\xf9\x81\x86\xa2\x8c\xcf\xbf\xc0\x16\'\xe9M\x0b\xcf?\xd2\xafa\xc2*F\xc1?\x15\x0f\n\x02\xb0\x84\xcb?\xb3\xdb\x0f%\xefo\xc6?T\xeb\xdcE\xab[\xc6\xbf\xfb\xbcv\x8f)"\xcc?\x8e\x07\x843\x83*\xb3\xbff\xf9\x11\xaeG\x9f\xb7?\xbf\xb7\xb9\xed2\xcc\xa5?\x1cbL\xba\x13\x91\xc6\xbf\xabB\x98\xcc\x9e\x1a\xa3\xbfT\xf5s\xe4\x8c\x12\xb9\xbf\xdd\x04Lu,\xbd\xd8\xbfu\xda\xfc`\x98[\xd2?"\xe3\xb5R\x1f\x9c\xce\xbf\\T\x94\x96\xb3\xa9\xc2?\xa7\x1f\xe4\x1e\xe9\xb8\xc6?\xf7mY\xef\xd6\xed\xce\xbf\x9d\xc6Wuy\x0f\xd4\xbf\xcf?\x99x\x90S|?O\x90\xee%\x8b\xdc\xc1\xbf\xe0y\x03\xb9\x1c\xaa\xc7\xbf\xe8/\xee\x93\xaa\x81\xc5?\xb0\x84L\x81\x7fl\xd3\xbfet\xcf\xf00{\xd2?d\x16\x83\x0e.Un?\xd6\x98\xe8r\x03\xaa\xd1?\xa9\xa9\x86\xbc\x9b\xd1\xd0?\xb7\xdc\xadO\xd2\xc7\xd3\xbfs\xca\xc5M\xf6\x95\xa7\xbf\x0e$\x91\x17H\x02\xc0?\x1e\xb9P\x8b27\xcf?\xf90Kq\t\x92\xb9\xbfy\x0f\xa6]H\xcc\xc0\xbf#\xe6\xe3\x89\\\xf0\xac?G\xda"g\xa9\x05\xb6?-\x9d\xe1H\x81\x12\xcd\xbf\x15\xa5\x13f\xde\xa6\xc4?\xd1eO\x07\x7f|\xd3?:\xcf~O\x99^\xd1?\xa1\x11\xff\xdd\xb9=\xd3? \x98Cx\x07>\xcb\xbf\xef\x85\xef8\x15\xbc\xb3\xbf\xc4P0\xdd\xa1\xff\x9f?]F\x93\xf0\xd5Y\xd0?\xce\x12\x90\xb6{t\xc9\xbf&@\xc4\x95\xde/\xb6\xbf\xb5.+\x9c(Y\xc0??\x04K\x1bM\x06\xd0?\xa8\xbb\xe2z\xfc\xb9\xd6?\xd7\xb8\xa8qH\xf1\xb1\xbfU\x1a\xc3\xdb8\'\xc8\xbfnp\x979vJ\xbf?F\xc6M\xc9\xe1\x8d\x83?\x98*x$\x99\x96\xbe\xbf\x9a\x91&\x92\xb5c\xd0?"I\xd9f\x83\xad\x94\xbf\xe0Aw\xde\xda\xd2s?8g\x02>\xd6\xd7\xca?\x1f\xee\xce\xee\xe5\x19\xc3\xbfMOT\x9a\x01\x1d\xcb\xbf\xa0#\xfeD\x1a\xd4\xd3?\x02J\xb11}\xa6\xcc\xbf\xd5\xd1/=\x0f\xc6\xaf\xbf\x8f-<~\x88e\xbf?\xd80\xa8\xe9\x15\x03\xa3\xbf\x8e{\x95\x1a\xd97\xca?\xe4\x96:\xd1\xf7\x00\xb1\xbf\xb3\x00L\xdb|\xa1\xc7?\x85\xad\xac\xe2mL\x9c\xbfO\x13\xaa\xa5]\xfb\xd6?\x85\x88\xc9j\x02\xd8\xd2\xbf)\xbb\xad1AS\xb7?\xe8\xd8r\xbc\xb7j\xbc?7\xd9~\xcc\x96\xa0\xd1\xbf\xe5Y\xd0}N\xb0\xd2\xbf3\x12<\x80\x86\r\xd2\xbf\xcat\xba\xcd\xa4n\xc5?\x83\x00\x86\xb4\x9e\x96\x9d\xbfZM5\xf9\xad\xdc\xd5\xbf\x93\xb1\x96e\x05n\xbb?-\xf1N\xba\xa1\xfa\xcd\xbfg3\xbb\x90L\xd1\xc1\xbf\ny\t4R\xed\xad?Q\xc4/\xb2\x1fT\xce\xbf3\xb4\x16\x04\xad\x1e\xc2? Ge\xfc\xact\xd0\xbfX\x81:\xcb\\\xcd\xc7\xbfzV\xdd\xc2d_\xc7?\x94\x03\xf9\x1bQ\xbb\x90?\x8c\xe4Q\x95\xeb\xca\xa0?\x05\xeb\xd7\x89\x96\x91\xc8\xbfQ\x9c\xfc\x15KW\xc4\xbf\xbf\x03\xb8\xb6 \xd7\xc5\xbf]\xc1\xfb]\xe3V\xab\xbf\xf5\x19+?\x85H\xd5\xbf\xdd\xe5q\x19\xbbF\x9f\xbf\x17^\x16v#[\xd6?0\xb1\xe1\xc8\xf3%\xd5?4?\x81\xa6\x1c\x17\xbb?\x1c\x8d-\x9cXA\xd4\xbf\xd8Y\xd0\x99\xcb\xb1\xcb?`\n\x06\xb4D~\xcb?\x86\\\xd6]a\x1e\xc4\xbf\x1c\xd6}~c\xb2\xd5\xbf:\x03\x8b\x19<-\xc7\xbf\xb4\x8e\x07\x19\xae\xc8\xc9?-\x8a\x0c*1\xe6\x9b\xbf\xc6\xe7\xa2\x86f\xce\xd5\xbf\xf3\xa5\xe6cD\xde\xcc?e\x1f>u\r\xbe\xb9?\x1dN\x83$P,\xd4\xbf\xdc1\xa0\xbeJg\xd2?\x97v\xbd\xbc\xa2K\xcf\xbfH+\xba\xd5\x01\x81\xc6?\xa0\x0cNy\xf7C\xbe\xbf\xc4\xb2\x04DX\x0c\xae?\x91\x0f\xfd=\x93\x19\xd1?\xf8^\xa3\x97\x1a\xcb\xcc\xbf\xa5x\x03\xc99W\xc9?\x81UH\x81\x82\x01\xc1?\xe4_\x1c\xf4\n\x8a\xd0\xbf\x18\xc5\x9d,\xf9Z\xc9\xbf\x9ak\xe7\xe0\xb1\xe2\xd8\xbf\xcbY\xab\xe9\xe8\x18\xc9?\xe6\xc0\xdb\x16\x90d\xd6?~B\xdb\xf9\xfd\n\xd5\xbf\xc5\xd3\xf1u\xf44\xac?.\xe9\x14\x05\xd0>\xa8?\xe0\xf71\xae\r#\xca?\xb7\x15\x11@J\xdd\xc6?Ma\x97Kz\x1b\xd0?\x9f\xaa\x11\xc2t5\xc2\xbfM\xe7o\xb3\x18\xbf\x8f?H\xdeNJ\x8f\xab\xbd\xbfy(\x03\xde\xf1I\xa7?\x91]\xd4#4\xf9\xc9\xbf\xcd\x08\x11\xd3\xadD\xc4\xbf\xa8\x97\x10=\xdal\x80\xbfY\xe3k\xcf\xbcx\x9c?c5?\x07\xdeH\xc3\xbf"\x04k9\xd80\xb6?\x07\xbbQ\xe0\x1fZ\xcd\xbf\xf4\x0e\x8f\xb3\x08\xf6\x9a\xbf=\x98\x0c\x10\xecw\xa3?C3\n\xdd\x91\x84\xce\xbf\xdd\xf0\x86\xd9\xe0\xdb\xc2\xbf\xb3q\xca\x1a\x82\n\xcc\xbf\xd2A\x84w\x93\x10\x9e?\x9c\xf7\xfc\xfc\x90\x0b\xc8?yf\x9bph\xa8\xd8\xbf\xbd\xdb\x90\xcf\xd6Z\xc0?\xa7s3\x8d\x00E\xcb\xbfrI\x8e\xbca\xc7\xb3\xbf\xb5r\xdf\x8c\xbcY\xd1?\xc6\x9e\xf6\x01\r\x19\xd5?4\x9a\x8d\x1b%\xbd\xd3\xbf\xed|x\x8avo\xd3?6\xa5C\x0c\n8\xd0\xbf\xe5\x84\x8e\xdc\xc9\xf4\xd0\xbf\x90WC-a\xcc\xb7\xbfr\xc1\xf3(\x1c\xce\xc9?r\xd6\x84\x01\xc2\x7f\xc8\xbf\xde\x16\xaau\x16\x96\xd1\xbf4~\xe7\xff\r\xd3\xcf\xbf`\xb9\x93\xc9\xb4-\xd5?\xcePV\xb9We\xd3?\xe2\xd1B\xab\xbf>\xc7?\xcfMC/\xd3\xc8\xae?\x82\xb5\xbf\xcb#6\xbc\xbf\xfe\xcb\xb014%\xcd\xbf\x7f?2\xba\xe6L\xd4\xbf\x9a\x1e\x13b]\t\xad\xbf%q\x99\xfa|\xe3\xb0\xbfa\x07r\xb8\xef\xd6\xd7\xbf>\x1e\xed\xf5\x05\x94\xd4?B\xef\x10\xb4\xbe\xc5\xd2?\x9d\xe8\x08:\x8ai\xb0?\x10r\xfa\xbbuF\xb9\xbf\x84\xa7\xa5\xb1\xa4\xc5\xd5?\x18\xba\xb7\x8a\xb5\xf0\xcd?3w\xff\x82\x03\x0c\xd8\xbf\x14m\xf0]\xb3\xe9\xcc\xbf\xf8\xec$\xc7I\x88\xd2?\xf0#8\x1e\xd76\xd3\xbfv\xf2\r\xb9\xd5\xf0\xaf?\x0b\x93\x9d\x06\x11\xaa\xd3\xbf\xc5u1\x1b\xff\x1e\xc3\xbf\xf4\x81C^`\xbd\xc0\xbf9>D|\xe9e\xd3?\x12\x03\x90\xa9\x84\xdc\x87?\t\x19\x90\t\x850\xbd\xbfuh\xea\x86\x9cv\xaa\xbf\x07\xd6r\xe8\x9e\xd9\xcf\xbf\xbcx\x13\xfePj\xba\xbf\xc9\x95\xb5\x08)@\xd8\xbff@\x97\xc1U\xf8\xa7\xbf`\xb31\xf3\xa6;\xc6\xbf&~\x87\xe9\xe7\xb4\xd1?\x96\xd5_\xb3m`\xb7\xbf\xc0\xf8&\xc4\x18\xab\x81\xbf|\x9f=\xd2\xf7\xd3\xb5?\xcc\xc5uc\x89\xf4\xbb?;\x90\xff\x90\x8e@\xc1\xbf)l\xc6\xf0\xf4\xf9\xb7\xbf\xd6\xc2e?\xc5\xda\xca\xbf\x1d\x0e\xffGb\xe7\xbe\xbf_\xe4\x0eu\xb6\xee\xd5?\x94,\xc0\x95\x0eN\xd3\xbf~%]\x1b\x08s\xc7?\x9c\xd1\xad\xf4\xc8\xf1\x90\xbf\xd8\x97-\x8dc\xa4\xd3\xbf4\xec\xfe\xad\xc9\x94\xd1?K\xfb(\n\xe3%\xb1\xbf\x14\xc6\xe5\xce\x7fx\x82\xbf\x10\xbf,\x8361\xd3?\xd5~\x01\xfa\x87)\xc7?\xcf\xbe\xb4\xe6\x15\xcc\xd0\xbf{\xbd\xc6-\xa2\x1b\x91\xbfK\xca\xcec\x9b\x12\xbb\xbf>\xee\nB\xbden?\xed\x001\xacR\xe4\xb7?)\xbf\xee\xc6\xa4\xd8\xd1?r\x8c\xc8\x80\xa9\x86\xd0?\xbc\x12\xc6jlV\xd0?>`\x17\xda\xd4\x8c\xcd\xbf\x837\xc8\xc4\xa4!M?tb\r\xd2\xfdX\xcf\xbfg\xab\xa0\xd3\x88\xaf\xce\xbf\x89\xf1[\x10\xb2\xfb\xb5\xbf\x17\x19\xf5\x8fZ~\xb5?\xf1\x04\t\xef\xc9g\xc9?\x80\xdaW\x83\x16S\xc0?\x84\xf3e= \xfb\xba\xbf(7\x10)\xc4\xc1\xd5?\x0f\xc5~\xce\x9e\x82\xd6?76)\x81\xcf\x1b\xcb?\t\xe6\xdd\x1c\\\xcb\xc7\xbf\xd8\xc7@\xc3\xe5\xf1\xcb?C\xb0\x9d\x85\xaa\x90\xd0?\xaaO\xb0\xd1\xeb}\xac\xbf\x1d\xd7T\x90\x8a\xa9\xbc?Ee#U\x84#\xcb?\x19\xba\xdc;\x13V\xa2\xbfBn\xdd\x9f\x17\xd8\xcf?\xa2`\xadF\xb5\x1a\xcb\xbf\xa2\xa2\x9e\xaf\x9b\xc8\xd2\xbf\x11\xa5\xff|:n\xd4\xbf`\xaa\xbf\xa1\x8e]\xcb?\xf7S\x11@\xfb\xd3\xbf\xbf\xc1;\xdbc\x9c\xc9&\xbf\x97\xc6~\xb4\xc9\xcd\xcc\xbfyQ\xdd&\xdf\x8d\xc2\xbfL\xd5\x80\xbb\xd2\x02\xc0\xbfPM\xd3\x12-\xda\xd1?\xacD\xf3\x15\x1f\x93\xd2\xbf\x15\xae\x06\xcaP\x98\xc2\xbf\xf9a\xb0!\xf9y\xab\xbf\xdd\x07_#\xed\xad\xc7\xbf\xa1E4z\x95\x8e\xb7?@\x91\x1b\xda\xd1\xe9\xc4\xbf\x05"&kW\xf1\xc3\xbf\xf5\xce\xbb\xc2^\x17\xb7\xbf\xf9\x0fG\r\n\x05\xb6\xbf\x9b\xee\xd5<\xcfC\xa1?\xb3\x98\xfd\x9e\x14\x8c\xa6\xbf\x04P=\xac\xc2\xc1\xa0\xbf\xd7\\\xc9\x0e\x86!\x8a?\xdbg\x9f\xb8\xf6\xd5\xc7?pnH\x1f\xc3\xa6\xc5\xbf\x9a\xd2.\x1eQ\xad\xd1?\xf0\x8b\xb5\xecG\xb1\xd5?\x1b\xcb7\xd5\xf2\x13\xb2\xbf\x90lc\x05G\xfc\xd2\xbf\xb9Vt\x91]\x16\xb8\xbfHL\xeak\xc2^\xbb?d\x87\r\xf0\x8b\xad\xd5\xbf\xf6\xdb\r\xc6\xea\x8c\xbc\xbf\x1d\x0b\xc2ol\xf6\x9c\xbfp \xd3\xd4l\xf8\xd7\xbf\xdb\x16\x96\xaa\x92\x0c\xd0\xbf=\xbddp(\x9f\xd0?+-88=j\xc2\xbfR\xe7\x88#6j\xd2?\x13!V\xef\x00w\xd1\xbfWWU\xceX\xcfy?1]\x1c\xfa\x1aD\xcf\xbf0\xfdk\xfdWV\x90\xbfd,N\xb2\xc4\xf9,\xbf\xaf\xc5\xbc\x85\xf7\xf2\xc7?L\xad\x8e0>F\xc1\xbf\xd0\x9cJ\x88\r\xb5\x91?\x89!\x16(?\xa3\xd7\xbf\xa1\xc5\x80\x99H\xca\xd5?Q\x19\xda\xc7\x94F\xc1?\x04\xd9\xf7\xe9\x05\xa2\xb0?\x1b*\x97\x99\xc9\x98\xc7\xbf\xf8Si\xcflS\xb5?\xbe\xa7O"*\n\xd5?r-\xb6\x9f\xf1Q\xce?=*\xd3\x8c\x86W\xd4?\xca\xb1\xefso\xa9\xd6\xbfc\xfc\r\x07\xdd\xdb\xab?8\xf0\xfe]\xc4\x85\xa9\xbf\x8b\xd4\xdb\xf1\xf8\xbf\xc9\xbf\xa2a\xee\x1c\xa4J\x92?\'\x13m76*\xd5\xbf\x17}b\x84dG\xb1?\x15\x8d\\p\xb4-\xd7?\x12\xed,\\\x8a\xd0\xd0?\xde\xd8\']\xc8\x11\xd5?\x9dZ\xd9\xb0Z\x9e\x82?\x16^3c\x8f\xdd\xb8\xbf\xc3\xd7%\xec\x83_\xd5?\x0c\xa7\x12zZ\x01\xd8?\x9a\xea\x89\x0c\xbd\xe1\xb8?u\xfc\x1c\xba3b\xcb?IQ\xbd*:\x8e\xc5?[<\xfa9\x9d\xcb\x99?m\x0c\xc1\xe5\x82z\xd3?\xdf2\x07\xfb\xef\xc0\x98\xbfZ\x1b\xa7\xa0\xb8\xe9\xc0\xbf\x99\x9d\xfd\xf5\xc2\xa7\xa6?\xd4Y&\xc5W\xec\xab\xbf=\xaa;\xff\x8b\x12\xd2\xbf\xa0\xd4\xe7\x01\xe2\x18\xb7\xbf\x90$K\x05\x03\xe4\xc7?\x04\xc4\x90\xe5\x15\xc4\xd7\xbfp\t\x95\xf1\xe2\xb7\xd9\xbf\xdfOX\xa7\xd0_\xb4\xbf\x04\xb9q\xe8\x99\x05\x95\xbf\t\x87(\xc3\xe0r\x8b?\xf9\xeb\xa8h\xbe\xef\xd4\xbfG\x0c\xfb\xdb\x8c\xab\xc4?\xf1\xaf\xf5\xc2j<\xd2?,vV-&\xc8\xb8?\xb6\xa5H\x81@\xe0\xc7\xbf\xc8@\x17\x03\x1bw\xa2?9\xb8\xdczzH\xb1?h+)\xfee\xe8\xd1\xbf\x82\xc8-$\\\xa7\xc5?&\xd4tV\x15.\xce\xbf\x0f\xc5e\xc8\xcd\x82\xb2\xbf3\xfaE\x87F\xd4\xcf?\xa3C\xf8\x13i\xeb\xb3\xbf\xb5\xcdb\xe9\xd9@\xcb?\xf7\x076\xdf,f\xb4\xbfm\x12\xbe\x88*\xe2\xbd?YS}\x82s\x83\xbb?:\x1c3\x98fY\xc2?7\xa7S\x04\xe7\xee\xd0?Y6\xa5&l\x04\xc8? \xf6\xf2\xd2\xf4n\xa9\xbf\xa2\x90Z;h\x1c\xd4\xbfem\xf6\xa1\xc4\x01\xd5\xbfQ\xb2\x0f\xb6\xfd\r\xc8\xbf\x8d^\xb9\x82\xb1\xc3\xcd?\xd0^:\x81\xf9@\xc6\xbf\x11z5\x8dp\x8e\xd5?p\xc7\x87\xd7\xa2f\xc1?\x9dC\xc4\xd2+\xde\xaf?\xfdR\x15\xf0\xb2s\xd6?\x14<\x1a\xc9[\xaa\xd4?\xe5\xd4\x8cwb\xb5\xd0?oO]\x0b\xf1Y\xcd?V5\x90k\xf4\xfc\xb3\xbf\xa8\xa3\x12!\x06M\xc4\xbf\xa2\x83u\xc0\xf04\xd2?`\x1f\xc4\xabLt\xb9?YM\x88\x81cb\xc8\xbfY%%F\xe6\xb1\xb4\xbf\x15,\x85`z\xae\xa9?Rq\x83\xafhc\xc8?\xc6\n\r\x1d?\x19\xd5?\x8b\xe4\xf5\xc3X`\xb2\xbf`1\xa1\x05\x86\xbe\xd5?0T\x10%\xdd\x7f\xc2\xbf3\x03\xf6\x18\x90`\xbe\xbf\xa2\x03\x86)\xa4L\xc3\xbf\xecSR&i\xe9\xaa?\xdd\xa23\x82\xf7 }\xbfRW\xd3~\x04\xe8\xd3?\xa9s\xd10\x82\xb6\xc5\xbf\x02[\xa5\x88\xe6\x93\xb8\xbf\xba%\x8b2\x07,\xd1\xbf\xc5\xa694\x0c\xb5\xbd?\x84b\xec\xcaXA\xb2?\xd1VW\x92s\x82\xba\xbfY\x95\xe0\xab\xff\xd4\xca?\xfe\x82\xbf\x9f\xf8H\xd7\xbf\xef\xf3ns\xf1P\xbb\xbfe\xdd\xddq\xea7\xc5?\xe1\x92\x16h\x17\xd0\xd5?\xb5\xb7\x16l\x9e\xfe\xaa\xbf\x8dq|\xf0\x1dn\xab?F\xe8,\x9d\xb5\xfe\xd2?\xff\x12\xeb[\tX\xb4\xbf\x1d\xcd\xd9\xd8\xd3\xf4\xd4\xbf\xe6B\xdd\xcc\x9a\xf6\xaf\xbfT\xc9b\xe1\xba\x03\xa6\xbf\xda\xe8\\\xf2\x7f7\xc7\xbf,\xea`\xcd\xa7\x1a\xd1?LP\xd3\x11\xc8\x7f\xbd\xbf\xa0<{\x19)\x86\xa6\xbf\x00Z_\x1bk\xdc\xbe\xbf\r.\xba\xab}\xe6\xc0\xbfn\xad\xe9\xb6\x88\x89\xa3?1\x93\xd7\xf5\xa5\xbd\xd4?\x14\x0baT\xe7b\xb6\xbf\xfa\xc4\xec\xb2\xc5L\xd3\xbfW\xa7\x11\xdf?\x98\xc7?\xf8\x1b\xdc\x95\xa7G\xd5\xbf\xbct\xde`\xcb\xb7\xc9?\x10R2\xfd\xec\x81\xcb\xbf\x8a\xf1\xa1\x0c\\[y\xbf)\x0c\x0f\xbd\xcf\xc7\xd5\xbf\xd2\xcf@3\xbd\xdc\xc2\xbf\x19\x8b\x84\xb3B\x8a\xa8\xbf\xa9\xa0\x12\r\x15\xf3\x92\xbf\xcb]\xaf\xf1\x9b\xd1\xd5?\nW\x8fT\xa9\x1d\xba?\x11o\x18\xc9P\xc6\xcf?\xff\x07\x8f[@s\xbb\xbf8\xf1\xda#\x0f\xd2\xa5\xbfbq\xdb\xe0\xa1\xf4\xac?\xe5\xa1\x9d\x12-\xf4\xc6?\x16Y\x1d[\xd5\x13\xbd?\r\x03\xb4d\x1d\xc2\xc8?\xc7\xa0\xa1\xbd-z\xc9\xbf\xce\xa5\xd5\x97\xf1\r\xc5\xbf\tsm\xea_R\xba?j\x95t\xa1\xf2\x1a\xaa?\x11\xb7\xa7_\xe7\xfb\xc9?3\x03\xebn\xa1r\xd4\xbf\xe5\xb9\xbb\x81\xeba\xd7?[\xdc!\xdaEE\xa2\xbf\x10\x96\xf9\xd5\xe6\r\xd9\xbf\xf8\xa6\xa6\x89\xb5\xf1\xce?\x97\x1b\xf8\xa5\xceC\xd8?\xd6\x8f\xed\xe2\xb16\xb0\xbfx\xc7\xf2\xc60\xec\xcf?]\xcf\x98\xb7\xa6&\xcd?\xed\x93Da!\xf7Y?\x9b=l\xa5\n\xdb\xd4\xbf\x9f#p\xa3\xae\x8f\xc8?Z\xacppg\x14\xd3?\x0c\\;\xd2\x08\xcf\xd4\xbf\x98\xd6n/\xf7#\xd2?\xc1S3}\xcdJ\xc8\xbf\x0bU@\xfd\xe3j\xcd?Oy\xa0\xeeE[\x8f?\x94\xa4SM=\xd3\xd7?\x06\xb4\xccM>v\xd2?\xce>\x85ZVC\xcb\xbf\x858\xe8\x8bK\x90\xd1\xbf\xe3\xfb\xe5\x90\xb3\x95\xd2?\x95\x90\x1b\x00\x9bN\xd6\xbf=\x86\x16`\xf4\xef\xc7\xbfW\xcf\x98\xb5t\xb4\xd9?\t\xdb\x13\x82\xb2\xc5\xd9\xbf\x85\xbd$\xef\xf1O\xc2?\x1e;\xc9`\x1f5\xc2\xbf\xf6;u1\xcd:\xcb\xbf\xd6\x8f\xc6-\x0cu\xd6\xbf\x17IM\x0b\xf2\x82\xd2?\x04\xc0\xd3-\xe4\xb8\xd9\xbf\xd4\xfd\xe7\xa3\x13\x8c\xb5\xbf\x87\xfb.\x13I\x92\xbd?\x87Vv\xc5(\x04\xbe\xbf\x18\x10\xde\xd6\xf29\xc1\xbf\xb3\xf3\x0e\x9a\x04\x8d\xc2?\xa7\x1f\x8fZCL\xd3?\n\xbe\x9e\x04\xf5\xc0\xa7\xbf\x7f\x80\xf5r\x0f\x00\xd4?P\xe0r\t\xd6\xd0\xb1\xbf\t\xce\xaa\xe9\x99\x83\xcb\xbf\xc8\x98fZ\x87\xed\x9a\xbf \x08\x03\xb4\x95\xbd\xc8\xbf$\xc1\xd8\xf0\x06\x8a\xda?\xf0\xfb\xce\x08\xb7\r\xc5?\xaej\xa4\xdc\xeb\x9e\xcc?\xb6\x1a\xc7\xb2D\xdc\xd4?\xad\xa4\xc8\xe3\xcaw\xbc\xbfU\xb9\xb1(^c\xd6\xbf\xb4q\'\x8b3e\xac\xbf\xb1\x8c;v\t\xda\xc5?=\xc2\x19dS\x9c\xd8\xbfO.\xf6,\x07\x8d\xbe\xbf\xca\x1c\xce\xd0\xeaH\xd5\xbf6\x80\x8cN\x9a\xff\xcb?{\x91Ot\x1b\xe0\xc1\xbf\xb7\xde\x1a\xbf\xdb\t\xb3\xbf\xb4\x1c?\x8b&\xe9\xa2?\x82&@\x075LV?\xe8\xb7U\xb9\x7f_\x92\xbf\x1b9\xc9\x92\xdc\x1e\x9a?\xc3\x8em\x908\xfc\xaa?*\xd3k\x1bN\x0c\xd3\xbfC\x1a\x8e\x83\xb3G\xd5\xbf\x9f\xc2A\x9f\xb8/\xbd\xbf\xe5,\x123@t\xd4\xbf\x1c\xb5\xd1\xed\x81\x84\xb8?;\x06\xbbc$\xc8\xbe\xbf\x10\xa0\x11~\xddq\xda?\x83\xdf\xca\xfeT\xb1\xc8?V\xdc\x89\xe2\x9ca\xd4\xbf\xf5\x96\x89\xc1\xbf\xd5\xc1?\xaf\xa2\xd4+\xb6\xd0\xd0?\xd7\x7f\xd6\xb8\n\xdd\xac\xbf\x0fD\xe5\xfd\x9b|\xad\xbf\t\xc6a D\xd0\xb1?&\xae\x12\xff\xc6\xb4\xc1?D\xf3\x1c\xb8u\x8c\xd3\xbf<\xed[\xc7e \xd5\xbf#\x90e7\xc8c\xba\xbf-v\x15\xe1z8\xca\xbf\xd8\x7fP\xd7\x8e\xff\xb8?\x86\xa5G\x1f/\x99\xce?\xefz\x97/E\xc8\xbe\xbfZd\xe1\xe7\xd2\xb1\xb1?M\xa6\xb1j\xed\xe9\xc5\xbf\xa4F`\xcbeG\xc4\xbf\x89\xe0Eq\xed@\xb3?\x85dM\x88\x98\x16\xd7?P\xa2\xf7\x95\x93g\xd4\xbf\x95\x82\xb0\xec\xbfR\xc7?\x02\xca\th\x93\xed\xb3\xbf\x86\xb80\x8c&\x87\xc3\xbfEe8X\x95\x08\xd0?\x89F\xbd\xe7\x16\x89\xcf?\xf2\x14\xf0\x0b\x85\xef\xbb\xbf\xe9^\x17h\xc5\xb0\xcf?q\xb5d\x98\x05\x83\xc4?@\xe5\x9d\xd4\x1a\xb2\xd5?\xf7\xd7F5\xb3_\xd3?G\xd1\xddS\n\x91\xae\xbf\x81\xa5\xe7\x1aTy\xc7?\xc8\xc9\xaf\x06\xb9G\xd7\xbf\x1b\xc6d\xca\x059\xd0\xbf.\xb3\x04\xed\xd2\x1d\x9f\xbf\x13\x98\x83\xe7U\xa2\xc0\xbfK\x0f\xd7\x90\x886\xc7\xbf\x8fr\\\xd2\x19\xf9\xd8\xbf\x87~\xf2\\0^\xb6\xbf%\x1d\xccy\xe0\x90\xbd?\xeaOB\xd5\xf8\xd1\xd4\xbf\xb9\xe5\x91B\xdd\x9b\xbe\xbf\x98\t\xc6\xa0\x8b\x14\xd1?\x8f\xcd\xb7\x10\x87l\xc7?\xbfx\x95\x99\xc1z\xa7\xbfd|\xc5h\x03p\xd8\xbf\x9b}\xea\xb7\xd4%\xaf\xbf\x05\x8d\xea6q\n\xd8\xbf\xc8^\x0f\x04\xce\x1c\xd0?\x80Z\xc3dKJ\xd3?\x01;[\xae\x8ff\xd2\xbfe\xb5\x80<\xe0\x1f\xbd?\xa7\xe8\x94aiy\xd0?r\x1fd\xe9m\xb7\xbf\xbf\x1a\xebe\x12A\xe2\xc0?x\xe8\xd5eQ\xbb\xd2\xbf\x9c|\xe8i\xfe"\xd4\xbfp\xc3\xff\x03\xfb\xc1\xc3\xbf\xdb\x9d\xd7\xdf\xccc\xc5\xbf\xadP{\r~\x8f\xaf?i\xc3\xf0>H\xf3\xce\xbf\xcfqa\xbc\xb3[\xc3\xbfF!\x9f\'&6\xcb\xbf\xc5-\xfe\x8cfo\xb6\xbf\xa2\x9a\xd5\x8a\x9aD\xd4\xbf\x89< \xbf\xc3\xed\xd3\xbfL\xcd]3\xbe \xbb\xbf8\xd9\xdc\xe0\xb0t\xd3?\x91%\xa9\xa7\xa3\x99\x86?Km\x96\xf2\xa3@\xd3\xbf\xbb\x9e\x0f\x19Z\xa6\xd6?\xe7\xcdzO+\x8b\xd3?\xdf_\xf8^\xa8$\xb4?\x86/\x97 \x85t\xc9\xbf\xd6\x02D\x10\x9c\x89\xd4\xbf\xbe\x8c@\x05"\r\xcb\xbfw\x93\xd9v\xb6\x13\xd3\xbfU\x8e\x0f\x00\xabw\x8f\xbf\xaf\xc9\x07\xae[\x15\xc3?\xe6\xc7}\xc7oA\xd7?\xcb@\x0b\n\x83W\xd3\xbft\xee\xbeP\xf4H\xc3?!\x08 \xfbKXp?"\x8fn\xf7\x8f\x8e\xca\xbf\x84\x12\x91\x13J\x94\xb2?\xf1\x83S\x99\xbc{\xbb\xbf\xc7\xe3\x01\xfe\x82\x81\xb6?$T8a0\x0f\xc4\xbf\xd7Yr\xa4\x1e\x04\xc3\xbf\x95\xf7\x80\x13\xf5\xf8\xc5\xbf#\xf8\xae/@T\xcf?(\r\xf1\xb1N\x02\xd4?\x8d\xe2[\xb4\xd26\xc1\xbf\x147\xf1l\x91_\xca\xbf\xa3\x16\x0f5\xf7\xd2\xc3?\xacR{Yo\x90\xd0?\xd5\x0b\x80>\x04\xab\xc2\xbf\xfb4Z\xe7I\x1f\xcd\xbf\xb3\x9e\x18e3\xf1\xc6\xbfj\xa9\x90\xfa+:\xd8?S\xc4UB\x1bk\xae\xbf\xb9\x0cJ\x84\xad\x89\xcc\xbfT\xee\xa2g\x0c\x04\xc8?\xfe%\x88\xad\xfb\x97\x87?\x0eF\xa1\xfcAd\xc7?\xf1\x92}6z\x80\xd0\xbf_\xc0\xc7|}>\xd2?\xe8?\xc4>\xf3^\xb6\xbf}\x0c\xf7\x04\x1f \xc5\xbf\x8f\xb7\x83eE\x8cy?\x07\x80/ug\x9b\xc4\xbfp\\9\x87\xd3\x19\xd0?\x052\x14\xa8:\xdd\xd5?\xcd8/FMi\xc6\xbf\x83\xbfl\xc0\x04\xbd\xd1?\xdb!\n\xe1\x9e?\xd5\xbf\xc5w\xc0\xb1\xac\xe1\xc1?f\x1b\xac\x88\xcf]\xdb\xbf\x01\x95n\x97\x86%\xd0?_q\x05\xe7\xe1\xca\xc9?\xf82L\x04x\xad\xd1?T\xb9\xd8r\x11\xf0\x82\xbf\x8d\x8ckk\xfd\x91\xd0\xbf\xd7\\Q|q\t\x8d\xbf\xeav#\x8b\xb4\xf8\xd1?\x0f\xd3\xa4Oso\xd8?\xeeSF\xba\xccK\xb2?7\xe9k{\x84\x84\xa2?&\xe5\xb1\xc1\x19t\xce?\x86\xb3\xda-(H\xb4?\x95\x05\x03\xa5s\x18\xc3?w!\xd5L\xf5\xdb\xbc\xbf\xa9\xca\xe7Yd\xcc\xd2?(\xc7\x93,\x0b>\xd9?\xa9\xad2\x98\x0f\x90\xcd\xbf\xe48\x87f9\xf7\xcd\xbf\xf2\x8782\x0b\xf8\xd5?NC\\\xff\x9f3\xb0\xbf\x9a\xb1\xae\xd0\xbeA\xc9?w\xfb\x08\xa0\xf8\xf7\xae?=.\xf8\xb6\xc3\x8c\xd6?\x84Y\xbcUU\x1a\xd6?\x1d\xc0,\x82\xae\x8e\xd3\xbf\x98\xf3\xa0\x1f\xb4.\xb5\xbfi\x02c\xa7i\xc8\xbe\xbf=\x08\x02\xf7Qt\xb1\xbf\xa5\xf3\xa3\x0c\xb0\xec\xbf?\xf6\xe1V8a:\xb3?\x9f\x06\x11_\x03.\xd5\xbf\x9cXv\x94\xb2\xe4\xac\xbfu \xeb7\x15T\x98?\x0fP\xaa\x97}\x8a\xba?8\x99\x10\x12\x08\xb7\xd8\xbf\xfe\xb6\x1al\x9fM\xd3\xbf[\xbb\x1dz\x8d\xe4\x94\xbf\xf1\xab\xe5i\xbe\xe2\xc4?\x83\xb5\'\x13\xedD\xc6?\xbf?\xc2\xfe\xd5\x02\xcc?\xb6\xdd#1\x149\xc2\xbf\xab{\xbe\xee\x01B\xbd?\xbf\x13\xeag\xa1\xf6\xd8\xbf~\x88\x03\xc8O\x13\xd5?\xd5\xb3\xf7\xcc}v\xc6?S\x18\xfd/"\xf6\xc9\xbf\xe8\xcd\x84IW*\xbb\xbf\xba\x87h\x9f\xaf\xb9\xc8?\x1f\x9b\xfb\x1ex\x12\xd3\xbfN\x1f\xc4\xff4o\xc1?a\xd8\xe1@\x11\xf0\xc8?\xee\x17P\xcb\x94\x88\xcb?\x05\x8eC\nf\x18\xdb?\r\x0be\xe8\xcf\x9a\xb4?\xa4\xeaRuvN\xbd?\x1b]n\xddC\xa8\xd6?\xa4\x94\x93B\xddi\xc6?\x81\xf3Xu\xc4\x9b\x81\xbfyR\xfa\xa2l\x12\xc5\xbf\xb3\xdd\x9a\xe8\xf9x\xcf?zEP\x16\x17\x1c\xd1\xbf\x8d\x8d\x06\x17\xe7\x04\xb5?A\x9fW\x0e&\x8a\xc7\xbf\xf2$\xb0M\xd8\xb5\xd6?h\xc9\xdb\x97\x99\x1f\x94\xbf\xc1\x90\xfe\xbcRq\xbf\xbf\xed\xc5\x9e\x0fPp\xdb?\xed\xd5\x8b\xc3\xeb#\xd9\xbf\xd8\x91F\xdc\xe8h\xb3\xbf\x7f~H\xad\xb9\xbe\xcc?\x7f\xcd\xea\xe4\xcd\xf1\xb1?\xdd5\xfb\xa9Bq\xd8\xbfv\xf8\xaa\x86\x97\xb6\xd9?^\xd5\x81\xd0\xe5\x8d\xa4\xbf\x94\x93\x92\xd9\x93Z\xc1\xbf\x02h\x1b\xf2j\x19\xd5?=DO\x8ca\x12\xc8\xbfM\x86\x11I\t\xc6\xd3\xbfm\x92t\xff*Q\xd3?\n\xc3C\xb3\xea\xe1\xd1\xbf\x1cY\x0e7\xe0\xf8\xd0?\x0c\xbd8\x9a\x1c\x9b\xdb\xbf3,8+\x0e\xd9\xc9\xbf\xcd\x9f\x1c\x92\x83-\xad?\x01\x8f\xe6\x8eF\x06\xcf\xbf;lYe\xeaP\x8c\xbf_\xb8\xdd\x05,\x8e\xd5\xbf\xd4H\xfefRn\xc5?\xd1\xdf\xa27\xbf\'\xc2\xbf\xc6\x06\xb44H\x19\xc5\xbf\x8fb\xa9\x06L\xf6\xb8?\x0e\x1c7G\xb7\x8a\xc4?\xc29\x8fh\xcb \xd0\xbf\x0b_\x92\x03M\x93\xaa?+\xc5\x92\xd0}\xa9y?\x04_\xe0\x99\xb3\xbe\xc8\xbf\x1c_ll\x97\x04\xbc?3\xf6\x97\x85J\r\xd4\xbf!4/\x92e?\xd4\xbf\xdc\xcb\xa4)\x886\xcd\xbf\x13\xf7\x8d\xb1j\x05\xd2\xbf\xb8\x9f\xdf\'T\xcb\xb7\xbf\x0eP0="\xcd\xd7?B\xbb\x88\xdb\x8b8\xd6\xbf/\x18QvG\x0c\xc3?\xe3t\xff\x99D\xcb\xc1?\xbc\xa99,\xb2\x9f\xcd?!\x89\xf4\xf0u\xb3\xcb?<\x1d\x1b\x98\x00u\xd4\xbf\xf4#\xf83`\x05\xd0?\xf5\xea<\xfd\xc8I\xd2?\x9b\x10g#\x8e&\xd1\xbfL\xcc\xb29\xd2\x93\xb3?"\xd6\x11~\xd1\x9d\xc0\xbf\xc1c.h\xcc\xdd\xb8?\x8b\x0c\xdc<\x9d\xea\xc1\xbf\xec@N-\xb1\xc2\xc4?\x1b\xb9\x1e -"\xd2?\xb1\xa3\xf5#\xd5\xff\xbc?\xa5\x95!\x1f\xa8\x15\xc7?]c\x12\x00k\xe0\xcf\xbf\x8a\xfa\xc5+\xf8\x99\xd7?\xe9Y\xb0x\xc4G\x8f\xbf\x18\x85\xb8n7\xae\xd2\xbf\\G\xd8>\xe7\xe8\xdc?\xe5\xce\xbf\xf6\xb6\xc6\xb6?\xd5\x05\x0e-\xd1\x95\xcf\xbf\xd3Yh\xd8_\x17\xd6\xbf\xc0u\x1e\x9f\x073\xc4\xbf\xb0j\xfci\x84\xac\xd1\xbfg\xfb\xacY\x9dq\xd7\xbf\x9cY\t\xf7_J\x9d?\x8av25\x87=\xd1?5\xc1Bj\x0b\x13\xd6\xbf\xc0}\xfd\t>\x7f\xd1\xbf\xab\x11\xda\'\xd3\x00\xab?\xec\xaf]L\xce\xa4\x82\xbfO}6\xd2I\'\xc0?#O\xe0\x9b\xf9\xea\xc4\xbf\x96\x94q`\x8fw\xbc?\x1c\xb5\x03\xdb\x06L\xd9\xbf<s\xf5:\x88\x12\xd3\xbf\xca7\xe9;\x08\xd8\xb2?\xbaC\xfe<<\xa3\xb5\xbf\x0f\xac]\xdaL=\xd1\xbf*Q\x83\x8d3\x15\xc3\xbf\x95L\xbd\x83f\xb6\xb1\xbf\nZu\'\x9ex\xc2?\xbeK{\xa9\xe9<\xc3\xbfzv\xd7\xea\x0f\x18\xca?\x831\xa7<\xd3x\xb3\xbf\x9a\x19\xad\x95\x9d\x10\xc0\xbf\x95,\x92\xe0i2V\xbfud\x18\xf8\xfb\xbe\xad?T\xdci*\x89\xbb\xd4\xbf\x9b\x8f\x84\xaei\x9b\xd8\xbf\'9}@ic\xb2?\x16\xe1\xf4\xa49\x14\x98?o!\xc0\x93k\xaa\xd3?\xf0\xdbj.%t\xd7?+\x9d2\xd8y*\xd6\xbfg\x89\xe3\xbc\xa5\x13\xcc?G#sG\x04\x90\xc1?\x9e\xfeb\xa3^z\xa6\xbf\x96\x9d\x81NU\x8e\xcd?\xfaz\xe4\xcf\xf5\x9d\xcf\xbf\xddM\xf0\x18\x87_\xbc\xbf\xab+D\xdb\n?\xc0\xbfxU\xcf\xef?\x13\xd2\xbf2\xeb.\xb4\x83Q\xd4\xbf\xa5\x1f\xe6_O\xc4\xba?\xe6\xd9L#>\xfc\xcf\xbf\xac}\rU\xb3r\x97\xbf\xf8\x95\x85v6\xdd\xc4?<\xbe{\xbf\xcaG\xd9?\x80{\xe4[\x03}\xce\xbf8\'\x17d\xab\xee\xd3\xbfo\x94\xda\x11t\xcd\xc2?XA#M\xc9c\xd6\xbf\xb5\x90\xbb\x86M\xd3\xd5\xbf\xda\xffQS%\x16\xd3?\xf2j\x1e\xd9o\xc8\xc5?\xceC;\x9f\x17\x9e\xc2\xbf\x83vO"\xcb$\xd3?jha\x82\xcbb|?7\xf4)\xe7\xdd\xa5\xd1?X\x12g\xd8&Q\xab\xbf\xa0.\x90d\xc1M\xa2?h\xa4\xf1\xe5cV\xce\xbf\xde~*\xc8\xf7w\xda\xbf=]#\xbdnL\xc2?\xb3\xa0\x11\x11*%\xd2\xbf\xec\x95\xfb\xa7\x1b\xc9\xbe\xbf\xea\xb2\x03I\x1e\xd3\xc1?\x80\x0c\xbe.(\xc8\xce\xbf\xcd\x1a\x038\xcf9\xd2?\x91\xbb\xa2GC\x9d\xd3?(\x87\xdes\x10\xcc\xd1?s\x9a\xc2\xa3\xac\xd1\xb0?\xa2b\xa1\xc3\x98\xf0\xd6?\xfeJ\x99\xf7W\xb5\xd2\xbf^ \x0e\x960i\xd5?\xf9\xc4=\x98X\x16\xc0\xbf\x9d\xfa\xb2\xad\xf7\xcc\xc8?\x82\xb7\xe9\x1a6\x9d\xd8?\x16\xcd\xd7\xee#G\xc2?&\xe4:\x1a\xbc\xd7\xd4?\xa4o\x08\x19yo\xd8\xbf\x8e\xd0WiRt\xcb\xbf\xa4z\x80\x17\xe4>\xd3?\xbez\x8c\xcc!\x8f\xd4\xbf3\x8e\xd2l\xafj\xc6?`\xff\x06\xbb\xedk\xd6?\xbc)\xecm;\xd7\xd1\xbf\xba4+\xc3\xff\x8b\xbf?\xfd\x93\x0b\x84&\xfd\xb1\xbf\x1b\xec\xed\x00+\x82\xcf?\xa0\xc2J\x0f\x7f\xcb\xce?\x8e\xe0X\x1d\x18)\xd5\xbff"\xa4\xe2\x83\xec\xb6?\x153~\x82\x1bb\xc7?\xb9J\xb5\xa8a\x07\xc7\xbfND\xe7\xd0F\x1b\xd1\xbf\x9c\x0f\xe7\x14\n`\xbc?\x94\x85\x89\x81n0\xc0?J\\k:\xf1\xe2\xba?~3\xae\xdf\xb3!\xd4?>bm:\xc6i\xd4?\xd4&\x10\xe4y/\xce\xbf\xfb\x96:\x89\x87b\xa4?\xdf\x8fsKE\x84\xd2\xbf\xba\x8eb\xacOq\xc1\xbf\x85\x04\x9f\xc8\xd7\xee\xcf?\xcc\x1a\xcd\xa9"\x13\xda?\xb7\xf3{y1:\xc3?\xc31Y"\xbd\xe0\xca?\xd8F\x0c\xc0\x97\n\xc7\xbf \x99\xe8\xaa\xfa\xf6\xa9?\x872s\xacQ\x86\xc8\xbf\xf5N\x81\x16\xb9\x8b\xc0?<\xc6\rAU\x91\xd4\xbf3\x90o\xad!\x16\xcb\xbf\x16\xcb!A*\xbe\xc0\xbfm\xf2\xde\xef\xce\xf3\xc0?\x95\x8a\xe1K\x84\xed\xd6?\xed/\xfa\xf9e\xd4\xb6?\xb0\xfaSu\xdc\x98\xbf?#(\x92\xda\x1d\xa0\xaa\xbf\xd1\x02\x08\xdacT\xd3\xbf\xf4\x16\xe6\xb8\x00\xc2\xd9\xbfK\t0L\x8f\x16\xb5?\xc3\xe3\xe4nU8\xb3?\xe609\xab!P\xd1?_\xfd\xc2o\x882\xd2\xbfK\x02\xa4E\xe2\x98\xd2?\x0b4)\xe7\x8fg\xc6?\x1a\x81E\xa4\xc2\xe4\x8c\xbf\nl\x8d\x0e\x98\x8e\xcd\xbf04\xc7Gc\x12\xa9?\xcb\xe9\xc5u~\xc2\x86\xbf\xcc%\xfbs\x95{\xc8\xbfw\xe9\x13Ul\x19\xb3\xbf\xd4<9I_\x11\xb0?D\xa9\xefX\xdb;\xd0\xbf\xe7\x0b\x01\xe8$\xb7\xd4?\xe3\xb2\xc9\x87\x96\xe4\xb9\xbfb{+0\x19\x81\xd4\xbf\x14A\x82\xbf\xfa\x05\xb9\xbf\x85\x8f;ABk\xc0?\\\xb9Q\xe1~H\xd2?o\xc1\xe19gn\xd2?\xd8SK\xe8X\n\xa4\xbfV&\xca\xc8,\xbb\xab?+\xfdD\x00kb\xc3?\xb9^\x9aDw\xd0\xc6\xbf\xf2\xf4z\x87\xcf\xb8\xc9\xbfOL\xf9\x1b,\xea\xd4?\x067i\xc1\x06W\xb6\xbfG\x80]\x1f\xe8\x8b\xc0?\xf3`\xff\x16\xb6&\xa9?QQ\x1c\xafk\x00\xd5?^R\xd35#\xf6\xc0\xbf^}\x8a5o\x13\xcf?\xe4\xe6m\x91\x8b3\xc5\xbfW\x88\xbd\xe7\xea\x08\xd5?_X\x93\n\xcd\xad\xd0?._\xbcH\xdc\x81\xb7\xbfS"\xc0u\xd5\xd6\x97?6\xb0\xe0\xaa\xce>\xb3?\x94Y\xdfeJ\x05\xd1?Q\xa1\x05\xc6\xaa(\xca\xbf\x89\xf1\x9c\x162\x80\xce?\r\x8a\x8d\xd8\xbc\xe6\xae\xbf<\xd0m\xd5\x1b7\xbf?\xd4q\x06\xc8\xfa\xc5\xc5\xbf]\xce\xc8\xa5\x0f)\xc8?iP\n\xbf\xf4\x90\xc2?\x1b\xdbX\x0fj\xc5\xd0\xbf\x97U\x91G-\x80\xc5?\xbb\xcc\xbcI\xc3\xc1\xc5?\x93S{\xab\x0e/\xd6\xbf\xb3\x9d{\x03\xbf!\xd0\xbf\xc2k,A\xe9"\xb7?\xc2\x91;\xedV\xaa\xc1\xbf\xa5\xa8\xe9X\xf7\xac\xb0\xbf\x86k\'\xaf:\x0b\xc8?\xb6C\xb6\xbf\n\x9c\xc6\xbfN\xedq\xc6k\xc2\xd1\xbf~>\xff41W\xc8?\xa4\x9f\xfd\xfcd1\xb1?\x10?W\xb1\xc6\xa9\xab?\xfc\x8b\xf3\x1a]_\x8d\xbfO\xb3U\x0f\x94l\xc2?\xe2\x9f\\\xd3\x11\xc2\xcc\xbf\x12[F*\x81\xe3V\xbf8\xfb\x9e\xdeD+\xdc\xbfN\xd6\xfd2\xcb\x87\xb2\xbf\x15\xfb\xb3x\x01\xf7\xc3?,)l\n\x89z\xce\xbf\xe0\xe7^\xbaG\xe0\xab?\xc6\x05\x00\xb79U\xd7\xbf\xd09\xd1`\xf7\x10\xd0\xbfO\x90\xb0\x0bz`\xd7\xbfq\xeb\x01\xc2\xda\xf6\xc6\xbf\xe3\xd2\xac\x17t\xce\xd4?\x1d\x88\x0c\xf9?\xf0\xd6\xbf\x9a\xdf\xb6Ii\xa7\xd8\xbf\xdd\xd3cQ\x15?\xd0\xbf\xb4\x0b{f\x0cw\xa8?q3 X\xe5\xf7\xd3?d\xa1h\x94\x9a\xf4\xac?q\'\xc3v-%\xd8\xbfH\x03=\xfb\x1eg\xd5\xbfw\xbd\xa1\xf2\xc5\xb7\xd1?\n"|\xb7\x18\xbe\xb3?\x1fr\xfer\xe1\xa6\xb0?\xe6\xc3}\xdc\xcaD\xb0\xbf-\x92\xa2\x85\x9b\x0b\xc3\xbfNp\x1b\xca\x9f\xab\xd1\xbf\xfe\x84\x92\xc7\xd44\xb6\xbf8\xe6=\xa8\xc9\x98\xd5\xbft\xe2\xf0\x01\xa1`\xd1\xbf\x12\xc1\x82av@\xc3\xbflO\x8a!\xfd\x83\xd1\xbf\xbc4,\xc4\xf4\x93\x94?\xb9O\xb9\xde\x86\xc0\xd5?\x8cl|\xf57\xe7\xd4\xbf>{<?Q/\xce\xbf\xfe"\x84\x12\x8dW\xc0?\xbd\x07i\x00\xe8\x8d\xc5\xbf7\x08A[\xde\xf5\xd1\xbf\'\xcc\xec|\xec_\xcc?,U\x9b\x95\xa3\xac\xc8\xbf?\x80*\x8d\xc5\x9c\xa8?keEc\xf9\x86\xad?%lu\xec\x1dc\xcf?\xfe+\n\xdc\x8b\xe9\xca\xbf\x8e\xac\x81\x13j\xfc\xa8?<\x83}\x8d\xa6\xc9\xd4?7\xb4g\xe8\x02\xa9\x9a\xbf\x91\xff\xa2\xee\x1d\xb6\xd8?9\x1f\n&\xfa\x0c\xce?\xd6\xb4\x97\x11\x12D\xd0\xbf\x94?U-G\x02\xb9?58\xa6)\xf0\xff\xc0?D\xc2\n^z\xf8\xd5\xbf\x84\x9c\x8f\xb7\xba\xe2\xd4\xbf\x7f\x82\x8aN\x94D\xcb\xbf.s\x14\x97o\xf1\xd7?\xcf7\xde\xb7F\xe7\xd2\xbf<4\xb4\x84O\x8c\xa3\xbfH\xc1\xefs\x15m\xc9?\x85\xc4\\iv\xf9\xa4?\xa7o\x9a\x88\xaf\xa9\xd9?\x05Y\xc88o\xfc\xd4\xbf\xbf\xbb\x91\xda\xba?\xc4\xbf\x91\xdc\x83AM\xa0\xc7?Y<o\\\xcdv\xd2\xbf\xabz\n\x84\xf6\xc7u\xbf\xa1\xd9\x9a&\x99\x0e\xd6?\xd63Yz\x8c\x07\xdc\xbfk\xf0`}1*\xd3?\x8a\xb5\x9b\xcb\x07\x8c\xc2?\xb1\x00e\x89\x9d\\\xc3\xbf@y\x19Fz\xf6\xc4?\xf0Q,\x1aQ\x91\xd0?\xdb_{\x91q\xd2\xd1?\xce\xeb\xa7)G\x91\xb3\xbf\xc3\xf6\xd4^6\xed\xd4?\xb0\x9bI\xd4\x1c\xc5\xc8?\xf5\xbc\x0fy\x85\xbe\xbe\xbf\xfd\xee\xc9\xa4-A\xd2\xbfP\xe6\x93\xb0\x07\x03\xb4?\x183\xf1\xd9\x15\xcd\xd6?\xc1\x9d\x03\xd3\x15\x87\xac?\x11\xf1v?\n\xe5\xd3?QP\xae\x91\x8b;\xb6\xbf/d7\xa3\x86X\xb5?&\xad\xb8jX\x8c\x95?\xfb\xbec&C\xc0\xca?\x89\xcaa\xd3\x8c.\xb6?\x93\xfe\xc4\x8a\'G\xd0\xbf!\xf1F7:\xf2\xb8\xbf\x94V\x8d\x8fi\x01\xd8?\x0e6\xb9\x11@C\xc2\xbf\xa0i\xc4\x10\xdd\x81\xdc?\xbe\x0f\xd3\xafi\x1a\x9f?\xd8\x85\xe1\xb2\x1e\xc0\xcd\xbf\xabLY\x86\xee>\xc4?c\xae\xca%:\xa3\xce?c\xf7\xbe\xa0\xc1f\xd9?\x92\xd9\x94\xedH\xb9\xbb\xbf\xdd1-\xaaD\xda\xd4\xbf\xb1\x0b#]"\x02\xad\xbf\xa1\r\xc2m\x9c\x8c\xd3\xbf^P\xb8N\xf3Z\xd9\xbf2\xf5\xb9yH\xe2\xb5?\xf5r\xee\x11\xb6\xab\xd5?\xa8\xaf\xeb\xf5g\xa7\xb5\xbf\xaa\xffF5\xc6D\xd2\xbf\xe2\xe6\xe4\x99\xe4\xc6\xc4\xbf\x98\x85\x9b\xeb^\x92\xd7\xbfd%\x1ap\x8c\x0c\xd7?\xd7\x15N\xeaAv\xc7\xbf\x9bv\xd5\x14\xd0\x9e\xbf\xbfS$\xf6-\xaf\xe3\xb9?\xc8]\x87\xef\xdfu\xc4\xbf)\x84\x9d\x87:\xa3\xd6\xbfw|\xd40\x96\x06\x92\xbf \xfem\xdb\xb9+\x91?!\xca\xf7e\xce\xa7\xd7?z`9\x8e\n\xb6\xd9\xbf\xf6\xf2\x83lf\xa7\xd2\xbf\xb0x\xf9yp\xe3\xd1?J\xf0\xf8*\xa5\x92\xc6?9/\x14\xc2\xdf\x1d\xd8\xbf\xda\xcap1\xf8\x86\xb4?!v\xbf\xc9[\x16\xd0\xbf\xa5@\x960kN\xcf\xbf{,\x8e\xfaP\x92\xb2?_,^=\xc2\xe0\xa4?b\xd2\xbb\xa7\x8f\xd2\xc1\xbf\x12Zdjm\xc7\xcc?\x96\xfe\xd7i$Y\xaa\xbf\x13\x19U\xca\xaa\x99\xd9?P\x0e\n8*\xab\xcd?\x9es\xad\x9d2\x84\xd1?\x1d\x10\xba\xad`1\xd8?\xf2\xe8d\x9c\xae\x89\xd3?\x1c}0\xd5\xe8\x9f\xd7\xbf}\xda\x04\x15\xa3\x13\xb5?\xf1$\x08\x91q@\xca\xbf\x0c\xa1\xde\x07\x82D\xd7?@sW\x93\x9d\xc7\xd0\xbf\xa5\xde\x06\x8f\xaa\x9f\xd7\xbf\xd6D_\xe1\x1ch\xd2\xbf\xb6\x96\xaa\xda4}\xda\xbf4\x00^\x8d\xd7\xd7\xc6?\x03|\xa3N\xd2}\x9f?\xdb\x11\xb1%*\x88\xa1?$\x03\xa4IE\xf9\xd5?\xe3\xc3g\x7f\x92\x10\xbb?\xb4P\xcd3$\x96\xd0\xbfq vd\xea\xb7\xc4?\x17\x9a\xefB\xf4\xec\xd1?\xca\x8b\xc5z\xcf\x14\xc6\xbf\x81\xd3sF\xd9;\xa6?h\xde\xea^4\xb8\xc9?\x0ba\x1e\xe9\x7f\xa1\xd3\xbf\xa8\x90V\xba\x1d\xbc\xc3?g\xc6$N?\xb3\xc2?^\xe3o\x9bq\xf2\xdb\xbf\xf0&\x93y\xc2\xdf\x91\xbfC\xc2AL\xa5*\xb4?\x9f\xb5\xca\x06\xfc\x14\x8f\xbfN\t<\xf5-O\xcb\xbf\x01o\xeaA\x1e\x11\xc1?z\x08\xdd\x19;.\xbd\xbf\x05\x99\x12"\x99D\xb6\xbf\x0b\xb7\xe4x\xa2t\xbb\xbfl\xfd\xd3\x11\x16\xb1\xc8?\'\xc2\xb8V*\xfa\xd7?T\x8f\x01\xb1{\x9c\xd1\xbf\nxv\x0b\x1c\x89\xd9\xbf\xd1\x1b9U\x89\xf7\xd7?\xff\xa4\x86\xc1A\x89\xd0?\x1a\xa4d\xe2\x1e\x02\xc2?\xd9\x8dX\xe6O\x17\xdd\xbf2\x88\x04\xb8\x10\\\xcb\xbf\xc6\xe8\x82\xbb\x8e*\xcb?||\xebm\x97\x98\xa0?\x19?\xb3h}\x9e\xbc?\x7f\x88\x91/Q\xa0\xc2?\xee\xa0\x8a2mz\xb3\xbf\x84\xd4\x9e\xfb\x9bY\xdb\xbf\xda\x15\x91\x05\xc4\xcb\xd8?u8\\\xfa\xbc\xde\xc0\xbf\x0c\xf6\x88\x9cX\x01\xd5\xbfs\x96I\\\xe9\xe1\xd6?]\x15~\x16\xde\x05\xc7\xbf~K\x8aBYd\xb6?\xf8U\x89r\xf7A\xd1\xbfe\xf2\x8b\x893\x81\xd1?\xcbUO\xdch\xd9\xbc\xbf\xea\xf7\xd7\x8f5V\xd9\xbf\x934U\t\n\xbd\xd2?7Q\x8f\x89\xda>\xb0?GG\x10\x92\xe1\xc3\xd9?\\\n\xff\x91\x04\xa4\xdb\xbf\x17\rs\x01\x8fb\xd5\xbf4\xdf\xfe\x1b\x83\xfb\xc8\xbf\x17l C1i\xd6?\x91`g\x0f\xc5C\xc7?\xc4\xcc\xa9\x1e\xc6\x1c\xde\xbf+OT\x8a\xca\xc5\xc8?3\xa8\x05Y\xf8d\xd3\xbfh\x94\x95\xbc\xf3\x0f\xd6\xbf\xe2(I\xdc=\x9e\xca\xbf0(a\x1f\x16\xa3\xb3?\xf0\x97\xbc\x9f\xd2/\xc8?\xf7\xb7\x04\x95\xaa4\xd4\xbf\xff\x1a{N\x84\xce\xd5?f\xe8\xd0E\xda\xd5\xd8\xbf\xb9\xbbv\xfa\xd0z\xac\xbfuk<\xb4\xe6\x7f\xc5\xbf\x086\xdaP\xccS\xd5?3,p\x06\xdd\xdd\xb6? \xb8\xf9t\xac\xc3\xd5?6\xea\x0f\xa6\xb4\xf7\x98?\x82\x1f\xe7\xca\x1eT\xb0\xbf\xd3\x8dvM\x95\xcd\xac?\xb8\x80\xd9\x1a\x15\x8a\xd0?\x99\xdd\x0c\xb3\xb7@\xa9\xbfR8 p\xf9\x95\xc9\xbf\xc7\xefv\xb6\xfc\xf9\x83\xbfW\xfd\xa9j\xc6\xb2\xd6?\x91\x14\xdd\xbb\xd8\xb7\x9f?\x1d\xac\xa2\xfc\x7f\xf3\xb1\xbf\xa4\x1e\xe7\xeb[\x9a\xda\xbf\xedNL\xe7\xfd\xa8\xcc?\xe5\x91 9\xaad\xbd?\xc6DG\xd1\xa0\x8d\xc5?0B\xb0\xdf\x02\xc1\xc9\xbf\xdc?7\x97\x04Y\xa8?k\xb6\xc9q\xd6\x8e\xc7\xbf7DoP\xe6$\xa8\xbf\x1c^\xfb\x0c\x02L\x85\xbf\xe3\x95u\xa4\x16\x7f\x9c?D\xc6\x15\r\xeaA\xcb\xbfhq7[\x1e\xbf\xd1\xbf:\x86<\x0ca)\xd6?7W620A\xdb\xbf\x87\x15FG\x14O\xdb\xbfT\xc4B>b\xd4\xd6?4\xe3c^\xe0I\xc4?\xb4\xe8\xfb\xbf\xe77\xd5\xbf\x91\x1e\x8eA=\xc4\xcf??\x8d\x8c8#\xf3\xc8\xbf\xc0`M\xd6\xe5\xed\xcb?\x14&\xacU\xc2.\xdd\xbfj\n7h\x1e\x8c\xd0\xbf\x0f\x02\xcd\x7fo\r9?\\\x9av\xd8\x1b%\xd0?\xf3\x93\x8e.m\xa3\xcc\xbf\x8d?\xae\xa2U\xab\xd1?\xd1>\xceQ}\x98\xb8\xbf\xd9\x85;\xf9\xb4\xc2\xc8?\x12\x96\xc3V\t\x07\xd8\xbf\xd0j\x94\x85E\xe0\xc0?7\xd4\xb2\xdd\xa6\x90\xdb\xbf\xca\xd7\x1b\xedd\xb6\xd6?\xa2N\x94>\xb9}\xc4\xbf\x1ciy\xef\x1br\xa4?h\xc2\x07\x15}\xf1\xc0\xbf\xb3\x01o-+l\x98?\xe8\x94\xdd%\x83\xdf\xc7?v\x18j%\t3\xc4?X\xf3\x89\xc5\x97B\xcc?\x07!\x95\xe6\x99\xe8\xc5\xbf^3\x03\x10\x01\xee\xaf?\xfe\xc8\x99\xafB7\xb3?\xf2P\xa6\xda\xcfv\xa4\xbf\x85\xd6U\xd9\\\xb7\xb9?\xcc\xf0C\x90\xe6\x90\xce\xbf\xc6\x91<g\xff\x80\xcd\xbf;\xb1 \xff\xe8\x9a\xd1?\xd8\x80L\xb2]\xbf\xcc?3$\x08\x89\xaa\xa0\xdc?=<\xc0\xe1j+\x9e?|\xdb\x80\x87\xa4\xf2\xb9\xbfZ\xa6\xdd\xe0x\xe2\xd2?\xcf\xee\x94\x97;\x12\xc1?\xd5\xedZ\xad$\x87\xc8?%\x0e\xfc\xb9\xe9\xb0\xc3\xbf\xaa\xa4z&\x99\t\xc3\xbfF\xc3\xd53N\xae\xdb\xbf\xf6\x88$\xc3\xcd\x10\x9f?\xd6_\x97-\x892\xc2\xbfBl>\xae[\xb5\xc9?p\xe4\x0e\xd2\x9a)\xb5?I\x82\x7f+\x0f\xc1\x92\xbfS\x90\x8e\x0c\x03\xa2\xa6\xbfR\x01\xd0\xc7\xe9\r\xb6?\x12\x1cp\x7f%\xfe\xc9?f\xcd\xeaI$G\xae\xbf\'\xc8Lb\nf\xb6?\xdd!c\xf0!@\xb3?0A\x0eJ\xf1\xd1\xd0?\xb1\xa7\xed\xdd\xda.\xd5\xbf\xf3\xbb<\xb8\x96h\xd5?\xb7\x17\xf3Z\xed\xc6\xc7\xbf\xf0\x1bc{\xde\x88\xd7?\xab,Gv\x9b\xfe\xd6\xbf\xf6B\x17\x99\xe30\xd7?\xa9{\x00\xfd\x8b\xee\xc4\xbf!&\xfb\xa1\x18\x95\xd7\xbf\x7f\xbe\x98\x84L\xee\xdb\xbf\xebjn\xc0\xdf\xbd\xb0\xbfB\xb51q>\x83\xdf\xbf\x86]\x9dZ\x16\x9d\xc3\xbf\x8aFB\xa2\x9f\xce\xbe\xbf_\xa8E\xfb\x98Y\xd4?\x07\xde~ \xb9\x86\x9a\xbf\xa23`\xe9md\xbd?\xe2\xcft.\x80t\xd5?\xad\xbc[(n\x9f\xcc\xbfCY\xbf\xd0\xd8\x83\xa1?\xe4\xd8\xfap\xb2~\xd5?CX\xc3\x95\x86\xe6\xc4?\xf2\x99\t\xa8\x08A\xc3?\xde\'W\x02u\x91\xd2\xbf\xec\x90@\x9e\xb6\xf1\xa3\xbf\xbe\xd2\xd6$}\x18\xb0?\xfd\x8b\x0bN\xccM\xd2?\x17{\xb4.wp\xc6?\x03\x86\x9d\xdb\xcf[\x96\xbfoC\x80\xc6\xf3\xa7\xce\xbf\x19\x9e\x9fBqU\xaa?\x9da2m3%\xd7\xbf\xd2\x82\xb4\xf9a%\xb6?\x9b\xcd\xfc\x16;$\xb6?\xfd\x07\\\xb3n=\xc4?\\,\x8f\x83\xf7\xb3\xcf\xbf\x19\x91\xe8\xf6\x0f\xe6\xd7?Eu\xa2\xce?\xfa\xbf\xbfs\xb2n#\xe0@\xb8\xbf@J\\\xbe\xec<\x9b\xbf\xcc\xeaIq\xfc\x0c\xc2\xbf\x01b\xf6\x7ff\xba\xd0?\xe1\x8cjy\xb3W\xcc?\x8a\x95Bk\x1e\xee\x81?$\xb5\x80\x93j\x11\xd8\xbf4\xc8Ziu(\xd4?%t\x95;\x9f\x9c\xb5\xbf\x91\xe0\xc1\x90\x184\xb5\xbf\xc3\xa7P>\xc4\xda\xce\xbf\xb8e\xc1\xb5st\xd4?\x7f*\xc1\x1f%\x85\xd2\xbf\t\xfb\x8e\xd5\xff\xf3\xd2?\x1f)i\xfdh\xc5\xd8?\xe4K\x80\xf9\x05\xbf\xcd?\x0by-\x13F\x03\xce\xbf\xb5\xd7b\xae"\xb5\xa6?\xfa4\xc7\xc0\xaf\xe2\xbd\xbf\xba\xf0\xf09\xa9u\xb5?\xc2\x84I\x15\xe67\xc5?n\xa3\x17\xd0Pa\xd5?$\xc3y\xef\x97\xd6\x98?~A\xb7}u\x9c\xc5\xbf\xb0\xc8%\x13<\x0e\xd9\xbf\xedd$$S\xbd\xdc\xbfE\x19\x01\xb0~%\xd9?r\xd4\xe5\\\x1e\x93\xce\xbf\x92\xfb&\x95\xff5\xa3\xbf\xba|\x13\xd8\xeeh\xb4?\xf3}\x0f-\xfc\x11\xd9?\xdd*\xb6\xb2\xe0\x05\xb7?%\xe0,\xbe\x1e\x93\xd3?m\xfb\x91h\x90\x8b\xc7?\x1f\xceSl\xeb\x8c\xb4\xbfPR%\t\x96\x8e\xd6\xbfb:j\xe7\x89\xf1\xc2?\xa5\x85\xb3\xdcQ\xa0~?\xf4w\xbf\xef[\x8e\xd0\xbf\x0eO0\x8d^\xbd\xde\xbfn\x07\x1c\x14"\r\xc7\xbfj^=\x83\xe8p\xb0?\x1e\xfd\xa3sf\xe5\xb8?4\xc3\x8c\x1a\xa5_\xc0\xbfi\xca\xf9\xa6\xb0\'\xd1\xbf\x11\x18x\xc8 \xf7\xcc?\xfa\xa6\xa6\x89]\x16\xd2?]\x81\x8dv\xa2\x06\xd7\xbfT=\x9d@\x86\x00\x85?\xac\xb7\xe1\x9b\xdb\xeb\xc4\xbfTS\x91/\xcd\x9d\xda?\x82\xc1]~]k\x97?\x91>\x15h\xd7<\xb2\xbf\x8c\xdc\x8c\xba(\xf2\xb3?\xe6\x1fd\x1f\x02\x10|?\x9e<\xc8\r\xc10\xc9\xbf\xda\x03\xda\x91I\x98\xcd?\x0b\xafpi\xfd\xbe\xcb\xbf\x10\xac\x01\xf0j\x15\xa6\xbf\x87\xe5|_\xe8\xa2\xbe\xbf\x9c\xad3\xc6|,\xca?\xaf\xb9\xb4\xda7\xe2\xa4\xbfE\xd5\x1c\xaa\xf5%\xd8\xbf\xe9\xf5\\\x95\x95\xcc\xd0\xbf\x9eIbw\x10\xdc\xcb\xbf\xdc\xbe\xc4\xf8\xdf\xbb\xd2\xbf\xe2\x97\xb7\xb7\x89\xa2\xd9\xbf:PK\xe5\x14\xe9\xb5?\xf1e\xb4\'\x0fQ\xa6\xbfK\xb0Atk\xdc\xde\xbf\x1b_}}\x18\xd4\xc8?\xa5\xe6N\x17=7\xd9\xbf\xfd\xbboY\xede\xdd\xbfN\x1fb\xd38H\xd1?G&\xf4\t\x96*\xd5?\xbfs\xe06\xfa\x06\xd4?\t\xaf+\xdb\xe3\xf1\xc4?\x8c{\xbd/\xdfC\xd0?\xfbe\x0eG\xe9O\xde\xbf\xe5\xc0\xcc6F\xc5\xd3\xbf\xae\xb3\xf2f\xb1\xc7\xd8?\x13\xfev\xec\xcd\xe3\xdb?\xc4\x0b\'iel\xca?\x913\x81\xc3\x95.\xcd\xbf\xd2\x0f\x93\xaa\x95\x19\xd3?k|9S\xda\xf6\xd6\xbf\xfa!\x86\x9b}\xa6\xbf\xbf?X\xa1\x19\xb9\xad\xc7\xbfq\x18\xdc\xbe\xc4U\xca\xbf\x16j\xa9\xcb%\x16\xd9\xbf\x8d\x02=\x8f\x01\xac\xdd\xbf\xe6\xc1\x14\xa0\x9c-\xbc?%\x0e\xf3{\tX\xd0?F\xb9\xd3(5\xa5\xc9\xbf\x03\xac\x05Gy\xf9\xbb\xbf\x1b\x17\x1a\xdf\x13\x96\x89?\xd9>\r\xc7\x0f\xf8\xc8\xbfd\x92r7\x03\x95\xb9\xbf\xfa4e\xed\xa0[\x95?M\xa0\xaap\x9f\xcb\xb5\xbf\xac\xb37$\xf7\xbc\xd1?\xe3!\xaf\tcV\xd0\xbf\xd3Ae\xeay\xd7\xd6?s\xaa\xd4a\xa8\x88\xc0?Pkau\x07\xfe\xd8\xbf\t\x11\xa25\xfe\\\xbf\xbf\xf0\x95j\xee\xc1A\xbb?\xc6\xbb\xbd\xe1W\xe5\xd2\xbf\xe4\xed\xa5\xb93\xa8\xda\xbf\x17\xedvBeA\x84\xbf\xad\xd1\xc7*$\x9b\xc1?\xc3\xba+\tG\xe1\xbb\xbfr\x8eZ\x12\xeam\xcb?K\xd9\xd1D\x04\x04\xb2\xbfz=`#\xc7\x83\xd2\xbf\x9eW\x85\xdbuE\xca?y\xe3\xce\x85sW\xd1\xbfQ\xdc)\xb7\x8dO\xda\xbf\xef_\xbf\x81\r\n\xcf?\x86{,6f\xb5\xbd\xbf\x15\xac2\x89\xaf\t\xc1?T\xe9\x81L\xff\xc8\xdb\xbf\x9ftb\xfa\xe8\xdc\xde\xbf\x81F\xfaP\xb0\xde\xa3?\\\xa4A\xe6N\x9a\xcd?c\xde*bye\xd1?\xb1\xda\xad\xd3\x9e\x17\xd9\xbf\x18\xb8\x7f\x7f\x9e\xb7\xd6\xbf\x14\xc22\xbe\xf0\xf5\xab?\xf3\xe1(C\x89\x8f\xbe?0#\x079\xa52\xd0?8\xde-]\xd5\x94\xd9\xbfz\xb7\xb3S<\x1f\xda\xbfC\xddj\x05\xc6J\xd2?aN\xe1\x14\x11\xea\xd7?D\xc0]s\xb5f\xd3?\xc0~\xa0\x04Y\x0f\xdc\xbfdEY\x90y:\xb9?\x93\x8b\xd7\x92\xcd\xae\xdc\xbf\xae\xc6\x9a\xc8\xf2\x1c\xb3?-\xc6\x1d\xbd@\x8b\xd8\xbf\xaa\xa3\xe6&\xf0<\xdb\xbf\xd3\xb8\x0c\x98\xadP\xc7\xbf\xd3\xf4Dz\xffj\xd6?6\xdf\x7f\xc0r \xd1?\xbf\xaf\x177|\xf2\xd5?b\x82\x1c\xc7?\xd9\xb3?\xf1Yu\xaa>W\xdf\xbfA\t\xf3\x18\x18\xef\xd1?\x8f\x86K,<H\xb0?M\xb2\x94~\xbe\x15\xd0?p?\x15\xf5\xef\x13\xdb\xbf\rx\xd4\xa8\\6\xbc\xbf,J\x18\x05@\xe9\xdd\xbfM\xe5\x85\xc6\xe9\xf6\xd6?Z\x9d\xcaS\xce\xb8\xd4\xbf\xcd\xa9\xd1U\xbb.\xde\xbf\x17\x1c\x9aX\xb7\x0c\xd6?\xe2\x04\x80\xf3\xfd\xf9\xde\xbfI4\xe1\x0bO\x91\xa8\xbf\x98\x0f\x1dN\x05\x12\xda?+\xea\xb0\xf0\xb28\xdc\xbfu"\xd7\x80\x91\t\xd2\xbf \xd8\xf7 \x01b\xbc?0(\xcd\x89A\xbe\xc8?]\xc9z<vC\xd3\xbf\xedz\xa1\xac\xdf\xa8\xbb\xbf\xe3\x02\xb0w\x1bA\xde\xbf4PO\xbc\x8fy\xda?\xd7l\xa8q0M\xb4?\x82\r;@\xfas\xd5?\xb4">C\xa0E\xdb?\x10V\xfe\xa6\xa2N\xda?3\xf5\x06@\x0fE\xc1?\xe4\\IS.H\xd1?e.7\x9c/:\xd1?\x9c\x1c\xcc\xb6\xe4\xfc\xdb\xbfj\xf8*\xd0}\xcd\xc6?T\x93\xad\xa1H\xdb\xcc\xbf\'e\x90\xb7\xc5\xa8\xc0\xbf\xdd\x15e\xed\xcb\xb6\xd1?\xb7w\xce\xb2\x11\xb5\xb7?p\xd8m%\x05\xae\x88\xbf\xf9\xa2G\x8a\xab\xd4\x8d\xbfv\xc3\xe7\xbfb\xcc\xd9\xbf\xf0\xe2B\xae\xb0Y\xc6\xbf\x9b@\x9a\xa8\x98\xdc\xb3\xbf\xbc\xbb\x0e\x8diE\xb0?\x13n\x8b)\x1f\xa0\xd5\xbfn\x98\xab\xfe\x9c\xc0\xc6?\x9a$\x86\x0c\x9bx\xc0\xbf\x9f\'\x86[\xd5\x92\xc1?\xf5<5\x06\'\xb1\xc2?e\x19\xd3\x89\xe9\xe0\xdd\xbf\xc5\xac\xfbmUS\xac\xbfQ\xe1\x90\xbb\xdc\x8d\xc5\xbf\x94\xf3\xf2\xe2\x8ab\xbe?3i\xc8\xc0jq\xce\xbf.?y\x0c\x9d\'\xd9?f_I\x87-[\xa5\xbf\xfcw\xcc\x10\x8cA\xc8\xbfuV{\x858\xa2\xc2?u\xb3.)F`\xde\xbf\x01\x97\xe7\xbfC\x81\xc1\xbfC\xcapHH\xfd\xc3?\x0fu:\x95\xa4J\xd5?&]\x82\xc4o\xf2\xad\xbfU`\xc0\x05\xeb\xfd\xcd?Y9)\x99{\xb9\xd9?\xb6\x00\x8f\xd0@\x0b\xc5\xbf/$+\x07\x02H\xa2?D B\x88\x1bm\xd2?_\x02\n\xc0\xba\xcc\xd1?!1cV\x98x\xd9?\xe3\xdb\xdau\x98Y\xcf?\x96_\xdbZ,\n\xde\xbf\xd1L|UGYm?\xd5\xc5\x1a\x81`6\xb3\xbf\xd4\xbbs\x0eZ\xc4\xd1?\xca\xeb\x82\xca\xe0\x03\xd5\xbf\x02\t\xb5\x93\xed\x0b\xca\xbf\xe4*\xac\x9c1\x92\xc4?,sZ\x96\xf3\xc2\xda?\x1a\xfe\xa9\xf1\r\xea\xd9?N+#~9\xfa\xc6\xbf\xee\xf9\x118\xd8\x88\xa9?J\xe5E\xfe\rM\xbc\xbf\xd2|j9\xa5`\xdd\xbf7\x10c\xd5\x93\xaa\xac?\x99T(K \xa5\xaf?\xd1\x0cX\xf6\x16?\xce\xbf+\xd4\x970\x99A\xce?\x05\x06\x06C\x7fGt\xbfd\xbc\xc8\xa5B\x97\xd1?pG\x17v\xd2\xeb\xd5\xbf\xf3\xc0\xfe\xbd\x8d\x98\xc2\xbfg\xa8\xc2\x11\xba^\xd6?:\xe1\x85H\x12\xb4\xd0?\x1c\xce|ge\xde\xda\xbf\x8f8uz\xfd\xef\xca?w\x0fH\xbe\xb96\xbb\xbf\xc34\xa2\x9a\xdcv\xbc?\xbe0\xfc\xff\x92d\xc9?;#(!*]\xd3\xbfI\xd1\x91\xc6\xb3r\xb8?O!\x1a\xc4\xbb`\xd6?\x8fQ\xffq+,\xa7?P\xca\xcd&\xc6\xfb\xd0?\x009\xca\x91\xe6U\xdd\xbf\x89l\xbae\xd5\x84\xc9\xbf\xef\x1e\xa7\xa0\xad\xa0\xc6\xbf1\xa7|\xbdR\x19\x8f?\xdb)\x99\xda\xa0\xac\xcd\xbf\x992~\xd1K\x06\x88\xbf\xf5\xfe\xa5\xeb\x17p\xc1?\xbeQ\xa7*:\x88\xcb?3\xbaE\xf7\x18\x84\xd2\xbf\xaf\x05\x82L{\xd9\xd0\xbfH\xf8\x03\xb9\xe2\x18\xa3\xbft\xdc\xc5$d\x9e\xd8?h}\x07M0z\xd1?m\x0b&"p\xfd\xcc?s`\x99qK4\xd1?\xf87VX\x98\xdc\xcc?\xee\xebP\x920\x91\xc9\xbf$\x89\x9cM\xd7\xf1\xb1?\xe3\xfd\x1a61\xf1\xcf?I\x19\x848\xc2\xbd\xd0?\x00\xde\xfef\xa5\xb8\xd8\xbf\x87\xf3\xe2\x89\x80\xfd\xc4?\xb3\x17\x01\xe5[\xc6\xb2?\x0cv\xe5\xfae\xc3\xd0?I\xbe\xb8\xf9\xc2\x86\xd5?]\xd0\xba\x93\xb1z\xd7\xbf\xf2\x18x)\x9e2\x93?\xbfb\xf1K\xbb5\xcb?E\xb7\xbdx\xaab\xda?\xc4N\x1d\xaai\xcc\xda\xbf\xf3L\xbd\xf7G\x04\xaa?O\t\x13\xd0Lr\xdc\xbf\x97\xd9]\x91\x0c\xbc\xb7?r\xb2\x87\xe1eN\xcc?>\x14,\xe4\xad\xeb\xcd\xbfM\x18-t\x95\xe3\xc0\xbf3\x07\x0b\xd4\xa9\xdc\xc7\xbfv\x8e\x87\x82\x19&\xda\xbfh\xf7a\x0c/C\xb4?9\x80\xaak\x0f\xcf\xc0\xbf3\x9f9\xb6$\x08\xa0\xbf\xb2\xb4 V\xe8\xe4\xd1\xbfQ \xe9\xfc^\xc4\xd7?I\x8a\xa2\xd4\x80\xa5\xd8\xbf\xbeq\xed%\xf2\xf0\xd3\xbfVLU\\\x1a4\xcf\xbf\xb0\x15~\x1e\xd6\x0b\xc2?!\x8e\x98bV\xf3\xb1?+N\xa2\x8a\xbc\xc6\xd3\xbfcf}Z\xe1\x7f\xdd\xbf3\x1d\xc9\x82\xef\xfd\xdc\xbf]K\x90\xed\x1f\xab\xb5?\xa2!F\xcc\xf8\xc6\xdd\xbf\xc9\x11OXt3\xc1?\xeb\xd9\x94\xf7\xc8\x17\xd8\xbfI\xcbbs\x88\\\xbc\xbfa\xc4\xbd#9O\xd5\xbf\xc4\xfe\x89\xd3\xd2\r\xdd\xbf)\x0b\x85\x85\x18Q\xd6\xbf\xbb\xc5!k\xe8\x95\xc1?\x99\x0f\xa7\xb8\xbe\x85\xd7\xbf)xD\x90\x1ck\xda\xbf\xf8\xca\x95i\xabE\xd6\xbf\xfa\xc8\xca\xb5\xa02\xbd?@\x07(\xa7\x1e\x08\xd5?<]\xaa\xa5\xda=\xba\xbf\x0c\xee@\xf4\x9d5\xd7?:D\x98\xd6/\xfb\xd5?n\xc7[\x1fb<\xd3?ZI\x08\xf4\xd8\x9d\xa9?XQr\xfa\x01Q\xdb\xbf\x8a\xda\x99c\x9f\xf4\xc7?6J\xaa\xaePW\xca?\xa4\x14\x19%\x89I\x98?ME\x04t\x1ad\xda?\x89\x1d\x9f\x08F\x08\xd6?\xd8\xaa \x85D\xb2\x89\xbf;&8\x0f\xdd8\xd3\xbf\n\x17&\xad\xc4;\xd3?\xac\xe6Ou\x0f\xab\xb4\xbf50\xd5a\xd4\x91\xa2?1.\xbc\xa6+\xea\xb1\xbf\xbef:zD\x96\xd8\xbfH%:\x87\x1f\xd1\xc4?\xe6\x06D\xb7\xbf\x07\xd5?7{:2?\xaf\xd8?\xdf~L!\xd3\x8e\xd4\xbf\xbb\x9d\x9f%r\x00\xc3?\x18\xdf_\x92\x00\xe9\xc2\xbfa\xdb\xf3"r\xf5\xc3\xbfT\x1f\xda\x07y\xba\xa5\xbf\xea\x13\x124\x9a,\xd1?\'.\xc8`\xa1\x7f\xba\xbf\xbf\xb8\xe6\x0c\x90~\xcd\xbf\xc6\xad\xfc\xae\x1a6\xda\xbf]\xcd\xd4\xba\xd2~w?\x03\x95<\xc9\xf1H\xd8?\x02\xa1\xe1;!v\xd1\xbfF\x04\\\xd4\xaf\xbc\xcb\xbf\xbb1\x90\x01\xf9P\xaa?\x18\x98\xf2cf\xc8\xcb\xbf\xde\xd2\xd7\x1c 4\xd3?7f\xa3\xb7u\xba\xb4\xbf\xe7\xc6\x11\xf4\x9df\xc8\xbf\xb1\xd6\xad\x15%\x8a\xc7?\xcdL+\xd6\xf5\xa9\xd7?\xe7\xd4\x1a\x0e\xd4\x0c\xca\xbf:\xce\xce\'&\x96\xd8?\xe5\xc4!5_\xe7\xd3?r\xeeL\x9e\xaa\x16\xb9?\xc3\xaaO\xb3F\x02\xc0\xbf\xf5\x15/ix\xba\xce?*\x9cE):J\xd4\xbf\xe1!\x99\rBo\xc0\xbf\xad\xccn\x9a\xf4Y\xc6?/R\xc6\x04\xb3L\xba?\xb6\x81\x1b`){\xd7\xbf8\xb1KJ\xa6\xc3\xd5?:\xd2\x7f$\xf2d\xd4\xbfe,\x8dX\x95\xec\xd6\xbf\x7f\xd8V\xc4\xca\xd8\xa6\xbf\xa9S\xaa\'\x9a\x9b\xd4\xbf\xa1\x17\xa3.g\x0c\xd0\xbfZ0\xc6!\xa5@\xd8?\xe0\xc4\x91\xc9\xc1\xcc\xdb\xbfr\x1f]nN\x84\xd1?\x9b\x1dq]\xa8\xbd\xd5?\x7f7:\xa0\x80O\xdf\xbf8\xa8S\xa0`\x80\xd8?\x8d\x01C\x8e\\\x19\xd9?\x8a%{\x88\xe6\xe0\xd1\xbfa\xbd\x10\xa6Y\xd1\xd8\xbfM\x8b\x00\x89Z\x90\xd1?\x8d\xea\xe2\x0c6\x00\xa2?\xf7\xa3\x1cI\xb2\xd9\xb5\xbf\xea\xec\xfd&X_\xb0?\xfc\x17W\x03\xa0W\xba\xbf\x87.\xe0B\xfe\x92\xca\xbf\xe3\xc1\xb2\xf0\xdc\xb4\xc0?\r\xc8\xe0\xada\xf8\xc2?d#\xb8\x16\xc8d\xc8\xbf\xf7\x8b\xab\x0f\x86\xac\xc8?\x01\xd8\xf4\xa1\xe91\xb5\xbfN_\xb4a\xda\xe4\x95?\xfey\x07\xe0P\x90\xde\xbf\xed\x10m\x89\xd3c\xcd?\x1c\x7f\xca\xea\xad\xd4\xde\xbf1\xe4\x10\xf4\xcaP\xd8\xbf\xadx \xaf3\xbb\xd1?\'Hz\xeb\xcd\xda\xa9?\xc6\xc8\x02\xaa\x19\x19\xd2?A\xce\x9e\xabs^\xa6?\xf5\x9ck\xdc~\x7f\xb3?\xc1P\xf4\xda=,\xb0?\xe6\xceA+\xbeC\xd4?Wj\x89/\xd6\xdc\xc9?\x92\xaf@\xa1\xe8t\xbf?\x99\x85\xf6\xc1I\xfd\xa8?\xb9\xd0\xb0\xb8\x8b\n\xca\xbf\x05\xb7lC\xf0\xac\xc0?\x895\x15Z\xcd\xf7\xc3?\xf2\xd2\xd1F]\xd2\xd2?ti6\xa37\xf0\xca?\x99\x1e\xe7\x17xZ\xac?\\\x0e|\xf1\rg\x7f\xbf\x8f>\xcd\xe5\xe1\xf4\xd4?\xe5^\xf9i\x9fX~\xbf\xf1{\x93\xfad\xab\xb6\xbf\x14\xa8\x95N\x90:\xb3?\xbd\x12j\x88\x88\xa2\xd7?\x0b\xe5\xbb \xc5\xd3\xda\xbf\x9c\x86\x88"\x1f\x9b\xc3\xbf\'\xf1\xc2\xfe\xbe\\\xd3?\xaax\xcdW\xf1\xd1\xd8\xbfuO\x02\xa6\xcd\xab\xc0?\xcf\xb3\xcc\x89\x81\xfd\x9e?\xa5\xfc(\xc3\xe6;\xc3?\xb4o`9\xd3\xdf\xb6?c\xb1\xf4\\\x11\xab\xd2?g\xb4\xfa\x8f\t\x81\xd0?z\x94\r\xfc&\x86\xd8?n\x89\xbd}\x8e]\xc2?0E\xed\xb0<\xf3\xaf?ze\xf1\xa9 \x98\xd6?\x7f-\xb0G\xd0\xd2\xd5?R\x9f\xf9\xd0=H\xd2?\x01|\x13\x92.?\xb9?y\x8e<\\\xd0\xdf\xd9\xbf\x159\xce\xd4|\xae\xc7?\x1er\n9\x11Y|?\x0f*\x17n\x96\xd0\xa3?\x08\xee\xbf\xe8e&\xd3\xbf\xc6\x90\x91\x0b\xd1\xa8\xb3?JpW\x02\xd9\xde\xd0?t|5O\xfe\x14\xc2\xbf&6\xaa\xcc\xcc\xb8q\xbf\x80\xd7o\xfc$j\xd2?\xf7\xe1<2\x8cf\x94\xbf\xbb\xa6\x03\xb2e\xe7\xc9?4\xb2l;\xce\xd4\xd1\xbf\x9a\x80\x0f\xfaBi\xd5?\xbd\x98\x820\x02\'\xc8?{O>\xd0I:\xb5\xbf\xf0e\xc4\xc5\xb8[\xc7\xbf\x11\xb5nA\xb5\x03\xbe?OL\xd1\xde\xac\x01\xd5\xbf\xc7\xe4~n\x9e\xf3\xa4\xbf\xe4UDK$\x19\xd5?\xb8Z\xbf&[\x98\xc0\xbf\n\n\x9cH!\xa1\xd4\xbfH\x86M+\xa6\x0f\xd4?\x95z\xe0\xeeBr\xd0?\x1a;\xc6\x87\xdaE\xca?\x17"\xc3\x1f$~\xb9\xbfa\xfaoST\x8f\xc7?;\xae!\x9d>\x12\xb1?\xae\x0c\x8b\x1cQ\xe7\xac\xbf\x95\n\xb8u\x10c\xc8\xbf\xc4\xa8\xab\x19#z\xa4\xbf;R\xc2g\xc16\xc3\xbf2\xcbl\x9e\x88\xc7\xc8\xbf\x8dY/\x95)\xad\xd2?\xa2Q\xc6\x10+\xc5\xd2?\\!\x95-p\x80\xc0\xbf\x1b\xcdj#q\xdf\xa6\xbf\r\x16a\xd1T\xcb\xca?\xa3\xb5u\x01\xe3;\xcc\xbf\x077p\xeda^\xc1\xbf\xa0#A>/5\x86?,I\x13I\x80^\xaf?\xd0\xa4\x10C\xecS\xc3\xbfe\xb0\xc1=l4\xc1\xbf\x1fM\x10\x97\x82m\xcb?m%\xe7\xa9`\xcf\xb1\xbfZ\xb3c\xc8\xe7\x10\xd4?&\xcb\x9a\xac\xa2@\xbc?7;}\xc3\xf7\x94\xc0?@\x92x\xa5\x9c\xcc\xd3?\xf6\x0b\xa0\x01;T\xd0?/\xd4\x1a\x04\x9f\xbb\xa4\xbfi7Xg=\x8e\xd2?O\xbbD.\xd41\xd1\xbf\xe0\xce\x8f\x8e\x0c\x07\x96\xbf\x03\xfc\t\xad\x83h\xb6\xbf\x93\xbd\x81o\x0b<\xcb?\xdd\x9d{\x9e\x14\xf9\xc0\xbf\x11#\x91]?\xdd\xb1\xbf\x0f\x8e\xc1\x0b\xcau\x93\xbfVcl0\x82\x95\xc8\xbfBT\xcb\xd8yC\xb5?\xbc\x11}E\xa4`\xc2?\xa9\xe4\xb4W\xc9\x06\xd2\xbf\xce\xed\xf9\xf3\xe7X\xab\xbf\xdb\xfd\x9d\x12\x81\xc2\xbf\xbfa\x1a\x87fV\x18\xc8\xbfu\x92\xbd\xe72]\xce\xbf\xd2CL\x16A\xd9\xc3\xbf\x91\x1ao\xfe\xbe$\xca\xbf5\x05g\xbe\xa2\xc9\xcd?X\x9c\xc4A:\xd6\xbc?\xcf\xde\xa8&\xa7\x00\xb3?\x06\xba\xc7X:5\xbd\xbf\xdf\xe3\xbb%%\xb5\xc9\xbf\xff\x84\tq )\xa4\xbf%\xbcSt,v\xc3\xbf[\xba11\xe4T\xad?1\xb5\t\x83\x93\x8a\xa7\xbf\x96^\xb8\xbfl5\xc2?\xfd\xf7L\x9f\xbe\xbe\xcf?\x8b\xbf)\xd7lD\xc1\xbf\xce\xdfpm9f\xc7?BC\x8b\xdcM^\xcb?\t\xe63_\x04\xe0w?\xe9j\xe1\x07lH\xcc\xbf2\xd4\xc5\xacw`\xd0\xbfSuV8\x00g\xce?\x9cIbq+ \xa9?1\xa0%K\x04\xdaU?~\xe6\xa1\x02\x19J\xd3\xbf\xd5l\x85/Hj\xd1?\xccr"\xa8\xf5\x10\xb3\xbf\xfb\xa0\xd2AzA\x95?\xb4|\x8b\x18\xb0\xa8\xa3\xbf\x84r\xd4j\x95\x1e\xce\xbf\xa8\x91?;-\x08\xb6?\tp\x82\xc6u&\xd0?8\xf2H\xdf\x9e6\xc7\xbfxY\x0b\xdc]\xfa\xb1\xbf4\x8c*g\xb4n\xd2?g+\xba\x81\x8b\x96\xd1\xbf\xaa\xeb\x05f\xb0\x9a\xb8\xbf+\xb1\x0e\xabP\xd0\xd2?\x07\x9a0K4X\xd2\xbf\xee\x1e)\x9d\xa9\x03\xb1\xbf\x92\x84\xc6\xf5l\x95\xc0?\xdf\xf8\xe1(X}\xc3?\xa2P\x16\xb2\tI\xd2?\xeaG\x11s\xa7\xfb\xca?\x17K\xce\x7f\xdf\xa9\xc0\xbfoAz\xfa\x14\xf6\xca?\xed\xcf/=\x0bS\xba?-\x971\x12\xc5{\xd1\xbf\xcd\xd4\xa7_A\x04\xd1?\xd8\x0eIe|\x17\xd2?\x7f\xf3\x13\xa1vS\xc7\xbf\x8a\xb1\x00\xb5\nl\xca?\xeaM\xde\x05CI\xc1\xbf\x94\xc6*M4\xa2\x80?\xe4\x8c\x04:\x9cj\xd1\xbfM7\x98\xe1\xbd{\xd0?/@\xec\x91!\xdb\xc9\xbf\xa2\x82\xbe\xab\xe3)\xa2\xbf\x87W\xee\xe9\xc8\xe9\xd2?\xc9\x8e1\xf59+\xa7?SN\x14\xcfwN\xcc?\xdb)\xd8A\x83\x7f\xd3\xbf9\xde\xe3\xba\x15\x9f\xbd?Z\x95\xc7\xd6a\xb4\xd1?i\x93\xce\xf2W\xa6\xb3?S\xf7\xf0)<\xa6\xbc\xbfYN\x92\xe6\xd5\x18\xc1\xbf\xe4H_\xbc\x9d\xe3\xd0?\xf4\xe9\x06y2\xf8H?\xdc9\x7f\xdbd\xdb\xb1?\x06\x0bS\xf4,\xeb\xc1\xbfHa\x8a\x91Az\xcc?RAc%\x18\t\xbb?iC\xf2Tn\x9c\xc3\xbf*\t\x90=\xcc \xd4\xbf\xb7z@\x8dz\x10\xc7\xbf\x15\x1e\xa1+\x010\xca?\xf6\xda\xaa\x83(\\\xc8\xbf3\x92\x8etZ\xb4\xd2\xbf\xedD=F\xbf+\xab?\x97\x14dS#\x04\xb6\xbf!B\x0f\x82\x90\x1a\xc0?*\xcb\tY.D\xcb\xbf\xc8\xfc\x97\xb1\xa8\xe3\xd1?v\xac\xdc\xd6(\x9b\xc9\xbf\x93\xc3\r\xe3,\x81\xbb?&\x10]\xccV\x03\xc3\xbf\xd2\xe9r\x07\x03\x15\xb1\xbf\x08Zh\x7f\xb2q\xd4?\x90\x10a\xc1\xf3\x02\xd3\xbf!c\xf6\xf9\xee\xbf\xc5?&X/\xa1K\xd6\xbd?^\x87\xae\x03\xd7\t\x90\xbf1\xa3\x02\x08);\xc1?\xd34\xb1\x07\xb6\x1d\xc1\xbf\x1c\x8a\xc0\x9f&\x0f\xa5\xbf\xa2l\xea\xc5][R?\xfb)!Q{Z\xaa?\xb3\x9a?\xe4\x9e\n\xcb\xbf<l\xcc)7\x12\xc4?)\xb9\x1d\xaejZ\xb0\xbf\xd0R\x9a\xdb\x07\xeb\xc0?i-\xed\xb8\x1d\x15\x8c\xbf\x91/lau\xf4\xcc\xbf\xf9\x00^\xfd\x9af\xc5\xbf5\x88>K`\xc3\xc2?\xa6\xfa$\rt\xf7\xcb\xbfQ\xe4\x00\xa7\x81\x9b\xad\xbf\xf6k\xd7v;\x95\xca?\xf6\x12)G\x8a\x10\xc4\xbf\xf6b\xcbW\xa7=\xce?\xd0\xb1\x03\xe86\x16\xcd?\xff\xd3\x03\xdb*\xa4\xab?M\xcfa\xf3\xcc\xc6\xcd\xbfz\x08\x1c\x13$\xa0\xc1?\x97\xa2u\xb9\x86\xa4\xc7?\x92z\xd3\x97\xbc\xc5\xd0\xbf\xe9\xd6\x05\xec\x8ap\xcc\xbf\xa2[\xfc\x1f\x04\x8a\x9e\xbf\xf1q\xaf\x99\x98\x98\xcf?\xe1\x90\x97*\xa6\xeb\xc5\xbf)\xbbD-\x0fp\xcb\xbf\x0e\x1d\xec\xfd\xe1\x08\xc4?\xf1d\xedC\xd5.\x9c\xbf&\x84\x89\xc4\xefy\xd0\xbf\xb6\x8a\xc6f\x9f\xe6\xd2?\xf2\t\xf2\x02^\x19\xa7?9AK\xfc\xab\xb9\xd1\xbf~\xf2\xf5X\xc7\xf4\xa7?\xdfY\xf9V\r\x12\xd1?\x82\xb0\x8d\x01\xb4f\xc1?\x13\xef\x81}\xb7\xed\xcf\xbfF\x01\x80{\x85\xa0a\xbf\xf5\xc4_\xbf\x83s\xd0?l\x17\xfc\xc5\xc6b\xbe?\xb5_\x92\xb0j\x84\xc8\xbf"\xcd]N\xabC\xd0?\x16\x8aN\xbb\xa3o\xd3?\xa2\xf1ff%q\xa7?\xb3\xdd%aB\xda\xc3\xbf\x8f\xee\x894\xec"\xba?X|U\xf6\x89O\xc3?\x00\xd4\xcd\x98\xf8i\xcb?\xd6\x0e|\xe606\xcd?\x1b\xc0Mm\x1f\xb7\xd2\xbf3\xdb\xf0\xfbo\xdc\xd1?\xda@V\xd0\xd8l\xc2\xbf&D\xe4?\xff=\xc2?p\x11LJk.\xa3\xbf\xf0\x94\xa7\xe7\xd5\x99\xd1?4j\x1dd\xe6\x17\xce?\x1e\xd4d\xb6\x8b\x11\xd4\xbf,\xfa\xb8\\}\x1d\xd3\xbf\xe67\xee5o\xa6\xd2\xbf\x94ZO\xbcB+\xd2\xbf~\xbe\xcb\xd9\xaf\x16\xd1\xbf\x84T\x87\x10dS\xcf?\x8b\x1fz\xe4m\xe6\xd0?A\x8f\x81\xff<2\xc2\xbf\x8bk;\x9b\x15\xa0\xd4\xbf\x175v\x1e9\x1c\x86?\xd1I\xba\xa1x\xd7\xd2?E\x93!\xd5\xa4\x9b\xc7?\xa2AM>\xcc\x8e\xc8?p\x91\xd5\x13z\xa4\xd3\xbf\xd2\x92\xe5ax@\x9b\xbf\x93\xfa!\xc0\x07\xf5\xa7?R\x89L#C\xf6\xce?\x03uk\xb1C\\\xcf?e\xd6\xecY\x05\xed\xbe?.\xda\xeb\xee\x12\x1c\xab\xbf\x80\x02+\xda\x1e\xc1\xc3?\t\x0e\x8e\x85%F\xc7?G\xebz\x16\xce\x86\xa1?8?pz\x05\xfe\xb1?\x0f\x89\x1b\x08\xb6^\xb5\xbf\x14\xfa[\xe5>\xa3\xbd?\x989\xcat\xe0\xcd\xce\xbf>8gL/M\xd4?\xf8\x89D\xa6\x93\x1b\xd4\xbf\xf9\xc6\xf1\x84\x13\x95\xb7\xbfk\x14\xa0\x9c\xc7\\\xba?\x92\xd6S\xcah_\xbc\xbf\xab\nk:5\x02\xcc?z\xb5\xb9\xbdRe\xd1\xbf\x92\xf6P\xc7\x1ak\xc0\xbflx\xef\t\x9a\x7f\xb4\xbfR\xc4\xd7~\xd6\xde\xb4\xbf$\xf5\xbf\xf1{v\xc5\xbf\xfd\xa1\x0e\xa4\xaf\xc2\xa5?Q\xdb\x84\xeb\x83$\xcb\xbf^\t;\xba\xbe\xb0\xc1?\x81\x96.v\x1d)\xb8\xbf{+\xaf\x9e\xaf\xa1\xc9\xbf\xc1\xe9\xa11\xf7\xc7\xc8?\xe4\x9c\xd9T\x88\xb5\xd0?\x17\xf9\x7f\x88\x13\xd1\xc3?\x15 \x1d\xd5\ru\xd2\xbf\xfd\x9a\x1c\xba\xa4\xce\xcc\xbf\x94\x93\x92&\xe9#\xc2\xbf}\xb2\xa3\xf4\xad\xf5\x88?\x0b\xbc\xe0u\x86\x1e\x8d??\xf1\xb4W\xb4\xe3\xc2?\xd1\x9b^N\xbb\x1f\xc1\xbf\xbc3\xbe\xe0\xc8\xde\xaa?\xc8\x0f\xa3\x02\xd0\xc1\xd1?\x1eG\xb1\xb1Wl\xc7\xbf\x8c\xdb\xec\xe8\xb3\xa6\xaa\xbf%Zg\x112J\xc9?\x13_\x86\xa6\xc9\x8e\xba\xbf\xf7\x87~\xdf\xcf\x19\xd0?*#\xaf?\x19\x93\xcd\xbf\xbd\xe5\x04\x949\x96\xa8\xbf}\x00~\xbe\xc9o\xc7\xbfM\x7fK#(R\xd4\xbfx\xdc\xa6y\x96\x8d\xc2\xbfNGRXh{\xb3\xbfW\xd3\x88\xbfM\x06\xd1\xbfR\x80p>\xf1\'\xc7\xbfl\x0f\x00\x04\xb6s\xc7?\x8epcD\xf1)\xa7?IB1\xec\xff#\xc5\xbf\xd3\xca\x7fl\x04\x12\xcd?\xb5\x1c\xdfs\x96\xd4\xd1?\x14\xaa1j\x01\r\xc3?\x8b\x88\x84Z\xb9\x15\x99\xbf\x10\x86\x87U\x85f\xd1?\xc5:l\xc4\xda\x12\xbf\xbf`V\xe2\xab\x0f?\xcc\xbfu\xe4W\n\xb6\xe8\xca?\x8b\xf5\x7f\xf6\xaa\xdd\xd0\xbf\xbf\xb6\xec\x053\xb5\xc1?\xe1\x11\xe2I\xdb\xc9r?\x93\xf6\xfcV0D\xb5?\xb5\xc8\xf2\x08\x82\xf3\xc9?\xd9R\x1a\xbbVD\xd2\xbf\xa4\xfcN\xb2\r\xcf\xd0\xbf8\xbb\x94\xc0\x84.\xc9?T]\x05}\x8b\x08\xb0?I\xafC.C\xff\xc6\xbf\x18\x1c\x00vf\x9a\xc1\xbf\xddKi^\r\xbd\xd3?\x16\xb4\xa7\xef\x15\n\xd0?`znF\x10\xbb\xb0\xbff?8~\xc4\x06\xcc?"ZPO\xddM\xb2?\xc7S\x02\x87\x15_\xc9?j\x10\x1fW\x0e-\xab\xbf\xef\x93S\xf0\xe8<\xd2?h,\xe51%g\xb8\xbfT~\xb5$\xcbq\xba?\x8b\xf0\xcbIv\x15\x8d?;\xfa\xac\xe2\x05_\xd2\xbf\x19\xe3\x97R\xbfX\xbf?\xf3Pe\xd7\x1aN\xc5?\x19\xa9H`J\xa2\xca?\xf2S\xcf\x14a\xb7\xca?\xf9\xfcy\xf1r\x9e\xc7?\x1f^\xae[\xfb=\xc0\xbf\x0c-#\xb2\x06\xe2\xc8\xbf!\xa2\xc2\x84r\xb7\xa7?\xec\xe0\x02\x83"\xce\xc4?\xd3\xfa\xeda\xc0\xa3\xc9\xbf\xd3\xef\xf3v)|\xd1?\xaf\x95\xe8;\x9f\xdc\x92\xbfJ\x82vc\xb3\x85\xd0?7\\*\x90\x95w\xc2\xbf\xfc\xdf\x84P\x1a\xbf\xb3?\xb0$t\xde\xef\x01\x86?\xa1\xbfc\x1dq\xf7\xc7?w\x98\xb4\xfb\xaf\xa9\xbb\xbf\xa6C\x86\xf2\x1b&\xb2?@,\xc5\xcc\x0b\r\xbe\xbfY\x8e\xa9\xce\t\x82p?\xb1\xfa\x89\xfc\xd5\xcf\xb7\xbf\xd90\xf3\xa8\xe0T\xba?,\xd40\x83\x91/\xd3\xbf\xbc\xf6\x8bA\x978\x93?\x12@w QX\xaf\xbf\xb1\xf2\x02\xf5\x194\xd1\xbf\xad\xd3\xafP\x8f#\xc5?Mb\xfc\x84\x18\xfc\xc0\xbf?X%\x9a+\xf1\xbf\xbf\xc5.\x06\x9f\xb3\xb4\xcf\xbf\x1d>r\x95I7\xd2\xbfm\xdf\xafF2\x1e\xc0\xbf\xbe\xe0\xf5\xdfM+\xae\xbf]\x0f_\xcd?~\xca?\x06\x940\xd8\xf0\x17\xb0\xbfLH\xec\xa8\xa2=\xb5\xbf\x17\x8a\x96\x89\r\xf9\xbc\xbf\x9d\xb6\xf5\xddj\xb6\xc1?\xe7\x85\x18\x86\t\xd7\xb6?\xfa\xc4\x1cox\x05\xd4\xbf\x1ds\xd6{\xa3\x99\xd0\xbf\xe0\x1b\xa8y\x9dA\xbc\xbf\xc2\x97-\xba"{\xd2\xbf\x8cDWE\xa5\xb6\xc4\xbfI\xe1P\x10\xaa\xdb\xc3?\x110+\x8c~B\xba?\xee\r\xfa\xb7):\xc9?\xe2,\xecA\xf5\x97\xa3?U7\xe4\xd9S\xe9\xa7?X\'\x98\xd25\xe4\x9c\xbf\xfa\xf5\xae3\x9d\xff\xc9?,\x97\xafn\xdb\x84\xcb?\x0b\x1d\xfa\xf8\xfd\xeb\xcc\xbf\xfd\xc7\x17\xe7\xda\xe8\xce\xbf\x19\x18MXJ1\xbe?\xbd\xe8\xbb\xd1,\xa8\xb1\xbfU\xc3\xbe\xe9\xc9i\xd1\xbf!\x82\x8a\xdb\xf4`\xd2\xbf\x1a\x0e^\xc9\xabm\xb8\xbf\x82\xeao\xfd\x86\x96\xca\xbf\xb1\x950\x85\xda(\xc5\xbf\xe3\x16{\xde}\xe8\xc8?A\xf7\xbf\xc52\xd2\xcd\xbf\xd8\xb6\xe4\'\xff\x7f\xa5?v\xe3\x85o\xf9\x8a\xb6?}\x9f\xc0\xa3b\xe9\xca?0o;\x8e\xbdQ\xb0?\'PB\xae\xbfX\xcb\xbf$\x00\x8e\xefM*\xb6\xbf%\x89\x01\x9c\xe5\xf1\xd3\xbf\xb1R\xbd\x14(\t\xba?\x05\xe1\xe3Hf\xf3\xba?`#\xael\x95v\xd1?\xae\xe5\x10\x89\x9d\xdc\xd1\xbf\xdf\xeae\x99\x8a\xff\xcc\xbf\x0b\xfe6\xef\x8f\xdf\xaa\xbf\xf4\x80\x82%\n\x84\xb4?-\x90#S\xae\x9e\xcd?d\x03%\x89\xf1\x96\xc1?H\xe7\xe9\xf9%l\xd2\xbf\xb9\xe4\xec\xf3\xc0\xb5\xbc\xbf#\xb0\xdb\xd1\xea\xd5\xbe?\x08\xbe\xa1\xad\xe2\xd8\xbf?\xf2h\n\x15\x1b%\xa2?\x98T1 l\x16\xc7?\x87\x0fX\xb9\x92\n\xac\xbf[\xdf\xd6u\xa9M\x9f?\xa0\x9b\xf0\xf9\xe8\x85\xd0\xbfq \x87C\xa8\xb7\xc0\xbfn\xd71\x93\x80\xe8\xc8?H{\x18\xdbd\x80\xa6\xbf\xa9\n\xa2\xb0\xf1\xa8\xc9\xbf\t\x8bw\xa3N.\xd3\xbf\x82v\x07\x1fK\xef\xc9?\xeap\x9e\x98d\xd9\xcb\xbf\xd3l\x8c\xf4\x1a\x06\xc8\xbf\x1ft(h\xef\xe6\xb4?\x00\x92\xdc\xf2I\xf3\xc6?\x11\xcf{\xd7[[\x96?\xd1\x1b\xa9\xd9\x90\xe5\xc1?;\xd9\x04\xbdh\xb9\xcd\xbfp\xba\x13M\xdf\xf5\x8b?X\xaa\'G\x91\x05\xc5\xbf\x01\x18\xe7\xa8\xe9O\xb3\xbf\t\xaeZ\xc0\xc4\x92\xc0?<\xaf\x16\xe4N\x96\xcb\xbf\xce\x9c|\xd7C\xfd\x91?\xcd\xfc\x9b\x96w\x85\xb6\xbfCAnY\xf5\xd4\xbc\xbfG\t\xe6\x08c!\xd1\xbf\x157\x9a3\xefO\xcf\xbf8\xfce5\x80\x92\xc9\xbf\xaa\x01K\x8d=<\xda\xbf\x8f\x87\x91c\xe6\xa2\xd7\xbf\xc3\xe0\xfbE!\xe9\xd4?\'UPL\x9ex\xc2\xbf\x9f:\xe5O\x00v\xce\xbf\xc76\xdaM\x85\xe8\xcd\xbf\xa6\xac\x81\xd0\xeeq\xd5?4\xf6/\xe0\xc0G\xd9\xbf\xfd\xa1\x8c\x9b\xaa\x9a\xd7?\xc6\x15]A5.\xb9\xbfiB:\x90X\x97\xc8\xbf\x98[j\xc2!\xf0\xd3?%\xe8\x9d\x92\x86\xa2\xc6?\xef4\x9aT\x92W\xc4\xbf\xe9t\xd4C$\x83\xd1?)`\x8dIp-\xd4\xbf$D\xaa\xda\xf3\x1b\xc2\xbf]\xe8\xf5u\xbe\xe1\xb4\xbfg\x0b\x9bS\xa6\x97\xc2?\xff\xedM\xe4$\n\xd8\xbf\xf7\x1f*\xe6V<\xd7\xbf\xb1\xee\x93\x80\x18\x8e\xd2?\x1a\x1bv5\xc5\x9d\xd9?C%\xc5\xbf\x84\x12\xd2?\\8K\xfd{\xf9H?`\xa9\xd8\xcaP\x88\xb2\xbf\x1fx\x94sjQ\xd7\xbfuk\xae\x88Oa\xd8?\xb9\x1dFu\x0e\x13\xc4?\x03\x9a\xd2a\x16\xf3\xd2?\xc8\xd6\xce\xe65\xb1\xc0\xbf21\x96\x90`c\xdd?\x9eb=?\xc8\xcb\xcd\xbf\xdb\x8e1L\x90\xaa\xd4?\xd5\xfdp\xc6\xaf\xc3\xa6\xbf\x99\x1e\x9c\x00\xe6\xa7\xba\xbf\xff\xc1\xb81c\x1f\xda?\xf6\x0e5\xd5\xd53\xd9\xbf\x8a\xba\x01\xde\xfa\x90\xd2\xbf\x82\xb9\x8b\x9a\xaf\xc3\xd7\xbf\xbb>\xe9\xdc\xea;\xcf\xbf\xa4\xb5kIA\xab\xd2?\xd6\x94\x8as\x15\x89\xdc?\x00\xc2\x85\xd20\xad\xc0\xbf\x0b\xfc\xc7\x08\xf0u\xce\xbf\xca\xfa\xd1\x05xu\xda\xbfCn\xb3[\x08L\xd4\xbf\xa2\xd2>\xed\x854\xb2?\xbeu3\xec\xedY\xce?\xbd*\x06\x17\xfaW\xdc?^[\x86@\x90\x87\xa2\xbf\r\xc9\xf8(\xf4o\x96\xbf\rh!\r\xcb=\xc4?*\x0f\x0e\xe2I\xa8\xca\xbf\xfe\xd5\x94Vh\xcb\x99?2\xb5\n\xb0\x03\xc2\xd0?\xba\xeb\x10\x15-#\xda\xbfC"\xe2\x15X\x1a\xd6\xbfP\x1cH\xaa\xc7\xbd\xd1\xbf\x91\x17\xb6\x85\xc6\xca\xc6?^9\x13\x89!\xe9\x9e?\xa4\xfb\xefU\x8ag\xb2?\xe2\x9er\xe4cv\xdc?\x08Lr\xd4\xfd\x82\xc8?I\x02\xb7\xca\xee\xe4\xc6?\xc8\xf3\x15\x10`n\xc9\xbf\xa8N\xdf\xd2h\xd1\xd5\xbf\xe8y\xf3\xa0P\x19\xd2\xbf\tOR\xde\xae\xf1\xb8\xbf\xea@\xa5\xd5\xea\x85\xd5?\xba\xf2\xdf\xe9\x93\x8b\xb4?g[,(\xa5/\xd9\xbfv^TeeP\xd6?\xf2\xb3\xe5\x0et\xc2\xc0?\x19*/@\xd4\x93\xca\xbf\xa2NU\xdf\xba\xc3\xd1\xbf\n\xa4A?,M\xda\xbf}\x19\xa4\xc9\x049\xc7?3\xe1\xf3\xd0\xbag\xb1?\xdb\x18\xc1\xf5(\x87\xd3?\xf5\x86p\xaa\x8d\x9d\xc5\xbf\xf8\xae}\xb4\xe5\xc2\x99?\xa2\xd8`\x11\x8c\xa7\xd6\xbfi\xb1\x1dSy\xfb\x9e\xbf[\xb6\xbd\xb0JC\xdd\xbf\xd7\xb1\xb4\xcaX\x91\xac?p\xb1\xdbP]\r\xd8\xbf\x17\x14\x8a\xa4\xe4\xeb\xcf\xbf-\xd2\xbb]4\x17\xb5?\xc7\xa0\x16\x8c)\x9b\xc6?\xcfF\x90#\x86k\xc1?\xafX\xb8\xe4\xe1\x11\xad\xbf\x88\x8b\xd7j\x8bL\xd3?7\xa7$\xa2\xb4\x93\xa1\xbf\t\x03\xa6\x9cmU\xdc\xbf\x8f\xefX\xaez\x01\xab?\x8bi\x8b\xe36\xe7\xc6?g\x18\xcc\xe5\xae\xed\x97\xbf\x92\xd3\x15\x91\'\xdf\xd1?l\x96\xf4\xe9I\xe3\xc3?<\xa1Qlx\xe4\xdb\xbfH/\x7fgL\xad\xd7\xbf\xe7x\x8c\x1e,b\xcc\xbf\x0f@Z\xb2{\x1f\xd4?\xcdZ\xf3\x80}:\xd6?x\xff bu\xa9\xa4?\x90\x96\xa1E\xf8\xa7\xb0?\xc51b3@\x1a\xd9?\x06\x96\xb2g\x89\xaf\xd4\xbfs\xac\xdb\xe2\xec\xf9\xd0\xbfq\xa3\xbf\xd0+\xc2\xaf\xbfP,T\xd7\xb6\xfd\xda?\x84\x86\xbb\xc5\x1a}\xd7\xbfw<$Z\xfdW\xb8\xbf\x05n\xf8\x94\x90"\xd0?3\x95\xcfX\x8d\xd0\xda\xbf\n\xca\xb8\x152O\xc7\xbf\xc7a@##\xaa\xd8\xbf\xd3\xc1\x9a\xf2?d\x8d?Af\xe3\xb3:[\xa3\xbf`\xcc\xff\x9a\xe7\xa4\xd0?\x81\xf7\xab\x87~_\xcf\xbfb=:\xbc\xe6\xdc\xd4?\xa4`j\x9e\x14!\xbe?\x02?i\xba\r\x9b\xc6?\xf2\xd6\xc7\x86,\x9c\xcc\xbff\xbc\xfaa\tk\xd7\xbf\'\x84m\x94c\xb8\xca?\x00\x94x\xefS\xd9\xa8?\x7f\xach!V\x00\xb0?h\xc7\x1c\xabTH\xcf?\\\x02\r^\xdc\xc6\xd7?\x9cV\xf7\xc1\xe6e\xcf?M\x8a\xf9\xa8\xe1R\xc0?;\x8a\xe8\xa9\x992\xc9\xbf\xd7\xc5\x02\x94k\x0c\xcf\xbf;s\xdd\xdev\xe0\xd5?R\xdf\xb6\xc3\x97\x1e\xd6?\xb1=\xc4\xd6}\xf8\xb7\xbf?a\x92\x84\xd9\xae\xd0?;"H%\xc22\xd2?\x86\xe7`\xf5\x89\x9c\xa7\xbfD*\xaa\x94\xf8\xc8\xca?\xac,\xda9;\xce\xc9?Ca\x16\xcb\x0c~\xd3?\xcfZs\x93\x17L\xa7\xbfe\x13\xd4\x93\xa6O\xda\xbfvC\xa2\x06,\x07\xbf\xbf\x800a\xfd\x8a\x18\xc4?\x98\xd7\xde;\xdc\x98\xb1?6`\xf6\xaa\xfe\x87\xd9?\xbeJ\xb4\xd4\xa1*\xd1\xbf\x7fp\xa8\x99\xacj\xda?\xe4#\xe0\xeb[:\xa4\xbf\xb2\x9c\xd7\xd9\xd1\x84\xc2\xbf)\xddQ\x0e\xbe\xe7\xd4?\xa5\xec\xd76\x9a\xce\xd8\xbf\xa6\xe2\xb8q\x90\xbc\xd5?9z|4\xed\xa1\xd1?.h\x15l\xae\xb9\xd3\xbf\x8e\xe9\xe7\x7f\x83d\xca?t\x06\x80\xad\x97\x92\xd9\xbf\x0b\xcc\xa4\xaa)\r\xc4\xbf3\xeciK,\x9b\xcc?C\x03\xc8E*\xac\xd2\xbf\xaa\xf4wa8\n\xa6\xbf\r\xf3\x8dB\tm\xcc?\'p{\xc9\xeb|\xd6\xbf\x1f\tu;2\x81\xde?2r\xcc \xab1\xdb?I\x13\xe9\ty\t\xd5\xbf8\xcb~F\x1e\xf1\xca\xbf\xa6\xa2\xa8Z\xb9Z\x9f\xbf\x0f\xc2\xe6\x95\xd1g\xd8\xbf\x8c\xe6\xd3.\xa9\xdb\xc9?f\xea^\xe1t\xc5\xc6\xbf%\xe3~\x9f\xac1\xd9?!\xa6\xa4t\xe2p\xa6\xbf\xcf\xbc$\t\xbb\xfc\xd2?\xb4U\xf1\xeb\x15\x06\xab\xbf@\x86PX\xdb7\xa8\xbf\xf70\xd80\x8c\n\xdc?c\x9b\x08\xad\xbc\xda\xa3?\xee\x7f"\x04\xed\xf2\xd9\xbffj^\x0b\\^\xd3?K\xd4\xcf*R\xdc\xcd?\x8eH\x8ey^\x8d\xd6\xbf\x13\x95\xc1\xc3Cd\xd4\xbf\x9a\xebOH\xae\x93\xdd\xbf$\x83\x94LI\xf1\xd6?\xd9\xd3\xaaT\xc7U\xd7\xbf\xb7\x19\xba\x01\\\xac\xdd?\x9d\xc1\xee;\x1a\xe2\x9e?95\n\x83#6\xdc?\xed$\x0f\x14\xb1U\xdc\xbf\xd3\xcb\xcdm\xb1Z\xaf?\x9b\xbd\x95\xfa\xb2\xf8\xdc?\xa8\xf3\xa8vTB\xdc?\x88&\xde\xab@]\xce?W\x7fy\xc6\xaeo\xb7?\xca\xef?\xf0zq\xdb?\xe4\xf2\x93\x9c\x15\x8e\xd8??\xda\xe1\x13\xde\x82\xd3\xbf\xa1/\x81\xb3\x05\xf5\xb0?\xfb*\x00\xdcW}\xd8?zr\x06g\xd3Y\xa1?\xc3\x162\x87F\xca\xae?\xfa\x1f\xe8?I\xdd\xaa\xbf+:qW\x00&\xd8\xbf\xfa\x92\xa0+i`\xbd?\x8d\ne\x18\x19\xbc\xd5?q\xcdqX\xcb\x91\xd2?\xb3\xa5\xbe\xc1\x8bc\xd9?Cr\xba\x03,\xae\xc0?\xb1\x01\xc7\xd5\xe3{\xd0?\xd8\x15\xe0\xb81\x15\xd7?P*\x8e\x009\xa8\xd7\xbf@\xb4"\x8fn\xdf\x9f\xbf5\xca\x91B\rW\xd5\xbfw)\xa9\x88\xaef\xda?\x9a(\x11:\xe4\xce\xdb?\x07\x03D\xe4\xc6I\xd2\xbf\xaeR\x90\x03\xbbM\xcd\xbfS\xbdY\x05\x8f\x18\xd8\xbf\xf3[\x0f~\xeb4\xc1\xbf\xd76\x84D)\x85\xc3\xbf_\xae\xf2f\x98\xdd\xd3?^r\x047bO\xd1?,\x86{BJ3\xd4?t=\x81[\x14\x15\xc4\xbf0\x16\x9bNU\x18\xd4?\x99\x11\xa6\x0b\n\xe1\xd6?\x9b\xb0]\x8clZ\xdb?\x99C[\xdbI\xd6\xce\xbf+\x02\xf7\xb0\xe9\x15\xd3\xbfO\xd4\x1d\xe4\x00z\xae\xbf\xb7z\x08@R>\xd1\xbf;\xa9\x85\xb7\rO\xd8?\xbb\x1a\xf3y<\x8a\xb3\xbfX\xe6\xf6\x0c\xcc\xf6\xc3?m\x0e\xe4\xbb\xc6\xf3\xd7\xbfL\x85\\\xab>\xec\xdc?\xd6+\xa5.\xdcZ\xbb\xbf\x10\xeci?&}\xd3\xbf\xc3\x90\xec\x11m\xe3\xc1?\x8f\x06_\xe7~\xaf\xd4?\xc1\xad\x1c\x1d\xc5\x86\xd4\xbfv\xf7\xa4CZ\x19\xc6?\x8e1S\xa5"O\xc6\xbf\x08B\x87\x94\x90@\xd1?\xc3 6Ih\xdb\xcf\xbf\xe3\xd2\xb2\xb83V\xbf?\xc0l\x8c\x88\'\xf4\xda?C<\xd1\xf5C\xe6\xcd\xbf\xc0\x0c-\x7f\x99\x7f\xb7\xbf\x02\x1f\xa8T\xae\xe1r?\xff\xeep\xfa/e\xcd\xbfD+\x87\x1f\xb0\xc5\xb7\xbf\x10\xb6(41T\xa8\xbf\xaf\xb9(\x15\xdc\x89\xd7\xbf\xcb)\xf5h\x1b\x19\xd1?y\xf6Z\xfb\x0f\xd9\xd2\xbf\xcf\x1e\xe8<gq\xd0?xg\x14n\xa7/\xc2?\x1b\x14g\xfa\xa2\xc6\xc6\xbf\x17\xe8\xa3\xe1\x91\xff\xd6?[d\x11\xb4"\xa2\xd0?\x9d\x84 \xbeJ`\xd1\xbfDT\x8e\xcae^\xdb?B%\x1a\x1a\xa1\x04\xcd?a\xe1\x9e\xc4\xf5O\xd5??w;\x10\xe2N\xd8\xbf\xfe\x13>\xa1\xd6\xf2\xd9\xbf}\x96\xee\xe6\xa3\xb3\xd1? U\xd3W\xc0#\xc5?\x9d0\xf4\xd5"\xc6\xcd\xbf\xea#}\xd5\xef\xda\xa3?\xbe\x1f2\x9e\x00B\xc6\xbfS\xd7(\xccl+\xda?7|i\xa4\\\\\xbd\xbf\xea\xb1\x998q\xd9\xcb?`e\xc9\xd7!\xc9\xcf?\xd6\x9c\x9e\xe5\xda]\x86?\x0e\xd3\x82\x8c\t\x86\xcf\xbf\x1c\x8c\xce-\xfa\x82\x91?\x1cZf\xe5\x1fW\xd7?\xc2\x9cR\x07t\x7f\xd1\xbfw$\xddh\x81\xc6\xd8\xbf\x97\xab\xeb\t\xe3\x1d\xa4\xbf:7%Kjx\xd4?\x9b%\xd8\x8a\xc3\x82\xd3\xbf\xc1$\xab\xa2\xb6~\xcd?\x99\xa7\x87\x8d\xe1\x13\xba?cpm\x86\xe2\xcf\xb8\xbf\x87/\x93\x9e|\x9e\xd7\xbf\xe0) \xec\xc7\x10\xd3?L\xb71\xda8]\xa3?uM\x18|\x90#\xd5?\xde|\xf6\xd5\x92\xb9\xd0?z\x89\xd7MQ|\xd1?R}\xde\xe3\x85\xad\xaf\xbfA\xa6\xe0\n\x9d\xb8\xdb\xbfvi\xf5\xbf\x86\xd0\xa1\xbf\x1d\x13\xf2I\xa8\xcc\xc1\xbf\xe5\xddz\x15\x03\xba\xd7?\x82G\x08\x02!g\xd3?\xff\x91O-\xb5l\xd2\xbf\xa5\xdf\x85\xfc\xb8H\x07?\x1e94\xce\xdaP\xda?,t*3\xf6\xb6\xd8\xbf\xeeFj\xad\x9e\x84\xdc?\x1ak\x04\xb1>\x92\xd8\xbf\x92\xf9K\xbf\xc4\x83\xd4\xbf\\{<A@\x01\xc9?|\x1a`\x1f<\xdb\xc9\xbfti\xbc\xbb\x91\x99\xd2\xbfC\x83\x9f\x11\xbd\x97\xb4?\xdd\x8e\xc7\xf2\xb5\x1f\xd2\xbfH\x8bK\xc2\xf0"\xaf?>\x11\xf1\x95\x11\x06\xd6?r\xa2\xc5\xd9kG\xd3\xbf\xc3j\xc4\xa7I\xf4\xc5\xbf\x94)\x97\x0c\x1a\xb8\xc7?\x1bp\xcc6\xfe\x05\xde?;\x94bl\xcb)\xbc\xbf\xb1\xbc\xa8\xbe\xa1\xc7\xd0?\xeb\xb8>g@j\xdc?GW&I\xf6\x0b\xb5?6\xbe\xe4\x91A\xbd\x9e?K\x809\xd5\x8d\xea\xd5?\xe1\xb9\xf8\x01\xd0;\xd6\xbf\xbcf\xe3\xb8q\x04\xc5\xbf\x8b\x93\x03\xf5+\xfc\xb8?\x92T\xf4\xf3X\x0e\xc2?\x18\xe87b\x94\xdc\xd0\xbfN\x9c\xe2t\x02\xd7\xdc\xbf\x1f\x15yE\xe7\xe0\xce?\xca\xee\xc5[,Q\xd6\xbf\xb6\x9aiB\xc7\x08\xd4?DU\xf6\xf0\xe0\xd7\xd6?\x18rW\xd0\xc7\x95\xc7?\xe8\x04\x11\x80\x9bK\x98?>\xd0\xc5%xp\xd0\xbfR\x9bl\xe7s\xbe\xd4\xbf\x8d\xb0\xbd,\xdf\x92\xc4?\xcal\xf9\x03\xfa=\xd8?\x9e\xf4\x008=\xbc\xdb?N\xbd\xb1\x82V\x96\xdb\xbf$\xb1\xdd\x82\xa4\xa8\xd0?\xf0\xd2\xbb\x95Q\xa2\xcc?c\xf9\x8c\xc9\x93i\xd5\xbf\xe7\xd3I\xe3\xbc\xaa\xd6?\n.\x9dY\xe7\x87\xd0?c+\x16\xb9\x0e\xd9\xd9\xbf@\x9b\x9a[W\x0e\xd5?+%@<\xc2\x98\xdb\xbf\x9d\xa0\xbd\x18\xdfQ\xdb?\xdb\x1a\x1dlV\x97\xdd?\x0f!\' G\x9e\xd4\xbf\xbc\x19\x0b\xd4\xf5\x02\xcb?\x9dj\xf3v\x1d\x88\xcf\xbf\x8a\xe2\xc8Ol(\xc4?\x1f\xa14\xe7\xb0\nH\xbfdM?\xa8,\x90\xd4?\x0c\xa7t\xe1Q\xdd\xcf?\xa0<\x7f\x8f$\\\xd0\xbfxj\x03\xfa\x8bA\xc8\xbfq}&\xf5\x01\xdb\xc1?\x84\x7f\xfad7B\xd7\xbf\x9a\xbd\xaeF\x82\xc0\x99?*\x0c\xdfD\xbf{\xd6\xbf\x05\\Nh\x84\xf8\xda\xbfsi\xb7\x0b\xc7\xdf\xa5\xbfw\xce-^k\x95\xb7\xbf\x06-s\'Qy\xd1\xbfo\xce\x0c\xfaG<\xc5?\xc5T\xe2\x9a\x1d\xe2\xb6?\t\xe2.\x87\xa6\x8c\xb9\xbfX\x0f\x84\xac\xdei\xc9?S\x80\xb6\xb0\xeb\x08\xd0\xbfz\x0b+\xddR\xb7\xd9\xbf/c\x1e]M\x19\xcf\xbfHni\xd2*\x8f\xc5\xbf\xdf\x0e&\xaa\x12M\xd9\xbfc\x15\xf6\xf8\xf7\xfa\xd5?\xeby\xc9;m\xfb\xdc?\xca\x18\x17\xef\xceL\xc8?U\xd1j\xd1=\xb1\xc8\xbf\xf2>\x13\x1b\xf5*\xd9?)\x92\x9e\x9d\xc2\xd1\xd9?Ns!AbD\xb8?\x1f\x9a\xad\x13\xe6\xda\xc4\xbf\xc8\x87`C\x7f\x9f\xc5?A\nc\xf8\x83X\xdc?\x19\xd4]\x8f\xaas\xd8?^\x03<\x87\xbd1\xda\xbft\x93\x80\x8a\xb0$\xd7\xbf?\xf5\x8e\xb0\xb4K\xd6?\xc8T\x10uL\xd8\xb2?\xa8\x132\x9d\xb2\x80\xa8?\xa7B\x00\xef\x7f\xe9\xd8?\xd7d\xdb\xe2\xf8Z\xdb?\xd0\xffM/\xff@\xb2?\xb0\xf1\x91HX\xdb\xa3?\xe6\x16\xf3;\xb8\x84\xbb\xbf\x91\xd3\x87i\x17;\xd1\xbfc#g\xec\xe4\xa4\xdb?.\x1dm\x84\xee\x93\xb9\xbf\xbd<\xa6v\xb8\x96\xc9\xbf\x8d\xbau\x11\xb8\xc8\xdd?\n\xe1\x9a\x92r\xfb\xd5\xbf\xb4\x88@\xf4\xbf\xc0\xb6\xbf\xb0W\xdc\xaf\xd5\x84\xd9\xbf\xa1\x1b\xfb\xd9H\xcd\x92?\x1f\xaa\xe5"\xcf\xaf\xc4?}ld\x92\xcf\x90\xd1?\x9bAT\x1d3\xdb\xc4?h2\x00\x0c\xab\x81\xc4\xbfv\xd8\t\xfd\xc5\xb7\xc3?\x83\xe6/\x03ti\xac?\xf2\x1e\xc9)\x10\x11\xc5\xbf\x96\xd3x\xa7\x005\xa7?\x12\xe0F\x8c\xa2\r\xdc?Ro\x88\x9b\x90\xfe\xdb?\xc5x6%W\xff\xb7\xbf\x9d\x0c\xd3O\xee3\xc6\xbf\x07\x0b\xe9\xa4Sd\xc8\xbf&=\xf6N\x8e\x80\xa4?\xd3\xa7e\xfd\x05f\xcc\xbfj9&\xa9\x1f\xff\xd2\xbfk<F\x9f\xc6\xa4\xc6\xbfo\x0bf\x9d\x9bS\xb4?\xc8\xa8\xee\x9b\xa4\xd8\xc9\xbf\x19\x81\xe5\xa88k\xc7\xbf\xac\xd5\x00\xd3\xf8\xb8\xb0?\x99\xa1ZT#\xa6\xb9?\xb9\xc9\xc0\xea\xb0|\xd2?\xcd\xa6\xfd\xaf\x9e\xa4\xb8?E.\x08\xa9%\xa6\xa3\xbfRa\xa0\x1d)\xed\xac\xbfu\x92\x91\xd7\xfe\x18k?\xa7\xc2\x13\xa4\xcc\xea\xc7\xbf:D\xcd\xfbq!\xbb?\xe1Io\x0e\x07M\xbc?\x12\xa5)lJy\x8d\xbf\xa4\xe2\\\x01\xb0?\xc3\xbf2mTr\x96H\xce?7\x92F\xa4\x8f\xfe\xc3?\x07]\x7f\x0c\xb2\x03\xc0\xbf8BH\xe0\xcc.\xa5\xbf\xedy\xc3\x14\xc0(\xcc?\x15\xae\xb47\xd8\x98\xa4\xbfm1\xd0yF\xd8\xc6\xbf+\x97\x9dx\xd9\xc8\xc0?\x8d\xb7\xe5j\x83Y\xcb\xbf\x1bu\\\xa6\xc6q\xd1?^u\x95\xa0)n\xd2\xbf;/\xc8s\xb6\xb7\xd2\xbf\xf9\xac\xa0X>>\xc3\xbf/\x97\x95\x0c\xf3#}?Y\xfde<\x93\xb4\xcb?\x9dA\xd3\xd3\x85\xc9\xca\xbf\x8f}\xdc\xb7L\xd2\xc9\xbf\xd7\xd6;\x8a3m\xc6?\x91\x908_6\xe2\xce\xbf\xdf\xf8\xbc\xb0\x05\x9c\xb5\xbf^\x81\x88V\x9dF\xcb\xbf\xd2F=/\x0e\xdd\xcf?\x1f\xa5\xfe{\xb2J\xb5?\xe3/\x03&v\xcf\xc3\xbf\xaer\xac\x1b,,\xc8?f>\x07\xc9\x90W\xd2?ad\xad\x84\x17\xdb\xa5\xbfF\x07\x82\x0e\xbd\xc3\xcc\xbf\x84d\x15\xfa\x1fF\xc8?\x1f\xe8\xd5\'#\xc9\xc3\xbf\x05Yo>\x8d@\xc2\xbf\x94\xd9\x9c\x12J\xea\xc7\xbf\x8a8\x93\xf4\xec\xfd\xcc?9\xf4oE\xc1\x06\xd0\xbf\x01p\xc5\xc5\xa0%\xc4?\x08\rg\x92\xd9\x95\xb3\xbfQ|"\'\x19(\xa2\xbf\x0f\rCY\xe6\xa6\xca?9p\xff\xffTG\xd1\xbf~=T:\xd1\xe8\xd1?k\x92\xb0*L\x89\xc1\xbf\xd4\x1fm\xce\x81=\xd4?\xd24A\xcd\xad\x83\xca\xbf\xe2\x0e\xad4\'d\xd2?{V)\xdd\x9e\x85\xcd\xbfxG`q\x95\x0c\xc7\xbf\x14\xa9W\x06X\x83\xc4\xbf\xbf=\xff\xf1\xafI\xd0\xbf\xa7\xe0$\xdc\xba\xd6\xc3\xbfR\xfb\xa3N2\x94o\xbf\x7f\xca=\xde\x07y\xd0?\xae\x1e\x05\xa3r\x82D\xbf\x99\xbd\xb7\xe0\xbd\xfe\xb3?\x15\xce;(\xe1\x16\xd0?\xcd\xb6\xc42\x08e\xae\xbfwC\x04mX+\xc3\xbf%D\x1d\xbd\\U\xcc?\x83\x17\xe6\xd7\xc9\xbd\xd3\xbf\xfc\x1e\xf0\xf8\x95w\xc8?\xa8\xdc\xfa\x8d\x8c\xa6\xb7?\x82\xd6\xd3)\xc2\xa6\xd0?\xcf\x94_`h0\xa9?\xcb~u`\x19Q\x9d\xbf\x03\xc3Ol\x89\xf6\xcf\xbft\xbd,\x1d"b\xcc?\x99\x95\xcalq\x1en\xbfA\xc2\xbe\xb3\xfca\xcc?\xc0H\xc5)\x1bXp?\x85\xd9\x8e\xc9:\xee\xc0\xbf\x8cW\xbd\xc0\xf1H\xb5\xbfY"\x97EE\xd8\xc9\xbf\x9ah\xaf\x94B\xe0\xc4\xbf\x1c\x16\x83\xdc\xe8\xed\xb4\xbf\xa9\'\xe4\x8fD\xb0\xc7?\xde\xb5h\x17\x9d7\xa4\xbf\xec\xd5\x1a\x1fd\xd9\xb1\xbf\xcf\x97\xe2B\xc4\x84\xa2?o\xd1\x08`\xf3\x8d\xc0?\x8a|3\x89\xb2\x81\xd1?lnq;\xaf\x93\xb4?jT\xa4@\xda\xcd\xa7?\xac\x186\xad@p\xd5?e~\xd5\x96\xb0L\xc8\xbf\x8e\xecK\x1a\xfb\x83\xba?\xf6(8*\x8e0\xd2\xbf\x8e\xdc>e]I\xd5?p\x9fM\x8e"5\xc3\xbf\x82\xef<\x06\x81\xe4\xca\xbf\x02\xe2\xf1L9\xb3\xbd?\xd1\x84\xb0\xad\ne\xb8?\xb3\xa0\xdc|\rq|?8\x1a\x0870\xfc\xd3\xbf\xfa\x12\x81\xb1\x8fi\xb3\xbf\x95\xbf\xec\xbc\xd4\xc0\xd2\xbf\x1b\xb6\xb8paR\xc7\xbf\xbeP\xc1\x11X\xb1\xcd\xbfjN2O\x87\xc2\xb9\xbf#\x8e\xb7\xa4>\xec\xd2\xbf\xaa\x00\xe7\xfe\xa2\xb3\xb5\xbf\xb3\x1e\x0e\x96\xef\xc6\xa0\xbfc\x07\x80\x8a\xda=\xc2\xbf\xb0\x14\xba\xf1\xb1\xc7\xc2\xbfG\x99\x80-\x82\xc5\xd0?q\x13\xfb\xae\xce\xf8\xa7\xbf\x8d\t\x1aS{\xba\xae?\xc7\xaf\xf1\xc7\xa5\xe1\xc6\xbf\xae\xc7\xac\x0c\xa9J\xcd?J\x0fs\xdb\xc7\x1d\xc3?ii\xaf\n\xf6\x87\xb2\xbf\xfb\xfe\x19"(g\xd2\xbf\xf7\xac\xa6\xba\xa7\xdf\x88?_B4@\xf1\xa7\xcf\xbf.\xb4l\x9a\xceH\x95?k\x8fD\xb7I\xe6\xc0?<\x1b 0\xd6\xcd\x83?\xcf\xdd\xd2Y=\xf5\x87?\xd3\xb2iDbk\xcf\xbf\x99\xcb\xfd\x80An\xc2?\x9aS\xd8\xac\xc1\xec\xce\xbfJM\xbdxp4\xc6\xbf@B\xce\x9f\x85\x85\xcb\xbf\xc6\xc1\xc2A\xf9W\xc8?\xff\xec)\xc5\xd3\x15|\xbf\x1d\xab0\xe5\xb3A\x8a?\x9e9\xbe \x1e\xd5\xb5\xbfG\xccd{\xd7z\xb6\xbf\xba&0nS\xdb\xc3\xbf&KKb\x1d@\xbd?\xa2t\xb3{\x9d\xdc\x99?\xaa\x00!-\x96f\xd4?\t\x1dA\xde\xae\xcb\xcc\xbf\xd1)E-\x1c\xdc\xa5\xbfe`\xb8pB\x96\x8e?\xdc5\xaf\xd8b\xda\xc7\xbf!\x90fzj\xcf9\xbfT\xd1\x11\x90O\xf2W\xbfV2\xbaf\xec\x16\xb0\xbf]\xc8\x11\x8b\xc5L\xbd?\xc6\xa9\x19\xad~\xd1\xbf\xbf\xd2L.\xdf\xfcK\xce\xbf\x9d\x85\xba\xbcS\xdd\xba\xbf\x18\xa8gONa\xc3\xbfN4\xf7\xf5\xf8\xfd\xc2\xbf+\xf4\x04\xf7\x1b\xcb\xcb?Wy\x93\xad\xb7-\xc3?\xec\x8b\x9c\x16Or\xd2\xbf\x90E\xbb\xef\x88\xa9\xca\xbf\x91\x1c\x8d\xa8\xfdt\xa7?7<|{lf\xb6\xbf\xc7\x01XN\xed}\xd1\xbf\xef*S\x10\x9ef\xd0\xbf\xca\xc3\xec\xec0\x9d\xba\xbf@1\x7f\xf5 \x87\x9c?\xeee\x87\xdd\xabV\xc5\xbf\x8c\xf5\x08\xa4\xf1\x9c\xd2\xbf \\\x07\xc5\x0ce\xb5\xbf~\xca\xe9 YB\xbf\xbf\x1a\xda/\xeb6\xc2\xcb?\xcf\x1e\x08\xb6X\xeb\xbe?=\x1d\xder<s\xba\xbf\xab\x98Z\xf3\xb6D|?\x97R\x82\nT\xaa\xd1?\xd0\xb0\xd3\xbd\xbbE\x85?o\x80\x1c\x19M\x9c\xc8?\x93\xd3\xa4\x1c7\xeb\x96\xbf\xed!\xd02\x13\xe7\xd4?\\}#\xd5\xf4\x1c\xc8\xbfW^\x1e,-A\xc3\xbf\xea\x9c\xd6\xdd\xa2\xbcv?~\xb7R2\x8f4\xd4?\'b\xc6\xf1P&\xd0?t\xf5|\xf1\\\xff\xd1\xbf\xc2o\xdf[\x1d\xb0\xcd?V\xf6\xfd<\xdf>\xce?*\x82\xa2\x8e \x9e\xd0?\xbea\xf7\xc1\x9b\\\xd1?\xed\xb1\xcai\xc1\xad\xc5\xbf\xa0z\x00\xfc\xc7#\xd3?\xff\x9e=\n\'\x82\xc2\xbf\xe08\x99\x97\x15U\xc6?+\xf2\x87\xbb\xcc\x17\xcd?S?:\xde\x83\x83\xd2?\x97\xaf\x03 qB\xb4?\x01L+S\xdbb\xd4?o\t\xf7\x08\xcf\xab\xd0\xbf\x9f\xc9o\xcb\xfc\x84\x98?\x14h\x13oq\xea\xbd?=U\x94\xcaX\x88\xb4?\xe9\x19\x9f\xd8\r0\xc0?pQ\xf4qZ\x87\x80\xbf\x84\xe0c\xa0:4\xd3?f#\x0c\x98-a\xa5\xbf\x9dM\x13<\xc1\xc1\xa9?e\xe8B\xb8Es\xb4?\xef\xed\x01/\x82@f\xbf\xa1^r\xeb\xed\xd8\xbf\xbf\xc9\x9c\xfc\xf0\xa0\xe9\xb5?\xaa\x97^\x91\xf7\xe0p?\xb4\'F\x8e\x97\xce\xd1\xbfT\n@\xe2I\xd7\xd1?\xddw\x1d\xc2\xd6\xb3\xb1?8\xc8\xca\xf7\x87B\xc8\xbf*\x17*\xe9\x85\xd9\x91?CG\x98j\xc4\xff\xbd?\x9f\xab?>6\x93\xc5?E\xad\xd0\xdd\x19}\xd2?\n\x8f\xd4\xb3p)\xc2\xbf\xd6\xe3\xc0\xa3nl\xcd\xbf \xc2\xb5\x92\x9d9\x88\xbfkF\xfa\xcc\xc8<\xa0\xbfY\x81\xa7\xe4@\x85\xcb\xbf\xa2\xe9e4\xf9/\xd2\xbf%d8\x85\xd5\x8d\xcc?\xe2hDA\x9e\xe4\xd2\xbfI\xdcTm\x0b\x12\xc1\xbf\x8c)\\\x1c\xcd\x8f\x8d\xbf\xe2\xc3\xa2\xfd\x83M\xa9?6\xdd1\x1dr\x8d\x88?\xf8F\x1ap\xcd\x7f\xd1?\xdfC_\xe7(<\xd2?\xa8\x9b)\xa2\x96{\xc5\xbf\x91NvHX8\xa2?\xa1I\x1a\xb2\xdd\xec\xbc\xbfxT\x06\xa2\x8bt\xac\xbf#:\x85\xaf]\x8a\xbe\xbf\x06\xd6\x9d\x8eh\xc4\xd3?\x13H\x83\x11\xb3\xd0\xb7\xbf\x8at4\xed\xbbg\xc6?\xb2\x8fB\x87\xe0\x87\xcf\xbf\xaec\xb6@\xe7(\xcb?\xb9,\x83\x05Smt\xbf\xd6s}\xde\xd5\xcc\xc3?\x06S\xbd\xcbc\xeb\xcd?\x1a\xab\xbd\xed\xe6\xec\xd3?\xfb\xc4TgPp\xc1?\x9c\x8d\xe2\xc2PC\xbe\xbfU\x0c\xdd\x15~~\xc5\xbfY\x9f\xbb\xf8\xdb\xd5\xd1?m[f:X\xf4\xb2?8\x87\x98D9Z\xd0\xbfp\x07\x8eG\xc6\xeb\xc0?4\x891>l2\xd2\xbf\x88C\xf1\xa0\xf0U\xd2\xbf\x9as\xee\xb88Z\xa3\xbf\xe6=\x98\x94\xb3\xaa\xb1?\x13\n}--\x03\xce?\xec\xfb\xe3`;Y\xa1\xbf\xe0\xd2\xd9}\xb5G\xc3?\x97\xadI\xc7m\xf5\xd1?l\x89sB\x9aN\xc9\xbfK\xdbKv\x04\x10\xa5?\xb6C\xe0G`9\xa9\xbf\x8d\xe6\xb8\xc9\x81\x8d\xcf?[\x949q\xf4\x1c\x93?E\xd5\x04J\x83\x9c\xd2?\x83\x9c\xff\x1a*\xaf\xd0?\x13\x19B\x9fQ\x0f\xd3\xbfLK\x8d\xd26)\xcd?\xf1\x1d\xb6\xcb\x89\x8d\xcd?\xdb~c\x1b\xb1\xa0\xcc\xbf7\x9b\x0f\xbc?\x8c\xc8?\xd0J6\xfbM|\xd2?\xa1\xf6\x810\x06\xc6J?\xd5\xf5\x1ew\xb0\r\xb7\xbf\xa0n\xab\x02k\xc4\xd3?\x9c\xdb\xa3sX9\x96\xbf\x06\x93\x0b%#\xaf\xb2?\x83\x14\xec\xed7B\xc3?\x1b\xe2\xe9\x12\x97\x03\xb9?g5\xe3\x89\x8a\x1c\xc6\xbfi\xae\xdeB\x9a0\xb4?\x84\x94m\x1c\x828\xc9?\xd6\x97T\xce\xfd7\xb7?\x80\xa0\n\x04[\x93\xd3?\xf7"\x9e\x18m/\xb3\xbf\xcc\xd4\xece\xa7\xb1\xbf?\x9fWz4\xe9d\xc8\xbf\xe9\xf5V\xaa\xe0\xc6\xd3?wx\xb0Vx\xf4\xa2?rs\x91\x7fL\x1dY\xbf_<4Q\x86\x8e\xcc\xbfq\x1d\xf1\x82i\x9d\xa2\xbf\x1c\x928?G\xfb\xb7\xbf\x80n&\x96\x9b0\xd4\xbf\x87\x1e%\x93\xe8;\xb8\xbf4\xa0\x96}\xf1\xf2\xa6?Xm\xdc^\x9fJ\xa6?\xeap\x9e\xfb@@\xb6?\x0b\xf2o_\x82\x04\xc7\xbf\xf6H\xff\xff\xba\xdf\xcc?7\xb5\xdfCl\xf7\xd3?\xa5\xa2i\xf2l\x90\xc1?\x93\x91\xe7\xd86\xd8\xcd\xbf\xe5\xaeA\x18\xa8\xaf\xd1\xbf\x95\x94`\xd5\xbe"\xae\xbf1\x81x\x93\x8d\x83\xce\xbfy\xf3\x07\x93\xa2S\xb1\xbf_\xe7M\xd3\xb0D\xcd\xbfq\x18\xf11/\xc2\xd0?\x89\xcb`=\x0c\xf7\xbd?^\x81\xfa\x98~U\xd3?\xc1-\x9c\xe6\x0bb\xc6?J\x94\x068\xb8\xe9\xcf?\xe4%\xe0\xfd\x08\xf3\xd3\xbf\x08o\xea\x1a\x08\xe7\xd1?\xde_\x80\x88\xb6\n\xc0\xbf\xc1\xb9\xc8\x8f\xde\x8a\xcc\xbf\x7f\xb0O\x93\x89\xd9\xc9?\xe4\x1aR\xa91$\xc0\xbfA\xe2K\x86Zb\xc6?)\x9f\x82`\x06 \xbf?\xfa\x8b\xe8\xee\x82\xc8\xc0\xbf3\xbb\xae]\xca\x06\xb0?\n\xea\xf5\x07v\x85\x91\xbf0\x14\xcc/\x8bb\xc9?\x9f\xd7\x13\xd3\xa6;\xc7\xbf\x9a\x94 {\x00N\xc0\xbfvQ\x13\xb0;x\x8d?<P\x07\xca\x8e[\x96?\xd63\x8dN4`\xcd\xbf@MhF\x16\xe9\xaf?t\xa0\x12]#6\xc5?]=\xe2\xf5\x10\xb5\x8b?R\xe2_A\xb3\x80\xc2?\x05;\x90\xfa\x8a\x84\xc9\xbf\xbdZ\xe2\xeeP\xaf\xd0\xbf\xa4\x10\x10\xfc]\xc8\xc3\xbfC[\x06\xfaU\xdc\xc3\xbf\xad\xe2\xf0\xc8\xb2\xdb\xa1\xbfV\xff0\x95^\xc5\xbf\xbf\x8a\xfd\x89\x07+\x0f\x9a\xbf\x17"z\x98\xed\xd0\xb5\xbf\xf9Z\x94V\xcb\x96\xc6?\xdcb\x99\xf5\x9c\x98\x97\xbf{\xda\x84?\xc9\x8f\xc7\xbf1\xb7=n<l\xd1\xbf\x07zz\xd1\x1b\xc8\xcf\xbfO\xb1\xf7U\xdf\xc8\xb1?\x1a\nXI\xa6\x05\xd3?\xf8\x98J\xd8\xe3\x8d\xd2?\x02\xdf\xa7]\xf0\xeb\xb4?\xf4\xf7\xd1\t8\xfd\xcd\xbfS\xa7y_|\x83\xae?\x9d8\xd6\xff\xb8\x01\x9f\xbfc&\xc2\xc3\x92\xeb\xd0\xbf@\xa4\xfa\x8c\x97\xc7\xcb\xbf\xbc\xd7\xd3\xb2\x904\xaa?\xc0q\xb2\xd5\x8d\x85\xc6\xbf\xc8OF\xec\xdcn\xa8\xbf66\x02\xb4\xb4x\xb9?dv\xadu\xc7\x92\xb3\xbf\x12yN\xf5\xe4=\xd2\xbf\xa7\x0e\xccL\xf9W\xd4\xbf,\x86_\xc7\xeeU\x91\xbf\xbd\x8e-\xe5i\xfb\xc5\xbf\x01\xb3e\x1f\xcd\xeb\xc7?T\xa8\xc7\x86\xf0v\xc2?\xb4\xff\x9dk\x87\xd0\xc1\xbf\x8dv\x92\xe9p\x94\xb7\xbf\x87{\xd9U\xd0\xb8\xc0?\x14\x18N\xb4\xa6n\xbf?B\x88\x7f\xb9\xe4\xf5\xbf\xbf\xec\xc5N\xa4\x92\xb2\xd0\xbf\x08\x7f\x82\xee\xee4\xc9\xbf[N\x7ft;\x00\xcd\xbf\x0cn\x8c>\xa4\xc7\xc1\xbf\xd5\xa1\x89\xde\x10(\xc0\xbf@\xa1+\xed\xd1A\xd5?;\xc7\x8c\xeb\xc9\xac\xce\xbf\xc5\xee\x0b\x0c\x03\xf5\xb7?\xb1;\xf4\x1b\xec(\xbb?\xe3JE\x99\x17\x8b\xd4?\x14\xe2\xf6\x0fc\xc6\xa7\xbf\r\x06<w32\xb9\xbf\nyBa\xc6\xbd\xaf?\xdc\x05#\xe0\xd9\xe1\xbe\xbf\xdb\x83\x90\xa2C\xc3\xb4?B\xe4:\xf7Vh~\xbfh#\x15\x1c"\x9d\xcb?\xbdv\xd28n\x17\xb7\xbf\xed\x93K\x86\xc1\xe9\x91?j\x1b\xe0*\x9bZ\xd5?\xb4\x8d\xb8VH\xbe\xcc?\xdf\xfd5\xb0\t\x04\xd1\xbf\x98\xd7F\x0c~\xba\xcd\xbfK\xd9\x0c\x8e\xef\xba\xb8\xbf>\xa3\x10\xd6\xecw\xb9\xbf\x86\x9a#\xcc\x86\xfb\xd2\xbfM\xd3\xd6\xd4\xa6\xb6\xb4?%\xf0\x96P\xc4z\xcb?\x96\xc4\xac=\x0b\x05\xd4?s\xe3\xf6B1\x13\xba?\xf1\xee\xa4B\xe1\xbe\xc4?\xf8\xe0\x89fF\x8b\xcc\xbf0\x8c:\x03V_\xbc?\xf6B\x0b\x8f5\x15\xb7?\x1d<\x92\xd4\x92\xa7\xcf\xbf\xb8\x7f\xba8\xe3\xf1\xd3?\xa4\xb4B\xc7[\xe5\xcb?\x84H\xe2B~S\xca\xbf\x96\x0c\xe99<:\xd0\xbf\xf1<\x17\xf1\xbb\xf4\xd0?\xcd\xc0\xcd?\x03\xd2\xa5?\x83\xe1_$\xe6I\xb7\xbf\x994lO\x08\x18\x9d\xbf\x14)\x88q\x0f\xaa\xcf?A\xcc\x07\r^r\xca\xbf~/O\xf3\xfdO\xc9\xbf\xa9\xd1\x1c\xb6\x8fH\xd0\xbf@l}\x9eaz\xc0?\x032c\xcf\xdc\xa5\xc8\xbfK8\xbbV%\xe2\xd1\xbfXS\x99\x8f\xe8\x03\xc6\xbf\x8a\xf9\xcc\xa5-S\xd4\xbf\xa4\xeeI\x84\x0b\xdd\xc5\xbf<\x04Y\x00\xf8\x06\xd6?\x93#I\x99\xfcB\xdb?\x93\xde\xbe\x0f\x0e\x15\xda?w\\)\xb5T4\xd7\xbf\xb5\xfc\xa5,\xbf\xf3\xdb?\x8ad4\x00]s\xd4?t\xec\x10f\xe2\xdc\xb8\xbfu%Y\xc7X\xdf\xc1\xbfl9H\x98\xa4\x85\xcb?\xea)\x9f\xbf\x8e\xee\xd0?\x1d\xa6\x91+\xad\xfe\xad?9n\x1dEO\xfb\xd0\xbf\xff^\xd9\x8e$|\xd7?\nC\x1a\xa0\x93\x08\xdb\xbf\xabU\x94\x95\xa9\x86\xd7?f\x17\xc0\xc6\xd2\x9d\xc7?\x90l\xa9\x1c\x04L\xd5\xbf{\xb1\xeaC\xc2\xe3\xbf\xbf\xba\xad\x98\x98\xc9\xfe\xb6?\xcdCW\x1dSW\xdc?K\x84\xb3\xf95&\xa5\xbf~9\x13\xb9\xab|\xc5\xbf\xc4\xceSt\xb4\xab\xd4?\x07B\xb3\x07\xfe\xe4\xa8\xbf\xf4\xbf@\xa8\xf37\xcf\xbf;D\xcd;6>\xc5\xbf\x92\x9c\x00\x9dz\x98\xc7?\xbd\x9b(\xb7\xef\x8e\xdc?\xdd\xe0\x14\xdb\x88\x8b\xcd\xbf\x00\x8eB\xd1\xe0U\xaa?\xae\x91E\xcaO\xe7\xc4?"1\x0b\x90\xce\xa8\xb9?Q\x91\xefM\x80h\xd6\xbf\xce\xac\x0b\x0e\xeb\'\xc2?\xca\x87\xc0\xe8\x91\x10\xca\xbf\x0b$\x00\xb7t\xc5\xc7?6\x0cNrP\x01\xd4\xbf\xfe\xfa\xf6V\xa7j\xd3\xbf\x96.\xd3X\x8a9\xdd?}\r\x16\x9d\x11\x98\xd1\xbf:h\x1d\xf5\xe3h\xb6?\x04\xd9l\x0b`\x86\xd0\xbf\x89\xf2\xbb#d\x97\xbb\xbf\xe9K\xfeB\xf1\xfc\xcf\xbf\x90\x13\xe5X5\xf0\xd8?l\x8a\xd7\x0b_\xbd\xd6?\x7fa\xc7\x84\x06\xf3\xcb?\xd9\xadkG\xbe0\xd3\xbf\x9f\x85\xd4/4\xad\xd8\xbfg\x07\x96\x90\xbc\x0e\xd7\xbf\x8aA\x9eVq\x18\xbc\xbf=@\xd7V\x92u\xd7?\xd2G\x92R\xf0\xe0\xd7\xbf\x92\x91\xa0\xde\x06\xdc\xdc?\x12\xb6l,\xaa\xad\xdd\xbf\xab\xd9>Z\xb5\xfa\xd8\xbf6\x82\xd1w~\xdba?_K\xc3\x8d\xf7\xfe\xb8?\xd1a\xf5\xf6\x14\x85\xd4\xbf2\xc2I5\x00\xa9\xa5?\x93a\xe5\xf5Nm\xd1?u=w$\xf4\xda\xc8\xbf\x95\x9e\xb1Z".\xa6\xbfLe3\xfd\xe8+\xd0\xbf<<4\x1d+M\xc3\xbfF\x15{\xe3\x1fD\xd7?\x0e\xfc!b\xb5\x92\xd7\xbf>\xe5m\xeci\xda\xa9\xbfOM\x94\xec\x98\x8b\xc0\xbf\xa0\x91\xe7\xef\xbd\x87\x94?\x8e\x9dV\xf2\xfec\xd5\xbf\xfeI\x96\x8c\x0c\x1c\xc6\xbf_\xddt:\xef\x89\xb4\xbfl\xe5\xee-\xfb\\\xaf?\x10\xffP\xd5\xd4\x91\xc1\xbfA\x90\xa9\x07\xf4|\xc2?`.#D\xc2%\xd8?\xf4r\x08\x14\x87^\xc2\xbf\x12\x12\xe3\xb6\xd7\xe9\xce\xbf,e\xdd/\xd4(\xc8?\xbbL\xbd\xba\xdd\xaa\xa2?\xe9\xba\xf0\xbdC\xfd\xa6\xbf\x0epcn\xca\xde\xdb?\xa8\xb7\x1e\xbe\xd1\xf9\xa8\xbf\xc9\xca\x84\xcd\x14\xa1\xc2?\x1a6\xd3y\xe6\xf2\xc0?M\xa9\x0cy\xe2\xba\xc3\xbfW\xca\x84I\x0b\xa7\xc5\xbfj\x92\xfb\x8c\x08\x1a\xd1?\xd6\xc8\xd6\xa4\x04_\xdb\xbf\x8e\xd7\x8b\xa0\xcf\xe3\xdc\xbf\xfedSA\x1c\x18\xd3\xbf\x80p\xe5\x8b\x82_\xd3\xbf\xf0J"\xb1\xd2R\xb3?\x04\xfe\xe3l].\xd1?d\xf3\xa3\x06\x836\xc5\xbf\xa6T\xb6\x16\x92%\xd6?\x08\x0c\r\x99M\xc8\xd0\xbf\x86#\x91A\xe2x\xda\xbf\xbeG\xa5WrQ\xd3?\x80:\x1e\xbc\x08=\xc8\xbf\xf9@6\xbe-\x0f\xc8?\x1d\x19\xc6\xe7:\xc6\xd5?\x16\xe2\x1e\x8dOR\xc2?`g4\x02*c\xc3?\x19\xa5\x9e\xbdu\xba\xb6?\x98\xec\x10\xe3\xa5\xa7\xc6?\xbf*\x1f\xa9:\xd4\x96?a}+c5\xdf\xd1?\xa2\xc6NS\\\xc1\xdc\xbfc,~x\xeb\x1c\xd7?\x1b\'B\xae\x8d.\xd4\xbf\xb2m~\xf2Q\x8b\xd3\xbfg*\xca\x8b\xf7\n\x8b?\xebt\x98q\xac\xb3\xc4\xbfE\xd9\x19|\x177\xd3?\x9cZ4A\xf6#\xc1\xbfI&\x07\x01T\x1b\xb8\xbfq2\x11H\x06\xf9\xc1?\xed\xc7\xe0\xce\xfc\xa9\xad\xbf\x03\x05\xdd\x9d\xe7\xf8\xda?OBv\xf1}\x81\xb0\xbf\xbc\x8b\x95\xc9\xc6a\xca?\xae\r\x8a\'W\xa2\xc6\xbf3<\xc8\x069\xe9\xaa\xbfPQ\xa3]\xc7\x01\xd4?\x87\\\xe1\xb9 t\xcf\xbf\xa7Lk{\x80"\xd9\xbf\xcfd\xac,\xf9\x9e\xdc?\xb9\xf7\xb9v\xf0\xa2\xc7?\x1c\x92\xac\xcc\xe6N\xd5?\xda\xe3-c3\xd1\xb6\xbf\x17F\xcf\x88-\x05\xdc?\xaai)\xa3c\x92\xc1\xbfk\xd7\xeaD\xcc\xaa\xa0?\x852\x9at\xd6\xd3\xb5\xbf>\xba>\x9f\xc6v\x9c?r\xa0\xad\x88x\xa6\xaa\xbf:TBq\xd5\x13\xb0?\x03\xa6C%\xf1\x94\xce\xbf\xdc \x16\xfb\xa0\xb5\xc5?Z\x1f\xfc8\xafI\xdd\xbf\x06\xc5\xa4\xc3y\xdf\xd8\xbf\xaf\xacK$\x8a\x8f\xa2?\x10\x04.\x99}h\xcd\xbf\x96Z\xc0\xad#o\xb4?\xfa\xbe\xff\x08\xc2\x89\xc1\xbf\xb3\x08\xc6\x9c\x8c\xed\xb6?\x8e\x00\xea\xd3;P\xd1\xbf\xbc\xc7F\x84\xee\x85\xd9?\xf2\xdd\xd8\xf1<\xd7\xac\xbf\x85v\xba\x86\xd6V\xbc\xbf\xef\xa8\xd5\xde\xf0\x9a\x9c?E\xd2\xd5\xe6-N\xc4\xbf\xab\xb8\xcc\xd0\x89\x81\xa4\xbf\xcc\xfc\xf15\xc5\xdf\xc8\xbfx\xd7\xc9$\xbf\xe7\xc3\xbf<L\xdf\x85\x9b\xda\xcb\xbf\x18U\xdfv7N\xa3?\x91\xa8HR\xd0n\xd2\xbf\x81d\x14gO\x8c\xaf?1\x8c\x8b\x1f\x0c\xa1\xc9?M\x11\xb4\xf6|\x17\xd2?\xd6b\x9a\x8df\x9d\xc3\xbf\xcanuR\x0b\xc3\xd5\xbf\xc6\xc7\xc5\x7f\xdf\x8d\xcc\xbf\xfe\x0c\xbc\xcb\x05\xe1\xdc?\xe9$\x7f\xba\xecU\xdd?lC\x98\x0eb\x02\xd4\xbf\xcc\xe9K\xd9\x90a\xac?\xda\x00y\xd1b9\xd8?k\xb9]5\x02\x87\xd6\xbfp\x84~\x1d\xcc\xe4\xbc?u\x86"\x02~p\xcd\xbfcs\xbe\xecX]\xc8\xbf\x15\x8c\x18\xf7\xcc\xc3\xa9?v[\t\xde\r\t\xcc\xbf\xd1\xd2\xf1g\xa2\xd9\x9f\xbf1Z1\xb3\xc8s\xd2\xbfy%\xd3l\xcfM\xc4?`4\xd4\xb4\x1e<\xd0\xbf\xd0\x17\x88\x90\xba\xf4\xdc?\xe2\xa9\x7fD\xbf;\xca\xbfX\x99\xb0)\xfdI\xb7?\xb4F\x18k\x061\xce?\x11\x8dj4"D\xad\xbf\xa7{\x1c\x91\x93l\xc1\xbf\x1e\xd4\xfd\xdf6\xd7\x9e\xbf!8k\xfc\x05\xcd\xd7?\xcd\xd6\xd5&\xe8*\xdd?\xfc\xe0\x80\xc3\x8f\xda\xd7\xbf\xb6VG3\xc9\xb3\xbc?\x15Jw\xf8\x9dq\xd3\xbf`w\xc7\xd8J\xab\xd6\xbfD|\x0b\x05c\xf0\xbc?\xb3\xb0T\x17\x08\xdd\xda\xbf\xbd\xe85WM\xaf\xcd\xbfb,\x9f:*R\x86\xbf\'X]V\xf5\\\xce?\'\xf0\xa2\x83Ey\xd5?\xe2\x8d\x12\xd1\xf0^\xbf?3\xf9\xe1\xea\xead\x95\xbf]\xdf\x99\xa9\xe8\x11\xd4?!\x86\x16\x8c\xac\x14\xd5?)\xc0\xe7\x11\ng\xc5\xbf)`K\x0f\xbd\xdf\xdb\xbfB\x82\x07\t\xc2\x08\xdd?\xfb\xd99\x9fi\x16\xde?UzN\r\x94^\xd6\xbf\xcc\xa5\x86p\x9b\x17\xca\xbf\xe5U=\x98\x142\xbd\xbf\x16\x04P\xed\xdev\xd1\xbfr\xed\xd84\x191\xd8\xbf\xbf\x00*d\x1c\xf6\xad\xbf9\xe6\xee\xb4&\xe0\xc9\xbf\x18k\'\xc7wS\xc2?L&\xeb\xad\xe4A\xb4?\xfc\x94m\x00\x80.\xa8\xbfv\x13o\xa0w\xf6\xbf\xbf\xef\xbe\xf0\xd8\xd3\xed\xae\xbf&\x8f1\x83g\xc0\xd4\xbf\x10\xe9\x02\x1bwI\xd7?\x99/SG\x02b\xd7\xbf\xa1]\xdc\x87\xf26\xd9\xbf\x9f\xfd\xfcR\xb9\x98\xd7?\x04\xf9nn\xde\xa3\xd7?-\xe7z\xa7f\xb5\xb4?"g\xf7\x85\xe8\x87\xc0\xbfD\xdd\xc3\xf3\xf3h\xcc?9\xd0\xc27\x94u\xd8\xbf\x7f~\xe1Ik\n\xd3?W\xec\x84\xe4\xdfQ\xd6?\x18\x81\x9e\x1c\xbe\xcf\xd6\xbfK\xd5\xb0\xc3Gu\xd3\xbf\x7f\xc3\xa2\xdf\xb8\x14\xd4\xbf\xff\xc7\x7fz\xc0\xa0\xd2?hm\x08\x85\xed\xec\xd2?i\x99|i}\x87\xbb?y\x92\xea\x06\xaa\x88\xd0\xbf\x1f\xf5$\xdb\xca \xa7?\x03t5\x95\x8bD\xc3?3\x0e\xd1t`\x8d\xd4?db2W\x07\n\xdb\xbf\x1f\x9f\xffL\xcb\\\x91?\x9b=K\xda1\xe6\xd4\xbf\xa2\xfd$\xc2\x16(\xd2?;\xf9/\x98\xd5\xa0\xdd?o\xf3\xbe\x9a\xdbo\xd6\xbfa\x85\xd5%S\x1c\xd0?_}\x92\x99\xf2\xc6\xd3?b\xeb\x83\x1d\x8f\xfa\xc5\xbfw\xe7\x18\xe8H\x16\xad\xbf$\xb5\xdb\xf4\xaav\xd3\xbf\r-\x19\xce\xce\xb7\xd5?$CA\xba\xc4\xf3\xbe\xbfV\x90%\x95j\x84\xc5\xbf\xd3b2\xf0G\x93\xd6?p_\xfa\xbe\xaf\x01\xd8?\x98Rh\xf5\n\xf1\xd5\xbf(\x13\x1e\r/\x83\x93\xbf\x97\xa4\xcd, q\xc9\xbf4] vJ(\xb0\xbf\'\xad\xac\x1cuK\xd9\xbf\x11\xb2e\x8c\x06\x84\xb0\xbf\xc6&d\xf2\xa4\x1f\xc9?\x1d\r\xd1CP\xfc\xc4?\x84n\x1d\x1e\xf2S\xcc\xbf1\xe7h \xa3D\xc5\xbf\x08\xc1\x92!\x1f\xf1\xd4\xbf\xc4"\x16W\xfb;\xb8\xbf\x01\xc3\xfd\x19\x9fR\x9f\xbf\x1bE\x15<_\xa7\xcc\xbf\x9b\xa1\xf2\r\xdc\xd9\xc2?\x07\x88\x83\x94A>\xc2\xbf(\r\xc4i\xd7|\xda\xbf^[\x94B\x8e\xa3\xd8\xbf\xdb\x98\x06\xba\xd6\xaf\xda\xbf\xe4\xb9\xdb\xcd\xd4!\xd0?^J\xbdI \xcb\x82?K\x9cR\xedo\xd8\xd0?\xbb7\x87}\n\xfd\xb3\xbfNg6\xed\x8d\x04\xd6\xbf;\x08\x1b\x9e\xf8:\xb9\xbf\x0c\xc1\xd8\x06\x90\x9c\xbf\xbf\xda\x9c\xce\x1b\xab(\xb9?VjNpX\x05\xce?\xad\xb6P\xfc\xe8R\xa9\xbf\x1f\x92\x11\x1a\xd2\xed\xce?\xd2\xce\x04\xfd\xa1\x06\xdb\xbfd\xc2\xff\xf9\x88\x8a\xcf?\xbd\xb84tnu\x82?S\xd5\xf1]a\xea\xcb?\xd9\xccc\xb6\x16\x80\xd8\xbfO.~\xed\x98\xf4\xda?\xf7Xl\xd6;s\xd3\xbf\x11\x8eK/\xb0\xb0\xca?\xe3\x05e\xe8\x82k\xdc\xbf\xd4\x1dX\x14\x9dp\xc7?\xda\xabp,f\x9a\xce?:\x17%\x1c\x7fn\xc7\xbf\x08\x19\xe9\x86\x83\xa3\xd8?\x08\xb0t\xfd2F\xdb\xbf\xad\xe6P\xe3<\xaf\xc7\xbf\xc56\xb6\xbc\x12\x8e\xba\xbf\xa1\xa4\xea"\xb0:\xc5?\x05\x06fmh\xaa\xd4?\xf7\xc2\xfd\xf0\x8eK\x9f\xbf\x0c\xc4yF\x81x\xd9\xbf\x88\x96\xa4~\xae|\xdc?\x15\x1e\xeey\x05\x81\xb1\xbf\x9f\xe8\x83\x88\xf8\xc4\xd7\xbf\xb9i\xa9\xf9\x00\xd2\xd7\xbfLFN\xbf\xe0x\xd5\xbf\xb8\x94\x87\xc4\xa6\x11\xd6?\x9d\x99\xcc%\xba\xd8\xac?f\xe22\x0f$\xd4\xce?\xb0\x88c\x944\'\xdb?\xec\x00\x9c\xbe\xbe\xaa\xca?\x94\xbaZ\x88\x1a\xce\xd0?\x10\x91\xe4\xe2J\x8c\xdb?H\x0eU+-S\xd4\xbf\x95\xd3\x87L\xd5\xd0\xd9\xbf\xe9ls\xb1k\xd6\xd3?\x90\xa8B\x94\x92h\xd3\xbf\xfbCrp~\x9c\xbb?\xc2yNz\xd9\x9e\xce\xbf\xb2S\xa5\xac\xf8\xbb\xdc\xbfkh\x885\xe2\x87\xc9?\xec\x13!T\xc7\xe0\xd2\xbf\x7f\xa4\x1e\x0bq;\xa3\xbf\x9d)\xbd\xed\xef\xdb\xd1?\x02\x9b\x85\xbae\xb4\xb7?\xf8\x9e?\xe2yh\xbd?T!\x14y|\xd8\xbd\xbfA&\xc4\xda<P\xae?\xb9\xd7\x7fS-_\xa5?\x8dm\xa1{ZG\xca?w\x04\xd1+Z[\xd5?\x0c\xaf\tP\x97\xe0\xdc\xbf\xfa\x1c2ixU\xca\xbf\xb7\x82\xf9\x9c\xdd\xf5\xca\xbf\xc6\x9e\xbb\xb7\xfd\x84\xd9\xbf\xfc\x83\xc9\xbc\x8d\xb9\xd9\xbf\xf9^l\xfc%\x16\xd5\xbf\xd4\xa3!\xcbS\xa2\xda\xbf\xeb6\xf1|\xc3\xdf\xdc\xbf\x88\xafp\xfd\t\xe6\xd8?\x1e\x05\xeb\xee]n\xd6?SQ\x11\xa7\x1c\x94\xc5\xbf\x82[\x1c\xb1U9\xda?\xc3\xaa\x91\xd1:x\xc3\xbf\xb7@ ^\x8d\xe9\xd6?s1DP\xd1b\xd8\xbf\xe5\xb1\x85U\xdc\x07\xd6?\x92B%\x8d9:\xdb\xbf$V?\xe3W]\xd0?\xba\xcc\xed\x9c8\x12\xca??"\xe2\xf7\x0c\xdd\xba\xbfV\xad\xec~c\xd7\xc4?\xcdwI\x18\x05\xa5\xd0?\x14a\x8a\xef\xb9\xae\xd6?$\xf2\xab+\xc0\xa4\xbb\xbf\x9bGQ\x8b\xfe\xf2\xd8?+\x18 \xfd\x0e\xa8\xdb\xbf\x08\x1c=\xcd\x1a\xf3\x85\xbf\x12\x00\xff\x1e\xee\x85\xbb?\xc2E_]\x90\xf0\xd3?F\xb7\xdb"\x8f[\xb8\xbf\x93\x9c\xf4s\xf7\xf8\xcf?\xe7\xd6\x8c\xaf\x1c\xd0\xd8\xbf\x81\xec\x066\xbe\xee\xd0\xbf\xc6\xda\xef.\xce\x85\xd9\xbf\xcd\x1b\x8ay\x83Z\xd8?\xfeF\x97\x85\xe5\xe3\xd0?\xdb\xfd2\'\xa7\x18\xd8\xbfr5|\xfd\x05\x86\xd2?9\xaa\xfa\xaacd\xdb\xbfut{^o\xad\xda\xbf\x86\x94\xae\xdd\x9a\'\xb2\xbfJ\x02\x11t\xba\xcf\xd4\xbf\xd1\x89:\xb7\xde\x92\xd7\xbf\x7f\xcf\xa3\xc2^s\x93\xbf\xbe#\xd0\xd5\x90\xd4\xc4?\xe4kL\xcc\x1f@\xce?\x9d\xf0z~\xadC\xd9\xbfr\xed}s(\xab\xb4? |\x19\xec\xca\xdf\xca?\xea\xed\x06}q\x7f\xc5\xbf\xbf\x9b\xf9;S\xcd\xd2?\x9c\x14\xe4\xc4\x9c\xc2\xc0\xbf\xc0\x0b\xfc\r\x11\xeb\xb1?\xb9\xd4\x1b\x803W\xc2\xbf\xbd\xe0\xd7\xf1\xec\x92\xd9\xbf\x12h\x10T1\x15\xd9\xbfRU6\x10\xb0\xd1\xc1\xbf\xbe\xdc\xbf\xec\x13\xa9\xdb?\x91\xceM6L\x15\x9d?\xae7\xfd\xe0BM\xd0\xbf\xbc\x04\xd7\xc7\xb1\xb7\xd3\xbf\x19B%\xe5@\xe6\xd0?\xb1\xb9p\x07~\x82\xc5?\x08\xd1\x85\xb1P\xcb\xa5\xbf\x17F\x7f-\xfa\x95\xdb?\xae"v\x81\xf2\x92\xd1?g\xfft\xfb\xd9\xb0\xca?\xbe\xd3\xd5]\xfcw\xc0?~\xd4k@\xebs\x9c?\xf8-\xb6f\x87\x9d\xb1\xbf\x0f\xb4\xbc\xb6R\xe2\xbe?\xe1\x98\x83\n\x8c0\xbd?(\xa1\xd9\x1f3\x94\xdb?\xfc\xf6d\x01z\x06\xd0\xbfN\xbd>:\xe7\xbf\xcf\xbf0W)\xd2M\xbd\xd4\xbfAL\xb8\x9c\x13\x1d\xc0?\xb4Au\x92\xd3\xfe\xc3?\xad"\xa4\xc7\x96\xc8\xd9\xbf}xc*<\xd4\xcf?\x80\xa0\xcd\x8b~\x04\xd6?\xec\xb0\x94*2\x01\xd9\xbf\xa1\xca\x98\r5\x17\xd3\xbf\rn\xa8\xbe\xfb\x11\xaa?\x93\xe9\xbf\x19:m\xcc?\xac\x8e\xa60t\xfd\xd6?\x11b\xa8\x19\x93\xb1\xc5?'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp355
(dp356
g32
(I00
I00
tp357
sg34
S'float64'
p358
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
S'W'
sg12
(itheano.gof.utils
scratchpad
p359
(dp360
bsg10
Nsg28
g355
sbasg12
(itheano.gof.utils
scratchpad
p361
(dp362
g15
(lp363
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p364
I128
S'initialise_parameters'
p365
S'self.reverse_weights = self.weights.T\t# Tied weights, so the reverse weight'
tp366
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p367
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp368
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p369
I3084
S'transpose'
p370
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp371
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp372
asbsg147
(lp373
g344
asg149
g1
(ctheano.tensor.elemwise
DimShuffle
p374
g3
NtRp375
(dp376
S'drop'
p377
(lp378
sS'shuffle'
p379
(lp380
I1
aI0
asS'augment'
p381
(lp382
sS'input_broadcastable'
p383
g357
sS'inplace'
p384
I00
sS'new_order'
p385
(I1
I0
tp386
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p387
(dp388
bsg28
g1
(g29
g3
NtRp389
(dp390
g32
(I00
I00
tp391
sg34
g358
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T'
p392
sbsS'learning_rate'
p393
F0.01
sS'get_expected_rewards'
p394
ctheano.compile.function_module
_constructor_Function
p395
(ctheano.compile.function_module
_constructor_FunctionMaker
p396
((dp397
S'profile'
p398
NsS'function_builder'
p399
ctheano.compile.function_module
Function
p400
sS'accept_inplace'
p401
I00
sg98
(lp402
g1
(ctheano.compile.io
In
p403
g3
NtRp404
(dp405
g40
S'ix'
p406
sg273
NsS'value'
p407
NsS'borrow'
p408
Nsg54
I00
sS'implicit'
p409
I00
sS'mutable'
p410
I00
sS'variable'
p411
g1
(g7
g3
NtRp412
(dp413
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p414
(dp415
g15
(lp416
(g20
I76
g18
S'self.initialise_theano_functions()'
tp417
a(S'denoising_autoencoder_cart_pole.py'
p418
I67
S'initialise_theano_functions'
p419
S'input_matrix = theano.tensor.matrix("ix")'
tp420
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p421
I771
S'matrix'
p422
S'return type(name)'
tp423
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp424
asbsg28
g1
(g29
g3
NtRp425
(dp426
g32
(I00
I00
tp427
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
g406
sbsS'shared'
p428
I00
sg60
Nsbag1
(g403
g3
NtRp429
(dp430
g40
Nsg273
g1
(g119
g3
NtRp431
(dp432
g10
g1
(g95
g3
NtRp433
(dp434
g98
(lp435
g104
ag1
(g7
g3
NtRp436
(dp437
g10
g1
(g95
g3
NtRp438
(dp439
g98
(lp440
g1
(g7
g3
NtRp441
(dp442
g10
g1
(g95
g3
NtRp443
(dp444
g98
(lp445
g412
asg12
(itheano.gof.utils
scratchpad
p446
(dp447
g15
g137
sbsg147
(lp448
g441
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p449
(dp450
g15
g157
sbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p451
(dp452
g15
g171
sbsg147
(lp453
g436
asg149
g184
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p454
(dp455
g15
g216
sbsg28
g222
sg40
Nsbag227
ag239
asg12
(itheano.gof.utils
scratchpad
p456
(dp457
g15
g250
sbsg147
(lp458
g431
ag1
(g7
g3
NtRp459
(dp460
g10
g433
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p461
(dp462
g15
g277
sbsg28
g262
sg40
Nsbasg149
g260
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p463
(dp464
g15
g267
sbsg28
g115
sg40
Nsbsg407
g106
sg408
I01
sg54
I00
sg409
I01
sg410
I01
sg411
g104
sg428
I01
sg60
Nsbag1
(g403
g3
NtRp465
(dp466
g40
S'W'
sg273
Nsg407
g351
sg408
I01
sg54
I00
sg409
I01
sg410
I00
sg411
g349
sg428
I01
sg60
Nsbag1
(g403
g3
NtRp467
(dp468
g40
S'b'
sg273
Nsg407
g47
sg408
I01
sg54
I00
sg409
I01
sg410
I00
sg411
g43
sg428
I01
sg60
Nsbag1
(g403
g3
NtRp469
(dp470
g40
S'lW'
p471
sg273
Nsg407
g1
(g46
g3
NtRp472
(dp473
g40
g471
sg49
(lp474
g51
(g52
(I0
tS'b'
tRp475
(I1
(I429
I3
tg38
I00
S'\xaa\x96#\x84\xab\xedt\xbf@\xed\x84J\xb7\xe8\x80?\xb5\x87\xcc!\x86\xc7i\xbf!\xc0@\xc0.\x8e!?\xb3w\xa2E3\xc1j\xbfZl\x9eYP\xa8i?9\xad\xa7\xa5\xf4\xfdl\xbf\xc1G\t\xabD\x03t?\xf2\xc5\xd5`)\x11V\xbfG%7\xe53yj\xbf\x19\xcaa"\xd7\x97o?\xee\x94\xaa\xf4\x8czD\xbf\xa6|Y\xb9\xa2\x04v\xbf\xce\xbe\xc0RS\x10\x83?y\x00(\xec\x03\x1cp\xbf\x85\xd0r\xa1(\x8a\x82\xbfL\xb1\xa7i\n\x81\x92?S\x92\xdc1\xecw\x82\xbfJ\xf4\xdazt_|\xbf\x12?\x16P\xe1@\x89?\x06\x8aQ%N"v\xbfCQtLb\xf1\x86\xbfm\xf9\xf3,\xcb\xb0\x96?6\xa2s\r4p\x86\xbf\xc6\xebUby\xb2r?\n\x85\xbeb\xc3\x1a\x8f\xbf\xd4\x8e\x93\xb1\x86\xc1\x85?\xcao\xefH\x80{\x81?\xe5\xd2H\x96\t\x04\x99\xbf\xd3\x1a\xd1qIF\x90?\xe0\x12k4\xcd[Y\xbf\xf0)\x14\xdc\xed\xa1N\xbfy\x93:\x11bVd?\xb5@N\x043\xdd\x89\xbf%>""l\xb6\x9a?\xf1;\xf6?\xa5\x8f\x8b\xbf\xe5\xean\x91\xac\x06v\xbf\xd0\xd4S\xb7\x7f\xc1\x80?\xd7~q\xba\xa5\xf8f\xbf*\x19\x14\xa8.\x1d\x7f\xbf\xe5*\x805\x060\x8c?\x8b;\xec\xc2\xddBy\xbf\xa8\x97\xad\xec.6\x7f?\xbf8\n\xf2\x8c\xbf\x96\xbf\x0e\xa6\xbdm\x02\xe4\x8d?Ro}!\x1c\xda\x93\xbfRm\x80nYu\xa5?ij\x83\xbb\x96\x10\x97\xbf\x7f/\x980E\xf2x\xbfiDo\x01 \xc5\x86?+XF\xd2\xfa\x97t\xbf\x94\x1d @q\x1fS?^\\\x040\x7f\xbf{\xbf\x1eU\xfc\xdf\xa2\xf7v?x~\xb5?\x07\x9ee\xbf\x86\xa1\xb3r>:`?1o\x074#\x8fE?\xa9+(\xd8R\xbfk?\xaa\xfaG\xa1\x8e\xcc\x88\xbf\xbf\xef=\xeb\xb9\xdc\x81?]p\xf8\x83\xfbo[\xbf\xd5\xa4\x95\xed\xe0<D?\x01\x9e-\r\x8bQQ?:J\xb5k\x16\xbch\xbf\xab\x1f\xe4\xa3y\xf3l?\xe9U\xbb\xe0\x8c\xdd@\xbf\xff\xd6\xd0\xfb\xbd\xc4\x81?76\xb5\xd3\x91\xb0\x99\xbf\x0b\xcb\xcc\xd52\xce\x90?\xaa\x93QL\xde\xbc\x8c\xbf\x18J\xf8o1/\x9e?\xdf\x00\x9f\x93\x84\xa1\x8f\xbf\xdcV\xa4s\xb8yF\xbfn\x056\x08\x82\xbdZ\xbf\xe0\x17\x04!/\xfdb?\xfc\x07\xb0\xdc\x1d\x87\x86\xbf\xb6(-C\xe1t\x96?\x8fH\xaa\xa9\xa4b\x86\xbfs\xa9\x9eX\x16sn\xbfq\xe1\xc4\xdd\xb6\xe1q?\xacf\xac\x8b]AE\xbf\x019\x0e6\xdc\xa7z?\xcf\xedi\x7f\xfd\xc8\x93\xbf\xea\xbd\xcc\xe3\x0c>\x8a?b\x9dRh\x94E^?\\\xaa\xd62\xe4l\x80\xbf\xb7\xac\x98KcHy?t\x9a\nQ\x03ty?vj\r\xaa\xdc\xee\x92\xbf`\x88\x95\xab\xb7#\x89?\xd0\xb6\xe5\x157\xd9d?\xc6\xd3ZZ\xa8\xe7\x84\xbf:\xcc\xc2)\xb5b\x7f?\'\xb2\xef\xff\xc8:\x7f?J\x1a\x85\xab\xd7\xe7\x96\xbf?\\\x12\xd7J2\x8e?\x1a\x9e\xb5\xe0e\xe7\x96\xbf8\xe9l.\xa1\xe9\xa8?\x9c5$|\xdc\xeb\x9a\xbfF_\x94\xf0\\eq?}\x1c\xe6Ot\xe3\x8a\xbf\x98\xed\x9b\xd7\xc50\x82?\x14-\x9aT\x19\x89p\xbf,\xe4 \x99v\xddu?\xd6\xdb\x1a\x12uQU\xbfL2\xc5\xc0\xbb\xbdz\xbf5\xe7>\x99\xfdC\x87?#\x9b\xb8q?\xcas\xbf\x1b\xee0R\x0e\x7f\x87\xbfym\x1c\xe0\xb7Z\x98?\x01\xed\x07na6\x89\xbfX6\x0b\x8b\x90\xc6y\xbf\x1e\xfb\xa0g(\x9c\x85?\xe3\xbe6D\xc0qq\xbf\x83\x17v\xba\xf9\xd0O?S\xbc\x89\x13\xefOt\xbfD\xf9:\xdc\xcfUp?C\xe7\xa6\x13\x1f\x06a\xbfG\xf4\x81\x12\x1d\x01K?\x05\xd6\x0c\x9e\xaf\x8bT?L2=t\x8c{h\xbf\x9e\x03\xd4\x85\xa6.i? \x13\xda2Bc\x16\xbfU\xad\xfet\x0ez\x84\xbff\xee\x80\xc0KT\x94?P/\x03\x0c\x89.\x84\xbf\xd8\x04Ez\x0c l\xbf\x03\xb6\xf9\xd0{\x08p?\n9s=Y\x87?\xbf\x1e\xe8\x1b\x0fN\xfcx?\xd7\xcafk\xf6\x92\x93\xbf;\xa1?\xcf\xc5\xa7\x8a?\xe2\xa5\xc5\x19\xe2\x00u?S~\xfe\x83\xe7\x8e\x90\xbf\x0f)\x1a\xfb]\x9d\x86?X\xae"Q\x96\x98\\\xbfM<\xc1\xc9\x04\x817?K_\xb2\x1eU\xb8V?;\x8e\x85\x87E\x8dv?q\x7f\x84\xe2\x1b.\x91\xbfR7F\x01\x95\x15\x87?\x9960i\\Qk\xbf\xac.\xac\x99G4p?K\x98\xa0(\xcb\\D\xbfe%l\xe0.R\x7f\xbf\xd2\xc5P$\x8d\xa1\x8c?#f5h\xeb\xf0y\xbf\x03Nx\xd1\xc1\x11\x89\xbf\xb41\xdbS\x00u\x99?\x90\x15>\xd6>\xd8\x89\xbf\x06\xa5~9s\xfb\x92\xbf\xb8\x17z}G,\xa4?\xf5\x89u\xc1\x1b]\x95\xbf\x0b3\x1d<\xa1\x11\x80?\x9b\xf0\x1f\xfa\xe2#\x97\xbf\xe6\xad"\xb8$6\x8e?P\xb3\x9a(\xa1\x1a]?V\x19c\xd4[\xa4\x81\xbf>\x86\x9f^\x0f\x02|?\xfd;\x02\x8b\xe6PB?\xd4\x05k\xabI*w\xbfE\xbe\n\xda,\xe0t?_ov\x7f\xd3!}\xbf\x92\xc3%L\\\xd4\x89?\x01\x17\xd5\x18\xe5\x86v\xbf\xf8\xa445\xf7\xee\x84?\x1f\xb8\x93@b\x86\x9d\xbf\xbde\xf9\xa5\xe6\x0e\x93?$\xaa\xafN\xa2\xd5l\xbf\xd7\x82\xe8\xdd\x94\xfat?t\xb6B\xda\x0e?Z\xbf\xe2\x8f\xc0m[\x11W\xbf\'\x83\xb5\xd1\xab\x89Q\xbfq\t\xbb\x9f\x83Md?\xcc)\x91\xfds\xb3\x83\xbf^\xcd\xe9\xa9\x08\xa8\x93?DpBV\x9d\x9c\x83\xbf\xeb`R%\x92\\\x92\xbfC5:O\xa7\xa6\xa3?\xee\n"y\xbc\xf0\x94\xbfv\x8fq\x1b\x98\xc8Q?\xdf\xa2\xf7\xca\xfd\xbdz\xbf\x8b>\x1b\xc4\xd7Kv?\x94\x84\xdbV\'\x10\\?\xbfL\xf1X\xb6\xa3\x80\xbf\x86\xb8+\xdcbCz?\xf6\x01\xdc\xcb&\xec|\xbf\x86~\xdd\x9c\x85\xa8\x89?\xdb\xf9\xdem\xe4dv\xbf\xa8\xed\x83\xe5F\x98k?\x0cr.\x13\x7f\xab\x88\xbf?v\xcdYm\xc5\x81?\xc9[9\xa6ez\x81?ST\xc1\xc6\x19\xb9\x98\xbf\xb5LI\xe7\xcd\xf7\x8f?\x93\xfc\xad\'\xc8\xbe\x86\xbf\xa3et\x8f\x80\xfc\x96?\xfd\xcd:\xf78:\x87\xbf\xa1\xa7\x14\x8b\x86\xe2G?g\xf1\xbe\xff\xed\xd6u\xbf?\\\\.\x9d\xdar?^\xe0\xad,\x9c\xe9|\xbfh\xd7\xa1\xf9\xa5E\x8b?\xa1\xce\x95\xc6\xaf\xa1y\xbfI\x1d\xc3<B/q\xbf;\xecK,\xce\x14w?\xc2<#\xbe/\x96W\xbf\n\x1c\xaa\x027\x81o?!2\xcd\xaf\xed\xdf\x8a\xbf:\xab"\xef\x9f\xff\x82?\x17\xc3\xf7\x8f\xedz\\?8\xd4/uw\x84\x80\xbf\xda\xb8a\x863\xeay?\xc4\x1cq\xd3\xf0\xe5\x85\xbf\xe6\xf9\x06\xb7\x0e\xa2\x95?8\xd7\x9c\x9a,^\x85\xbf\x88\x7f\xe0\xbc\x07\x03a\xbfU9=\xa1\x97\x9f]?\x8c\x10\x0fb\xdf\x991?9\xbc^h\x9aDr?\x11\x171U\xd9\x9e\x8e\xbf2\xba\x01!\x8c|\x85?F\xcf)v\x0e\x85m\xbf\xde\xa4\x96W\xa90p?\x95\xd9\x1b\xc8!\xe26\xbf\xc2\x80\t{\x1d\xb4\x80\xbf\x12\xdbAf\xca\x9b\x90?\xfc4zQw\x83\x80\xbf\xbf\xcaP\x96\xea\xa9q\xbf\x07%\xa3\xe4o\xb0x?\x16gI9\x15\x1a\\\xbf^B\x05\xdb~\xe9l?y[\xaf\x9bo\xc1\x89\xbf\x9a\x0b\xee\xe4\x0f\x87\x82?\xd5\xd2e\x95]L|\xbf\x16b\x11T6\xd4\x88?6\xf1\xbc\x12\x0f\\u\xbf\xd9\xbaa\xbaxEs\xbf\xb8#\xe3\xd9a&\x80?\xe6\x17\xc9\xf2\x95\x0ej\xbfi\xe4\xc1\x02~\xb1\x85\xbf\x1e\x87\x89\xd9\xccV\x95?\xa8)Q\xb0\x1b\xfc\x84\xbf\x0c\xa584\x05\x88R\xbfH\x18\xc9\xf0\x89K0\xbf\x0c\xebj\xb0\xe7\x9aV?1\xa0\xbe\xc3\x0e@x\xbf\x0817\xa0|\xcc\x83?\x80\x84_\xf9\xd4\xb1n\xbf\x1f,\x86\x8fZ,v\xbfTV\xa3VZ7\x83?\x8a~\xc0\x1dZBp\xbf\x1d\xa2:$\xa4\x05Z\xbf\xa4q]\xb2(\x8b\xf3\xbe\x84\x18\x04\xc7\xd0SZ?\x0b\xfe:\xc0\xa4`h\xbf\xfd4\xc5ejFl?\xa4\xafQ,-.?\xbfgj\x16\xda\xace\x82?\x15\xf1\x05\x93\xbe\xf4\x99\xbf\x7f\xbb\xfa%\xe8\xc1\x90?G\xfb\xf7\x80Bux\xbf "W\x17-\x84\x85?\x95H\xb6\xad\x17\x93r\xbfmM\x9bq\x04\n\x88\xbfM\x86B\x1e}[\x99?\x8a\xc1\xe9\xca\xf5\xac\x8a\xbfN\xa4o*\xce\xc1y?r\xaaN\x13\x1e\x11\x93\xbfv\x82e\x11UA\x89?H\xbaB\xb1\xc86\x84\xbfe\x85\xe3\n\xb2\xea\x93?IP\x84d\x9b\x9e\x83\xbf}zi\xff\x90\x07k\xbf\x8d&\x95\t\xd5\x05q?\x8fL\x03Od\x10L\xbfG\x02\x18\xdb\x8a$Y?;\x13\x84v\x89g\x7f\xbf7\x12\xbe\xbff\x1ey?o\xc7\xf6\xdc\nA{\xbf}gNc6}\x89?!\x07\xa6\xe9a\xb9w\xbfI\xea\xd1\xbf$\xdcv?X\xf5WG\x19\x11\x91\xbf\xe5\xf5\xc6. \xb4\x86?EF\xfd\xbb\x02\xcfr\xbfE\x9b\xdb\xa2 \xf1|?\xc5\xa9\xbc\xcd;Dd\xbf]l\x0c\xe1V\xfd]?V\nT\xbf\x0b\xac\x7f\xbf"\xef\x10\x07\xb6,x?\xcfm\xd3e\xa0\xcey\xbf\x9f\x0b\x0e!\x00O\x87?\xda\xa9H\xdc_\xcft\xbfb\x8d`\xbb\x8d\xf2x\xbf\x07(\x1f\xb5\xcc\xa8\x84?R\xc3\xdd\xae\x0b_p\xbf\x96^\x00\x81\xc2"g\xbf~W\xda\x00C\x19c?\x8b \x98\x00\xfe%@?h"-\xf7\x89m\x80\xbf S\x8f\x1f\x8f\x92\x8f?*a\xc4P\nJ~\xbf2\x8e\x9d]/BE?\xddt\xd87\x84;u\xbfF\xc3$L>\x93r?\xd4\x9cy"\xeaj`\xbf\xc1Bm\x8d\xaa\x87[?h\xde\x17\xde\xa685?\xba\xe2g\r\xba!h?\x9c\x1duB\n\xbb\x86\xbf\xea$\x1b\xbf\x9b\xb2\x80?8Syq\xf2\xf9\x01\xbft\xf9\x18\xfa\x0f\'r\xbf\x03\xec\xfb\xde\x03Kr?\x8b\x18\x95[\x80h\x8c?\x1dw_\xce\t\xd7\xa2\xbf[b\xf4n\xd3y\x97?\xee\x02%\xc0\xe7\xe5\x83\xbf\x05\x8bmO\x8d\xa5\x93?j\x13\xb6\xde2e\x83\xbf\xa8L\xea\xe9\xbbl\x8a\xbf\xf1\\h\xb0u\x15\x9b?\xefn\xe6v/\xbe\x8b\xbf\x07\xab3\x19+\xe4\x86\xbfhQh\x89\xc8\xa8\x96?t\xf7\x9c\xf9em\x86\xbf\xe2V(\n#F}\xbf\x15\xf15\x8f\xebO\x8b?\xcb\x8bC\x14\xb4Yy\xbf\xef\xfbukzm}?{Uw/\x88\xa0\x95\xbf\x8e\xad3)S\x8a\x8c?\x1c|\xfd\xb5\x97M\x84\xbf\xafve_\x87\xa4\x94?\xfbp\xcd\x08w\xfb\x84\xbf\x03\xe5\x80,\x10\xc5\x89\xbf;\xba#G\xe1\xe9\x99?\xfd\x8f\xc6a\xb2\x0e\x8a\xbf\\\xe1\xa1@q\x96]?\xbd\xaa\xcdiv\x98\x7f\xbfd2\xa5\x19\xda2x?\xca\x82\xbe.\x16TU?e\xbc\xe4\x17\x95y{\xbf\xf5\x1b5\x8c\x8f$v?\x86L`\xbb\x18:k?K\'\x9b\xda\xc5?\x88\xbf\xf6\x13\xc3\xab?q\x81?K\x8b\xb4B\xdcV\x82\xbf\\(s\xf2M\'\x92?\xa6\xc51\xa2\xbf\xf7\x81\xbf\xaa\xf0\x0e\x8c1E_\xbfl\xabXz\xb3pI?3\x9b\xe2\xce\xd7\x8cR??\x1d5x\x83o[?(\x16\xa6I\xf9(|\xbf\xfc\xce\x98k\x18Mu?\xe7~q\x84\x91_[\xbf\x17\xbd\xc6\xe3\x12\x9d4\xbf\xef\x96\xb1\x1ekC`?Ci\xc0\x0c\x01\x83x\xbfc\xac\xed\x88\xe60\x85?\xe9\xef\x1a\x05\xcc\xdeq\xbf\xcb\x10~\x01J\x83i?\xab?\xb5~\x17\x1b\x87\xbfR\xbbU\xfeD\xba\x80?v\x8e\xf2\xd4F\x94\x8a\xbf4\xdb\x13\xfa\xd3\xa1\x9b?")5\x1fa\xaf\x8c\xbf\xe5]"\xc2a\xc9\x84?\xe5\xcf\xa8\xda\xc6\x81\x9c\xbf\xec\xa0\x97\xf9\x15\x1d\x92?\xf4\xf6|V{>\x86\xbfQ\xe2\x06\xab\xc3\x9c\x95?\x1c\xcd\x90\xff\x0b\xfb\x84\xbf\x1d\xd6\n\xfb\xc7\xa8h\xbf\xa7\xa3\xce\x1c\xe6\xeah?,d\xf3p\x88\x87\x00\xbf\xe0\x86\xba#\xba&0\xbf\x10\xf5\x8b\x85\xd0Bm\xbf\xc8E\x03\xca\xa7Go?K\x17pMM\\\x85\xbf\x19m\xe6Y(\xbf\x95?\x15\xc4\\f\x03"\x86\xbf\xf4\x8d\xd2\x99i1F\xbfX_5\xd3p}d\xbf\x8e\x03\xaa9\xcb\tj?;\xb5e)\x04\x8bj\xbf\x012P\x82\xc9\xf7l?\\\xe5S\xc7*f3\xbf\xa3\xc5\xe9\xd38\x94G?\xdeS,\xd6\x85Oy\xbf\x9a\x1a\xaf\xbb\xfe\\v?\xa1/\xa7\xef\x84\x07R?jE\xcd\x17\xad\x98{\xbf\x95y\xe3\xdb\xcb\x16w?o\x8d\x87=\x0f"v?o~d\xdb<\x1e\x91\xbf\x1b6\x05\x18r+\x87?t4X\xc9!\xb2\x91?\xda\x02(C\\*\xa7\xbf\xc7\xd0\xf7\xbc\x96\xa2\x9c?\xa24z\x18\x7f\x91w\xbfs2\x8d\xa9i\x9a\x83?f_@u\xa8Fo\xbfw\x1c\xddg\x80Z\x86\xbf\xe9tA\x06\xb4\xf7\x95?\xd5\xce\xa5\xa4\xe7\x94\x85\xbf\xbf}a\xb5\x13\x1fu?\xf1`"\xd2\xe9P\x8f\xbf\x17\xa2q\xf7_\xc1\x84?6\x03\x19\x00?\x0by\xbf\xce!XV\xad\x0f\x86?\xa4?\x97\xac\x1b\x14s\xbfdE\x07\x9d|\xb3{\xbf\x17\xe7|K\xad@\x89?\xb6\x88\xf2\xf9\xdd\xcdv\xbfz\x11\xae\xcc\x0f\x92n\xbf\x17\x9c\x94\xc19\xc2q?U\x9e\xec\xd9\x8e\xc9C\xbf\xd6\x15*\xa4\xf0\xc8\x8e\xbfI\xdeTJ\xea\x1b\xa0?B\xb1\x94B\\\xd3\x90\xbf-\xa9]\x01[\tz\xbf\x8c\x81\x19\xfb\x9a\xbe\x85?\xd9X\xd5\xf4\xdasq\xbf\x86K\x01j\xa1\xb0a?\xfd\x15\x90\xf0K|\x81\xbf\xa4\x85\x1f,G z?|\xe3\xa3\xf3\xdf\x94z?_\xcf\x9c\t\xc0$\x94\xbf_\xadg\x19\x10\xff\x8a?\x19\x8d\xa8\x1f\xbe\xa0~\xbf@2\xcb\x18?\xeb\x8c?\x0f\xd6\xed\x11\xc05{\xbf\x1c\xcd\xcc4e\x96H?\xd6\xf5[\x9eS(y\xbf7\\\xc2\xf7\x86\x15v?$5~\xd3\xcb`\x81?^\rX\xb3+O\x98\xbf\x8b\xe61\x93\x8b=\x8f?}\xe6/T\x98\xaeE\xbf\xda\xbcO\x9c\x0f\xcd_\xbf)\xd83\xe3-Re?W%2j\xbaBP\xbf8D\xe7g\x072P\xbfb\xb5\x0c\xe9`:`?\xf16\xf27+\xbeT\xbf\xcf\xc0"YF{Q\xbfL{\x8a\xc8\xb8\x1cc?\x04\xd7F\x08N\xd3a\xbf\xeb\xc2\xa7\xf4\x11\xf0^?\x10\xb1\x97o(\xda2?\x89\xd5g\xd7\xf7es?\xc8T\x92\xd9K\xa7\x8f\xbf\xeei\xde\xedO\xf4\x85?e\xe3\xa0Y\x08Qv?\xc1w\x07\\\xaf\xeb\x90\xbf\xec}>\x8b\xda\xae\x86?\xad\xf3\x11s)\xd9y\xbf\xb3(\x82\t\xbf\x9b\x85?\x92]\xf2\x9fT^q\xbf\n_\xd3w\xd6\xd6\\?\x8f\xdf8MW\xe6\x80\xbf\xde\xe7|\xfc\xf8\x96z?!3w\xe7\x14Sq?\x1eF\'G\xd7E\x8c\xbf\xc1\xabk\xd3L\x9c\x83?\x04.S\xff\x94\x1ep?\xb2yxt\xb5X\x8c\xbf\xb7\xe2\xce\xf4jI\x84?\x84\xc8\x10\x98\xa7\xdf}?\x06"\x11:\xc5X\x95\xbf\xff\xe0\x19\xa8\xb6\xc1\x8b?r\xc3\xe3\nr$\x85\xbfJ\x04\xc4\xc3Y-\x95?\xa0E\xa4|A6\x85\xbf\x97C\x16\x15\x13\x9d\x85\xbff\xc2\xe4q\xca\xdd\x95?\xd7@\xb3\xce\x81\x1e\x86\xbfXR\xbf\x82\x7f\xf5\x92?\x82\xba\xb5\x1f)E\xa8\xbf\xfe"\xac\xbc\xd2\x94\x9d?G(\x07\xa5\xb0{f?\xf8[1\xbfx\x98\x86\xbf\xda\x91\xef\x95\x8c\xf9\x80?\xdb\xf3\x88\xee\xde\xe0x?\xa4G\x00?\x8d~\x92\xbfB\x16\xbc\x06\xab\x8c\x88?\x0f\tv\x19a\xa3\x13?\x93W\xba\xf5\x95\xd2l\xbf\x9e\xa7\xee\xecz5l?\xec\x93\xd6f`#U\xbf\xb8RF\xa4\x94\x03V\xbfNs\x8e\x85z\x93e?h\xc8\xe1\xfc\x13-\x8a\xbf\x95\xbf\x03\xb4r\xd3\x9a?\x87\xb7%k\xd1y\x8b\xbf\xc0\x8e\xdcZ"\xe6`?\x0b\x98\xabn\xa9&\x81\xbf\xd6\xe8\xe8\xafA\xday?\xf4\xd2q\xca\xf8%r\xbf\x16]\xc8s/Bz?\x7f\x13\xadRm8`\xbf\x97\xd9a/K\xab}??\xfaK\xa6\x8d\x04\x95\xbf\xd4\x08\xe7\xb4u3\x8b?u\xbdU\x040\x1eY?6E\xa4\xa2\xeb\x12~\xbf\xce\xd5\x8e\xa1_\xcbw?\xd2\xe7:fw\xa2{?t\x93\x95\xb6w\xb8\x94\xbff\xb3\r\xba\xb3\x9f\x8b?0\xf1\xe4\x01\xadA~\xbft\xb9T\xdb\xc5o\x8c?Y\x81\xc4\xb4\xde\x9dz\xbf\x10^\x98\xa5\xc3)J\xbf\xe7\xfe\'\xc9\xa4@U\xbf\xf4\x16\xfaM\xc3*a?R\x83\xbaX\xf5\x0fv?\x17&{\x11\x1a\xbe\x90\xbf\xc7\t\x99v9t\x86?\xf2D|\xaf\xb6\xe0\x86?fF\xef\x9c\x087\x9f\xbf\xb2#1E\xad\xc6\x93?Pd\x009(\xf4\x8d\xbf\x81\xad.\\N\x17\x9f?a{\xae?:\x1d\x90\xbf\xc8\xa9\x11\xb0yP\x96\xbf\xa6aqn\x9ad\xa8?\x8a\x19\xd1,\xbbx\x9a\xbf\x948\xd0\x11\xf8\x80\x7f\xbfM\x14\xf4\xe2\x1f\r\x8c?\'\xf1\x17\xb4G\x99x\xbf\xa6\xff\x0f\xe1\xcc\xb3\\\xbf?\x00%!\x83v4?6\xbf\xc6\x18,\x96W?\x8c>\xf8\x96\xbe\xf5{\xbf\x90\xd4\xa3US\xd9\x88?2iO\x14\xe8\xbcu\xbf\xce\x88\xfdS\x9e\x0bx?M\xc4\xdc\xc5\xf3\xd6\x91\xbf\xa1\xc3\xbaa\x18\xa8\x87?\xd6\x168Q\x0f\x02\x84?\x17\xb9m\xdf\xa3\xef\x9b\xbft\xad\xd16\x9c\xee\x91?\x1f\'\x06\x87R(:?\x00\xf6\xb1\xb3M\x97s\xbf\x10\x94A\x8b\xc8\xf4q?\x82z=\x05\xacR4\xbf\x9f\xe7\xf0\x93@\x85k\xbfW\x97\x98\x14\x96\x0fn?\x99\xa8\xa8\xbd\x82\x94\x88?\r\x1f[\x89\xcfV\xa0\xbf&\xea\xe1\xb3]c\x94?\x86I+\xd4\xd5\x1c\x8a\xbf\x83\x17P\xb2\x19\x86\x9a?W\xe5t\x90]\xef\x8a\xbf\xcd\xcdP\x1bt\x10\x81\xbfqK\x02\xa0\x9fY\x8f?\x17\xfbb\tW\x92|\xbf&Tt\xfa3*\x83\xbf\r\xf98+\x066\x93?\x11\x9e\xfd[\xd8A\x83\xbf\xea\x15/\x8a"\ri\xbf\xef~:\x13W+m?8\xa7-$\xd2x@\xbfK\xc1\xa3;\xd93\x89\xbf/\x05\x14S7\xfc\x99?|I\x84j\x95\xc4\x8a\xbf_\xabE\x80~\xd2\x92\xbf*#\x07U(\x16\xa4?\x07\x9a\xc8)\xd2Y\x95\xbfP6\x05)y\xf1v?Y\xb5O\x8d\xa0\x1f\x91\xbfe\xcf\x1c\x86\x84\xc6\x86?\xccL\xf7\xcb\xc0_r?\xcd\xa1t\x8dZ\xd7\x8f\xbf\x8e\xfbx\'z\xa7\x86?\xc0 V>N\x00\x88\xbfG\xf2\xf2\x1d\xbe\xd5\x97?B\xc4\x8f\xfd-\xab\x87\xbf\x1bSi\xb0\xcb\x14i?\xe4\xf7\xca\xccM\r\x86\xbf%Fa\xc15\x90\x7f?\xef\n\xc4:\x04\xf1\x89\xbf\x88q\xf8\xe9 \xfc\x9a?\xe1\xd9,\x99=\x07\x8c\xbf4+f\x00,\xa2w\xbf\x00\x16c\x7fF\x99\x85?\r\x00`\xfe`\x90s\xbf\x13\xdc\xa8\x0e\xfd\xc4t?fV\xb7H&\xcb\x90\xbf\x1c>\x1a\n\xce3\x87?\x01\x01\xd9Og+S\xbf\x06\xda\x01\x0eE\xfb]\xbf\xbfl\xed.V\x93h?\xeeT$j\x1d\xbe\x81\xbfHA3\x82\x91\xc5\x90?\x03[\x844\x0b\x9a\x7f\xbf\x02?\xbe\x1f\xe8h\x86\xbf*>1D\x9bb\x96?\xd8<\xa4hN\\\x86\xbf\x8ci{\xe2\xbe\x13V?\x95\xf8\xd7C\xb5\xec\x7f\xbf\xed\x1d9\x8b\xc5gz?\x10\x99\xd9\x94\r\x14m\xbfc\xda\xa8\x80E\x8br?\n8\xf0\xd8\xfa\x04P\xbf\xc8.\xf4L=0\x83?\xa6\x8d\x93\xbc\x1b\xb3\x9a\xbf\xa8u\x19\x16\xfd\x1a\x91?\xeb\x99?r\x8e\xb6T\xbf\xaf\x9c.\x85\x8d>T\xbf`\x1b\xb7\xfb\x8dzd?\xf6}r\xb0T\xe0\x8b?q\xa5>\xd1\x92\xdd\xa2\xbf\x8f\x0bDJ\xfb\xca\x97?3\x9f\xcd\xcah\xa5|\xbf"\x98\xc1\xf1r\x81\x89?W\x91\xb5\x18}]v\xbf\xf7\xef\xb8\xc2y\x89f\xbf\xa4\xc1m\xbc\xa0[d?\x19wY2\xc8n1?X\xa0=:d\xa9u\xbfO\x8f\xa5\xca\x0bi\x80?\xff\xfb\x1a\xb6fQf\xbf*D\xc9C\xf9l\x81?m\x8bp[\xfc\x83\x98\xbfz\xd3\x17s\xff\x9a\x8f?\xebi\xdf\x85\xed\xd2\x84\xbfH\rU\xd2\xd7\x95\x94?[\xb1\xca\x1e\xc2X\x84\xbf\xfa\x05\xdd8\x84"\x8a\xbfr\x9a\xaf\xbc\xd5\xb4\x9a?\x83-\x82@\'G\x8b\xbfL*pA\x91\x8fz\xbf\x0c\xd2sY`\xdb\x86?tywq/\'s\xbf\xb3Ta\xaf\x14\xa8d?,\xaa\xb5\x13\x87\xf4\x84\xbf\x00\xa9\xba\xcf\x03\x95\x7f?a\x8b\x92qG\xe2\x7f\xbf(\xbd\x0e\xb9s8\x8d?S\xee\x8a\x00\xa0\x8ez\xbf\xab4F\xb0\x1c\x00_\xbfD\xaa%\x1d\'\x95D?\xe6^\xb3!\x89\xb5T?\xeb\x85P\xf7\xf1\x1dt\xbf6\x19\xfd!\xd0\x85\x80?*XS\x99\\\xdbi\xbf`\xc8\xc9/\x08\x1e\x80\xbfct\x80\xfe\x04\xee\x8d?\x90Wm\x9d\xf9\x9f{\xbfm\xc0Xf\xcc\x9eK?~q\x96;\xe2Su\xbf#Y\xcb\xae\x08\xe0q?\xe8\xb1\xb8R\xd0\x92\x7f\xbfn\xc0\xa2\x03<\xbe\x8d?J\xce\x8c\xb4\xa7\xe9{\xbf3\xed\xdf\xe5\xbf*g\xbfTK\x14\xf5\xe71d?\xb4\x13]\x86\xbf\xc67?9\x02\x8d\xfd\xde\x0b\x86?\xa3\xd0\x16\x8a\xa2\xe1\x9e\xbf\x1eOP\x0b\xb3\xdb\x93?\xc7b\xf1\x92\x83M\x8f\xbf\xef\x87\xd5\x88\xbc}\xa0?\t_2H\xb7T\x91\xbfsal\xb5\x14\xf0w?\x89\xa8\xf9\x14\x8c5\x92\xbfZ\x1f=\xcf\rs\x88?J"*\xa0"7\x88\xbf+9_\xb0\xf0\x97\x99?\xf6N\x94\xc0\xbe\xf8\x8a\xbfU\x04\xb3\\\x08n\x86\xbf\xdb\xa2h2/n\x96?\xf1@\x1e\x08Vn\x86\xbfNX\xe2]7\x9f\x8c\xbf\x93\xfd\xa8z\xf7l\x9e?\x15\xd1\xb7\xcb[\x1d\x90\xbf\xdf\xbb\xa6\xe4\x85\xbbh?m\xf4\xf7z\xf5r\x87\xbf\nF\xce\x01\x14D\x81?]~\\\x97\x9d\xbaS\xbf\xe9\xa6\xc5\x19\xff\xaaM\xbf7\xa9\x1f\x92\x0eHa?O\xbf\xcd?\xae$a\xbf\xd0\x00\\)\xff\x9eK?\xef}\xed\xea\xdcyT?:\xcb\xe2\x8b\x00\x8b\x86\xbf\x86\xcb\x0c/^\xd3\x96?\xd5\xca6\xd2\xbb\x1b\x87\xbf*Q\xc3A`\xbf\x83\xbf\xf3x\xc4\x14\xe1\xa4\x93?\xf4\xa0\xc5\xe7a\x8a\x83\xbf\x84\xd0\xca\xc4\x08\xd5\x85\xbf|\xee\xe1\xfc\xaa\xb3\x95?T\x0c\xf94M\x92\x85\xbfLn\x9e\x84\xe1<\x89\xbf[\x846b%c\x99?\x19\x9a\xce?i\x89\x89\xbf\xb5\np\xcb\xc4\x9ex\xbf!\x9e\x85\xd1,5\x84?\x9cc6\xaf)\x97o\xbfssU\x94*\xd5u?H\xfb5\x83a\xa5\x90\xbfI=A\xbc-`\x86?\xaa-\x12\xd2\r1{\xbf3\xe9t\xe8\xae0\x87?\x91\xa4\xd7\xfeO0s\xbf\xe1\xa7uoN\x7fm?0f\r\xdd\xacZ\x8a\xbfs\xfc/A\xd9\xfa\x82?\x8fE\'\x1b8M\x88?\xfd{dJ\x9bp\xa0\xbf\xe6T5\x87\x9a\xba\x94?)\xae~\x84]\x1dr?\xf9\xb1\xb0\x89\xa3W\x8d\xbf\xe8Zq\xc7\xf4H\x84?&`\xa9\xe4\xed\xe2\x7f\xbfo\xb6\xcbW\xcb+\x8e?\x11\x0c\xee\xca\xa8t|\xbf\x96\x0f\xfb~t\x0b\x82\xbf\xc8\xaf\xb6\xed\x0fm\x91?%Pr\\\xab\xce\x80\xbf+\xfa-\x9d,\xc2x\xbfd\xef)\x9ayI\x83?\x04\xc7K.\x8d\xa1k\xbf\xa6\x9b\xa8\xf7\xf3\xf8\x81\xbf\xc6>\xcd\xc5\xf1\xc4\x91?\x95\xe2\xf1\x93\xef\x90\x81\xbfK\xe4\x17\x1b\x86\xda\x8a\xbf\xa5M\x0cUH\\\x9c?\x92\xb7\x00\x8f\n\xde\x8d\xbf\x02\xddg*0\x19\x91\xbf\'\xa0C\x94\xdc\x1c\xa2?\x8dc\x1f\xfe\x88 \x93\xbf\xeb\xd3\xf1\xbdd\xbc\x86\xbfT\xc2\xb9\xadYX\x97?\xb4\xb1\x81\x9dN\xf4\x87\xbf\xf9\xc5C1\xac\x14q\xbf\xc24\x1e\x9e\x89\xf6x?\xfc\xbai\xb3u\x87_\xbf\x16q\x80\x00\x96k\x88\xbfv\x91\x1d\xdb\xa3\x16\x99?p\xb1\xba\xb5\xb1\xc1\x89\xbf\xdbI\x94@\x8bJ\x82\xbf\xce\xaf\x14~sN\x91?\xdd\x15\x95\xbb[R\x80\xbf\x8c=\x08)\x8e\xd3S\xbf\xef\xe0\x08p\x1b\xa3V\xbf2\x8f\x88\xccT;e?\xd3*\xc7\x84\x94\xb3\x85\xbf\x99\x9d\xf1\x96\xb0\x88\x95?\xab\x0f\x1c\xa9\xcc]\x85\xbf \xed\xb9\x95\xe1\xd5\x83\xbf\xb6\x97\xda\x1dXW\x93?\xefA\xfb\xa5\xce\xd8\x82\xbf\xa70:\x81\xbf\x89\x85\xbf\x06*\xfdr\xbb\xa2\x95?\xb5"\xc0d\xb7\xbb\x85\xbf\xd8?\xfb\xae\xacV\x8f\xbf\xd17c\xd3\x7f\xf2\xa0?\x0f\xd0HO\xa99\x92\xbf\xf6\r\'\xa4\x88l\xe2\xbe\x85\xa6\xc4$T\xafp\xbf(\xba\x16i\x8a\xb8p?q\'\x82\x896\xb5t?\x812\x80I\xe14\x90\xbf\xfeP?N\'\x0f\x86?\x9e\xd2bo\x99\xc9v?\xb9\x1d\x06^\x14\x0f\x91\xbf\x84\xd1Z\x04\\\xb9\x86?\xa1\xf6\xe7\xee\x8e\xca\x91\xbfV\x83sD\xd7\'\xa3?\xe1\x0f\xff\x99\x1f\x85\x94\xbf\x98W>\xbc\xd3\xd0:?\nc\xfc\xdcx|t\xbf\xea|8\xa1k\xcfr?\xb2"\xb9@E\xa7p\xbf\x87\xd3\x16\xb0\xe7zy?cb\xbb\xdeD\xa7a\xbf\xcf\xe4\xd9\x97Qtp?F`oX\x19]\x8b\xbf\x96m\x82\x8c\xf0"\x83?N\x0c\x08\xde\xed\xc5g?\xbc\xa4\x0f\x1b>T\x85\xbf[C\x1bG\x85\xc5~?\xff\xab\xc3\x1c\xaf\xefh\xbf\x05\xf4\x85\xc0\x02:e?\xd5\xc0\xed\xe1b\xad=?WH\xe6{z\x98\x83\xbf\x8c\xad\x0b\xa2\xcf\x02\x93?\xd6\x121\xc8$m\x82\xbf\xbd\x1ff\x0f\xd6Ww?\xfd3\x00\n\xec\xb1\x91\xbf\xc2XM\x0c\xed\xb7\x87?!\xc9\xd4Z\xe5\x92\\?\xf6/\x93Oe\x99\x81\xbf\xc3.qH\x11\x0e|?x\x83\x18H\xc8lm?\xf9\xe2Q+\x98\x03\x8a\xbf\x1f\xc2K\x19f\xa8\x82?>A\xe5%\x99?\x7f?\x99!\xff u\x81\x96\xbfO\xa2\x0b\xaf\x1dc\x8d?i\x8b\xa6\xf4\x95m\x80\xbf\x91\x14Bu\xd1\x1a\x8e?\x8a\x127\x01wZ{\xbf\t\xbd\xe4\xea\xbd\xa7p\xbf)"lec\xc7v?h\x97\x1d\xea\x95~X\xbfj=\x92\xdd\x88pr?\xec\xd67\xc5\x1d\\\x8e\xbf\xbd\xb8nV\xd9#\x85?\x13w\x0f\x19?\x86V\xbf\xf0\x12T\x90h\xb7I\xbfl\xc0\x9c\xb0\xf9\xb0a?\x0c\xab0\xb5cwx?\xb4\xc6\tN&\xfe\x92\xbf\xd26{\xc1\x9a\xc0\x89?T\xbd\xf3[\xfa\xe4V\xbf\xd2(*5\xd9;J\xbf\x85iD{s\x01b?\x15\xe5dB&\xcf\\?\x89i\xe9\xcb\xa1T\x81\xbf\xfb\x999\x07zu{?-\x89\xde&\x92w\x8f\xbf"W\xef\xca\x9f\xce\xa0?\xebho\x82v\xe1\x91\xbf!\x846m\xb1\x1ei?\x1f\r\x7f=\x02a\x87\xbfNl1\xe2U\x19\x81?\xb0h\xbcg\x18\x00l\xbf\x05\xef\x89\x9c\xff\xfbp?\x9b\xd1]E\x9b\xdfG\xbf/\xc3/\xd4\x1b?6?z\xd9\x1a\xa2xOu\xbf\xf4\xdd\xd7\xe4\x86\xebs?\xba\x1a\xe7\xd4u^\x7f\xbf\x01f\xcd\xd4`:\x8d?@\xb2\xb3\xd4K\x16{\xbf5\x1ak\xee\xe4\x92{\xbf\x9c\xd0E\x91r\xc8\x88?\xd5\x86 4\x00\xfeu\xbf\x14\x9a\xd1\x1aF\xc72?\xfb\xa4\xbajt\x18v\xbf\xe2\x8a\r\t\x00\xect?\xb0\x07\xd5\x17\xb0#l?\x9a\xfc\x81\xea\xd9\x95\x88\xbf.\xba\x8c\xe4\xed\x8c\x81?\x9d\xb3C[\x8e\xdaw\xbf\n\x08\xd4\x18_\x18\x84?\xfe\\d\xd6/Vp\xbf!:\xc7\x8dr\x15|\xbfit\xa0\xf6N\xea\x88?j\xaey_+\xbfu\xbf\xa3}\xeaQ"\xc4\x89?\x92B\xa8+6\xa6\xa1\xbf$F[.[j\x96?\xce\x03P-\xfc\xace?\x974\x1bD\x0f1\x84\xbf\x15g\x8eq\xa0\x8b}?\x97y\x83$}\xced\xbf3t|\xf6\xc2\xacb?718p\xd1\r1?I\xa5\xf4\xa6\xe3d\x88?a\xc7\x1a\xcdB\x96\xa0\xbf?<\xbb\xc6\x13\xfa\x94?V\x8e\xbd#K\x0f\xd8>\xe4Q;\xaa\xec\x0ep\xbf|br\xd7\xe8\x08p?\xeai=*w\x0c\x85\xbf.\x9cS\xd6\xb7\xa6\x94?\xcb\xcei\x82\xf8@\x84\xbf\xaa\xd4E\xa3\xc8\x03m\xbf\xd5\xc1\x9b\xf6\'\xd9s?\x9e[\xe3\x93\x0e]U\xbf\xbb\n\xa2\xe0\x07kx\xbf\xe7\xd9\x96w\xf4\xfb\x83?\xbcR\x17\x1d\xc2\x19o\xbf;OWwH\x05\\?\x14\x86\xd9t\xf3*~\xbf\x9d\xb2\x03W\xa1)w?v6?D\xc9\xfc\x81\xbfcU\xe6\xd1S\x8b\x91?dt\x8d_\xde\x19\x81\xbfu@m\\\xdbt\x8b?c\xb0\xc1\x0b$\x83\xa2\xbf\x80\xc1Li\xdaK\x97?\x1d\x05\x82\x87\\\x90\x85\xbf\xb3\xce\xe6),\xe0\x95?\x13\x99K\xcc\xfb/\x86\xbf\x93\x986\x02"Dv\xbf\t\x1f\xec\xc1\xbd\xc5\x81?tNC\x03\xb3\x8ej\xbf\xc6\t \xe8r\x96\x80\xbf\x85E\xe3\x9e\xbb\xf5\x8f?\\w\x86m\x91\xbe~\xbf\xfaN\xf7\xd1\x06\x91E\xbf\xce\xc7\xee\x88\xa9tc\xbfR\x9bl=\xeb\xd8h?l\xc1}0\xfe\x87H\xbf\xa4\xc9T\x0f~g_\xbf[\xd5\xc9\x93\xbe\xd5e?P\xc4mz\xc4U\x8d?\x03\x90p\xc8x-\xa3\xbfD>\xaaS\x0f\xb0\x97?\xcb\xc8\n7P\x00\x8c\xbf\x8f\xba`\x98m\x82\x9d?{\xac\xb6\xf9\x8a\x04\x8f\xbf\xfc\x11/\xfa\xbc\xc4\x84\xbf0/\\\xe1\xb5\x18\x95?]L\x89\xc8\xael\x85\xbf:\xbc\xd0\xe4\xf65A\xbfG\xa4Q\xb9\xd78i\xbf\x10\xd3\x85rU\x86m?\xe0,\xe2.-\xc0o?i\x04\xf1\x83\xb8\xf5\x8a\xbfvy88\xad\x05\x83?\xd4>\xea\xa5\xbc\xdf`\xbf\xeb\x95&\xbbmqT?\xbb\xcd[!\x17\x9cJ?\xd6\xb1n\xe5\xf5\t\x89\xbf\xa0\xdb\xe9\xfb\x17\xc3\x98?R\x06e\x12:|\x88\xbf"\x1a\x97\xc3\x99\x81\x8c\xbf\x1b\x91\x0e\xed\xf2\x83\x9d?\xee\x08\x86\x16L\x86\x8e\xbf\xb4\xe2\x88\xf8Ym\x8a\xbf\x03\xf8\'H\x1f\xa2\x9b?\x9a\r\xc7\x97\xe4\xd6\x8c\xbfpa~\xe7\xc1\xe8w?i\xde\xe1\xe2\xeb\xe2\x91\xbf\xc6\x8b\x04\xd2v\xd1\x87?\xa9x\xc3\xca\x92V\x82\xbf\xd0\xcd\t:x\x19\x92?\xd1"P\xa9]\xdc\x81\xbf\xa4\xbb\xa5\xca\xbf\xf5\x8a\xbf\xbb\xbd\xfd4\xd2\xda\x9c?\x07\xbeU\x9f\xe4\xbf\x8e\xbfB\x1b\x11\xf2\xb9\xffQ?r\x07.\xb4\xe4\xf4y\xbf\x19\xc1\xa97\xf6tu?\xa3\x01\x1a\x8e-\xb0s\xbfm\xe5k\x94+l\x80?V\x94{5SPj\xbf\xfa\x0e\x02\x15\xb8\xe9\x83?\xab\xa6\x90\xeeaS\x9b\xbf\xb0\x9f\x0f\xe4\x85^\x91?og=e\x1d|~\xbf\x83;B!8-\x8b?\x13\x0fG\xddR\xdew\xbf\xd3\x84\x0f\xe4c]\x8d\xbfu[\x17y\x1a\x8e\x9e?\x063\x1f\x0e\xd1\xbe\x8f\xbf3\xb6\xf9WE\xb8\x87\xbf\xeak\xdb\xff\xbej\x97?k"\xbd\xa78\x1d\x87\xbf\x91\x9c\xfb\xa5\xea\xea\x85\xbf\x0f\x12M\xf4\xf0\xb6\x94?\xdc\x87\x9eB\xf7\x82\x83\xbf\x0c\x06\x06\x82%?\x86\xbf:\x1e:\xc9z@\x97?\x7f7n\x10\xd0A\x88\xbfUN\xf3M\x16\xde\x80\xbfL\n\x84\xa0\x90\x1c\x90?\xfd\x8c)\xe6\x15\xb6~\xbfg}\xda\xda\xa2\x7f\x89\xbf\xbf\xd1\xc9\xe4\xa8%\x9a?|&\xb9\xee\xae\xcb\x8a\xbf\xd2"\x0ek\xeb\xc4\x93\xbf\xd2\xaa\xda\xd6\xef\xaa\xa5?K3\xa7B\xf4\x90\x97\xbf\xfanJ\xb7\xd8\xdbu\xbf\xae\xa4\xc9\xa7r\r\x80?\xba\xb3\x910\x19~d\xbfL\xa8dq\x80A\x93\xbf\x12\xf3\xbeK\xbd\xfa\xa4?n=\x19&\xfa\xb3\x96\xbf\xb9\x19J\xd8B\xb1\x80\xbfy\x1e\xd3\xf9\xbe\x02\x8f?\xfb\x08\x12C\xf8\xa2|\xbf\xad\xd4\x92+\x96\x80\x83\xbf\x08Z\x7fX6\xff\x92?\x07\xe0k\x85\xd6}\x82\xbf\xc3\x10\xfc\x90\xe2\x88~\xbfP\x11Z\xa4!\xb8\x8b?\xb6\x10\xb8\xb7`\xe7x\xbf\x97J@\xb0\x08\xce\x89\xbf2\xd3\x05\xa7\xc0\xca\x9a?E\\\xcb\x9dx\xc7\x8b\xbf\xa2\x9ay\x8b\xd7z\x83?\xb3\xaeX\xdb\x8a\x01\x9b\xbfN\xe1\x9b\x15\x1fD\x91?\xa0Jc\xb6\x1e\xfbb\xbf\x03NG5\x86\xe4X?\xf9\x8c\xfenn#J?\xb3v]\xfd\x0b\x96P\xbf\nq\xb7\xdb\xd0\xefS\xbf\xa5s\x8al\xeeBb? \xc1\xda\x98\x0f\x9aO\xbf\x0fM\xfb\x12\xd0\xabR\xbf\x16W\xb4\xefk<a?\xd6\xf8S3\x00\xb4x\xbf\xe3y\x9a\xe1\r\xe0\x85?/\xfa\xe0\x8f\x1b\x0cs\xbfm\xafD/n\xb4\x86\xbf\xb6K\xe8\x9b\xcf\xfd\x96?\xfb\xe7\x8b\x081G\x87\xbf-4V\xac\x0e\x9b\x85?c\xe7\x96\x8d\xa1i\x9d\xbf#\xcdk7\x1a\x9c\x92?\xdc\xac1\xef\xf9a\x8a?\x98f\xd1\xdc\x91t\xa1\xbfw\xf5\t\xc2&\xb8\x95?\n\xcc\xfc\xbcj\x1f{?\xa3\x11\x82\x0e\x03\x9b\x94\xbf\x18\xbc\x85\xbeP\xa6\x8b?\xff\x08C\x9e\xb9\x05l\xbf\xcb\xff$\x04\x95\xfbq?\x1d\xd9\x1b\xa8\xc1\xc5O\xbfl\x9a\x8b\xf5\xb7|`\xbf2Y\xd5\x7f\xe7M-?\x14\x8a\x1c\xfb\xb2O]?\xe9\xaf\x06\x0b\x1d$x?\xd3DPb\xa8\xcc\x91\xbf\xf80\x1d?B\x87\x87?\x11?\xd2*\x88\xcc\x83\xbfo\x91\x8e\xcbI\xfe\x93?\xdc\xe3Jl\x0b0\x84\xbf\xe0\x167\x88\xb9\x95\x8b\xbf\x00\xdf.f\x0b\xdf\x9c?\xab\xa6&D](\x8e\xbfh\xd9Bo\x1b)x?\x08\xa8|\xe7\x9a\x89\x92\xbfQ\xe2W\x17\xa8\xfe\x88?7\x0c\xc3\xa8\xa7la\xbf\x065\x1e\xbc\xe7;Z?\xdd\xc5\xcf*\xcf:A?M\x8av\xf99ar\xbfN9\xc9-?p{?<]\xa5h\n\x1eb\xbfSl\xd3\xcd\x9fmt\xbf\xb7\x8e@\x8d\\\x08\x82?\xf3b[\x992Fo\xbf\xd3]\xc5R4oy?\x84#\xba\xdaT\x86\x92\xbf\x89\x98\x11\x8c\x0fU\x88?Q\x0b\x07V06{\xbf\x8dh\xf5J)\x93\x87?[\xc6\xe3?"\xf0s\xbf\x94\x9c\x10\xe9\x1d\xc1s?\x92\xcd\xe6\x97\xd3\x17\x8f\xbfW\x7f^\xa3D7\x85?^6\xa6M\xe4\x0e\x1a?\xe5\xb2?J\x9e\x01q\xbf\x1d\x1a\t\xb9b\x99p?\x08[\x04\np\xfa\x84\xbf\x13\xacX\xa8\xdc\xbc\x94?\xdb\xfc\xacFI\x7f\x84\xbf\xc1\xb0n\xb3\xef\xc3M\xbf\x14*\xfd\xa4\xb9pR\xbfCAZ\xbfX\xa9`??\xaf\x1fF]\xfc3\xbf\xd2d(\x7f\x8a\x7fp\xbf\t`\x8aSP\xbfq?\x81\xf1\x0c\x11\x98\x13[\xbfmMe\xec\x8fD\xf6\xbe\x89\x87\xbeP\xaal[?\xb6\xb4\x80\xbbC%[\xbf\x0e\x1a\x9f\x88\x81~F\xbf\xb1 \xe8?B2c?\xbf\xa6\x14\xaa\xad\xe1\x82\xbfMf\xeeJ\xc9w\x92?\xeb%\xc8\xeb\xe4\r\x82\xbf\xe9\xe2p\x9d\xe8X\x82\xbf\xab\x0bO\x1c|%\x92?M4-\x9b\x0f\xf2\x81\xbfk\x9aH\x00\x1fS\x85\xbfN\xd2\x91\x13\n\xd7\x94?\xe5\t\xdb&\xf5Z\x84\xbfC\x07-x\xdd/\x80\xbf\xfd;V\x15#\x83\x8e?\xe7hR:\x8b\xa6|\xbf\xb6:\x13)\x19\x18c?\x04\x8b!\xd0\xdd\x18\x83\xbf\x18y\xb9\x0b\xaf\xa5|?\r\xfb\x91\xe0\xe8Cb\xbf\xfe\xa4\xc2\xaf\x93\xc7]?8E\x85E\xf8\x00;?\xc5\x9c<m\xbf\x82n?\xf26~\xdc\xf1:\x8a\xbf\xbe\x0f/\x01B\x9a\x82?\xbb\x04\xc6\xd2\xa8u\x82?\xbd\xe5j\x1ag$\x9a\xbf\xd8\xe2\x07\xb1\x92\xe9\x90?\xfd\x16\xf8\x93NQ~\xbfI@6\x16\x18Q\x8b?\x18it\x98\xe1Px\xbf\xf4Y\x9a\x14G\x91D\xbf[\xa3\x0b\x93k\x87`\xbf\xe292X\xbd\xabe?\x80\x18\nL\x87T\x93\xbf\xd7\xe0\x13\x93\x04\xc2\xa4?\xfb\xa9\x1d\xda\x81/\x96\xbf!\xeda\xe5BH}\xbfD[\x89\xabO\x04\x8b?\xbd\xc8\xb0q\\\xc0x\xbfZ\x03\xaf\x18\x81\'\x8e\xbf$\x03n?SP\xa0?\x14\x84\x84\xf2\xe5\x8c\x91\xbf\xc1i\xedj\x92\x7f\x87\xbfA]\xef\x88v_\x98?\x9cP\xf1\xa6Z?\x89\xbf3\x12\xba\xc8\x14N\x84\xbfLU_\xdd\xc1b\x94?\xad\x98\x04\xf2nw\x84\xbf\xb3\xd0\x98\xa1\xa8\xdd\\\xbfa\x949\x92h\x9f=\xbf\xf9\x9a\x13c\xc1"b?M\x18\xd9\x1f\xe7\x93\x84\xbfF\xb8\x93\xc1oU\x94?\xe3XNc\xf8\x16\x84\xbf\x8e%\xd1\xea\xae!\x80?\xcac\x82\xbe\xc7\xd1\x96\xbf\xf1\xa13\x92\xe0\x81\x8d?\x0f\xae\xf5\x8b\xf6\xa4]?<\xeb\xe6\xa5p\xd5\x7f\xbf5\x7f\xe9\x023lx?\xfdy\x1ew\xd1\x84\x90\xbf\xe1\xc7\xd6.^k\xa1?:\x14\x8f\xe6\xeaQ\x92\xbf8C\x984\x81\x1dx\xbf\xc8,\t\x91\xdf\xc4\x84?\x01\x16z\xed=lq\xbf-\xaa\xc6\xc8\x07Ez?\x87O\xe0\x8d\x05]\x93\xbfMI]7\x87\x97\x89?w;;vI\xa5P?\xc5\xb8Q\x0c\\]v\xbf\x91\xe9\xc2\xae\t4r?}\x04\xb8\x0b"\xf3c\xbf\xd7\xacG\x85scb?\xa9x\x05g\xe8\xfa(?\xe2!|\x0c#|r?e.\x03\x9d\x9d\xe0\x8d\xbf\xd0\x1d\xc5\x16\x8c\xa2\x84?\x8b<\x86\x1a\xf1\x8d\x94\xbf=U]O\x9f\xa8\xa6?!o4\x84M\xc3\x98\xbfJ5\n>,\xacq\xbf\xb0\x95Fm7e|?3\xc0x^\x16re\xbfJS\x81=\xa4\xdf\x8b\xbf5\x8ce\xe7\x9b,\x9c?\xf9\xc5I\x91\x93y\x8c\xbf5/w\x9b\x9d\x11\x86?4\xcf2\xd5\xfb>\x9e\xbf\xf86w\x07-6\x93?<\xce\xa1\xcd\'B\x84\xbfd}:\x02\x07#\x94?`-\xd36\xe6\x03\x84\xbfE\xee\xc0\x8c\xa1\xd4k?\xc3\xa0\xce\x9e\xdb\xf2\x87\xbf\xbed\x9e;\xb3\xfd\x80??\xcaKf+\xae\x81\xbf\x08\xda\xaeb\xd5Z\x90?\xa3\xd3#\xbe\xfe\x0e~\xbfF\x88\x7f\xf4\x15\x16z\xbf\xae\x03VYX\xff\x86?\x82~,\xbe\x9a\xe8s\xbf\xb6M!#\x92\xc6\x8a\xbf\x8b\xb4}L\x8e\xdc\x9b?\'\x1c\xdau\x8a\xf2\x8c\xbfp\x1f\xab]\x86Fq?\xb2\xd4\x1c\x88\x05\xf1\x8c\xbf\xdaDGY\xc2M\x84?\xbf\r\x84\xed\x80FU?\xd8\x83\xf6\xe4)U|\xbfh\x80\x95\xa9\x89\x03w?\x1dt19"lD\xbf\x00I\xe1]F\xf9g\xbf\xa7\xa6-\xecN\x14m?\x11I\x103K\xdey\xbf\xa8\xe2\x99-H\xa7\x86?\x99{#(Eps\xbf\\ \x8e=gkS?\xf9\x95\x04\x91\xe5\xf8{\xbf\xf0\r\xa1\xc1\x0b\x1ew?\x87\x1e\x8d\x1f\xa0\x14w\xbf\xf6\x1c\x86\xcf&\x8c\x84?\\\x1b\x7f\x7f\xad\x03r\xbf+)<\xa7\xfcK\x80\xbf\xddWY7\xbf\x17\x8e?\xef\\: \x85\x97{\xbfz\x1c\xca\xf4"\x18\x85?\xca7\x81\xab\xb0n\x9d\xbf})\x1c1\x9f\xe2\x92?\xb0\xfd\xdb\x9f\xd0\x91W?.\xe6\x9d\x9f\xdd\x7f\x7f\xbf\x1f\xe7\xa6wi\x9by?\xf8\x99\xa0\xc7\xac\xe0\x8b\xbf\xe4\xdc\xe5\x03">\x9d?S +@\x97\x9b\x8e\xbfCceC-\xeb\x8b\xbfM\xa1\x06\xea\xa5\x01\x9d?\xb8\xdf\xa7\x90\x1e\x18\x8e\xbf\x16/%\xc3X\x84J\xbf\x98\xd5c\x19<\x16a\xbf\x05!-JR\xb7g?@\xc1\xdf}\xff\x12g\xbf?\xf0\xb1\x04\x84ah?\xee\xe2"mH\xe8$\xbf\x84\xf8\xd7)\x04c\x90\xbfq5k\x12\x87\xb2\xa1?\x91r\xfe\xfa\t\x02\x93\xbf\xe8\xb5\xd3\xb2\n\xc8x\xbf\xed\xa6\xba\xcaI.\x86?\xb2\x97\xa1\xe2\x88\x94s\xbf\xf8\x16u\x97\x97\x84a?\x89\xb3B>\x0cq\x83\xbf[\xdc\xca\xb0\xcc\x1f~?\xc3\x11\xdf$c\x94p\xbf\xef\n"\x85\x1a5u?Z\xe4\x0b\x81\xdd\x82R\xbf\xb2\x07\xe71{\x82e?P\'\xde\xd1H\x02\x85\xbf1\xca\xc8\nTC\x7f?H\x9e@\xf0\xa1\x93^\xbf\xea\xdao\xd0\xa12:?\xd3\xa7$|\xf9\x06X?\x08\xcdX\xa2+_\x86\xbfn\xe5\x9e\xfe\xb4\x02\x97?\xc3\xfd\xe4Z>\xa6\x87\xbf\xe4e\x9f7\xd3\x01F\xbfL\xf8\x7fA\xfe\xf5a\xbf#\xd2g\x0fsvg?ci+f\xc5\xdd\x83\xbf\x1b\x1d\x92\xdetW\x94?\x91\xd1\xf8V$\xd1\x84\xbfv\xc7\x12\xc5\x9d\xf0q\xbf\x8f\x10{\xae\x80\xec|?\x85\x92\xd0\xd2\xc5\xf7e\xbf\x9a\x06\x83,\xe5\x1fF?\xd5\x08,6\xce\xeex\xbf%\xa8\x9b\x90\xd1*v?\x84w\xaa\x01\xef\xb7t\xbf}\x92mU\xc0*\x7f?\x926\x86\xa7\xa2\xe5d\xbfPB\x89"\x03\x84\x85\xbf\x05fm\x08\x80\xa4\x95?\xe6\x88Q\xee\xfc\xc4\x85\xbf\xe37A$\x0f\x07b?bS9O\xab\xbb\x81\xbf9\x0bR\x0c\xcfsz?\xb3?\x9b\x8d@us?z\xa0n\xdb1\xf8\x8f\xbf.\x00\xa1\x94\x91=\x86?\x10\xc1T\xe8\xf70\x88\xbf\x0e\x80\xbe\n\xa6y\x98?\xab=(-T\xc2\x88\xbf\x10\x01;\xe8\xf3\xf1\x80?\xc0\xcc\x81\xa6\x84\xc5\x97\xbf\x0e\x98\xc8d\x15\x99\x8e?4\xec\xbbV\x97\xdd\x84\xbfl\x83@l\xcb\x8b\x94?\xcd\x1a\xc5\x81\xff9\x84\xbf}\xa6\xfe\xb1\xba\xaax?n\xe3O/\x93I\x93\xbf\x8as\xa0\x05\xc9=\x8a?}`\xa9\x00\xe6jd?\xe5\xec\x84\xa9\xf4\xb8\x84\xbf=*\xb5Rv<\x7f?\xfa_\xe6\x8c\x11av?J0\xd9sI\xc6\x90\xbf\xd5/?!\n\\\x86?^ G)i]=\xbf\xe1\xe9x\xfbw\x83a\xbf\xbc\xcd\xa1 %/e?\x03}\xe8>>SD?\xdec]\x10M\x02w\xbf\x8eT\x80H\xe5wt?\xd1!\xc4)\'OC\xbf=\x03v\xd2\xc4\xc8c\xbfh\x0b\xe7\x9c\x8e\x9ch?'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp476
(dp477
g32
(I00
I00
tp478
sg34
S'float64'
p479
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg408
I01
sg54
I00
sg409
I01
sg410
I00
sg411
g1
(g42
g3
NtRp480
(dp481
g11
Nsg45
g472
sg40
g471
sg12
(itheano.gof.utils
scratchpad
p482
(dp483
bsg10
Nsg28
g476
sbsg428
I01
sg60
Nsbag1
(g403
g3
NtRp484
(dp485
g40
g323
sg273
Nsg407
g321
sg408
I01
sg54
I00
sg409
I01
sg410
I00
sg411
g319
sg428
I01
sg60
Nsbasg147
g1
(ctheano.compile.io
SymbolicOutput
p486
g3
NtRp487
(dp488
g411
g1
(g7
g3
NtRp489
(dp490
g10
g1
(g95
g3
NtRp491
(dp492
g98
(lp493
g1
(g7
g3
NtRp494
(dp495
g10
g1
(g95
g3
NtRp496
(dp497
g98
(lp498
g1
(g7
g3
NtRp499
(dp500
g10
g1
(g95
g3
NtRp501
(dp502
g98
(lp503
g1
(g7
g3
NtRp504
(dp505
g10
g1
(g95
g3
NtRp506
(dp507
g98
(lp508
g1
(g7
g3
NtRp509
(dp510
g10
g1
(g95
g3
NtRp511
(dp512
g98
(lp513
g1
(g7
g3
NtRp514
(dp515
g10
g1
(g95
g3
NtRp516
(dp517
g98
(lp518
g1
(g7
g3
NtRp519
(dp520
g10
g1
(g95
g3
NtRp521
(dp522
g98
(lp523
g459
ag412
asg12
(itheano.gof.utils
scratchpad
p524
(dp525
g15
g284
sbsg147
(lp526
g519
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p527
(dp528
g15
g309
sbsg28
g314
sg40
Nsbag349
asg12
(itheano.gof.utils
scratchpad
p529
(dp530
g15
(lp531
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p532
I231
S'get_symbolic_expected_rewards'
p533
S'theano.tensor.dot(self.get_hidden_output(),'
tp534
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p535
I170
S'get_hidden_output'
p536
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp537
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p538
I4732
S'dot'
p539
S'return _dot(a, b)'
tp540
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp541
asbsg147
(lp542
g514
asg149
g1
(ctheano.tensor.basic
Dot
p543
g3
NtRp544
(dp545
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p546
(dp547
bsg28
g1
(g29
g3
NtRp548
(dp549
g32
(I00
I00
tp550
sg34
S'float64'
p551
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp552
(dp553
g10
g1
(g95
g3
NtRp554
(dp555
g98
(lp556
g43
asg12
(itheano.gof.utils
scratchpad
p557
(dp558
g15
(lp559
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p560
I117
S'__add__'
p561
S'return theano.tensor.basic.add(self, other)'
tp562
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp563
a(g219
I533
g161
S'inplace=False)(input))'
tp564
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp565
asbsg147
(lp566
g552
asg149
g1
(g374
g3
NtRp567
(dp568
g377
(lp569
sg379
(lp570
I0
asg381
(lp571
I0
asg383
g58
sg384
I00
sg385
(S'x'
I0
tp572
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p573
(dp574
bsg28
g1
(g29
g3
NtRp575
(dp576
g32
(I01
I00
tp577
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p578
(dp579
g15
(lp580
(g532
I231
g533
S'theano.tensor.dot(self.get_hidden_output(),'
tp581
a(g535
I171
g536
S'self.bias)'
tp582
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp583
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp584
asbsg147
(lp585
g509
asg149
g1
(g183
g3
NtRp586
(dp587
g186
g294
sg188
g1
(ctheano.scalar.basic
Add
p588
g3
NtRp589
(dp590
g192
g298
sg153
g154
sg40
S'add'
p591
sbsg40
S'Elemwise{add,no_inplace}'
p592
sg153
g154
sg206
(dp593
sg208
(g591
I2
I1
tp594
sg209
(dp595
sg305
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p596
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p597
(dp598
g15
(lp599
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp600
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp601
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp602
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp603
asbsg28
g1
(g29
g3
NtRp604
(dp605
g32
(I00
I00
tp606
sg34
S'float64'
p607
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p608
(dp609
g15
(lp610
(g418
I82
g419
S'outputs=self.get_symbolic_expected_rewards(),'
tp611
a(g532
I231
g533
S'theano.tensor.dot(self.get_hidden_output(),'
tp612
a(g535
I171
g536
S'self.bias)'
tp613
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp614
asbsg147
(lp615
g504
asg149
g333
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p616
(dp617
g15
(lp618
(g535
I171
g536
S'self.bias)'
tp619
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp620
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp621
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp622
asbsg28
g1
(g29
g3
NtRp623
(dp624
g32
(I00
I00
tp625
sg34
S'float64'
p626
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag480
asg12
(itheano.gof.utils
scratchpad
p627
(dp628
g15
(lp629
(g418
I82
g419
S'outputs=self.get_symbolic_expected_rewards(),'
tp630
a(g532
I232
g533
S'self.label_weights) + self.label_bias)'
tp631
a(g538
I4732
g539
S'return _dot(a, b)'
tp632
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp633
asbsg147
(lp634
g499
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p635
(dp636
bsg28
g1
(g29
g3
NtRp637
(dp638
g32
(I00
I00
tp639
sg34
S'float64'
p640
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp641
(dp642
g10
g1
(g95
g3
NtRp643
(dp644
g98
(lp645
g319
asg12
(itheano.gof.utils
scratchpad
p646
(dp647
g15
(lp648
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp649
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp650
a(g219
I533
g161
S'inplace=False)(input))'
tp651
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp652
asbsg147
(lp653
g641
asg149
g1
(g374
g3
NtRp654
(dp655
g377
(lp656
sg379
(lp657
I0
asg381
(lp658
I0
asg383
g328
sg384
I00
sg385
(S'x'
I0
tp659
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p660
(dp661
bsg28
g1
(g29
g3
NtRp662
(dp663
g32
(I01
I00
tp664
sg34
g329
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p665
(dp666
g15
(lp667
(g418
I82
g419
S'outputs=self.get_symbolic_expected_rewards(),'
tp668
a(g532
I232
g533
S'self.label_weights) + self.label_bias)'
tp669
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp670
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp671
asbsg147
(lp672
g494
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p673
(dp674
g15
(lp675
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp676
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp677
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp678
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp679
asbsg28
g1
(g29
g3
NtRp680
(dp681
g32
(I00
I00
tp682
sg34
S'float64'
p683
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p684
(dp685
g15
(lp686
(g20
I76
g18
S'self.initialise_theano_functions()'
tp687
a(g418
I82
g419
S'outputs=self.get_symbolic_expected_rewards(),'
tp688
a(g532
I232
g533
S'self.label_weights) + self.label_bias)'
tp689
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp690
asbsg147
(lp691
g489
asg149
g1
(ctheano.tensor.nnet.nnet
Softmax
p692
g3
NtRp693
(dp694
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p695
(dp696
g15
(lp697
(g532
I232
g533
S'self.label_weights) + self.label_bias)'
tp698
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp699
a(S'/Library/Python/2.7/site-packages/theano/tensor/nnet/nnet.py'
p700
I359
g161
S'return Apply(self, [x], [x.type()])'
tp701
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp702
asbsg28
g680
sg40
Nsbsg408
I00
sbsS'mode'
p703
g1
(ctheano.compile.mode
Mode
p704
g3
NtRp705
(S'cvm'
p706
g1
(ctheano.gof.optdb
Query
p707
g3
NtRp708
(dp709
g40
S'OPT_FAST_RUN'
p710
sS'require'
p711
c__builtin__
set
p712
((ltRp713
sS'subquery'
p714
(dp715
sS'position_cutoff'
p716
NsS'exclude'
p717
g712
((ltRp718
sS'include'
p719
g712
((lp720
S'fast_run'
p721
atRp722
sbtbstRp723
(lp724
g1
(g46
g3
NtRp725
(dp726
S'provided'
p727
I1
sg40
g406
sS'required'
p728
I01
sg49
(lp729
Nasg409
I00
sg54
I00
sg55
I00
sg28
g425
sg60
Nsbag1
(g46
g3
NtRp730
(dp731
g727
I0
sg40
Nsg728
I00
sg49
g108
sg409
I01
sg54
I00
sg55
I00
sg28
g115
sg60
Nsbag1
(g46
g3
NtRp732
(dp733
g727
I0
sg40
S'W'
sg728
I00
sg49
g353
sg409
I01
sg54
I00
sg55
I00
sg28
g355
sg60
Nsbag1
(g46
g3
NtRp734
(dp735
g727
I0
sg40
S'b'
sg728
I00
sg49
g50
sg409
I01
sg54
I00
sg55
I00
sg28
g56
sg60
Nsbag1
(g46
g3
NtRp736
(dp737
g727
I0
sg40
g471
sg728
I00
sg49
g474
sg409
I01
sg54
I00
sg55
I00
sg28
g476
sg60
Nsbag1
(g46
g3
NtRp738
(dp739
g727
I0
sg40
g323
sg728
I00
sg49
g324
sg409
I01
sg54
I00
sg55
I00
sg28
g326
sg60
Nsba(lp740
Nag110
ag354
ag53
ag475
ag325
atRp741
sS'output_batch'
p742
Nsg102
g109
(tRp743
(g111
g51
(g52
(I0
tS'b'
tRp744
(I1
(I624
tg113
I00
S'\x7f\xa4UQ$\xc8t\xdeb\x05\x93\xce\x1d^\x97\xd2K\xbb\xb9:\xdf\x8aBF+\xdb\xbe\x9d\x97w\xb8\x92U\xa4\xe3\xe3\xcb\xd0\xdet\xa9\xee`\xe2\x82w\xe0\xd5\xa1\x0bn\xa0\x0fh6o1m\x88\xab\xb0\x1e\xad\xf6\x11x\xa5\xfakf\xdcj\xda\x8f)\xecWG5h(iN\x08\xeaX\xb6x\xdbx\x0c\xa6\xd6\x86h\x7f}\xff\x02\xe1\xcb\x1c\xd7\xed[\xc4\x19\xf1U\xd9[*\x05\xd6\\\x00\xb2\x0b\x95z\xfdo~^\x14\xa0~\x8fjp`\x97\x1c\xe4\xa28\xb6\xafj\x15\x82J\x1a\x97\x83\xba\x90\x97gj\x89K\xc8\x19\xa4rU\xc2\xd1%\xafE\x87\x82\xbf\xfc\x80\xa2\xa8\xdb\x89\x949\xcfN\xb8\xb8\x8a\\#7\'"G\xf5\x11o\xeb\xe1\xea\x88r\xcbBPUF{\xc4\x17\xc2\x92\xc6\xbe\xe4\xd2\xe1\x1e\x81\x9dM\x8e\xf3|P1\xcd\xb8\xea`(\x95\xe6\x97)\xd9MNq\xd3I\xb7x\xd0\x88;\xb6\xb0\x13\xa8\xb0\xa9\xe2\xef5<]\x0e\x14X3\xcfY\xb62\xd65u6\xffKP\xf80\xacz\xaa\xa5\xdc)\xc8\xca\xab\x155\x93<q\x9e\x8e\xec\xdf\x9eT\x1d\x9a\xd6\xc9\xfaP\xd6vPQ\x8bR\xab?\x04\xec\xd0\xbd\x8e\xfc\xde\x18\xde\xa3+-!\x18\xe8 B\xc6\xd0\x9f\xedd\x884\x03\xc4\xf0\xf1UnHT\xc2\xcb\xe9b\xa9*,\xa7\x94\xa6\x10\xb7Z\x14\\%+\xed\xb5\xff\xd6\xd3A\xff\r\rn\xe0\x12E\xaay\xf2f\xa8\x95\xce\'\xe7\x1f\xca\xe4|\x13Yb\xdc\xe8\xf3{\xb8\xcd\xd2\x9b\xb6>?\x14%\xff\xf4\xcb\xa5\x00\x0b\x92FL\xb9\xf1\xe2\x08\xd2\x10\xca\xac\xc61\xff\\\x8a\xf2\t\x10\xbfwG\xa4\x11+\xe3\x8f<?#x\xbak\x1b|(h\x00\xf2\xd7\xccL<k\xf4\x0b\xd5\xe8\xd7\xef\x9aG\x1d?\x8bC\x7f\x8f\x06_^\xddwL\xf9i\xb0\x8c\xa50\x98\xda\xd2f\xcc\xc5[z\x8a\xf5\x92\xab2\xf49&\xe0ue\x9f\xe9\xc9u\xbc!\xa6\xa1|BB<\xa4P\x12\xbc+\xee\xdaqDv\xb2@\x16\xb1\xe8\xc0I6\x8b]\x8c*\xac\x04|\xc5\xc2+\xfe\xe0\xd1\xfa\xbeFin\xcb8\xe0\xd6{Z\xdaA\x94\xc7&\x8d\xfb\x14\x0b\x0f"\xe2\xc3\x12\x88\x07\xd4\xdb2T\xd2d\xf4 \xf4\x04d^R\xe1H\xf3J\x80g\t\xdb\x0c\xe2!\xdf@\x9e+9e\xfc\xa4\xd8\xfb\xb9[iwB\xda\x1d\xe6\xdd+\tL\xc1\x80]/X\x18\xa9\xbb\n\xd6M\x8c1\xd6e>\x89\xa7\xab\x9a\xaa\xea\xd6#Q\x15\xe4I\xac@\xfd\xa5\xe6\xabAP>\xb7\xd7\xcf\rlf\x18R|\xde<\x871N\xd4yM\x0cY\xe2a9\xcf\'\xbco\x19\x01]hs|\xb9\x19\xd9\x80>\xfd\x12F\xec\x13\xd7\xe4\x91,\xd2t^RF?`rq\xf7\xf6[\ta\x1a\xa2e&\x05\x0e~\xaeane\xba\xd44]\'o\xac-h\x15\xde\xe6\x89S\x8epx\x13\x05K\x98\xfat9>H\x98\x0c\xf4\xc9\xd1\xff\xe1C\x07xf4fs \x9a\x18\xcf\xc7\xcbZ<\x1c\xfd\xfd\xfb?$\xf0HcF\xb1\xe2\xf2\xd6O\x1cXZ=\x93$V\x08A\xf2\xe7qM\x1c\x9c\xedt\x81\x04F`\x84?\x10\x93\xb6\x18\x07\x8c]\\\xfc\x96z\xc1\xdb\x17b\x9b\xf2\x7f\x8a\x9c\r5\x8e\xf05\xc5f\xe7\x98\x1f\xfa\xf71\xed\xb1\xae=t\x1c\xb7fM\xa7\xb8/2[{\xfe5Q\xbc\x99\xfb\x02}2_\xcc\xa4\xb4\xab\xc7\xb4\xe7l\xadJ\xfc\xb1\x0bf\xdcQ\x90\x0f\xa1|\xc9\x94\x13\x02\x15\x9d\xde"\x9d@\x97\xb3?\xa0\xa7\xb6\xb8B%\xa9\x88\xe6+\xe2\xffcp\x0c\xd5\xfa/\xe6\xf2h\xc2\xfe\xb4\xf2\xc1\xe18 f\x16V\x93\xa2w\x9bb\xa5f\xec\xbfa\x17j\xe6K\\[\x05\x8bv\xaf\xeb\x87\x1d\xa5\xdf!$ \x96\xac\x95\x18\x0b\xc8\xd1h\x80\xd2\xccT\x98\xd12\x96\xa2\x06~\x93j\xddjfrb\x16>\xb7\x91\xd1%sX\x15u}\x8b\x9f\xed\x122\xe7&\xe4K\xe0V\xb4s\x16f\xd7wc\xd5\xe0n6=\x17o\xa4\x89\xa9\xa4\xd0\xe4\xf0\xf6E\xb8\xfa\xa3E\x8eU\x92\xef\xc3;g\xef\x8e\x88\x1f\xdb\xd9Y\x1c\xa0HqF\x0b\xbd\x14%i\x1a\xe5g;\x95>\x8eC\x94\xdc\xe1\x9eF\xdf\x88\xe0\x8d\xce\xbb\xc6"U\xeb\xa5r\xe29+\x9d\xcaYw\xf5:\xb3p1\x86\x01v\x87\xe3\xe1\xa5!sK\xa3\x85i\xf7\x91YC\xa8`\xe3\x9ffQ?\x1a\x11,sW#\xd9\x14\x9e\x8c5J\x0f\xe1VL{[\x0e\xf9\xbc\x0f\x144\xcaU\x01\x90j>\x0c\xeaJ\x85\x02\x0e\n\xe7L\xcb\xc9=\xde\x1c^\x08\xba\xfc\xd9\xa1k\xbeE\x8d\xc4\xea5\xde\xbaG]\x04\xdd\xfe\xc9\xea\xd2z\'-\xf7\xca\xe5e\xcd\x83)\xd9\x03\xde\xfeC\xf82\x02\x8e\xcb-\xcfM\x9a\x9b\xea\xf1\xd7\x04OS(\xe0\x9aH\xf8\xb4\\\xe4\x02\x04H\x10\xaa\xa3<\x07\xc45\xb8\xd4\xe0\x83\x05\x8e6]\xfa\xaeh\xc0u\xd8\xb2\xe7\xde\ro#\x88\xc7Ju\x9d}@\xad\x08\xfaDP\xc1B\x04\xec~Q\xea\xc0\xe5K\x14K\xe1\xdb\xb0\x1e*sb*\xd5@\xc0?k\x8d\xa6\x84\x05\x1fV\xf1p\xaa\xb6p\x16\x99P\xdfq8\xe6\xaf=Z\x96\x92\xe2\x93v\xddx\xe6+\xc0\x96\xcf\x16\xcb$R\xcd(\xa9-\xc1\x10A\xeat\xcd\xa8\xd5\xcf<\x92\t\xf4\xa4.\x9b\x86\xb2\xefu:G\x18\xc6\x18/\x81~\xc1Gl]\xb4\x17\xf5j\xe9\r\xcb\x03`/\xe7"\xd1\xd8\x97\x90\x8c7B\xa1Fgc\x13\x0cWJ])\xd3"#P\xcc\xdb\x80\x82\x0cU\xe8=D\xdbJ\xae4\xc7\xc5\xaa\x97\xde\xcd7\x97\x8eV|\x01\x7fLP>^q\xc7\xf1\xdeu\xec\x90\t\x7f\x87z\xde3\xa2\xf2\xaf\xe9\x923\xfa{\xef\xe1P\xd4\x84o\xf97Z9\xff#\xd4G\xdc\xed\x90\x16F\xbe\xf1\xea/\x10&\x97\x96_\xb84fLm\xe7\xc1\xcd-U\x89\xbf\xb2o\x1fC\xbd\xdbpalOL\xc5\x067$K[\xcdE\xf4\xc662\xd4\xdf\xdc\x0b\xe1\xf4OU\xb6\x82D\x85\x8f\xad\xd3C\x81\xd5\xec\xdba\xc5"*A\xec\xb4\x15mN\n4?\xc2\xebUn\x18Hm\xc5\xee\x1cmy\x87\xd8\xd6\xa7\xd3\x8d\xee\xe7t\xf6\xfd\xdf?Z]Y\xbc\xfa\x06\xa1\x82\xd5\xfc\x88\xba\xf3\x02\x15O\xd3\xad\x94\xf9 \xf1\xcc\x9dS\r\x8a\x9b\xdaOA\xccA\xd1t\xb1\xd3\xf6z\t\xd2n\xcfT\x8b\x9a\x9c\x0c%\x14\xa9vk\xe1\xde\xa9\x17\xb1a!\xd3\xe5p\x1c\x86a3\xa5m\xca\x1c%\xee\x004\xe6\x1b\xb9\xdf\x83\xfa\xa9v7*\xd0(h\x86\x11\xc5GV\xc3T\xf7E\xfe\x921\xfa\xf3\xbe\xf7v\x91\xedV\xebNz\x9a\x10\xa5\x94\xdcc#\xed\xd1\x17#\xfer&\xf0\x08\xf6\xa9\x14@\x99\xebM\x91+!_\xef\x91\xd6\xcd("\xbd\x87\xae\xa0)\x1d\x1c\xe4\xb2l\xbdMU\x7f?O)r\x9a\xe0\x1c\xe4\xf8\xfeSAP\xab\x1c\xfc\xd6j>\xce\x9d\xbf\x95\x1eAL\x17[\xab\x9d\x1e8JE\xbcV\x8c\xef\x9d\xa1o\xeb\x03/{\x91\x19\x8dA\xec\xe8xML*+\xe9?4\x13\xaf\xe9\x81J\xa8j\xd6u\xdb1pv\xc9F\x04\xb9x\xb1\x10\xf4*U\xb1\xc5\xec\xdb\xda\xf2\r=\xfaD\xe93\xb0\xf7\xbaz\xb8\xe0S{tE\x8a!b\xc8\x11\xfe\xb0\x879\x8f\xd8\x05$\xdf\x12\x1b\x1f\xba\x9c?B"$2\xe8\xb4\xe5\xbe\x97j}\x8eH\x9fZ\xc8\x13\x03b\xe9"\xea\xf3\x92@\xa1\x901\x11~\xb6\x10\xa6\xa8+\x1d\xe5\xa1\xf9h\xb7>+\xea\xc21]\x1f\xa8\xe1\xf9\xbd\xdf\xaaa&9\xfb\xdbb>\x92\x07\xb1\x02\xa0\x97@\xcc\xc5\xeb\x16>\xb2Q\x87\xde\xe4P\x01\xf4E`c\xee5\x15b\xd1\'{\xa0rA6F&,}~\xd6}\x8d\x8c\xbfmf\xd6\x00h\xa9\xec\x9a\xcb\xbc\xb7\xcf\x10\xc4\xf2\xdf+\xae\xe5\xf6#\xdd\xf2-6\xa5\xf0\x92g\xab\x11 \x87\xa40\xa4\xea\x0f%\xbe\xa1\xf8\xac\xcf\xe5V\x87\xb3\x8bW\x1am$L\xbf\xcf\x18\xad\xe3\n\xd2\xaba\x1a\x1b\xa2lr\xc3U\xd7H\x18\xc3o@\xb9\xcbd\x01\xa8<\xa4\x96\xea<\x83<\xf8h\xa0\xee\xd1\x07\x89\xc9\xe0\xb6\xd2\x17\x8d\xd2\xfa6\x12\x94&q\xe9\x15^\xf8\x13\xecd\xa3`\x1d\xe3\x07\xe9\xebc{\xae\xaa%\xb0\x81\xed\xf7\xbf\xaex\xfe\x87\xb2H\xc7\xbc\xe6\xa6\xcf=j\x15\xbd\n\xae\xeb\xf8\x81\xd1\xc0\x87\xafT\x01\xe2\x1bO\xd58\xbaz\x1a\x98"\xdd\xe1\xd4$\x02\xa6\xfa\xe7(\xeeX@\xab\xde,jT\x85\xe9\xa8\x8c+Q\x88l\xa7\xd5|7\xcc\xbb\xd8M\xb8%\x97P\x12\x1e\xe0D\x9c\xf6\xbf\x92KU\x8c\x10gc\xed\x93\x05\xea\xf0dS\r\x05N\xbf>4(a{i\x9b\xec\xf8h\xa0\xd4\xb6z\x91,\xe0P|Z\xa5!\x8c\x8a\xd5\xba>5\x07h_{\xf9:\xcb\x80{\x9e\xcc\x8f\x95\xa9\x9f\xa2\xb3\x9b,&\x89\x10\xcd9z3\x8c\x93Lk\xbb\xc0\xc0\xab\x9e\x17T\xa0\x85\xe2\xfa"/\x9bU]\x14;\x10\xccs\xffd|nm\xc3\x83\x8b~\x9d\xaa\xf7D\xe00\xf5\x9a\xd8\xd2\x12\x17\xdaB\xbf\xdcDt\xe6\xee\xea\xe7\x04\x81\x17\xec\x15g\xe5\x04W(\xba\x18\xdcx\xc5\xd7\xda\x1f\xce\xf3\x7f5\x13\t\xe2\x88C\xce\xd9\xfc\xa40\x9c(\x1e\xc5Q]9\x10\xef\xb1\xeb\xa5ZU\xa2\xd1j2\xb0\x88\xf2\xb4\xa1\r\x9d\x14F\xa2\x81\xba\x0fa\x01?p\x9f\x0c\xad\x8e\xbc\x9d8\xe3BfS\x93\xe1\xcd\xa1d\x81\tW\xc2\x9f\x93[\x04FI\xb8C\xf8\xc0\x84\xde\xa7\xe85\x90\x06T\xe1*mKm\\ ;\xd8\x14h(-\x0f\xaa\x8fD\xe7\x803\x0e\x05\'\xa4\x1cC!i\x00ev\x17\x07\x00\xd6\x86w\xf5\x9f\xde6\xfdU\xb0\xe4\xbc/\xb3\xea\x9fv4\x8a\x0e9<\xb0\x88N%\xe9\xcf\xe0\x99\xad2\xfa)\x7f\xdc\x9d\x12\xff\xbdu\x84\xc9\xc6\xb6\x83\xd1!I\x1e\xa6\x06\xfb\xde\xad\x9eZ\xce\x95\x88\x92~\xe5\xa0\x8b\x96E3\xdc\x1e:-\xe3}'
tbI313
I0
F0
tbsS'hidden_dimension'
p745
I429
sS'output_dimension'
p746
I3
sS'input_batch'
p747
NsS'theano_rng'
p748
g1
(ctheano.tensor.shared_randomstreams
RandomStreams
p749
g3
NtRp750
(dp751
S'state_updates'
p752
(lp753
g274
asS'gen_seedgen'
p754
g109
(tRp755
(g111
g51
(g52
(I0
tS'b'
tRp756
(I1
(I624
tg113
I00
S'\x9d\x0c\xed\xf3\xb4e\x9e\xbd\x8b\xbe5\xa6\xdb\xaf\x82\x93\x1b-\xee}-\xf9\x1e%\xf8u\xc0\xbd\xa6\xe1:\xf1\x9d"\xb5\x92;X\x83\xb3\xb9\x94\xdf\xe5``<\xf2%\x03-)\xd1O"\xa7.\x8c\n\xcf!\x1e\xea\xc0\x8f\x81\x8e\x06\xeb:\x11\x8a\xd6\x13m\xed\xc7\x1e}W6\xeb$\xaa\xc7/\x82\xba\x1f\xb7\xab\xbe \xcf br\xcd\xc3\x10\x1e.\x81\xe4)\xbc\x8e\xa1\x88\x83v\xa8\xea\xbc\xe0(!@\xeb\xa5>_\xa1\x92t\xa08_\xba\xf2;\xa2\xb7\xb8`\xca\xe6\x8dRJ\xc9q`\x1dx\xba\x7f\xcc\xbe[\x88\xe5\xd6\xff\x03U&h\xe7&0\xb03\x7f\xb3\x1c\xc5\xf7\x82\x03F\xba\x83\x95\rv=\x8eQ6\xc9\x8a\xab\x96_V\xf2\xfcT\xa2m\xbf\xb6<\x0f\xba\x82\xa8PmpWr\xecQ\x98\xc3\xe2\x90\n\x0f\x93\x13\xc2\xa0\x91\n\xa6\xf5\xdd\xd05P>3\x84\xdb\xb8\xf8\x1a:\xb8]\x88\xfc\x0e\x93$\\~\x9a\xac\x82\x90$\xbeD\xe2~k\xc4\xda\xady\rsh\xdb\x0e41u\x9b\xcel\x0f\xe3\x81\x1c\x18\xc1\xcfU\xdd>.z\x06+d\xb1j\xa4\x81\x9f\xb1P.#~3\xa3#}4e\xa4X9\xa6d\x85\xad\x99:\xffB\xf2V\x0f\xd8\xf8P^?\xcb~J\x1e\xde\xb0Z\xf9\xa8\xae-wr\xc0/\xae\xdc\xf5\xee6d@X\xa3\x1b\x97`%\xe9\xc9~\xe5\xb4\xfb\x19\\u\x0c\xddyQ\xd2\x99\xc58\xeb\xa9[\x9c\x83\xc1\xce\xea\x04\xd6$\xa9D\xe1\x13\x81\xc7\xbb\xc8<\xa2n\xa5\x82\xda$>\xd3ma\x8b\x1aa\xd1\xb1\xbay\x0c4FP_\x94\xa7\x0e?\x10\x96\x04\xcc\x87\xb7\xe2\xfc\xad\x91\xed\xe0u\xfa\xe4\x97\xa5M_J\x11\xcez>\xb2IM\xa5^f\x0fi\x0bI\xe1\xd2DJ\xd0J\x9d\x95g\xff\x84Un\x96\xddoR\xe1q%\xb1\xa8\x17\xb9\x82?\xb910\xb5H*I1uN}\x92o\xc8\xc5?N}O*\x1d<\x90-\x11\xef\xec\x0c\x05\x99B[\xc2\x1e>\x0e\xc8\xedh0\x01\xb4\x13\xb9\'L\xa2tI\xf5\x19\x0f\xd7\xcf\x0f.3\x92+\xe6\xceD\xa4?<\xf4"\xf2\xd8\xd9\xc3\x8f\t\x99u\xd3[\x90\xff\xfe\x89\x04\xe8\x1d\xee\xe7d\xad\xe1M\xd2\x9b\xf3\xad#\x9c\xc7J\xe0\xe75\x8dy\xe4\xa8cI\xdb\x1b(\xf7\x96\xefXv\xab\xf4\xeb\xdeZS>\x14-$J`#\xba\xc9lZ"4\xb1,\xc6\xd9\'\xda<\x89\x99\xb1\xf8\xd70\xc1\xdd\x97\x87\xa6\xa3\'\x04\xa9\xfe\xc9\t\x02Dmu\x03\xeb\x84T\xaa\xef\xf7_\'\xacoK!7\xa1\x9c\x12vV\xbd\xf7n\x89Q\xb1=\x9a\x93\xcf\x1c\xbf\x98\x0c\x91\x8a6\x8b\x87\x9c4\xa6Q\n\x137?\xe6%\xc8\'f\x81\xdd\xdbD?~&\xc0\xd7n8\xd8~\xc9\xaf\x08Y4b!\xa0\xc5\xf5\x06\xbbjO\x9dT\xff\xb8\x86\x14\x1e\xe8\xe2$8f,7\x86\xd2\x13\xce\xfb\xd8\xe7g\xcc\xb7z:!\xf9LJ5\'|\xb6p\xcbj\xef\xbb\xa9%)\xc4Y\x8c\x10\x84\xb9y\x1cC!e\xab\x9a\x12\x11\xa2\xe7s\xd6\xe6\x01\x91\x16\x1d0\x90\xd6\x0c\xad\x05\x94\x95\x92\x83\xd3\x99\x8e\xd1\x04\xf3b\xe0\x10Q2\x80\xe7\x9fQa;07\xaeu\xbd\xbd m\x82\xea\xf3\xe7\x16}\x17\x7f>Z!\xe4\xe5\xcd\x124\x83m@\xa4@\x81&\xfc\xa7\x96@\xfd\x88\xd0\xe9\xf8\x89\x07\xfd\x1b\xb3\xb6\x02\xf4`\xcf\xa0DD\xc46c\x83\xaa\xc7\xe2\x11#\xc1a\r2\xd2\xdf\xbc\xc1e\xc5\xb7\xd7\xab\xb7\xc3=p>R\x90\x1c.H\x08\xd4\xe1Q\x0e\xe4CYN\xe8o\x04\xd9\x13uN\xbd\x8a\xe7~.-\xc1D\xa7\xdc\x14\xbb\n\xb1\x05c\x98\x0c\xd0\xc8\x7fC\xdf\x95\x94\xa04-\xf5S\xc8\xf3\'h\xfe\xb5\x10\xafO\xca\x89i\xc3\x80w\x91qd\x91C"9\xaa\x9e\xa0\x15\xee\xc7IQ\xdd\xdb\xf4pZn\x91qO\xf0`\x0fz\x87t\xf92\x02\xd2,I4\x86\x17m\xb7A\xba\xea\xae\xaa\x05\x8d\xa8{\xfb\xe1JbW\xe2>E\x13\xa7\xb2\xd89\xee\xd9\xd0\xd9\xe6c\\\xf214Ys\xe4\xc0\x07\xb1\xda\xb4\xb0oT\xfe\x80\xdd\xc0\xf4\xd1\xa7k@\x1e\x19\xddu\x03\xf3NC\xd8!\xfc\xeb\x05t\x9f\'\xd3!\xe1n`~_!\xc7\xe0\x01B}\x94\x01te\xf3\xcf\x10\x1d_\xd8\xbf\xeb\xe4&M\xe20\x8a+\x98t\x83`\x03\xca\x02\xdc6:\xd2\xe0\xb5F\x05\xf5\xaf\xc2\xcd\t\xa2W\xc4\x82O\xed\xc1&Q\x0b\x05w\xb4\x12\x95Q\xfcq\xb7,N\x89\xed\xecO\x14\x03gNAg\xe7\no\xa1\xebF\x05\x97\xd9\xe9\xef\x84\xd5hY;\\C\x05\xb0B\xc0j\xa2\x03\xed\x0b\xb6\x85\x95\xcddH>\x91\xcb,\xcd\xa7\xb5\x86K\x95\x06\x8e\xf1g\x10\xc0\x07=\xa0\xf0C=XcA\xcej\xcf"K\xa5\xf8\x1e*&M\x077\x8ax#\x03\xf7\x98\xb89\x89#.4f;zZ\x81%0\x8c\xee\x87\xd8\xf0\xabW"q~\xe1\xc5Z\xaa\xe7\xeb|FC\xfa\x8e!\xbc)\xc4i\x81ZS1?\xde\x9d\x0b2Ic\x9ec\xe8\x83\x18M11b}\x01\xa5)\n\x8c\x9c)\xd1\xb0\xe8(\x88\xfa\xcb\x82\xe9\xd2\xd5S\x82\xc8\x9a\xa6\xf0\xf5\n\xba\xdb\x92Q\xecU\x05<\x87>\x90\xfd\xcc \x83\x80\x86\x05\x89\x8e3J\x83J\xcb\x04\x913D*.G$\xe0\x1f\xa7\x16\xf0M\x94\xc1]V\x9cO1\x13I1\xdeC\xfeC\x1d\x0b\xb4\xde\x8a\xbcz\tG\x9f\x90\x9f\xbc1[\xcd)\x1d\xb2\xcd\x9frs8\t\x86\xd7e\\-f\xad\x9b\x9f5\xf0\x99\'\xce\xe0\xe9\xa18\xc7\xb7}\x1c\x97u\xf8\x8fP\xbe\xa9+\xcehu\xa2\xdfS"[E?\'L\x9b\xa0+\xa3\x83\xe1\xfb\x17J\xd5\x1a\xafKK6\x01Q\x0cp\xab\'\x00\xe0hj\x945\xd3\xa8\x82\x1d\xe0\ru\xffA\xd6\x06b\xe77\x01\x84d,8\xb5\xa5}nQ\xa9\xe7]\x12?\xe2c\xee\x80k:\x06\x913\x8e\xd3\x1c\xf3\xdc\xf1,\x7fzF\xfc\x12\x08O$|\xba\xd1Fi.\xcf\xd7\x01\xdf\xd7\x98c8k\x9a,\x93\xbd\x90\x93I\x8fX\x9f\xbf2\x8e\xba\xda<\xedf\x14\x15\xb9#\x16\xd5i\xb7\x10\xf3R\xb9S\xf1\xda1j:\xa7\xd0\xc1h\xde\xbew/\xda\xac\xddS\xb3\xdb\xf1Y\x18,F"vF\x88\x84\x81\xd2\x83\xe8\x8b\x0fm\xe1\xd9N\xc6\x84\x17\xca+k\x97\'P\xc9\xc7&|\xfdN\x84SPG\x9aRH\x17\xcb\xb5\\F\xd7i\xa3\x1a\xe0\\\xa2c\xc8\x0e<\x0f\x8f\xc7ji8*q[\xd5A\xdb[%\xd3\xad5\x96\xebP\xf3u\xe5P\xaf\xb6\x9a\x12\xc9\xcfP\xc7Q\x1a\xc2^\xcfw^\x9b\xf6\nn\x8d\x115\'3DD!\xe0{4\x07\xae\x83\xef(\x0e\x16\xf4\xe5[\xaa\xff\xe6\xf6\xba2\xe9\xfel.#\x8a\xa2\x96\xcc\x0f\xd6\xea\x8a\xc54\xeeNc\xadA\xd4\x91\x00\xff\xbd\xc8/ \xfd<\xce\xe5\xc0\x87E\xb5qm\xdd\xacs\xdc\xe2\xdcZ\xfac5\xda\xf9y\xe1\xe3\\\x88\x91\x9d\x02\xb7(k J\x0b\xc3\xf6\x1e6\x91\xcb\xd5\xc6\xa6\xf0\xfe\xdd\x02\xb57U\xb2\x05V\xbeH\xe8\x8b\x11r7\xe2\x15\x0c<\xb7\xee@\x1f\xcf\xd1q\xb6u\x1cm\x7ft\xf58":\xbc\xab \xc9-"R\xe5\xf5\xce\xcf>\x19u\xc4\xcbc^\xa9S\xa1\xc4V\xf5\xd8\x1ff>\xcc\x82\xc0"\xa1\xd4\xb7w\xd1\xa4\xec\xd5`\xc2;\xb0\xf2\x9d\xcb\x8auNG\xe9|\x1f\x181s7\x7f\x1f\xe3\xf7+\x00)\xeaP\xfa~WIo\xc1\xb8\x8c{H\xa2\xb6\x96\xce\x81\x1fX\x89\xee\xe7\x00\x8d<\x992F+\x80\x92\xa2m\xff\xf2\xc4\x13_\xa6av\xf2\xb6N\xbb\x14"\x02\x15kB(\x12\xc3Z{\\\xec\xd3\xa3M\xd74\xb2~|\xe3\x80\xd6\xe0\xe3\xfcNW\xcc\xa8@\x152\x80\xbb8m\xc44\xf6\x9c\xc1V\xfe4\x15\xd7E\x9d\xac\xcc\xf1\xc6\xe7\xe9\xd3\x14\xe3X\n\xc7l\xb3\x02E-`\xa6\xe5\xdd\xc6x\xbf\xf5\xf3{\x15\xbc\xf5\xf5\xee\xdc\xc3\x8aK\x8d\x1cqA\xcc\xa4\xfd\x84\xe4xr\xa7\xbc\xc9eFzxA_\xd7=fD\x80\xc9\xe1\xd6\xc3\xf2\xaa\x19\xaeg\x84\xb2\xf4m\xcb\x1fY\xe5\x04\x16\r\r\x0b\xe3\x95&\xcf\xd7\xfb/\r\x8d\t~\x9c\xca\xba\xc0JFA^6\x9eJf\x9c\xf1\xf7\n\x9ek\xb6\xe1\x01\x0b\x8b|\xa1\x01\xa9\xfb\xf2\x17\xf2\x877\xbcZT\xd3p-*_U\xad\x91q\x0cU\xc4\x03\xd0\xaa\x10\x9d\xde\x0e\xa3j\x17\xbb\xe0\xad\xf1\x0b\x11\xf5\xd0^Ppy\x81\xa4\xaa\xd2E\xb9\x90\xaa\xb2\xa2!\x14\x9d\xe0B\xc2\x0f\t\xdf\x1d\xb4\x8c\x9d"k\'\xa7\xaa\x14\xe33Y\xe5u\xfd-\x93\xa7\xa1@\xd3\x98\x08\xbf\xd5\x1a\xbc\x80\x022\x88s\xcd\xcc@a\xe1\xb01\xc8d\xb4\xcd\xa6\xed8\xa4\xf5\xa2\x97\xbc\xe9\xff;\xdeZ\xb6\xe1\xef\xec\xec*@\xcaG\x02\x9f\xa0l\xc2\x8e\xfa7\n\xc2\x86\xffq\x17P\x83nM\x80\x0e[\xf7\x90\x1c\t\x8c\x9c\x82\xc9\x85\'?\r\xe4d\xa0\xdf\x96\xb1\x15\xc2\xf9o<\x12\x99+\t\x0e\xa8fo\x9d\x11\xa2\xdfY\xe0\xfc5\xab{E^\xacW\x9ed\xd7\xfb\xe6\x0c\xcfe\xbd\x80\x07\xce\xee\x03*\x90\xc6n\xd1\xe7?\xd9\xde f\xcb\x7f&+\xa7h\xfb\x84\x95d.)A\x8e\xb8\x03l`e\x18:\xd9L\tMC\x0bs\x0f\x9cw\xd54\x048\xb6\xd8\x95\xe5\xf7\x89\x02h\x9fg\xb1\xc65\x84-3\x0bx\xf75\x97AG\x84S\xf9\x06\xfc\xb0\xca\x83\xccs\xd6\xa2\xdf/K\xf6\x02\xa8\x0eW@o%mw\xbc5_\xc4\xfc\xb3\xe1\xfa\x1c\x86bQ\xd4\xa6k\xcda\x83a\xd1k\xbcM\x97\x1fN\xfc\xe4Nb\xbc\xbd\x9e\xbb\x9e\x8a\x89\xe3A8\x11~q\x03\xa1v\x1e\x1bq\\8\x9f\xe3\xcdw\x8d?\x0b\xc1Ik5!\xd5\x99\xa5o0\xf5\xd6\x1fy\xfd\x04\xbc\x18\x10\xfe\xbdO(\x89\xca\xda\x1anxP\xfb1m\x1b\x0eM\xb2\xa8\xf8o\xd6$F\x88\xf4\xa2Hx8$'
tbI1
I0
F0
tbsS'default_instance_seed'
p757
I263988290
sbsS'label_weights'
p758
g480
sS'input_dimension'
p759
I20
sS'corruption'
p760
F0.5
sS'weights'
p761
g349
sS'train_model_once'
p762
g395
(g396
((dp763
g398
Nsg399
g400
sg401
I00
sg98
(lp764
g1
(g403
g3
NtRp765
(dp766
g40
g406
sg273
Nsg407
Nsg408
Nsg54
I00
sg409
I00
sg410
I00
sg411
g412
sg428
I00
sg60
I01
sbag1
(g403
g3
NtRp767
(dp768
g40
S'av'
p769
sg273
Nsg407
Nsg408
Nsg54
I00
sg409
I00
sg410
I00
sg411
g1
(g7
g3
NtRp770
(dp771
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p772
(dp773
g15
(lp774
(g17
I32
g18
S'super(Cart_Pole_DA, self).__init__(*args, **kwargs)'
tp775
a(g20
I76
g18
S'self.initialise_theano_functions()'
tp776
a(g418
I69
g419
S'action_vector = theano.tensor.ivector("av")'
tp777
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp778
asbsg28
g1
(g29
g3
NtRp779
(dp780
g32
(I00
tp781
sg34
g200
sg36
g225
sg39
I00
sg40
Nsbsg40
g769
sbsg428
I00
sg60
I01
sbag1
(g403
g3
NtRp782
(dp783
g40
S'ox'
p784
sg273
Nsg407
Nsg408
Nsg54
I00
sg409
I00
sg410
I00
sg411
g1
(g7
g3
NtRp785
(dp786
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p787
(dp788
g15
(lp789
(g17
I32
g18
S'super(Cart_Pole_DA, self).__init__(*args, **kwargs)'
tp790
a(g20
I76
g18
S'self.initialise_theano_functions()'
tp791
a(g418
I68
g419
S'output_vector = theano.tensor.dvector("ox")'
tp792
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp793
asbsg28
g30
sg40
g784
sbsg428
I00
sg60
I01
sbag1
(g403
g3
NtRp794
(dp795
g40
Nsg273
g1
(g119
g3
NtRp796
(dp797
g10
g1
(g95
g3
NtRp798
(dp799
g98
(lp800
g104
ag1
(g7
g3
NtRp801
(dp802
g10
g1
(g95
g3
NtRp803
(dp804
g98
(lp805
g1
(g7
g3
NtRp806
(dp807
g10
g1
(g95
g3
NtRp808
(dp809
g98
(lp810
g412
asg12
(itheano.gof.utils
scratchpad
p811
(dp812
g15
g137
sbsg147
(lp813
g806
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p814
(dp815
g15
g157
sbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p816
(dp817
g15
g171
sbsg147
(lp818
g801
asg149
g184
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p819
(dp820
g15
g216
sbsg28
g222
sg40
Nsbag227
ag239
asg12
(itheano.gof.utils
scratchpad
p821
(dp822
g15
g250
sbsg147
(lp823
g796
ag1
(g7
g3
NtRp824
(dp825
g10
g798
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p826
(dp827
g15
g277
sbsg28
g262
sg40
Nsbasg149
g260
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p828
(dp829
g15
g267
sbsg28
g115
sg40
Nsbsg407
g106
sg408
I01
sg54
I00
sg409
I01
sg410
I01
sg411
g104
sg428
I01
sg60
Nsbag1
(g403
g3
NtRp830
(dp831
g40
S'W'
sg273
g1
(g7
g3
NtRp832
(dp833
g10
g1
(g95
g3
NtRp834
(dp835
g98
(lp836
g349
ag1
(g7
g3
NtRp837
(dp838
g10
g1
(g95
g3
NtRp839
(dp840
g98
(lp841
g1
(g7
g3
NtRp842
(dp843
g10
g1
(g95
g3
NtRp844
(dp845
g98
(lp846
g1
(g226
g3
NtRp847
(dp848
g11
Nsg12
(itheano.gof.utils
scratchpad
p849
(dp850
g235
Nsbsg28
g1
(g29
g3
NtRp851
(dp852
g32
(tsg34
S'float64'
p853
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp854
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p855
(dp856
g15
(lp857
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p858
I219
S'__rmul__'
p859
S'return theano.tensor.basic.mul(other, self)'
tp860
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp861
a(g219
I533
g161
S'inplace=False)(input))'
tp862
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp863
asbsg147
(lp864
g842
asg149
g1
(g374
g3
NtRp865
(dp866
g377
(lp867
sg379
(lp868
sg381
(lp869
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp870
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p871
(dp872
bsg28
g1
(g29
g3
NtRp873
(dp874
g32
(I01
I01
tp875
sg34
g853
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp876
(dp877
g10
g1
(g95
g3
NtRp878
(dp879
g98
(lp880
g1
(g7
g3
NtRp881
(dp882
g10
g1
(g95
g3
NtRp883
(dp884
g98
(lp885
g1
(g7
g3
NtRp886
(dp887
g10
g1
(g95
g3
NtRp888
(dp889
g98
(lp890
g1
(g7
g3
NtRp891
(dp892
g10
g1
(g95
g3
NtRp893
(dp894
g98
(lp895
g824
ag412
asg12
(itheano.gof.utils
scratchpad
p896
(dp897
g15
g284
sbsg147
(lp898
g891
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p899
(dp900
g15
g309
sbsg28
g314
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p901
(dp902
g15
(lp903
(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p904
I4578
S'grad'
p905
S'ygrad = dot(x.T, gz)'
tp906
a(g367
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp907
a(g369
I3084
g370
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp908
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp909
asbsg147
(lp910
g886
asg149
g1
(g374
g3
NtRp911
(dp912
g377
(lp913
sg379
(lp914
I1
aI0
asg381
(lp915
sg383
g316
sg384
I00
sg385
(I1
I0
tp916
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p917
(dp918
bsg28
g1
(g29
g3
NtRp919
(dp920
g32
(I00
I00
tp921
sg34
g317
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp922
(dp923
g10
g1
(g95
g3
NtRp924
(dp925
g98
(lp926
g1
(g7
g3
NtRp927
(dp928
g10
g1
(g95
g3
NtRp929
(dp930
g98
(lp931
g1
(g7
g3
NtRp932
(dp933
g10
g1
(g95
g3
NtRp934
(dp935
g98
(lp936
g1
(g7
g3
NtRp937
(dp938
g10
g1
(g95
g3
NtRp939
(dp940
g98
(lp941
g1
(g7
g3
NtRp942
(dp943
g10
g1
(g95
g3
NtRp944
(dp945
g98
(lp946
g1
(g7
g3
NtRp947
(dp948
g10
g1
(g95
g3
NtRp949
(dp950
g98
(lp951
g1
(g7
g3
NtRp952
(dp953
g10
g1
(g95
g3
NtRp954
(dp955
g98
(lp956
g1
(g7
g3
NtRp957
(dp958
g10
g1
(g95
g3
NtRp959
(dp960
g98
(lp961
g1
(g7
g3
NtRp962
(dp963
g10
g1
(g95
g3
NtRp964
(dp965
g98
(lp966
g1
(g7
g3
NtRp967
(dp968
g10
g1
(g95
g3
NtRp969
(dp970
g98
(lp971
g1
(g7
g3
NtRp972
(dp973
g10
g1
(g95
g3
NtRp974
(dp975
g98
(lp976
g412
ag1
(g7
g3
NtRp977
(dp978
g10
g1
(g95
g3
NtRp979
(dp980
g98
(lp981
g1
(g7
g3
NtRp982
(dp983
g10
g1
(g95
g3
NtRp984
(dp985
g98
(lp986
g1
(g7
g3
NtRp987
(dp988
g10
g1
(g95
g3
NtRp989
(dp990
g98
(lp991
g1
(g7
g3
NtRp992
(dp993
g10
g1
(g95
g3
NtRp994
(dp995
g98
(lp996
g1
(g7
g3
NtRp997
(dp998
g10
g1
(g95
g3
NtRp999
(dp1000
g98
(lp1001
g1
(g7
g3
NtRp1002
(dp1003
g10
g1
(g95
g3
NtRp1004
(dp1005
g98
(lp1006
g1
(g7
g3
NtRp1007
(dp1008
g10
g1
(g95
g3
NtRp1009
(dp1010
g98
(lp1011
g891
ag349
asg12
(itheano.gof.utils
scratchpad
p1012
(dp1013
g15
(lp1014
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1015
I179
S'get_reconstructed_input'
p1016
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1017
a(g535
I170
g536
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp1018
a(g538
I4732
g539
S'return _dot(a, b)'
tp1019
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1020
asbsg147
(lp1021
g1007
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1022
(dp1023
bsg28
g1
(g29
g3
NtRp1024
(dp1025
g32
(I00
I00
tp1026
sg34
S'float64'
p1027
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1028
(dp1029
g10
g1
(g95
g3
NtRp1030
(dp1031
g98
(lp1032
g43
asg12
(itheano.gof.utils
scratchpad
p1033
(dp1034
g15
(lp1035
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1036
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1037
a(g219
I533
g161
S'inplace=False)(input))'
tp1038
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1039
asbsg147
(lp1040
g1028
asg149
g1
(g374
g3
NtRp1041
(dp1042
g377
(lp1043
sg379
(lp1044
I0
asg381
(lp1045
I0
asg383
g58
sg384
I00
sg385
(S'x'
I0
tp1046
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1047
(dp1048
bsg28
g1
(g29
g3
NtRp1049
(dp1050
g32
(I01
I00
tp1051
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1052
(dp1053
g15
(lp1054
(g1015
I179
g1016
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1055
a(g535
I171
g536
S'self.bias)'
tp1056
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1057
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1058
asbsg147
(lp1059
g1002
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1060
(dp1061
g15
(lp1062
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1063
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1064
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1065
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1066
asbsg28
g1
(g29
g3
NtRp1067
(dp1068
g32
(I00
I00
tp1069
sg34
S'float64'
p1070
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1071
(dp1072
g15
(lp1073
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1074
I197
S'get_cost'
p1075
S'y = self.get_reconstructed_input()'
tp1076
a(g1015
I179
g1016
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1077
a(g535
I171
g536
S'self.bias)'
tp1078
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1079
asbsg147
(lp1080
g997
asg149
g333
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1081
(dp1082
g15
(lp1083
(g535
I171
g536
S'self.bias)'
tp1084
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1085
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1086
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1087
asbsg28
g1
(g29
g3
NtRp1088
(dp1089
g32
(I00
I00
tp1090
sg34
S'float64'
p1091
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1092
(dp1093
g10
g1
(g95
g3
NtRp1094
(dp1095
g98
(lp1096
g349
asg12
(itheano.gof.utils
scratchpad
p1097
(dp1098
g15
g363
sbsg147
(lp1099
g1092
asg149
g375
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1100
(dp1101
bsg28
g389
sg40
g392
sbasg12
(itheano.gof.utils
scratchpad
p1102
(dp1103
g15
(lp1104
(g1074
I197
g1075
S'y = self.get_reconstructed_input()'
tp1105
a(g1015
I179
g1016
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1106
a(g538
I4732
g539
S'return _dot(a, b)'
tp1107
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1108
asbsg147
(lp1109
g992
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1110
(dp1111
bsg28
g1
(g29
g3
NtRp1112
(dp1113
g32
(I00
I00
tp1114
sg34
S'float64'
p1115
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1116
(dp1117
g10
g1
(g95
g3
NtRp1118
(dp1119
g98
(lp1120
g64
asg12
(itheano.gof.utils
scratchpad
p1121
(dp1122
g15
(lp1123
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1124
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1125
a(g219
I533
g161
S'inplace=False)(input))'
tp1126
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1127
asbsg147
(lp1128
g1116
asg149
g1
(g374
g3
NtRp1129
(dp1130
g377
(lp1131
sg379
(lp1132
I0
asg381
(lp1133
I0
asg383
g73
sg384
I00
sg385
(S'x'
I0
tp1134
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1135
(dp1136
bsg28
g1
(g29
g3
NtRp1137
(dp1138
g32
(I01
I00
tp1139
sg34
g74
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1140
(dp1141
g15
(lp1142
(g1074
I197
g1075
S'y = self.get_reconstructed_input()'
tp1143
a(g1015
I180
g1016
S'self.reverse_bias)'
tp1144
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1145
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1146
asbsg147
(lp1147
g987
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1148
(dp1149
g15
(lp1150
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1151
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1152
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1153
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1154
asbsg28
g1
(g29
g3
NtRp1155
(dp1156
g32
(I00
I00
tp1157
sg34
S'float64'
p1158
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1159
(dp1160
g15
(lp1161
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1162
I241
S'get_updates'
p1163
S'da_cost = self.get_cost()'
tp1164
a(g1074
I197
g1075
S'y = self.get_reconstructed_input()'
tp1165
a(g1015
I180
g1016
S'self.reverse_bias)'
tp1166
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1167
asbsg147
(lp1168
g982
asg149
g333
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1169
(dp1170
g15
(lp1171
(g1015
I180
g1016
S'self.reverse_bias)'
tp1172
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1173
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1174
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1175
asbsg28
g1
(g29
g3
NtRp1176
(dp1177
g32
(I00
I00
tp1178
sg34
S'float64'
p1179
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1180
(dp1181
g15
(lp1182
(g418
I74
g419
S'updates=self.get_updates(),'
tp1183
a(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1184
a(g1074
I199
g1075
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1185
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1186
asbsg147
(lp1187
g977
asg149
g1
(g183
g3
NtRp1188
(dp1189
g186
g294
sg188
g1
(ctheano.scalar.basic
Log
p1190
g3
NtRp1191
(dp1192
g192
g339
sg153
g154
sg40
S'log'
p1193
sbsg40
S'Elemwise{log,no_inplace}'
p1194
sg153
g154
sg206
(dp1195
sg208
(g1193
I1
I1
tp1196
sg209
(dp1197
sg305
S"base e logarithm of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1198
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1199
(dp1200
g15
(lp1201
(g1074
I199
g1075
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1202
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1203
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1204
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1205
asbsg28
g1
(g29
g3
NtRp1206
(dp1207
g32
(I00
I00
tp1208
sg34
S'float64'
p1209
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1210
(dp1211
g15
(lp1212
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1213
a(g1074
I199
g1075
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1214
a(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp1215
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1216
asbsg147
(lp1217
g972
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1218
(dp1219
g15
(lp1220
(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp1221
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1222
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1223
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1224
asbsg28
g1
(g29
g3
NtRp1225
(dp1226
g32
(I00
I00
tp1227
sg34
S'float64'
p1228
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1229
(dp1230
g10
g1
(g95
g3
NtRp1231
(dp1232
g98
(lp1233
g1
(g7
g3
NtRp1234
(dp1235
g10
g1
(g95
g3
NtRp1236
(dp1237
g98
(lp1238
g1
(g7
g3
NtRp1239
(dp1240
g10
g1
(g95
g3
NtRp1241
(dp1242
g98
(lp1243
g227
asg12
(itheano.gof.utils
scratchpad
p1244
(dp1245
g15
(lp1246
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1247
I216
S'__rsub__'
p1248
S'return theano.tensor.basic.sub(other, self)'
tp1249
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1250
a(g219
I533
g161
S'inplace=False)(input))'
tp1251
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1252
asbsg147
(lp1253
g1239
asg149
g1
(g374
g3
NtRp1254
(dp1255
g377
(lp1256
sg379
(lp1257
sg381
(lp1258
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp1259
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1260
(dp1261
bsg28
g1
(g29
g3
NtRp1262
(dp1263
g32
(I01
I01
tp1264
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag412
asg12
(itheano.gof.utils
scratchpad
p1265
(dp1266
g15
(lp1267
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1268
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1269
a(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp1270
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1271
asbsg147
(lp1272
g1234
asg149
g1
(g183
g3
NtRp1273
(dp1274
g186
g294
sg188
g1
(ctheano.scalar.basic
Sub
p1275
g3
NtRp1276
(dp1277
g192
g298
sg153
g154
sg40
S'sub'
p1278
sbsg40
S'Elemwise{sub,no_inplace}'
p1279
sg153
g154
sg206
(dp1280
sg208
(S'subtract'
p1281
I2
I1
tp1282
sg209
(dp1283
sg305
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1284
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1285
(dp1286
g15
(lp1287
(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp1288
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1289
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1290
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1291
asbsg28
g1
(g29
g3
NtRp1292
(dp1293
g32
(I00
I00
tp1294
sg34
S'float64'
p1295
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1296
(dp1297
g10
g1
(g95
g3
NtRp1298
(dp1299
g98
(lp1300
g1
(g7
g3
NtRp1301
(dp1302
g10
g1
(g95
g3
NtRp1303
(dp1304
g98
(lp1305
g1
(g7
g3
NtRp1306
(dp1307
g10
g1
(g95
g3
NtRp1308
(dp1309
g98
(lp1310
g227
asg12
(itheano.gof.utils
scratchpad
p1311
(dp1312
g15
(lp1313
(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp1314
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1315
a(g219
I533
g161
S'inplace=False)(input))'
tp1316
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1317
asbsg147
(lp1318
g1306
asg149
g1
(g374
g3
NtRp1319
(dp1320
g377
(lp1321
sg379
(lp1322
sg381
(lp1323
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp1324
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1325
(dp1326
bsg28
g1
(g29
g3
NtRp1327
(dp1328
g32
(I01
I01
tp1329
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag982
asg12
(itheano.gof.utils
scratchpad
p1330
(dp1331
g15
(lp1332
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1333
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1334
a(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp1335
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1336
asbsg147
(lp1337
g1301
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1338
(dp1339
g15
(lp1340
(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp1341
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1342
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1343
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1344
asbsg28
g1
(g29
g3
NtRp1345
(dp1346
g32
(I00
I00
tp1347
sg34
S'float64'
p1348
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1349
(dp1350
g15
(lp1351
(g418
I74
g419
S'updates=self.get_updates(),'
tp1352
a(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1353
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1354
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1355
asbsg147
(lp1356
g1296
asg149
g1188
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1357
(dp1358
g15
(lp1359
(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1360
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1361
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1362
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1363
asbsg28
g1
(g29
g3
NtRp1364
(dp1365
g32
(I00
I00
tp1366
sg34
S'float64'
p1367
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1368
(dp1369
g15
(lp1370
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1371
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1372
a(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp1373
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1374
asbsg147
(lp1375
g1229
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1376
(dp1377
g15
(lp1378
(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp1379
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1380
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1381
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1382
asbsg28
g1
(g29
g3
NtRp1383
(dp1384
g32
(I00
I00
tp1385
sg34
S'float64'
p1386
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1387
(dp1388
g15
(lp1389
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1390
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1391
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1392
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1393
asbsg147
(lp1394
g967
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1395
(dp1396
g15
(lp1397
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1398
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1399
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1400
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1401
asbsg28
g1
(g29
g3
NtRp1402
(dp1403
g32
(I00
I00
tp1404
sg34
S'float64'
p1405
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1406
(dp1407
g10
g1
(g95
g3
NtRp1408
(dp1409
g98
(lp1410
g1
(g7
g3
NtRp1411
(dp1412
g10
g1
(g95
g3
NtRp1413
(dp1414
g98
(lp1415
g1
(g7
g3
NtRp1416
(dp1417
g10
g1
(g95
g3
NtRp1418
(dp1419
g98
(lp1420
g1
(g7
g3
NtRp1421
(dp1422
g10
g1
(g95
g3
NtRp1423
(dp1424
g98
(lp1425
g1
(g7
g3
NtRp1426
(dp1427
g10
g1
(g95
g3
NtRp1428
(dp1429
g98
(lp1430
g967
asg12
(itheano.gof.utils
scratchpad
p1431
(dp1432
g15
(lp1433
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1434
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1435
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1436
I2670
S'sum'
p1437
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp1438
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1439
asbsg147
(lp1440
g1426
asg149
g1
(ctheano.tensor.elemwise
Sum
p1441
g3
NtRp1442
(dp1443
S'acc_dtype'
p1444
g1405
sg34
g1405
sg153
g154
sg188
g589
sS'axis'
p1445
(I1
tp1446
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1447
(dp1448
g15
(lp1449
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1450
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1451
I1797
g161
S'return CAReduce.make_node(op, input)'
tp1452
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1453
I1299
g161
S'broadcastable=broadcastable)()'
tp1454
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1455
asbsg28
g1
(g29
g3
NtRp1456
(dp1457
g32
(I00
tp1458
sg34
g1405
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1459
(dp1460
g15
(lp1461
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1462
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1463
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1464
I27
S'__neg__'
p1465
S'return theano.tensor.basic.neg(self)'
tp1466
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1467
asbsg147
(lp1468
g1421
asg149
g1
(g183
g3
NtRp1469
(dp1470
g186
g294
sg188
g1
(ctheano.scalar.basic
Neg
p1471
g3
NtRp1472
(dp1473
g192
ctheano.scalar.basic
same_out
p1474
sg153
g154
sg40
S'neg'
p1475
sbsg40
S'Elemwise{neg,no_inplace}'
p1476
sg153
g154
sg206
(dp1477
sg208
(S'negative'
p1478
I1
I1
tp1479
sg209
(dp1480
sg305
S"-a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1481
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1482
(dp1483
g15
(lp1484
(g1464
I27
g1465
S'return theano.tensor.basic.neg(self)'
tp1485
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1486
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1487
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1488
asbsg28
g1
(g29
g3
NtRp1489
(dp1490
g32
(I00
tp1491
sg34
g1405
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1492
(dp1493
g10
g1
(g95
g3
NtRp1494
(dp1495
g98
(lp1496
g1
(g7
g3
NtRp1497
(dp1498
g10
g1
(g95
g3
NtRp1499
(dp1500
g98
(lp1501
g1
(g7
g3
NtRp1502
(dp1503
g10
g1
(g95
g3
NtRp1504
(dp1505
g98
(lp1506
g1
(g7
g3
NtRp1507
(dp1508
g10
g1
(g95
g3
NtRp1509
(dp1510
g98
(lp1511
g1
(g7
g3
NtRp1512
(dp1513
g10
g1
(g95
g3
NtRp1514
(dp1515
g98
(lp1516
g1421
asg12
(itheano.gof.utils
scratchpad
p1517
(dp1518
g15
(lp1519
(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1520
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1521
I2802
S'mean'
p1522
S'acc_dtype=acc_dtype)'
tp1523
a(g1436
I2670
g1437
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp1524
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1525
asbsg147
(lp1526
g1512
asg149
g1
(g1441
g3
NtRp1527
(dp1528
g1444
g1405
sg34
g1405
sg153
g154
sg188
g589
sg1445
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1529
(dp1530
g15
(lp1531
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1532
a(g1451
I1797
g161
S'return CAReduce.make_node(op, input)'
tp1533
a(g1453
I1299
g161
S'broadcastable=broadcastable)()'
tp1534
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1535
asbsg28
g1
(g29
g3
NtRp1536
(dp1537
g32
(tsg34
g1405
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1538
(dp1539
g10
g1
(g95
g3
NtRp1540
(dp1541
g98
(lp1542
g1
(g7
g3
NtRp1543
(dp1544
g10
g1
(g95
g3
NtRp1545
(dp1546
g98
(lp1547
g1
(g7
g3
NtRp1548
(dp1549
g10
g1
(g95
g3
NtRp1550
(dp1551
g98
(lp1552
g1421
asg12
(itheano.gof.utils
scratchpad
p1553
(dp1554
g15
(lp1555
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1556
a(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1557
a(g1521
I2803
g1522
S'shp = shape(input)'
tp1558
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1559
asbsg147
(lp1560
g1548
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1561
(dp1562
g15
(lp1563
(g1521
I2803
g1522
S'shp = shape(input)'
tp1564
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1565
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp1566
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1567
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1568
(dp1569
g15
(lp1570
(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1571
a(g1521
I2811
g1522
S"shp = cast(shp, 'float64')"
tp1572
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp1573
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1574
asbsg147
(lp1575
g1543
asg149
g1
(g183
g3
NtRp1576
(dp1577
g186
g187
sg40
Nsg188
g1
(g189
g3
NtRp1578
(dp1579
g192
g1
(g193
g3
NtRp1580
(dp1581
g196
(g1
(g197
g3
NtRp1582
(dp1583
g34
g35
sbtp1584
sbsg153
g154
sg202
g1582
sg40
S'convert_to_float64'
p1585
sg204
cnumpy
float64
p1586
sbsg206
(dp1587
sg208
Nsg209
(dp1588
sg211
(lp1589
g213
asg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1590
(dp1591
g15
(lp1592
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp1593
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1594
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1595
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1596
asbsg28
g1
(g29
g3
NtRp1597
(dp1598
g32
(I00
tp1599
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1600
(dp1601
g15
(lp1602
(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1603
a(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp1604
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1605
I407
S'__getitem__'
p1606
S'lambda entry: isinstance(entry, Variable)))'
tp1607
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1608
asbsg147
(lp1609
g1538
asg149
g1
(ctheano.tensor.subtensor
Subtensor
p1610
g3
NtRp1611
(dp1612
S'idx_list'
p1613
(cnumpy.core.multiarray
scalar
p1614
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1615
tp1616
sS'perform_cache_cdata'
p1617
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1618
(dp1619
bsg28
g1
(g29
g3
NtRp1620
(dp1621
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1622
(dp1623
g15
(lp1624
(g1162
I241
g1163
S'da_cost = self.get_cost()'
tp1625
a(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1626
a(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp1627
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1628
asbsg147
(lp1629
g1507
asg149
g1
(g183
g3
NtRp1630
(dp1631
g186
g294
sg188
g1
(ctheano.scalar.basic
TrueDiv
p1632
g3
NtRp1633
(dp1634
g192
g298
sg153
g154
sg40
S'true_div'
p1635
sbsg40
S'Elemwise{true_div,no_inplace}'
p1636
sg153
g154
sg206
(dp1637
sg208
(S'true_divide'
p1638
I2
I1
tp1639
sg209
(dp1640
sg305
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1641
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1642
(dp1643
g15
(lp1644
(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp1645
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1646
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1647
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1648
asbsg28
g1
(g29
g3
NtRp1649
(dp1650
g32
(tsg34
S'float64'
p1651
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g226
g3
NtRp1652
(dp1653
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp1654
(I1
(tg38
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
tbsg12
(itheano.gof.utils
scratchpad
p1655
(dp1656
g235
Nsbsg28
g1
(g29
g3
NtRp1657
(dp1658
g32
(tsg34
S'float64'
p1659
sg36
g38
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p1660
(dp1661
g15
(lp1662
(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1663
I450
g905
S'g_cost = _float_ones_like(cost)'
tp1664
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1665
I1124
S'_float_ones_like'
p1666
S'rval = tensor.ones_like(x)'
tp1667
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1668
I2070
S'ones_like'
p1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp1670
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1671
asbsg147
(lp1672
g1502
asg149
g1
(g183
g3
NtRp1673
(dp1674
g186
g294
sg188
g1
(ctheano.scalar.basic
Second
p1675
g3
NtRp1676
(dp1677
g192
g1
(ctheano.scalar.basic
transfer_type
p1678
g3
NtRp1679
(dp1680
S'transfer'
p1681
(I1
tp1682
sbsg153
g154
sg40
S'second'
p1683
sbsg40
S'Elemwise{second,no_inplace}'
p1684
sg153
g154
sg206
(dp1685
sg208
Nsg209
(dp1686
sg305
S"Create a matrix by filling the shape of a with b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1687
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1688
(dp1689
g15
(lp1690
(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp1691
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1692
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1693
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1694
asbsg28
g1
(g29
g3
NtRp1695
(dp1696
g32
(tsg34
g1659
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1538
asg12
(itheano.gof.utils
scratchpad
p1697
(dp1698
g15
(lp1699
(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp1701
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1702
I763
S'_bgrad'
p1703
S'ret.append(transform(scalar_igrad))'
tp1704
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1705
I755
S'transform'
p1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1707
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1708
asbsg147
(lp1709
g1497
asg149
g1
(g183
g3
NtRp1710
(dp1711
g40
Nsg188
g1633
sg206
(dp1712
sg208
Nsg209
(dp1713
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1714
(dp1715
g15
(lp1716
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1717
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1718
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1719
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1720
asbsg28
g1
(g29
g3
NtRp1721
(dp1722
g32
(tsg34
S'float64'
p1723
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1724
(dp1725
g15
(lp1726
(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1727
I1063
S'access_grad_cache'
p1728
S'term = access_term_cache(node)[idx]'
tp1729
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1730
I924
S'access_term_cache'
p1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1732
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1734
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1735
asbsg147
(lp1736
g1492
asg149
g1
(g374
g3
NtRp1737
(dp1738
g377
(lp1739
sg379
(lp1740
sg381
(lp1741
I0
asg383
(tsg384
I00
sg385
(S'x'
tp1742
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1743
(dp1744
bsg28
g1
(g29
g3
NtRp1745
(dp1746
g32
(I01
tp1747
sg34
g1723
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1748
(dp1749
g15
(lp1750
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp1751
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1752
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1753
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1754
asbsg147
(lp1755
g1416
asg149
g1
(g183
g3
NtRp1756
(dp1757
g40
Nsg188
g1676
sg206
(dp1758
sg208
Nsg209
(dp1759
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1760
(dp1761
g15
(lp1762
(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1763
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1764
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1765
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1766
asbsg28
g1
(g29
g3
NtRp1767
(dp1768
g32
(I00
tp1769
sg34
g1723
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1770
(dp1771
g15
(lp1772
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp1773
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp1774
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1775
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1776
asbsg147
(lp1777
g1411
asg149
g1
(g183
g3
NtRp1778
(dp1779
g40
Nsg188
g1472
sg206
(dp1780
sg208
Nsg209
(dp1781
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1782
(dp1783
g15
(lp1784
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1785
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1786
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1787
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1788
asbsg28
g1
(g29
g3
NtRp1789
(dp1790
g32
(I00
tp1791
sg34
g1723
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1792
(dp1793
g15
(lp1794
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp1795
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1796
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1797
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1798
asbsg147
(lp1799
g1406
asg149
g1
(g374
g3
NtRp1800
(dp1801
g377
(lp1802
sg379
(lp1803
I0
asg381
(lp1804
I1
asg383
g1791
sg384
I00
sg385
(I0
S'x'
tp1805
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1806
(dp1807
bsg28
g1
(g29
g3
NtRp1808
(dp1809
g32
(I00
I01
tp1810
sg34
g1723
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1811
(dp1812
g15
(lp1813
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp1814
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1815
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1816
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1817
asbsg147
(lp1818
g962
asg149
g1
(g183
g3
NtRp1819
(dp1820
g40
Nsg188
g1676
sg206
(dp1821
sg208
Nsg209
(dp1822
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1823
(dp1824
g15
(lp1825
(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1826
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1827
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1828
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1829
asbsg28
g1
(g29
g3
NtRp1830
(dp1831
g32
(I00
I00
tp1832
sg34
g1723
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag412
asg12
(itheano.gof.utils
scratchpad
p1833
(dp1834
g15
(lp1835
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp1836
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp1837
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1838
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1839
asbsg147
(lp1840
g957
asg149
g1
(g183
g3
NtRp1841
(dp1842
g40
Nsg188
g296
sg206
(dp1843
sg208
Nsg209
(dp1844
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1845
(dp1846
g15
(lp1847
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1848
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1849
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1850
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1851
asbsg28
g1
(g29
g3
NtRp1852
(dp1853
g32
(I00
I00
tp1854
sg34
S'float64'
p1855
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag982
asg12
(itheano.gof.utils
scratchpad
p1856
(dp1857
g15
(lp1858
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp1859
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp1860
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1861
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1862
asbsg147
(lp1863
g952
asg149
g1
(g183
g3
NtRp1864
(dp1865
g40
Nsg188
g1633
sg206
(dp1866
sg208
Nsg209
(dp1867
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1868
(dp1869
g15
(lp1870
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1871
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1872
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1873
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1874
asbsg28
g1
(g29
g3
NtRp1875
(dp1876
g32
(I00
I00
tp1877
sg34
S'float64'
p1878
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1879
(dp1880
g10
g1
(g95
g3
NtRp1881
(dp1882
g98
(lp1883
g1
(g7
g3
NtRp1884
(dp1885
g10
g1
(g95
g3
NtRp1886
(dp1887
g98
(lp1888
g1
(g7
g3
NtRp1889
(dp1890
g10
g1
(g95
g3
NtRp1891
(dp1892
g98
(lp1893
g962
ag1234
asg12
(itheano.gof.utils
scratchpad
p1894
(dp1895
g15
(lp1896
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp1897
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp1898
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1899
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1900
asbsg147
(lp1901
g1889
asg149
g1
(g183
g3
NtRp1902
(dp1903
g40
Nsg188
g296
sg206
(dp1904
sg208
Nsg209
(dp1905
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1906
(dp1907
g15
(lp1908
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1909
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1910
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1911
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1912
asbsg28
g1
(g29
g3
NtRp1913
(dp1914
g32
(I00
I00
tp1915
sg34
S'float64'
p1916
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1301
asg12
(itheano.gof.utils
scratchpad
p1917
(dp1918
g15
(lp1919
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp1920
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp1921
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1922
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1923
asbsg147
(lp1924
g1884
asg149
g1
(g183
g3
NtRp1925
(dp1926
g40
Nsg188
g1633
sg206
(dp1927
sg208
Nsg209
(dp1928
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1929
(dp1930
g15
(lp1931
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1932
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1933
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1934
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1935
asbsg28
g1
(g29
g3
NtRp1936
(dp1937
g32
(I00
I00
tp1938
sg34
S'float64'
p1939
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1940
(dp1941
g15
(lp1942
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp1943
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp1944
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1945
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1946
asbsg147
(lp1947
g1879
asg149
g1
(g183
g3
NtRp1948
(dp1949
g40
Nsg188
g1472
sg206
(dp1950
sg208
Nsg209
(dp1951
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1952
(dp1953
g15
(lp1954
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1955
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1956
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1957
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1958
asbsg28
g1
(g29
g3
NtRp1959
(dp1960
g32
(I00
I00
tp1961
sg34
g1939
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1962
(dp1963
g15
(lp1964
(g1727
I1090
g1728
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp1965
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1966
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp1967
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1968
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1969
asbsg147
(lp1970
g947
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1971
(dp1972
g15
(lp1973
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp1974
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1975
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1976
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1977
asbsg28
g1
(g29
g3
NtRp1978
(dp1979
g32
(I00
I00
tp1980
sg34
S'float64'
p1981
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1982
(dp1983
g10
g1
(g95
g3
NtRp1984
(dp1985
g98
(lp1986
g987
asg12
(itheano.gof.utils
scratchpad
p1987
(dp1988
g15
(lp1989
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1990
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1991
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp1992
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1993
asbsg147
(lp1994
g1982
asg149
g1
(g183
g3
NtRp1995
(dp1996
g40
Nsg188
g337
sg206
(dp1997
sg208
Nsg209
(dp1998
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1999
(dp2000
g15
(lp2001
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2002
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2003
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2004
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2005
asbsg28
g1
(g29
g3
NtRp2006
(dp2007
g32
(I00
I00
tp2008
sg34
S'float64'
p2009
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2010
(dp2011
g15
(lp2012
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2013
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2014
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2015
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2016
asbsg147
(lp2017
g942
asg149
g1
(g183
g3
NtRp2018
(dp2019
g40
Nsg188
g296
sg206
(dp2020
sg208
Nsg209
(dp2021
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2022
(dp2023
g15
(lp2024
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2025
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2026
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2027
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2028
asbsg28
g1
(g29
g3
NtRp2029
(dp2030
g32
(I00
I00
tp2031
sg34
S'float64'
p2032
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2033
(dp2034
g10
g1
(g95
g3
NtRp2035
(dp2036
g98
(lp2037
g1
(g7
g3
NtRp2038
(dp2039
g10
g1
(g95
g3
NtRp2040
(dp2041
g98
(lp2042
g1
(g226
g3
NtRp2043
(dp2044
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp2045
(I1
(tg246
I00
S'\x00\x00\x80?'
tbsg12
(itheano.gof.utils
scratchpad
p2046
(dp2047
g235
Nsbsg28
g1
(g29
g3
NtRp2048
(dp2049
g32
(tsg34
S'float32'
p2050
sg36
g246
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p2051
(dp2052
g15
(lp2053
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2054
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2055
a(g1705
I753
g1706
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp2056
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2057
asbsg147
(lp2058
g2038
asg149
g1
(g374
g3
NtRp2059
(dp2060
g377
(lp2061
sg379
(lp2062
sg381
(lp2063
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp2064
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2065
(dp2066
bsg28
g1
(g29
g3
NtRp2067
(dp2068
g32
(I01
I01
tp2069
sg34
g2050
sg36
g246
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2070
(dp2071
g10
g1
(g95
g3
NtRp2072
(dp2073
g98
(lp2074
g987
asg12
(itheano.gof.utils
scratchpad
p2075
(dp2076
g15
(lp2077
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2078
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2079
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2080
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2081
asbsg147
(lp2082
g2070
asg149
g1
(g183
g3
NtRp2083
(dp2084
g40
Nsg188
g337
sg206
(dp2085
sg208
Nsg209
(dp2086
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2087
(dp2088
g15
(lp2089
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2090
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2091
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2092
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2093
asbsg28
g1
(g29
g3
NtRp2094
(dp2095
g32
(I00
I00
tp2096
sg34
S'float64'
p2097
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2098
(dp2099
g15
(lp2100
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2101
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2102
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2103
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2104
asbsg147
(lp2105
g2033
asg149
g1
(g183
g3
NtRp2106
(dp2107
g40
Nsg188
g1276
sg206
(dp2108
sg208
Nsg209
(dp2109
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2110
(dp2111
g15
(lp2112
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2113
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2114
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2115
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2116
asbsg28
g1
(g29
g3
NtRp2117
(dp2118
g32
(I00
I00
tp2119
sg34
S'float64'
p2120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2121
(dp2122
g15
(lp2123
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2124
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2125
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2126
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2127
asbsg147
(lp2128
g937
asg149
g1
(g183
g3
NtRp2129
(dp2130
g40
Nsg188
g296
sg206
(dp2131
sg208
Nsg209
(dp2132
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2133
(dp2134
g15
(lp2135
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2136
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2137
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2138
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2139
asbsg28
g1
(g29
g3
NtRp2140
(dp2141
g32
(I00
I00
tp2142
sg34
S'float64'
p2143
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2144
(dp2145
g10
g1
(g95
g3
NtRp2146
(dp2147
g98
(lp2148
g1092
asg12
(itheano.gof.utils
scratchpad
p2149
(dp2150
g15
(lp2151
(g904
I4577
g905
S'xgrad = dot(gz, y.T)'
tp2152
a(g367
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp2153
a(g369
I3084
g370
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp2154
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2155
asbsg147
(lp2156
g2144
asg149
g1
(g374
g3
NtRp2157
(dp2158
g377
(lp2159
sg379
(lp2160
I1
aI0
asg381
(lp2161
sg383
g391
sg384
I00
sg385
(I1
I0
tp2162
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2163
(dp2164
bsg28
g1
(g29
g3
NtRp2165
(dp2166
g32
(I00
I00
tp2167
sg34
g358
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T.T'
p2168
sbasg12
(itheano.gof.utils
scratchpad
p2169
(dp2170
g15
(lp2171
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2172
a(g904
I4577
g905
S'xgrad = dot(gz, y.T)'
tp2173
a(g538
I4732
g539
S'return _dot(a, b)'
tp2174
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2175
asbsg147
(lp2176
g932
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2177
(dp2178
bsg28
g1
(g29
g3
NtRp2179
(dp2180
g32
(I00
I00
tp2181
sg34
S'float64'
p2182
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2183
(dp2184
g10
g1
(g95
g3
NtRp2185
(dp2186
g98
(lp2187
g1002
asg12
(itheano.gof.utils
scratchpad
p2188
(dp2189
g15
(lp2190
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2191
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2192
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2193
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2194
asbsg147
(lp2195
g2183
asg149
g1
(g183
g3
NtRp2196
(dp2197
g40
Nsg188
g337
sg206
(dp2198
sg208
Nsg209
(dp2199
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2200
(dp2201
g15
(lp2202
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2203
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2204
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2205
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2206
asbsg28
g1
(g29
g3
NtRp2207
(dp2208
g32
(I00
I00
tp2209
sg34
S'float64'
p2210
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2211
(dp2212
g15
(lp2213
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2214
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2215
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2216
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2217
asbsg147
(lp2218
g927
asg149
g1
(g183
g3
NtRp2219
(dp2220
g40
Nsg188
g296
sg206
(dp2221
sg208
Nsg209
(dp2222
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2223
(dp2224
g15
(lp2225
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2226
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2227
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2228
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2229
asbsg28
g1
(g29
g3
NtRp2230
(dp2231
g32
(I00
I00
tp2232
sg34
S'float64'
p2233
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2234
(dp2235
g10
g1
(g95
g3
NtRp2236
(dp2237
g98
(lp2238
g1
(g7
g3
NtRp2239
(dp2240
g10
g1
(g95
g3
NtRp2241
(dp2242
g98
(lp2243
g2043
asg12
(itheano.gof.utils
scratchpad
p2244
(dp2245
g15
(lp2246
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2247
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2248
a(g1705
I753
g1706
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp2249
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2250
asbsg147
(lp2251
g2239
asg149
g1
(g374
g3
NtRp2252
(dp2253
g377
(lp2254
sg379
(lp2255
sg381
(lp2256
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp2257
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2258
(dp2259
bsg28
g1
(g29
g3
NtRp2260
(dp2261
g32
(I01
I01
tp2262
sg34
g2050
sg36
g246
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2263
(dp2264
g10
g1
(g95
g3
NtRp2265
(dp2266
g98
(lp2267
g1002
asg12
(itheano.gof.utils
scratchpad
p2268
(dp2269
g15
(lp2270
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2271
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2272
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2273
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2274
asbsg147
(lp2275
g2263
asg149
g1
(g183
g3
NtRp2276
(dp2277
g40
Nsg188
g337
sg206
(dp2278
sg208
Nsg209
(dp2279
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2280
(dp2281
g15
(lp2282
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2283
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2284
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2285
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2286
asbsg28
g1
(g29
g3
NtRp2287
(dp2288
g32
(I00
I00
tp2289
sg34
S'float64'
p2290
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2291
(dp2292
g15
(lp2293
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2294
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2295
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2296
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2297
asbsg147
(lp2298
g2234
asg149
g1
(g183
g3
NtRp2299
(dp2300
g40
Nsg188
g1276
sg206
(dp2301
sg208
Nsg209
(dp2302
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2303
(dp2304
g15
(lp2305
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2306
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2307
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2308
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2309
asbsg28
g1
(g29
g3
NtRp2310
(dp2311
g32
(I00
I00
tp2312
sg34
S'float64'
p2313
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2314
(dp2315
g15
(lp2316
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2317
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2318
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2319
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2320
asbsg147
(lp2321
g922
asg149
g1
(g183
g3
NtRp2322
(dp2323
g40
Nsg188
g296
sg206
(dp2324
sg208
Nsg209
(dp2325
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2326
(dp2327
g15
(lp2328
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2329
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2330
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2331
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2332
asbsg28
g1
(g29
g3
NtRp2333
(dp2334
g32
(I00
I00
tp2335
sg34
S'float64'
p2336
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2337
(dp2338
g15
(lp2339
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2340
a(g904
I4578
g905
S'ygrad = dot(x.T, gz)'
tp2341
a(g538
I4732
g539
S'return _dot(a, b)'
tp2342
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2343
asbsg147
(lp2344
g881
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2345
(dp2346
bsg28
g1
(g29
g3
NtRp2347
(dp2348
g32
(I00
I00
tp2349
sg34
S'float64'
p2350
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2351
(dp2352
g10
g1
(g95
g3
NtRp2353
(dp2354
g98
(lp2355
g1
(g7
g3
NtRp2356
(dp2357
g10
g1
(g95
g3
NtRp2358
(dp2359
g98
(lp2360
g1
(g7
g3
NtRp2361
(dp2362
g10
g1
(g95
g3
NtRp2363
(dp2364
g98
(lp2365
g1
(g7
g3
NtRp2366
(dp2367
g10
g1
(g95
g3
NtRp2368
(dp2369
g98
(lp2370
g997
asg12
(itheano.gof.utils
scratchpad
p2371
(dp2372
g15
(lp2373
(g904
I4578
g905
S'ygrad = dot(x.T, gz)'
tp2374
a(g367
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp2375
a(g369
I3084
g370
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp2376
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2377
asbsg147
(lp2378
g2366
asg149
g1
(g374
g3
NtRp2379
(dp2380
g377
(lp2381
sg379
(lp2382
I1
aI0
asg381
(lp2383
sg383
g1090
sg384
I00
sg385
(I1
I0
tp2384
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2385
(dp2386
bsg28
g1
(g29
g3
NtRp2387
(dp2388
g32
(I00
I00
tp2389
sg34
g1091
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag937
asg12
(itheano.gof.utils
scratchpad
p2390
(dp2391
g15
(lp2392
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2393
a(g904
I4578
g905
S'ygrad = dot(x.T, gz)'
tp2394
a(g538
I4732
g539
S'return _dot(a, b)'
tp2395
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2396
asbsg147
(lp2397
g2361
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2398
(dp2399
bsg28
g1
(g29
g3
NtRp2400
(dp2401
g32
(I00
I00
tp2402
sg34
S'float64'
p2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2404
(dp2405
g15
(lp2406
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp2407
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2408
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp2410
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2411
asbsg147
(lp2412
g2356
asg149
g1
(g183
g3
NtRp2413
(dp2414
g40
Nsg188
g1
(ctheano.scalar.basic
Identity
p2415
g3
NtRp2416
(dp2417
g192
g1474
sg153
g154
sg40
S'identity'
p2418
sbsg206
(dp2419
sg208
Nsg209
(dp2420
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2421
(dp2422
g15
(lp2423
(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp2424
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2425
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2426
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2427
asbsg28
g1
(g29
g3
NtRp2428
(dp2429
g32
(I00
I00
tp2430
sg34
g2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2431
(dp2432
g15
(lp2433
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp2434
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2435
a(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp2436
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2437
asbsg147
(lp2438
g2351
asg149
g1
(g374
g3
NtRp2439
(dp2440
g377
(lp2441
sg379
(lp2442
I1
aI0
asg381
(lp2443
sg383
g2402
sg384
I00
sg385
(I1
I0
tp2444
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2445
(dp2446
bsg28
g1
(g29
g3
NtRp2447
(dp2448
g32
(I00
I00
tp2449
sg34
g2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2450
(dp2451
g15
(lp2452
(g1727
I1090
g1728
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2453
a(g1966
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2454
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp2455
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2456
asbsg147
(lp2457
g876
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2458
(dp2459
g15
(lp2460
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp2461
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2462
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2463
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2464
asbsg28
g1
(g29
g3
NtRp2465
(dp2466
g32
(I00
I00
tp2467
sg34
S'float64'
p2468
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2469
(dp2470
g15
(lp2471
(g418
I74
g419
S'updates=self.get_updates(),'
tp2472
a(g1162
I252
g1163
S'(self.weights, self.weights - self.learning_rate*weight_gradient),'
tp2473
a(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp2474
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2475
asbsg147
(lp2476
g837
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2477
(dp2478
g15
(lp2479
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp2480
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2481
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2482
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2483
asbsg28
g1
(g29
g3
NtRp2484
(dp2485
g32
(I00
I00
tp2486
sg34
S'float64'
p2487
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2488
(dp2489
g15
(lp2490
(g418
I74
g419
S'updates=self.get_updates(),'
tp2491
a(g1162
I252
g1163
S'(self.weights, self.weights - self.learning_rate*weight_gradient),'
tp2492
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p2493
I136
S'__sub__'
p2494
S'return theano.tensor.basic.sub(self, other)'
tp2495
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2496
asbsg147
(lp2497
g832
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2498
(dp2499
g15
(lp2500
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp2501
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2502
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2503
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2504
asbsg28
g1
(g29
g3
NtRp2505
(dp2506
g32
(I00
I00
tp2507
sg34
S'float64'
p2508
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg407
g351
sg408
I01
sg54
I00
sg409
I01
sg410
I01
sg411
g349
sg428
I01
sg60
Nsbag1
(g403
g3
NtRp2509
(dp2510
g40
S'b'
sg273
g1
(g7
g3
NtRp2511
(dp2512
g10
g1
(g95
g3
NtRp2513
(dp2514
g98
(lp2515
g43
ag1
(g7
g3
NtRp2516
(dp2517
g10
g1
(g95
g3
NtRp2518
(dp2519
g98
(lp2520
g1
(g7
g3
NtRp2521
(dp2522
g10
g1
(g95
g3
NtRp2523
(dp2524
g98
(lp2525
g1
(g226
g3
NtRp2526
(dp2527
g11
Nsg12
(itheano.gof.utils
scratchpad
p2528
(dp2529
g235
Nsbsg28
g1
(g29
g3
NtRp2530
(dp2531
g32
(tsg34
S'float64'
p2532
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp2533
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p2534
(dp2535
g15
(lp2536
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp2537
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2538
a(g219
I533
g161
S'inplace=False)(input))'
tp2539
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2540
asbsg147
(lp2541
g2521
asg149
g1
(g374
g3
NtRp2542
(dp2543
g377
(lp2544
sg379
(lp2545
sg381
(lp2546
I0
asg383
(tsg384
I00
sg385
(S'x'
tp2547
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2548
(dp2549
bsg28
g1
(g29
g3
NtRp2550
(dp2551
g32
(I01
tp2552
sg34
g2532
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2553
(dp2554
g10
g1
(g95
g3
NtRp2555
(dp2556
g98
(lp2557
g1
(g7
g3
NtRp2558
(dp2559
g10
g1
(g95
g3
NtRp2560
(dp2561
g98
(lp2562
g1
(g7
g3
NtRp2563
(dp2564
g10
g1
(g95
g3
NtRp2565
(dp2566
g98
(lp2567
g1
(g7
g3
NtRp2568
(dp2569
g10
g1
(g95
g3
NtRp2570
(dp2571
g98
(lp2572
g1
(g7
g3
NtRp2573
(dp2574
g10
g1
(g95
g3
NtRp2575
(dp2576
g98
(lp2577
g1
(g7
g3
NtRp2578
(dp2579
g10
g1
(g95
g3
NtRp2580
(dp2581
g98
(lp2582
g1
(g7
g3
NtRp2583
(dp2584
g10
g1
(g95
g3
NtRp2585
(dp2586
g98
(lp2587
g1
(g7
g3
NtRp2588
(dp2589
g10
g1
(g95
g3
NtRp2590
(dp2591
g98
(lp2592
g1
(g7
g3
NtRp2593
(dp2594
g10
g1
(g95
g3
NtRp2595
(dp2596
g98
(lp2597
g1
(g7
g3
NtRp2598
(dp2599
g10
g1
(g95
g3
NtRp2600
(dp2601
g98
(lp2602
g1
(g7
g3
NtRp2603
(dp2604
g10
g1
(g95
g3
NtRp2605
(dp2606
g98
(lp2607
g1
(g7
g3
NtRp2608
(dp2609
g10
g1
(g95
g3
NtRp2610
(dp2611
g98
(lp2612
g1
(g7
g3
NtRp2613
(dp2614
g10
g1
(g95
g3
NtRp2615
(dp2616
g98
(lp2617
g967
ag1
(g7
g3
NtRp2618
(dp2619
g10
g1
(g95
g3
NtRp2620
(dp2621
g98
(lp2622
g1
(g7
g3
NtRp2623
(dp2624
g10
g1
(g95
g3
NtRp2625
(dp2626
g98
(lp2627
g1
(g7
g3
NtRp2628
(dp2629
g10
g1
(g95
g3
NtRp2630
(dp2631
g98
(lp2632
g1421
ag1
(g7
g3
NtRp2633
(dp2634
g10
g1
(g95
g3
NtRp2635
(dp2636
g98
(lp2637
g1
(g7
g3
NtRp2638
(dp2639
g10
g1
(g95
g3
NtRp2640
(dp2641
g98
(lp2642
g1
(g7
g3
NtRp2643
(dp2644
g10
g1
(g95
g3
NtRp2645
(dp2646
g98
(lp2647
g1507
ag1652
asg12
(itheano.gof.utils
scratchpad
p2648
(dp2649
g15
(lp2650
(g1663
I450
g905
S'g_cost = _float_ones_like(cost)'
tp2651
a(g1665
I1124
g1666
S'rval = tensor.ones_like(x)'
tp2652
a(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp2653
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2654
asbsg147
(lp2655
g2643
asg149
g1673
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2656
(dp2657
g15
(lp2658
(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp2659
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2660
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2661
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2662
asbsg28
g1
(g29
g3
NtRp2663
(dp2664
g32
(tsg34
g1659
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1538
asg12
(itheano.gof.utils
scratchpad
p2665
(dp2666
g15
(lp2667
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2668
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2669
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2670
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2671
asbsg147
(lp2672
g2638
asg149
g1
(g183
g3
NtRp2673
(dp2674
g40
Nsg188
g1633
sg206
(dp2675
sg208
Nsg209
(dp2676
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2677
(dp2678
g15
(lp2679
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2680
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2681
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2682
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2683
asbsg28
g1
(g29
g3
NtRp2684
(dp2685
g32
(tsg34
S'float64'
p2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2687
(dp2688
g15
(lp2689
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp2690
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2691
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2692
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2693
asbsg147
(lp2694
g2633
asg149
g1
(g374
g3
NtRp2695
(dp2696
g377
(lp2697
sg379
(lp2698
sg381
(lp2699
I0
asg383
(tsg384
I00
sg385
(S'x'
tp2700
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2701
(dp2702
bsg28
g1
(g29
g3
NtRp2703
(dp2704
g32
(I01
tp2705
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2706
(dp2707
g15
(lp2708
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp2709
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2710
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2711
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2712
asbsg147
(lp2713
g2628
asg149
g1
(g183
g3
NtRp2714
(dp2715
g40
Nsg188
g1676
sg206
(dp2716
sg208
Nsg209
(dp2717
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2718
(dp2719
g15
(lp2720
(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2721
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2722
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2723
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2724
asbsg28
g1
(g29
g3
NtRp2725
(dp2726
g32
(I00
tp2727
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2728
(dp2729
g15
(lp2730
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2731
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2732
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2733
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2734
asbsg147
(lp2735
g2623
asg149
g1
(g183
g3
NtRp2736
(dp2737
g40
Nsg188
g1472
sg206
(dp2738
sg208
Nsg209
(dp2739
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2740
(dp2741
g15
(lp2742
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2743
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2744
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2745
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2746
asbsg28
g1
(g29
g3
NtRp2747
(dp2748
g32
(I00
tp2749
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2750
(dp2751
g15
(lp2752
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp2753
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2754
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2755
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2756
asbsg147
(lp2757
g2618
asg149
g1
(g374
g3
NtRp2758
(dp2759
g377
(lp2760
sg379
(lp2761
I0
asg381
(lp2762
I1
asg383
g2749
sg384
I00
sg385
(I0
S'x'
tp2763
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2764
(dp2765
bsg28
g1
(g29
g3
NtRp2766
(dp2767
g32
(I00
I01
tp2768
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2769
(dp2770
g15
(lp2771
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp2772
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2773
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2774
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2775
asbsg147
(lp2776
g2613
asg149
g1
(g183
g3
NtRp2777
(dp2778
g40
Nsg188
g1676
sg206
(dp2779
sg208
Nsg209
(dp2780
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2781
(dp2782
g15
(lp2783
(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2784
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2785
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2786
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2787
asbsg28
g1
(g29
g3
NtRp2788
(dp2789
g32
(I00
I00
tp2790
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag412
asg12
(itheano.gof.utils
scratchpad
p2791
(dp2792
g15
(lp2793
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2794
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2795
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2796
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2797
asbsg147
(lp2798
g2608
asg149
g1
(g183
g3
NtRp2799
(dp2800
g40
Nsg188
g296
sg206
(dp2801
sg208
Nsg209
(dp2802
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2803
(dp2804
g15
(lp2805
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2806
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2807
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2808
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2809
asbsg28
g1
(g29
g3
NtRp2810
(dp2811
g32
(I00
I00
tp2812
sg34
S'float64'
p2813
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag982
asg12
(itheano.gof.utils
scratchpad
p2814
(dp2815
g15
(lp2816
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2817
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2818
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2819
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2820
asbsg147
(lp2821
g2603
asg149
g1
(g183
g3
NtRp2822
(dp2823
g40
Nsg188
g1633
sg206
(dp2824
sg208
Nsg209
(dp2825
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2826
(dp2827
g15
(lp2828
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2829
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2830
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2831
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2832
asbsg28
g1
(g29
g3
NtRp2833
(dp2834
g32
(I00
I00
tp2835
sg34
S'float64'
p2836
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2837
(dp2838
g10
g1
(g95
g3
NtRp2839
(dp2840
g98
(lp2841
g1
(g7
g3
NtRp2842
(dp2843
g10
g1
(g95
g3
NtRp2844
(dp2845
g98
(lp2846
g1
(g7
g3
NtRp2847
(dp2848
g10
g1
(g95
g3
NtRp2849
(dp2850
g98
(lp2851
g2613
ag1234
asg12
(itheano.gof.utils
scratchpad
p2852
(dp2853
g15
(lp2854
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2855
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2856
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2857
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2858
asbsg147
(lp2859
g2847
asg149
g1
(g183
g3
NtRp2860
(dp2861
g40
Nsg188
g296
sg206
(dp2862
sg208
Nsg209
(dp2863
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2864
(dp2865
g15
(lp2866
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2867
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2868
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2869
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2870
asbsg28
g1
(g29
g3
NtRp2871
(dp2872
g32
(I00
I00
tp2873
sg34
S'float64'
p2874
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1301
asg12
(itheano.gof.utils
scratchpad
p2875
(dp2876
g15
(lp2877
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2878
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2879
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2880
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2881
asbsg147
(lp2882
g2842
asg149
g1
(g183
g3
NtRp2883
(dp2884
g40
Nsg188
g1633
sg206
(dp2885
sg208
Nsg209
(dp2886
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2887
(dp2888
g15
(lp2889
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2890
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2891
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2892
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2893
asbsg28
g1
(g29
g3
NtRp2894
(dp2895
g32
(I00
I00
tp2896
sg34
S'float64'
p2897
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2898
(dp2899
g15
(lp2900
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp2901
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2902
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2903
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2904
asbsg147
(lp2905
g2837
asg149
g1
(g183
g3
NtRp2906
(dp2907
g40
Nsg188
g1472
sg206
(dp2908
sg208
Nsg209
(dp2909
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2910
(dp2911
g15
(lp2912
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2913
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2914
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2915
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2916
asbsg28
g1
(g29
g3
NtRp2917
(dp2918
g32
(I00
I00
tp2919
sg34
g2897
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2920
(dp2921
g15
(lp2922
(g1727
I1090
g1728
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2923
a(g1966
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2924
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp2925
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2926
asbsg147
(lp2927
g2598
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2928
(dp2929
g15
(lp2930
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp2931
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2932
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2933
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2934
asbsg28
g1
(g29
g3
NtRp2935
(dp2936
g32
(I00
I00
tp2937
sg34
S'float64'
p2938
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2939
(dp2940
g10
g1
(g95
g3
NtRp2941
(dp2942
g98
(lp2943
g987
asg12
(itheano.gof.utils
scratchpad
p2944
(dp2945
g15
(lp2946
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2947
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2948
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2949
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2950
asbsg147
(lp2951
g2939
asg149
g1
(g183
g3
NtRp2952
(dp2953
g40
Nsg188
g337
sg206
(dp2954
sg208
Nsg209
(dp2955
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2956
(dp2957
g15
(lp2958
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2959
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2960
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2961
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2962
asbsg28
g1
(g29
g3
NtRp2963
(dp2964
g32
(I00
I00
tp2965
sg34
S'float64'
p2966
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2967
(dp2968
g15
(lp2969
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp2970
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2971
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2972
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2973
asbsg147
(lp2974
g2593
asg149
g1
(g183
g3
NtRp2975
(dp2976
g40
Nsg188
g296
sg206
(dp2977
sg208
Nsg209
(dp2978
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2979
(dp2980
g15
(lp2981
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp2982
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2983
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2984
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2985
asbsg28
g1
(g29
g3
NtRp2986
(dp2987
g32
(I00
I00
tp2988
sg34
S'float64'
p2989
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2990
(dp2991
g10
g1
(g95
g3
NtRp2992
(dp2993
g98
(lp2994
g1
(g7
g3
NtRp2995
(dp2996
g10
g1
(g95
g3
NtRp2997
(dp2998
g98
(lp2999
g2043
asg12
(itheano.gof.utils
scratchpad
p3000
(dp3001
g15
(lp3002
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3003
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3004
a(g1705
I753
g1706
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3005
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3006
asbsg147
(lp3007
g2995
asg149
g1
(g374
g3
NtRp3008
(dp3009
g377
(lp3010
sg379
(lp3011
sg381
(lp3012
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp3013
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3014
(dp3015
bsg28
g1
(g29
g3
NtRp3016
(dp3017
g32
(I01
I01
tp3018
sg34
g2050
sg36
g246
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3019
(dp3020
g10
g1
(g95
g3
NtRp3021
(dp3022
g98
(lp3023
g987
asg12
(itheano.gof.utils
scratchpad
p3024
(dp3025
g15
(lp3026
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3027
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3028
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3029
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3030
asbsg147
(lp3031
g3019
asg149
g1
(g183
g3
NtRp3032
(dp3033
g40
Nsg188
g337
sg206
(dp3034
sg208
Nsg209
(dp3035
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3036
(dp3037
g15
(lp3038
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3039
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3040
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3041
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3042
asbsg28
g1
(g29
g3
NtRp3043
(dp3044
g32
(I00
I00
tp3045
sg34
S'float64'
p3046
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3047
(dp3048
g15
(lp3049
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3050
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3051
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3052
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3053
asbsg147
(lp3054
g2990
asg149
g1
(g183
g3
NtRp3055
(dp3056
g40
Nsg188
g1276
sg206
(dp3057
sg208
Nsg209
(dp3058
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3059
(dp3060
g15
(lp3061
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3062
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3063
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3064
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3065
asbsg28
g1
(g29
g3
NtRp3066
(dp3067
g32
(I00
I00
tp3068
sg34
S'float64'
p3069
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3070
(dp3071
g15
(lp3072
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3073
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3074
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3075
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3076
asbsg147
(lp3077
g2588
asg149
g1
(g183
g3
NtRp3078
(dp3079
g40
Nsg188
g296
sg206
(dp3080
sg208
Nsg209
(dp3081
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3082
(dp3083
g15
(lp3084
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3085
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3086
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3087
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3088
asbsg28
g1
(g29
g3
NtRp3089
(dp3090
g32
(I00
I00
tp3091
sg34
S'float64'
p3092
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3093
(dp3094
g10
g1
(g95
g3
NtRp3095
(dp3096
g98
(lp3097
g1092
asg12
(itheano.gof.utils
scratchpad
p3098
(dp3099
g15
(lp3100
(g904
I4577
g905
S'xgrad = dot(gz, y.T)'
tp3101
a(g367
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp3102
a(g369
I3084
g370
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp3103
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3104
asbsg147
(lp3105
g3093
asg149
g1
(g374
g3
NtRp3106
(dp3107
g377
(lp3108
sg379
(lp3109
I1
aI0
asg381
(lp3110
sg383
g391
sg384
I00
sg385
(I1
I0
tp3111
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3112
(dp3113
bsg28
g1
(g29
g3
NtRp3114
(dp3115
g32
(I00
I00
tp3116
sg34
g358
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T.T'
p3117
sbasg12
(itheano.gof.utils
scratchpad
p3118
(dp3119
g15
(lp3120
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3121
a(g904
I4577
g905
S'xgrad = dot(gz, y.T)'
tp3122
a(g538
I4732
g539
S'return _dot(a, b)'
tp3123
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3124
asbsg147
(lp3125
g2583
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3126
(dp3127
bsg28
g1
(g29
g3
NtRp3128
(dp3129
g32
(I00
I00
tp3130
sg34
S'float64'
p3131
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3132
(dp3133
g10
g1
(g95
g3
NtRp3134
(dp3135
g98
(lp3136
g1002
asg12
(itheano.gof.utils
scratchpad
p3137
(dp3138
g15
(lp3139
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3140
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3141
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3142
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3143
asbsg147
(lp3144
g3132
asg149
g1
(g183
g3
NtRp3145
(dp3146
g40
Nsg188
g337
sg206
(dp3147
sg208
Nsg209
(dp3148
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3149
(dp3150
g15
(lp3151
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3152
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3153
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3154
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3155
asbsg28
g1
(g29
g3
NtRp3156
(dp3157
g32
(I00
I00
tp3158
sg34
S'float64'
p3159
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3160
(dp3161
g15
(lp3162
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3163
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3164
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3165
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3166
asbsg147
(lp3167
g2578
asg149
g1
(g183
g3
NtRp3168
(dp3169
g40
Nsg188
g296
sg206
(dp3170
sg208
Nsg209
(dp3171
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3172
(dp3173
g15
(lp3174
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3175
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3176
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3177
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3178
asbsg28
g1
(g29
g3
NtRp3179
(dp3180
g32
(I00
I00
tp3181
sg34
S'float64'
p3182
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3183
(dp3184
g10
g1
(g95
g3
NtRp3185
(dp3186
g98
(lp3187
g1
(g7
g3
NtRp3188
(dp3189
g10
g1
(g95
g3
NtRp3190
(dp3191
g98
(lp3192
g2043
asg12
(itheano.gof.utils
scratchpad
p3193
(dp3194
g15
(lp3195
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3196
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3197
a(g1705
I753
g1706
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3198
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3199
asbsg147
(lp3200
g3188
asg149
g1
(g374
g3
NtRp3201
(dp3202
g377
(lp3203
sg379
(lp3204
sg381
(lp3205
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp3206
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3207
(dp3208
bsg28
g1
(g29
g3
NtRp3209
(dp3210
g32
(I01
I01
tp3211
sg34
g2050
sg36
g246
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3212
(dp3213
g10
g1
(g95
g3
NtRp3214
(dp3215
g98
(lp3216
g1002
asg12
(itheano.gof.utils
scratchpad
p3217
(dp3218
g15
(lp3219
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3220
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3221
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3222
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3223
asbsg147
(lp3224
g3212
asg149
g1
(g183
g3
NtRp3225
(dp3226
g40
Nsg188
g337
sg206
(dp3227
sg208
Nsg209
(dp3228
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3229
(dp3230
g15
(lp3231
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3232
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3233
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3234
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3235
asbsg28
g1
(g29
g3
NtRp3236
(dp3237
g32
(I00
I00
tp3238
sg34
S'float64'
p3239
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3240
(dp3241
g15
(lp3242
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3243
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3244
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3245
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3246
asbsg147
(lp3247
g3183
asg149
g1
(g183
g3
NtRp3248
(dp3249
g40
Nsg188
g1276
sg206
(dp3250
sg208
Nsg209
(dp3251
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3252
(dp3253
g15
(lp3254
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3255
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3256
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3257
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3258
asbsg28
g1
(g29
g3
NtRp3259
(dp3260
g32
(I00
I00
tp3261
sg34
S'float64'
p3262
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3263
(dp3264
g15
(lp3265
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3266
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3267
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3268
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3269
asbsg147
(lp3270
g2573
asg149
g1
(g183
g3
NtRp3271
(dp3272
g40
Nsg188
g296
sg206
(dp3273
sg208
Nsg209
(dp3274
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3275
(dp3276
g15
(lp3277
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3278
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3279
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3280
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3281
asbsg28
g1
(g29
g3
NtRp3282
(dp3283
g32
(I00
I00
tp3284
sg34
S'float64'
p3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3286
(dp3287
g15
(lp3288
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp3289
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3290
a(g1700
I700
g905
S'sr = Sum(axis=to_sum)(rval[i])'
tp3291
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3292
asbsg147
(lp3293
g2568
asg149
g1
(g1441
g3
NtRp3294
(dp3295
g1444
g3285
sg34
g3285
sg153
g154
sg188
g589
sg1445
(I0
tp3296
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3297
(dp3298
g15
(lp3299
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3300
a(g1451
I1797
g161
S'return CAReduce.make_node(op, input)'
tp3301
a(g1453
I1299
g161
S'broadcastable=broadcastable)()'
tp3302
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3303
asbsg28
g1
(g29
g3
NtRp3304
(dp3305
g32
(I00
tp3306
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3307
(dp3308
g15
(lp3309
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3310
a(g1700
I701
g905
S'sr = sr.dimshuffle(shuffle)'
tp3311
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p3312
I324
S'dimshuffle'
p3313
S'return op(self)'
tp3314
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3315
asbsg147
(lp3316
g2563
asg149
g1
(g374
g3
NtRp3317
(dp3318
g377
(lp3319
sg379
(lp3320
I0
asg381
(lp3321
I0
asg383
(I00
tp3322
sg384
I00
sg385
(S'x'
I0
tp3323
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3324
(dp3325
bsg28
g1
(g29
g3
NtRp3326
(dp3327
g32
(I01
I00
tp3328
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3329
(dp3330
g15
(lp3331
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp3332
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3333
a(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp3334
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3335
asbsg147
(lp3336
g2558
asg149
g1
(g183
g3
NtRp3337
(dp3338
g40
Nsg188
g2416
sg206
(dp3339
sg208
Nsg209
(dp3340
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3341
(dp3342
g15
(lp3343
(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp3344
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3345
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3346
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3347
asbsg28
g1
(g29
g3
NtRp3348
(dp3349
g32
(I01
I00
tp3350
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3351
(dp3352
g15
(lp3353
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp3354
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3355
a(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp3356
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3357
asbsg147
(lp3358
g2553
asg149
g1
(g374
g3
NtRp3359
(dp3360
g377
(lp3361
I0
asg379
(lp3362
I1
asg381
(lp3363
sg383
g3328
sg384
I00
sg385
(I1
tp3364
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3365
(dp3366
bsg28
g1
(g29
g3
NtRp3367
(dp3368
g32
(I00
tp3369
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3370
(dp3371
g15
(lp3372
(g418
I74
g419
S'updates=self.get_updates(),'
tp3373
a(g1162
I253
g1163
S'(self.bias, self.bias - self.learning_rate*bias_gradient),'
tp3374
a(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp3375
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3376
asbsg147
(lp3377
g2516
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3378
(dp3379
g15
(lp3380
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp3381
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3382
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3383
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3384
asbsg28
g1
(g29
g3
NtRp3385
(dp3386
g32
(I00
tp3387
sg34
S'float64'
p3388
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3389
(dp3390
g15
(lp3391
(g418
I74
g419
S'updates=self.get_updates(),'
tp3392
a(g1162
I253
g1163
S'(self.bias, self.bias - self.learning_rate*bias_gradient),'
tp3393
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp3394
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3395
asbsg147
(lp3396
g2511
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3397
(dp3398
g15
(lp3399
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp3400
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3401
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3402
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3403
asbsg28
g1
(g29
g3
NtRp3404
(dp3405
g32
(I00
tp3406
sg34
S'float64'
p3407
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg407
g47
sg408
I01
sg54
I00
sg409
I01
sg410
I01
sg411
g43
sg428
I01
sg60
Nsbag1
(g403
g3
NtRp3408
(dp3409
g40
g68
sg273
g1
(g7
g3
NtRp3410
(dp3411
g10
g1
(g95
g3
NtRp3412
(dp3413
g98
(lp3414
g64
ag1
(g7
g3
NtRp3415
(dp3416
g10
g1
(g95
g3
NtRp3417
(dp3418
g98
(lp3419
g1
(g7
g3
NtRp3420
(dp3421
g10
g1
(g95
g3
NtRp3422
(dp3423
g98
(lp3424
g1
(g226
g3
NtRp3425
(dp3426
g11
Nsg12
(itheano.gof.utils
scratchpad
p3427
(dp3428
g235
Nsbsg28
g1
(g29
g3
NtRp3429
(dp3430
g32
(tsg34
S'float64'
p3431
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp3432
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p3433
(dp3434
g15
(lp3435
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp3436
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3437
a(g219
I533
g161
S'inplace=False)(input))'
tp3438
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3439
asbsg147
(lp3440
g3420
asg149
g1
(g374
g3
NtRp3441
(dp3442
g377
(lp3443
sg379
(lp3444
sg381
(lp3445
I0
asg383
(tsg384
I00
sg385
(S'x'
tp3446
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3447
(dp3448
bsg28
g1
(g29
g3
NtRp3449
(dp3450
g32
(I01
tp3451
sg34
g3431
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3452
(dp3453
g10
g1
(g95
g3
NtRp3454
(dp3455
g98
(lp3456
g1
(g7
g3
NtRp3457
(dp3458
g10
g1
(g95
g3
NtRp3459
(dp3460
g98
(lp3461
g1
(g7
g3
NtRp3462
(dp3463
g10
g1
(g95
g3
NtRp3464
(dp3465
g98
(lp3466
g1
(g7
g3
NtRp3467
(dp3468
g10
g1
(g95
g3
NtRp3469
(dp3470
g98
(lp3471
g1
(g7
g3
NtRp3472
(dp3473
g10
g1
(g95
g3
NtRp3474
(dp3475
g98
(lp3476
g1
(g7
g3
NtRp3477
(dp3478
g10
g1
(g95
g3
NtRp3479
(dp3480
g98
(lp3481
g1
(g7
g3
NtRp3482
(dp3483
g10
g1
(g95
g3
NtRp3484
(dp3485
g98
(lp3486
g1
(g7
g3
NtRp3487
(dp3488
g10
g1
(g95
g3
NtRp3489
(dp3490
g98
(lp3491
g1
(g7
g3
NtRp3492
(dp3493
g10
g1
(g95
g3
NtRp3494
(dp3495
g98
(lp3496
g1
(g7
g3
NtRp3497
(dp3498
g10
g1
(g95
g3
NtRp3499
(dp3500
g98
(lp3501
g967
ag1
(g7
g3
NtRp3502
(dp3503
g10
g1
(g95
g3
NtRp3504
(dp3505
g98
(lp3506
g1
(g7
g3
NtRp3507
(dp3508
g10
g1
(g95
g3
NtRp3509
(dp3510
g98
(lp3511
g1
(g7
g3
NtRp3512
(dp3513
g10
g1
(g95
g3
NtRp3514
(dp3515
g98
(lp3516
g1421
ag1
(g7
g3
NtRp3517
(dp3518
g10
g1
(g95
g3
NtRp3519
(dp3520
g98
(lp3521
g1
(g7
g3
NtRp3522
(dp3523
g10
g1
(g95
g3
NtRp3524
(dp3525
g98
(lp3526
g1
(g7
g3
NtRp3527
(dp3528
g10
g1
(g95
g3
NtRp3529
(dp3530
g98
(lp3531
g1507
ag1652
asg12
(itheano.gof.utils
scratchpad
p3532
(dp3533
g15
(lp3534
(g1663
I450
g905
S'g_cost = _float_ones_like(cost)'
tp3535
a(g1665
I1124
g1666
S'rval = tensor.ones_like(x)'
tp3536
a(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp3537
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3538
asbsg147
(lp3539
g3527
asg149
g1673
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3540
(dp3541
g15
(lp3542
(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp3543
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3544
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3545
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3546
asbsg28
g1
(g29
g3
NtRp3547
(dp3548
g32
(tsg34
g1659
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1538
asg12
(itheano.gof.utils
scratchpad
p3549
(dp3550
g15
(lp3551
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3552
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3553
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3554
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3555
asbsg147
(lp3556
g3522
asg149
g1
(g183
g3
NtRp3557
(dp3558
g40
Nsg188
g1633
sg206
(dp3559
sg208
Nsg209
(dp3560
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3561
(dp3562
g15
(lp3563
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3564
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3565
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3566
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3567
asbsg28
g1
(g29
g3
NtRp3568
(dp3569
g32
(tsg34
S'float64'
p3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3571
(dp3572
g15
(lp3573
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp3574
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3575
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3576
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3577
asbsg147
(lp3578
g3517
asg149
g1
(g374
g3
NtRp3579
(dp3580
g377
(lp3581
sg379
(lp3582
sg381
(lp3583
I0
asg383
(tsg384
I00
sg385
(S'x'
tp3584
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3585
(dp3586
bsg28
g1
(g29
g3
NtRp3587
(dp3588
g32
(I01
tp3589
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3590
(dp3591
g15
(lp3592
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp3593
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3594
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3595
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3596
asbsg147
(lp3597
g3512
asg149
g1
(g183
g3
NtRp3598
(dp3599
g40
Nsg188
g1676
sg206
(dp3600
sg208
Nsg209
(dp3601
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3602
(dp3603
g15
(lp3604
(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3605
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3606
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3607
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3608
asbsg28
g1
(g29
g3
NtRp3609
(dp3610
g32
(I00
tp3611
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3612
(dp3613
g15
(lp3614
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3615
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3616
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3617
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3618
asbsg147
(lp3619
g3507
asg149
g1
(g183
g3
NtRp3620
(dp3621
g40
Nsg188
g1472
sg206
(dp3622
sg208
Nsg209
(dp3623
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3624
(dp3625
g15
(lp3626
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3627
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3628
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3629
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3630
asbsg28
g1
(g29
g3
NtRp3631
(dp3632
g32
(I00
tp3633
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3634
(dp3635
g15
(lp3636
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp3637
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3638
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3639
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3640
asbsg147
(lp3641
g3502
asg149
g1
(g374
g3
NtRp3642
(dp3643
g377
(lp3644
sg379
(lp3645
I0
asg381
(lp3646
I1
asg383
g3633
sg384
I00
sg385
(I0
S'x'
tp3647
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3648
(dp3649
bsg28
g1
(g29
g3
NtRp3650
(dp3651
g32
(I00
I01
tp3652
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3653
(dp3654
g15
(lp3655
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp3656
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3657
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3658
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3659
asbsg147
(lp3660
g3497
asg149
g1
(g183
g3
NtRp3661
(dp3662
g40
Nsg188
g1676
sg206
(dp3663
sg208
Nsg209
(dp3664
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3665
(dp3666
g15
(lp3667
(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3668
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3669
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3670
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3671
asbsg28
g1
(g29
g3
NtRp3672
(dp3673
g32
(I00
I00
tp3674
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag412
asg12
(itheano.gof.utils
scratchpad
p3675
(dp3676
g15
(lp3677
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3678
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3679
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3680
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3681
asbsg147
(lp3682
g3492
asg149
g1
(g183
g3
NtRp3683
(dp3684
g40
Nsg188
g296
sg206
(dp3685
sg208
Nsg209
(dp3686
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3687
(dp3688
g15
(lp3689
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3690
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3691
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3692
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3693
asbsg28
g1
(g29
g3
NtRp3694
(dp3695
g32
(I00
I00
tp3696
sg34
S'float64'
p3697
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag982
asg12
(itheano.gof.utils
scratchpad
p3698
(dp3699
g15
(lp3700
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3701
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3702
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3703
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3704
asbsg147
(lp3705
g3487
asg149
g1
(g183
g3
NtRp3706
(dp3707
g40
Nsg188
g1633
sg206
(dp3708
sg208
Nsg209
(dp3709
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3710
(dp3711
g15
(lp3712
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3713
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3714
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3715
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3716
asbsg28
g1
(g29
g3
NtRp3717
(dp3718
g32
(I00
I00
tp3719
sg34
S'float64'
p3720
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3721
(dp3722
g10
g1
(g95
g3
NtRp3723
(dp3724
g98
(lp3725
g1
(g7
g3
NtRp3726
(dp3727
g10
g1
(g95
g3
NtRp3728
(dp3729
g98
(lp3730
g1
(g7
g3
NtRp3731
(dp3732
g10
g1
(g95
g3
NtRp3733
(dp3734
g98
(lp3735
g3497
ag1234
asg12
(itheano.gof.utils
scratchpad
p3736
(dp3737
g15
(lp3738
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3739
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3740
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3741
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3742
asbsg147
(lp3743
g3731
asg149
g1
(g183
g3
NtRp3744
(dp3745
g40
Nsg188
g296
sg206
(dp3746
sg208
Nsg209
(dp3747
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3748
(dp3749
g15
(lp3750
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3751
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3752
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3753
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3754
asbsg28
g1
(g29
g3
NtRp3755
(dp3756
g32
(I00
I00
tp3757
sg34
S'float64'
p3758
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1301
asg12
(itheano.gof.utils
scratchpad
p3759
(dp3760
g15
(lp3761
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3762
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3763
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3764
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3765
asbsg147
(lp3766
g3726
asg149
g1
(g183
g3
NtRp3767
(dp3768
g40
Nsg188
g1633
sg206
(dp3769
sg208
Nsg209
(dp3770
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3771
(dp3772
g15
(lp3773
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3774
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3775
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3776
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3777
asbsg28
g1
(g29
g3
NtRp3778
(dp3779
g32
(I00
I00
tp3780
sg34
S'float64'
p3781
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3782
(dp3783
g15
(lp3784
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3785
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3786
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3787
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3788
asbsg147
(lp3789
g3721
asg149
g1
(g183
g3
NtRp3790
(dp3791
g40
Nsg188
g1472
sg206
(dp3792
sg208
Nsg209
(dp3793
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3794
(dp3795
g15
(lp3796
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3797
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3798
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3799
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3800
asbsg28
g1
(g29
g3
NtRp3801
(dp3802
g32
(I00
I00
tp3803
sg34
g3781
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3804
(dp3805
g15
(lp3806
(g1727
I1090
g1728
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp3807
a(g1966
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp3808
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp3809
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3810
asbsg147
(lp3811
g3482
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3812
(dp3813
g15
(lp3814
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp3815
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3816
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3817
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3818
asbsg28
g1
(g29
g3
NtRp3819
(dp3820
g32
(I00
I00
tp3821
sg34
S'float64'
p3822
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3823
(dp3824
g10
g1
(g95
g3
NtRp3825
(dp3826
g98
(lp3827
g987
asg12
(itheano.gof.utils
scratchpad
p3828
(dp3829
g15
(lp3830
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3831
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3832
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3833
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3834
asbsg147
(lp3835
g3823
asg149
g1
(g183
g3
NtRp3836
(dp3837
g40
Nsg188
g337
sg206
(dp3838
sg208
Nsg209
(dp3839
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3840
(dp3841
g15
(lp3842
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3843
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3844
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3845
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3846
asbsg28
g1
(g29
g3
NtRp3847
(dp3848
g32
(I00
I00
tp3849
sg34
S'float64'
p3850
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3851
(dp3852
g15
(lp3853
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3854
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3855
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3856
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3857
asbsg147
(lp3858
g3477
asg149
g1
(g183
g3
NtRp3859
(dp3860
g40
Nsg188
g296
sg206
(dp3861
sg208
Nsg209
(dp3862
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3863
(dp3864
g15
(lp3865
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3866
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3867
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3868
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3869
asbsg28
g1
(g29
g3
NtRp3870
(dp3871
g32
(I00
I00
tp3872
sg34
S'float64'
p3873
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3874
(dp3875
g10
g1
(g95
g3
NtRp3876
(dp3877
g98
(lp3878
g1
(g7
g3
NtRp3879
(dp3880
g10
g1
(g95
g3
NtRp3881
(dp3882
g98
(lp3883
g2043
asg12
(itheano.gof.utils
scratchpad
p3884
(dp3885
g15
(lp3886
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3887
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3888
a(g1705
I753
g1706
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3889
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3890
asbsg147
(lp3891
g3879
asg149
g1
(g374
g3
NtRp3892
(dp3893
g377
(lp3894
sg379
(lp3895
sg381
(lp3896
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp3897
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3898
(dp3899
bsg28
g1
(g29
g3
NtRp3900
(dp3901
g32
(I01
I01
tp3902
sg34
g2050
sg36
g246
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3903
(dp3904
g10
g1
(g95
g3
NtRp3905
(dp3906
g98
(lp3907
g987
asg12
(itheano.gof.utils
scratchpad
p3908
(dp3909
g15
(lp3910
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3911
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3912
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3913
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3914
asbsg147
(lp3915
g3903
asg149
g1
(g183
g3
NtRp3916
(dp3917
g40
Nsg188
g337
sg206
(dp3918
sg208
Nsg209
(dp3919
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3920
(dp3921
g15
(lp3922
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3923
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3924
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3925
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3926
asbsg28
g1
(g29
g3
NtRp3927
(dp3928
g32
(I00
I00
tp3929
sg34
S'float64'
p3930
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3931
(dp3932
g15
(lp3933
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3934
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3935
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3936
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3937
asbsg147
(lp3938
g3874
asg149
g1
(g183
g3
NtRp3939
(dp3940
g40
Nsg188
g1276
sg206
(dp3941
sg208
Nsg209
(dp3942
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3943
(dp3944
g15
(lp3945
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3946
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3947
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3948
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3949
asbsg28
g1
(g29
g3
NtRp3950
(dp3951
g32
(I00
I00
tp3952
sg34
S'float64'
p3953
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3954
(dp3955
g15
(lp3956
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp3957
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp3958
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3959
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3960
asbsg147
(lp3961
g3472
asg149
g1
(g183
g3
NtRp3962
(dp3963
g40
Nsg188
g296
sg206
(dp3964
sg208
Nsg209
(dp3965
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3966
(dp3967
g15
(lp3968
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp3969
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3970
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3971
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3972
asbsg28
g1
(g29
g3
NtRp3973
(dp3974
g32
(I00
I00
tp3975
sg34
S'float64'
p3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3977
(dp3978
g15
(lp3979
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp3980
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3981
a(g1700
I700
g905
S'sr = Sum(axis=to_sum)(rval[i])'
tp3982
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3983
asbsg147
(lp3984
g3467
asg149
g1
(g1441
g3
NtRp3985
(dp3986
g1444
g3976
sg34
g3976
sg153
g154
sg188
g589
sg1445
(I0
tp3987
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3988
(dp3989
g15
(lp3990
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3991
a(g1451
I1797
g161
S'return CAReduce.make_node(op, input)'
tp3992
a(g1453
I1299
g161
S'broadcastable=broadcastable)()'
tp3993
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3994
asbsg28
g1
(g29
g3
NtRp3995
(dp3996
g32
(I00
tp3997
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3998
(dp3999
g15
(lp4000
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4001
a(g1700
I701
g905
S'sr = sr.dimshuffle(shuffle)'
tp4002
a(g3312
I324
g3313
S'return op(self)'
tp4003
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4004
asbsg147
(lp4005
g3462
asg149
g1
(g374
g3
NtRp4006
(dp4007
g377
(lp4008
sg379
(lp4009
I0
asg381
(lp4010
I0
asg383
(I00
tp4011
sg384
I00
sg385
(S'x'
I0
tp4012
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4013
(dp4014
bsg28
g1
(g29
g3
NtRp4015
(dp4016
g32
(I01
I00
tp4017
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4018
(dp4019
g15
(lp4020
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp4021
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4022
a(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp4023
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4024
asbsg147
(lp4025
g3457
asg149
g1
(g183
g3
NtRp4026
(dp4027
g40
Nsg188
g2416
sg206
(dp4028
sg208
Nsg209
(dp4029
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4030
(dp4031
g15
(lp4032
(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp4033
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4034
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4035
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4036
asbsg28
g1
(g29
g3
NtRp4037
(dp4038
g32
(I01
I00
tp4039
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4040
(dp4041
g15
(lp4042
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp4043
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4044
a(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp4045
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4046
asbsg147
(lp4047
g3452
asg149
g1
(g374
g3
NtRp4048
(dp4049
g377
(lp4050
I0
asg379
(lp4051
I1
asg381
(lp4052
sg383
g4017
sg384
I00
sg385
(I1
tp4053
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4054
(dp4055
bsg28
g1
(g29
g3
NtRp4056
(dp4057
g32
(I00
tp4058
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4059
(dp4060
g15
(lp4061
(g418
I74
g419
S'updates=self.get_updates(),'
tp4062
a(g1162
I255
g1163
S'self.learning_rate*reverse_bias_gradient),'
tp4063
a(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp4064
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4065
asbsg147
(lp4066
g3415
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4067
(dp4068
g15
(lp4069
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp4070
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4071
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4072
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4073
asbsg28
g1
(g29
g3
NtRp4074
(dp4075
g32
(I00
tp4076
sg34
S'float64'
p4077
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4078
(dp4079
g15
(lp4080
(g418
I74
g419
S'updates=self.get_updates(),'
tp4081
a(g1162
I255
g1163
S'self.learning_rate*reverse_bias_gradient),'
tp4082
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4083
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4084
asbsg147
(lp4085
g3410
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4086
(dp4087
g15
(lp4088
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4089
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4090
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4091
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4092
asbsg28
g1
(g29
g3
NtRp4093
(dp4094
g32
(I00
tp4095
sg34
S'float64'
p4096
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg407
g66
sg408
I01
sg54
I00
sg409
I01
sg410
I01
sg411
g64
sg428
I01
sg60
Nsbag1
(g403
g3
NtRp4097
(dp4098
g40
g471
sg273
g1
(g7
g3
NtRp4099
(dp4100
g10
g1
(g95
g3
NtRp4101
(dp4102
g98
(lp4103
g480
ag1
(g7
g3
NtRp4104
(dp4105
g10
g1
(g95
g3
NtRp4106
(dp4107
g98
(lp4108
g1
(g7
g3
NtRp4109
(dp4110
g10
g1
(g95
g3
NtRp4111
(dp4112
g98
(lp4113
g1
(g226
g3
NtRp4114
(dp4115
g11
Nsg12
(itheano.gof.utils
scratchpad
p4116
(dp4117
g235
Nsbsg28
g1
(g29
g3
NtRp4118
(dp4119
g32
(tsg34
S'float64'
p4120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp4121
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p4122
(dp4123
g15
(lp4124
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp4125
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4126
a(g219
I533
g161
S'inplace=False)(input))'
tp4127
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4128
asbsg147
(lp4129
g4109
asg149
g1
(g374
g3
NtRp4130
(dp4131
g377
(lp4132
sg379
(lp4133
sg381
(lp4134
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp4135
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4136
(dp4137
bsg28
g1
(g29
g3
NtRp4138
(dp4139
g32
(I01
I01
tp4140
sg34
g4120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4141
(dp4142
g10
g1
(g95
g3
NtRp4143
(dp4144
g98
(lp4145
g1
(g7
g3
NtRp4146
(dp4147
g10
g1
(g95
g3
NtRp4148
(dp4149
g98
(lp4150
g1
(g7
g3
NtRp4151
(dp4152
g10
g1
(g95
g3
NtRp4153
(dp4154
g98
(lp4155
g1
(g7
g3
NtRp4156
(dp4157
g10
g1
(g95
g3
NtRp4158
(dp4159
g98
(lp4160
g1
(g7
g3
NtRp4161
(dp4162
g10
g1
(g95
g3
NtRp4163
(dp4164
g98
(lp4165
g891
ag349
asg12
(itheano.gof.utils
scratchpad
p4166
(dp4167
g15
(lp4168
(g532
I231
g533
S'theano.tensor.dot(self.get_hidden_output(),'
tp4169
a(g535
I170
g536
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp4170
a(g538
I4732
g539
S'return _dot(a, b)'
tp4171
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4172
asbsg147
(lp4173
g4161
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4174
(dp4175
bsg28
g1
(g29
g3
NtRp4176
(dp4177
g32
(I00
I00
tp4178
sg34
S'float64'
p4179
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4180
(dp4181
g10
g1
(g95
g3
NtRp4182
(dp4183
g98
(lp4184
g43
asg12
(itheano.gof.utils
scratchpad
p4185
(dp4186
g15
(lp4187
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp4188
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4189
a(g219
I533
g161
S'inplace=False)(input))'
tp4190
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4191
asbsg147
(lp4192
g4180
asg149
g1
(g374
g3
NtRp4193
(dp4194
g377
(lp4195
sg379
(lp4196
I0
asg381
(lp4197
I0
asg383
g58
sg384
I00
sg385
(S'x'
I0
tp4198
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4199
(dp4200
bsg28
g1
(g29
g3
NtRp4201
(dp4202
g32
(I01
I00
tp4203
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4204
(dp4205
g15
(lp4206
(g532
I231
g533
S'theano.tensor.dot(self.get_hidden_output(),'
tp4207
a(g535
I171
g536
S'self.bias)'
tp4208
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp4209
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4210
asbsg147
(lp4211
g4156
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4212
(dp4213
g15
(lp4214
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp4215
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4216
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4217
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4218
asbsg28
g1
(g29
g3
NtRp4219
(dp4220
g32
(I00
I00
tp4221
sg34
S'float64'
p4222
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4223
(dp4224
g15
(lp4225
(S'denoising_autoencoder_cart_pole.py'
p4226
I47
S'get_lr_cost'
p4227
S'expected_reward = self.get_symbolic_expected_rewards()['
tp4228
a(g532
I231
g533
S'theano.tensor.dot(self.get_hidden_output(),'
tp4229
a(g535
I171
g536
S'self.bias)'
tp4230
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4231
asbsg147
(lp4232
g4151
asg149
g333
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4233
(dp4234
g15
(lp4235
(g535
I171
g536
S'self.bias)'
tp4236
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4237
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4238
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4239
asbsg28
g1
(g29
g3
NtRp4240
(dp4241
g32
(I00
I00
tp4242
sg34
S'float64'
p4243
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4244
(dp4245
g15
(lp4246
(g904
I4578
g905
S'ygrad = dot(x.T, gz)'
tp4247
a(g367
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp4248
a(g369
I3084
g370
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp4249
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4250
asbsg147
(lp4251
g4146
asg149
g1
(g374
g3
NtRp4252
(dp4253
g377
(lp4254
sg379
(lp4255
I1
aI0
asg381
(lp4256
sg383
g4242
sg384
I00
sg385
(I1
I0
tp4257
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4258
(dp4259
bsg28
g1
(g29
g3
NtRp4260
(dp4261
g32
(I00
I00
tp4262
sg34
g4243
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4263
(dp4264
g10
g1
(g95
g3
NtRp4265
(dp4266
g98
(lp4267
g1
(g7
g3
NtRp4268
(dp4269
g10
g1
(g95
g3
NtRp4270
(dp4271
g98
(lp4272
g1
(g7
g3
NtRp4273
(dp4274
g10
g1
(g95
g3
NtRp4275
(dp4276
g98
(lp4277
g1
(g7
g3
NtRp4278
(dp4279
g10
g1
(g95
g3
NtRp4280
(dp4281
g98
(lp4282
g1
(g7
g3
NtRp4283
(dp4284
g10
g1
(g95
g3
NtRp4285
(dp4286
g98
(lp4287
g1
(g7
g3
NtRp4288
(dp4289
g10
g1
(g95
g3
NtRp4290
(dp4291
g98
(lp4292
g4151
ag480
asg12
(itheano.gof.utils
scratchpad
p4293
(dp4294
g15
(lp4295
(g4226
I47
g4227
S'expected_reward = self.get_symbolic_expected_rewards()['
tp4296
a(g532
I232
g533
S'self.label_weights) + self.label_bias)'
tp4297
a(g538
I4732
g539
S'return _dot(a, b)'
tp4298
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4299
asbsg147
(lp4300
g4288
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4301
(dp4302
bsg28
g1
(g29
g3
NtRp4303
(dp4304
g32
(I00
I00
tp4305
sg34
S'float64'
p4306
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4307
(dp4308
g10
g1
(g95
g3
NtRp4309
(dp4310
g98
(lp4311
g319
asg12
(itheano.gof.utils
scratchpad
p4312
(dp4313
g15
(lp4314
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp4315
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4316
a(g219
I533
g161
S'inplace=False)(input))'
tp4317
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4318
asbsg147
(lp4319
g4307
asg149
g1
(g374
g3
NtRp4320
(dp4321
g377
(lp4322
sg379
(lp4323
I0
asg381
(lp4324
I0
asg383
g328
sg384
I00
sg385
(S'x'
I0
tp4325
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4326
(dp4327
bsg28
g1
(g29
g3
NtRp4328
(dp4329
g32
(I01
I00
tp4330
sg34
g329
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4331
(dp4332
g15
(lp4333
(g4226
I47
g4227
S'expected_reward = self.get_symbolic_expected_rewards()['
tp4334
a(g532
I232
g533
S'self.label_weights) + self.label_bias)'
tp4335
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp4336
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4337
asbsg147
(lp4338
g4283
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4339
(dp4340
g15
(lp4341
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp4342
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4343
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4344
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4345
asbsg28
g1
(g29
g3
NtRp4346
(dp4347
g32
(I00
I00
tp4348
sg34
S'float64'
p4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4350
(dp4351
g15
(lp4352
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4353
a(g4226
I47
g4227
S'expected_reward = self.get_symbolic_expected_rewards()['
tp4354
a(g532
I232
g533
S'self.label_weights) + self.label_bias)'
tp4355
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4356
asbsg147
(lp4357
g4278
asg149
g693
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4358
(dp4359
g15
(lp4360
(g532
I232
g533
S'self.label_weights) + self.label_bias)'
tp4361
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4362
a(g700
I359
g161
S'return Apply(self, [x], [x.type()])'
tp4363
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4364
asbsg28
g4346
sg40
Nsbag1
(g7
g3
NtRp4365
(dp4366
g10
g1
(g95
g3
NtRp4367
(dp4368
g98
(lp4369
g1
(g226
g3
NtRp4370
(dp4371
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp4372
(I1
(tg38
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg12
(itheano.gof.utils
scratchpad
p4373
(dp4374
g235
Nsbsg28
g1
(g29
g3
NtRp4375
(dp4376
g32
(tsg34
S'float64'
p4377
sg36
g38
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p4378
(dp4379
g15
(lp4380
(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p4381
I2079
S'zeros_like'
p4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp4383
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4384
a(g219
I533
g161
S'inplace=False)(input))'
tp4385
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4386
asbsg147
(lp4387
g4365
asg149
g1
(g374
g3
NtRp4388
(dp4389
g377
(lp4390
sg379
(lp4391
sg381
(lp4392
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp4393
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4394
(dp4395
bsg28
g1
(g29
g3
NtRp4396
(dp4397
g32
(I01
I01
tp4398
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4399
(dp4400
g15
(lp4401
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4402
a(S'/Library/Python/2.7/site-packages/theano/tensor/subtensor.py'
p4403
I1824
g905
S'return [advanced_inc_subtensor(theano.tensor.zeros_like(x), gz,'
tp4404
a(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp4405
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4406
asbsg147
(lp4407
g4273
asg149
g1673
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4408
(dp4409
g15
(lp4410
(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp4411
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4412
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4413
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4414
asbsg28
g1
(g29
g3
NtRp4415
(dp4416
g32
(I00
I00
tp4417
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4418
(dp4419
g10
g1
(g95
g3
NtRp4420
(dp4421
g98
(lp4422
g1
(g7
g3
NtRp4423
(dp4424
g10
g1
(g95
g3
NtRp4425
(dp4426
g98
(lp4427
g1
(g7
g3
NtRp4428
(dp4429
g10
g1
(g95
g3
NtRp4430
(dp4431
g98
(lp4432
g1
(g7
g3
NtRp4433
(dp4434
g10
g1
(g95
g3
NtRp4435
(dp4436
g98
(lp4437
g1
(g7
g3
NtRp4438
(dp4439
g10
g1
(g95
g3
NtRp4440
(dp4441
g98
(lp4442
g1
(g7
g3
NtRp4443
(dp4444
g10
g1
(g95
g3
NtRp4445
(dp4446
g98
(lp4447
g785
ag1
(g7
g3
NtRp4448
(dp4449
g10
g1
(g95
g3
NtRp4450
(dp4451
g98
(lp4452
g4278
ag1
(g7
g3
NtRp4453
(dp4454
g10
g1
(g95
g3
NtRp4455
(dp4456
g98
(lp4457
g1
(g226
g3
NtRp4458
(dp4459
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp4460
(I1
(tg232
I00
S'\x00'
tbsg12
(itheano.gof.utils
scratchpad
p4461
(dp4462
g235
Nsbsg28
g1
(g29
g3
NtRp4463
(dp4464
g32
(tsg34
S'int8'
p4465
sg36
g232
sg39
I00
sg40
Nsbsbag1
(g7
g3
NtRp4466
(dp4467
g10
g1
(g95
g3
NtRp4468
(dp4469
g98
(lp4470
g1
(g7
g3
NtRp4471
(dp4472
g10
g1
(g95
g3
NtRp4473
(dp4474
g98
(lp4475
g770
asg12
(itheano.gof.utils
scratchpad
p4476
(dp4477
g15
(lp4478
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4479
a(g4226
I48
g4227
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4480
a(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp4481
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4482
asbsg147
(lp4483
g4471
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4484
(dp4485
g15
(lp4486
(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp4487
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4488
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp4489
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4490
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4491
(dp4492
g15
(lp4493
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4494
a(g4226
I48
g4227
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4495
a(g1605
I407
g1606
S'lambda entry: isinstance(entry, Variable)))'
tp4496
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4497
asbsg147
(lp4498
g4466
asg149
g1
(g1610
g3
NtRp4499
(dp4500
g1613
(g1614
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp4501
tp4502
sg1617
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4503
(dp4504
bsg28
g1
(g29
g3
NtRp4505
(dp4506
g32
(tsg34
g167
sg36
g168
sg39
I00
sg40
Nsbsg40
Nsbag227
asg12
(itheano.gof.utils
scratchpad
p4507
(dp4508
g15
(lp4509
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4510
a(g4226
I48
g4227
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4511
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p4512
I4272
S'arange'
p4513
S'return _arange[dtype](start, stop, step)'
tp4514
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4515
asbsg147
(lp4516
g4453
asg149
g1
(ctheano.tensor.basic
ARange
p4517
g3
NtRp4518
(dp4519
g34
S'int64'
p4520
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4521
(dp4522
bsg28
g1
(g29
g3
NtRp4523
(dp4524
g32
(I00
tp4525
sg34
g4520
sg36
g168
sg39
I00
sg40
Nsbsg40
Nsbag770
asg12
(itheano.gof.utils
scratchpad
p4526
(dp4527
g15
(lp4528
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4529
a(g4226
I49
g4227
S'self.action_vector]'
tp4530
a(g1605
I381
g1606
S'return theano.tensor.subtensor.AdvancedSubtensor()(self, *args)'
tp4531
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4532
asbsg147
(lp4533
g4448
asg149
g1
(ctheano.tensor.subtensor
AdvancedSubtensor
p4534
g3
NtRp4535
(dp4536
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4537
(dp4538
bsg28
g1
(g29
g3
NtRp4539
(dp4540
g32
(I00
tp4541
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4542
(dp4543
g15
(lp4544
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4545
a(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4546
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4547
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4548
asbsg147
(lp4549
g4443
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4550
(dp4551
g15
(lp4552
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4553
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4554
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4555
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4556
asbsg28
g1
(g29
g3
NtRp4557
(dp4558
g32
(I00
tp4559
sg34
S'float64'
p4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4561
(dp4562
g15
(lp4563
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4564
a(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4565
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p4566
I24
S'__abs__'
p4567
S'return theano.tensor.basic.abs_(self)'
tp4568
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4569
asbsg147
(lp4570
g4438
asg149
g1
(g183
g3
NtRp4571
(dp4572
g186
g294
sg188
g1
(ctheano.scalar.basic
Abs
p4573
g3
NtRp4574
(dp4575
g192
g1474
sg153
g154
sg40
Nsbsg40
S'Elemwise{abs_,no_inplace}'
p4576
sg153
g154
sg206
(dp4577
sg208
(S'abs'
p4578
I1
I1
tp4579
sg209
(dp4580
sg305
S"|`a`|\n\n    TensorVariable overloads the `TensorVariable.__abs__` operator so that\n    this function is called when you type abs(a).\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p4581
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4582
(dp4583
g15
(lp4584
(g4566
I24
g4567
S'return theano.tensor.basic.abs_(self)'
tp4585
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4586
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4587
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4588
asbsg28
g1
(g29
g3
NtRp4589
(dp4590
g32
(I00
tp4591
sg34
g4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4592
(dp4593
g10
g1
(g95
g3
NtRp4594
(dp4595
g98
(lp4596
g1
(g7
g3
NtRp4597
(dp4598
g10
g1
(g95
g3
NtRp4599
(dp4600
g98
(lp4601
g1
(g7
g3
NtRp4602
(dp4603
g10
g1
(g95
g3
NtRp4604
(dp4605
g98
(lp4606
g1
(g7
g3
NtRp4607
(dp4608
g10
g1
(g95
g3
NtRp4609
(dp4610
g98
(lp4611
g1
(g7
g3
NtRp4612
(dp4613
g10
g1
(g95
g3
NtRp4614
(dp4615
g98
(lp4616
g4438
asg12
(itheano.gof.utils
scratchpad
p4617
(dp4618
g15
(lp4619
(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4620
a(g1521
I2802
g1522
S'acc_dtype=acc_dtype)'
tp4621
a(g1436
I2670
g1437
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp4622
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4623
asbsg147
(lp4624
g4612
asg149
g1
(g1441
g3
NtRp4625
(dp4626
g1444
g4560
sg34
g4560
sg153
g154
sg188
g589
sg1445
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4627
(dp4628
g15
(lp4629
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4630
a(g1451
I1797
g161
S'return CAReduce.make_node(op, input)'
tp4631
a(g1453
I1299
g161
S'broadcastable=broadcastable)()'
tp4632
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4633
asbsg28
g1
(g29
g3
NtRp4634
(dp4635
g32
(tsg34
g4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4636
(dp4637
g10
g1
(g95
g3
NtRp4638
(dp4639
g98
(lp4640
g1
(g7
g3
NtRp4641
(dp4642
g10
g1
(g95
g3
NtRp4643
(dp4644
g98
(lp4645
g1
(g7
g3
NtRp4646
(dp4647
g10
g1
(g95
g3
NtRp4648
(dp4649
g98
(lp4650
g4438
asg12
(itheano.gof.utils
scratchpad
p4651
(dp4652
g15
(lp4653
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4654
a(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4655
a(g1521
I2803
g1522
S'shp = shape(input)'
tp4656
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4657
asbsg147
(lp4658
g4646
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4659
(dp4660
g15
(lp4661
(g1521
I2803
g1522
S'shp = shape(input)'
tp4662
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4663
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp4664
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4665
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4666
(dp4667
g15
(lp4668
(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4669
a(g1521
I2811
g1522
S"shp = cast(shp, 'float64')"
tp4670
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp4671
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4672
asbsg147
(lp4673
g4641
asg149
g1576
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4674
(dp4675
g15
(lp4676
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp4677
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4678
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4679
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4680
asbsg28
g1
(g29
g3
NtRp4681
(dp4682
g32
(I00
tp4683
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4684
(dp4685
g15
(lp4686
(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4687
a(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp4688
a(g1605
I407
g1606
S'lambda entry: isinstance(entry, Variable)))'
tp4689
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4690
asbsg147
(lp4691
g4636
asg149
g1
(g1610
g3
NtRp4692
(dp4693
g1613
(g1614
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp4694
tp4695
sg1617
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4696
(dp4697
bsg28
g1
(g29
g3
NtRp4698
(dp4699
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4700
(dp4701
g15
(lp4702
(g1162
I247
g1163
S'lr_cost = self.get_lr_cost()'
tp4703
a(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4704
a(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp4705
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4706
asbsg147
(lp4707
g4607
asg149
g1630
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4708
(dp4709
g15
(lp4710
(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp4711
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4712
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4713
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4714
asbsg28
g1
(g29
g3
NtRp4715
(dp4716
g32
(tsg34
S'float64'
p4717
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1652
asg12
(itheano.gof.utils
scratchpad
p4718
(dp4719
g15
(lp4720
(g1663
I450
g905
S'g_cost = _float_ones_like(cost)'
tp4721
a(g1665
I1124
g1666
S'rval = tensor.ones_like(x)'
tp4722
a(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp4723
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4724
asbsg147
(lp4725
g4602
asg149
g1673
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4726
(dp4727
g15
(lp4728
(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp4729
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4730
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4731
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4732
asbsg28
g1
(g29
g3
NtRp4733
(dp4734
g32
(tsg34
g1659
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4636
asg12
(itheano.gof.utils
scratchpad
p4735
(dp4736
g15
(lp4737
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp4738
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp4739
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4740
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4741
asbsg147
(lp4742
g4597
asg149
g1
(g183
g3
NtRp4743
(dp4744
g40
Nsg188
g1633
sg206
(dp4745
sg208
Nsg209
(dp4746
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4747
(dp4748
g15
(lp4749
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4750
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4751
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4752
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4753
asbsg28
g1
(g29
g3
NtRp4754
(dp4755
g32
(tsg34
S'float64'
p4756
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4757
(dp4758
g15
(lp4759
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp4760
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4761
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4762
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4763
asbsg147
(lp4764
g4592
asg149
g1
(g374
g3
NtRp4765
(dp4766
g377
(lp4767
sg379
(lp4768
sg381
(lp4769
I0
asg383
(tsg384
I00
sg385
(S'x'
tp4770
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4771
(dp4772
bsg28
g1
(g29
g3
NtRp4773
(dp4774
g32
(I01
tp4775
sg34
g4756
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4776
(dp4777
g15
(lp4778
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp4779
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4780
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4781
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4782
asbsg147
(lp4783
g4433
asg149
g1
(g183
g3
NtRp4784
(dp4785
g40
Nsg188
g1676
sg206
(dp4786
sg208
Nsg209
(dp4787
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4788
(dp4789
g15
(lp4790
(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4791
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4792
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4793
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4794
asbsg28
g1
(g29
g3
NtRp4795
(dp4796
g32
(I00
tp4797
sg34
g4756
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4443
asg12
(itheano.gof.utils
scratchpad
p4798
(dp4799
g15
(lp4800
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp4801
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4802
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4803
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4804
asbsg147
(lp4805
g4428
asg149
g1
(g183
g3
NtRp4806
(dp4807
g40
Nsg188
g296
sg206
(dp4808
sg208
Nsg209
(dp4809
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4810
(dp4811
g15
(lp4812
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4813
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4814
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4815
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4816
asbsg28
g1
(g29
g3
NtRp4817
(dp4818
g32
(I00
tp4819
sg34
S'float64'
p4820
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4821
(dp4822
g10
g1
(g95
g3
NtRp4823
(dp4824
g98
(lp4825
g4443
asg12
(itheano.gof.utils
scratchpad
p4826
(dp4827
g15
(lp4828
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp4829
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4830
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4831
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4832
asbsg147
(lp4833
g4821
asg149
g1
(g183
g3
NtRp4834
(dp4835
g40
Nsg188
g4574
sg206
(dp4836
sg208
Nsg209
(dp4837
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4838
(dp4839
g15
(lp4840
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4841
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4842
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4843
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4844
asbsg28
g1
(g29
g3
NtRp4845
(dp4846
g32
(I00
tp4847
sg34
g4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4848
(dp4849
g15
(lp4850
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp4851
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp4852
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4853
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4854
asbsg147
(lp4855
g4423
asg149
g1
(g183
g3
NtRp4856
(dp4857
g40
Nsg188
g1633
sg206
(dp4858
sg208
Nsg209
(dp4859
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4860
(dp4861
g15
(lp4862
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4863
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4864
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4865
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4866
asbsg28
g1
(g29
g3
NtRp4867
(dp4868
g32
(I00
tp4869
sg34
S'float64'
p4870
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4871
(dp4872
g15
(lp4873
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp4874
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp4875
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4876
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4877
asbsg147
(lp4878
g4418
asg149
g1
(g183
g3
NtRp4879
(dp4880
g40
Nsg188
g1472
sg206
(dp4881
sg208
Nsg209
(dp4882
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4883
(dp4884
g15
(lp4885
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp4886
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4887
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4888
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4889
asbsg28
g1
(g29
g3
NtRp4890
(dp4891
g32
(I00
tp4892
sg34
g4870
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4453
ag770
asg12
(itheano.gof.utils
scratchpad
p4893
(dp4894
g15
(lp4895
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp4896
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4897
a(g4403
I1825
g905
S'*rest)] + \\'
tp4898
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4899
asbsg147
(lp4900
g4268
asg149
g1
(ctheano.tensor.subtensor
AdvancedIncSubtensor
p4901
g3
NtRp4902
(dp4903
S'allow_legacy_perform'
p4904
I01
sg153
g154
sS'set_instead_of_inc'
p4905
I00
sg384
I00
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4906
(dp4907
bsg28
g1
(g29
g3
NtRp4908
(dp4909
g32
(I00
I00
tp4910
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4911
(dp4912
g10
g1
(g95
g3
NtRp4913
(dp4914
g98
(lp4915
g4283
asg12
(itheano.gof.utils
scratchpad
p4916
(dp4917
g15
(lp4918
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp4919
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4920
a(S'/Library/Python/2.7/site-packages/theano/tensor/nnet/nnet.py'
p4921
I370
g905
S'sm = softmax(x)'
tp4922
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4923
asbsg147
(lp4924
g4911
asg149
g693
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4925
(dp4926
g15
(lp4927
(g4921
I370
g905
S'sm = softmax(x)'
tp4928
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4929
a(g700
I359
g161
S'return Apply(self, [x], [x.type()])'
tp4930
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4931
asbsg28
g4346
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4932
(dp4933
g15
(lp4934
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp4935
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4936
a(g4921
I371
g905
S'return [softmax_grad(g_sm, sm)]'
tp4937
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4938
asbsg147
(lp4939
g4263
asg149
g1
(ctheano.tensor.nnet.nnet
SoftmaxGrad
p4940
g3
NtRp4941
(dp4942
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4943
(dp4944
bsg28
g4346
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4945
(dp4946
g15
(lp4947
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4948
a(g904
I4578
g905
S'ygrad = dot(x.T, gz)'
tp4949
a(g538
I4732
g539
S'return _dot(a, b)'
tp4950
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4951
asbsg147
(lp4952
g4141
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4953
(dp4954
bsg28
g1
(g29
g3
NtRp4955
(dp4956
g32
(I00
I00
tp4957
sg34
S'float64'
p4958
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4959
(dp4960
g15
(lp4961
(g418
I74
g419
S'updates=self.get_updates(),'
tp4962
a(g1162
I257
g1163
S'self.learning_rate*lr_weight_gradient),'
tp4963
a(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp4964
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4965
asbsg147
(lp4966
g4104
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4967
(dp4968
g15
(lp4969
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp4970
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4971
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4972
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4973
asbsg28
g1
(g29
g3
NtRp4974
(dp4975
g32
(I00
I00
tp4976
sg34
S'float64'
p4977
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4978
(dp4979
g15
(lp4980
(g418
I74
g419
S'updates=self.get_updates(),'
tp4981
a(g1162
I257
g1163
S'self.learning_rate*lr_weight_gradient),'
tp4982
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4983
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4984
asbsg147
(lp4985
g4099
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4986
(dp4987
g15
(lp4988
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4989
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4990
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4991
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4992
asbsg28
g1
(g29
g3
NtRp4993
(dp4994
g32
(I00
I00
tp4995
sg34
S'float64'
p4996
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg407
g472
sg408
I01
sg54
I00
sg409
I01
sg410
I01
sg411
g480
sg428
I01
sg60
Nsbag1
(g403
g3
NtRp4997
(dp4998
g40
g323
sg273
g1
(g7
g3
NtRp4999
(dp5000
g10
g1
(g95
g3
NtRp5001
(dp5002
g98
(lp5003
g319
ag1
(g7
g3
NtRp5004
(dp5005
g10
g1
(g95
g3
NtRp5006
(dp5007
g98
(lp5008
g1
(g7
g3
NtRp5009
(dp5010
g10
g1
(g95
g3
NtRp5011
(dp5012
g98
(lp5013
g1
(g226
g3
NtRp5014
(dp5015
g11
Nsg12
(itheano.gof.utils
scratchpad
p5016
(dp5017
g235
Nsbsg28
g1
(g29
g3
NtRp5018
(dp5019
g32
(tsg34
S'float64'
p5020
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp5021
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p5022
(dp5023
g15
(lp5024
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp5025
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5026
a(g219
I533
g161
S'inplace=False)(input))'
tp5027
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5028
asbsg147
(lp5029
g5009
asg149
g1
(g374
g3
NtRp5030
(dp5031
g377
(lp5032
sg379
(lp5033
sg381
(lp5034
I0
asg383
(tsg384
I00
sg385
(S'x'
tp5035
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5036
(dp5037
bsg28
g1
(g29
g3
NtRp5038
(dp5039
g32
(I01
tp5040
sg34
g5020
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5041
(dp5042
g10
g1
(g95
g3
NtRp5043
(dp5044
g98
(lp5045
g1
(g7
g3
NtRp5046
(dp5047
g10
g1
(g95
g3
NtRp5048
(dp5049
g98
(lp5050
g1
(g7
g3
NtRp5051
(dp5052
g10
g1
(g95
g3
NtRp5053
(dp5054
g98
(lp5055
g1
(g7
g3
NtRp5056
(dp5057
g10
g1
(g95
g3
NtRp5058
(dp5059
g98
(lp5060
g1
(g7
g3
NtRp5061
(dp5062
g10
g1
(g95
g3
NtRp5063
(dp5064
g98
(lp5065
g1
(g7
g3
NtRp5066
(dp5067
g10
g1
(g95
g3
NtRp5068
(dp5069
g98
(lp5070
g1
(g7
g3
NtRp5071
(dp5072
g10
g1
(g95
g3
NtRp5073
(dp5074
g98
(lp5075
g4278
ag1
(g7
g3
NtRp5076
(dp5077
g10
g1
(g95
g3
NtRp5078
(dp5079
g98
(lp5080
g4370
asg12
(itheano.gof.utils
scratchpad
p5081
(dp5082
g15
(lp5083
(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp5084
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5085
a(g219
I533
g161
S'inplace=False)(input))'
tp5086
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5087
asbsg147
(lp5088
g5076
asg149
g1
(g374
g3
NtRp5089
(dp5090
g377
(lp5091
sg379
(lp5092
sg381
(lp5093
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp5094
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5095
(dp5096
bsg28
g1
(g29
g3
NtRp5097
(dp5098
g32
(I01
I01
tp5099
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5100
(dp5101
g15
(lp5102
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5103
a(g4403
I1824
g905
S'return [advanced_inc_subtensor(theano.tensor.zeros_like(x), gz,'
tp5104
a(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp5105
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5106
asbsg147
(lp5107
g5071
asg149
g1673
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5108
(dp5109
g15
(lp5110
(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp5111
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5112
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5113
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5114
asbsg28
g1
(g29
g3
NtRp5115
(dp5116
g32
(I00
I00
tp5117
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5118
(dp5119
g10
g1
(g95
g3
NtRp5120
(dp5121
g98
(lp5122
g1
(g7
g3
NtRp5123
(dp5124
g10
g1
(g95
g3
NtRp5125
(dp5126
g98
(lp5127
g1
(g7
g3
NtRp5128
(dp5129
g10
g1
(g95
g3
NtRp5130
(dp5131
g98
(lp5132
g1
(g7
g3
NtRp5133
(dp5134
g10
g1
(g95
g3
NtRp5135
(dp5136
g98
(lp5137
g4438
ag1
(g7
g3
NtRp5138
(dp5139
g10
g1
(g95
g3
NtRp5140
(dp5141
g98
(lp5142
g1
(g7
g3
NtRp5143
(dp5144
g10
g1
(g95
g3
NtRp5145
(dp5146
g98
(lp5147
g1
(g7
g3
NtRp5148
(dp5149
g10
g1
(g95
g3
NtRp5150
(dp5151
g98
(lp5152
g4607
ag1652
asg12
(itheano.gof.utils
scratchpad
p5153
(dp5154
g15
(lp5155
(g1663
I450
g905
S'g_cost = _float_ones_like(cost)'
tp5156
a(g1665
I1124
g1666
S'rval = tensor.ones_like(x)'
tp5157
a(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp5158
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5159
asbsg147
(lp5160
g5148
asg149
g1673
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5161
(dp5162
g15
(lp5163
(g1668
I2070
g1669
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp5164
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5165
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5166
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5167
asbsg28
g1
(g29
g3
NtRp5168
(dp5169
g32
(tsg34
g1659
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4636
asg12
(itheano.gof.utils
scratchpad
p5170
(dp5171
g15
(lp5172
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp5173
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp5174
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5175
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5176
asbsg147
(lp5177
g5143
asg149
g1
(g183
g3
NtRp5178
(dp5179
g40
Nsg188
g1633
sg206
(dp5180
sg208
Nsg209
(dp5181
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5182
(dp5183
g15
(lp5184
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5185
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5186
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5187
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5188
asbsg28
g1
(g29
g3
NtRp5189
(dp5190
g32
(tsg34
S'float64'
p5191
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5192
(dp5193
g15
(lp5194
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp5195
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5196
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5197
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5198
asbsg147
(lp5199
g5138
asg149
g1
(g374
g3
NtRp5200
(dp5201
g377
(lp5202
sg379
(lp5203
sg381
(lp5204
I0
asg383
(tsg384
I00
sg385
(S'x'
tp5205
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5206
(dp5207
bsg28
g1
(g29
g3
NtRp5208
(dp5209
g32
(I01
tp5210
sg34
g5191
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5211
(dp5212
g15
(lp5213
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp5214
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5215
a(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5216
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5217
asbsg147
(lp5218
g5133
asg149
g1
(g183
g3
NtRp5219
(dp5220
g40
Nsg188
g1676
sg206
(dp5221
sg208
Nsg209
(dp5222
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5223
(dp5224
g15
(lp5225
(g1733
I1861
g905
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5226
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5227
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5228
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5229
asbsg28
g1
(g29
g3
NtRp5230
(dp5231
g32
(I00
tp5232
sg34
g5191
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4443
asg12
(itheano.gof.utils
scratchpad
p5233
(dp5234
g15
(lp5235
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp5236
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5237
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5238
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5239
asbsg147
(lp5240
g5128
asg149
g1
(g183
g3
NtRp5241
(dp5242
g40
Nsg188
g296
sg206
(dp5243
sg208
Nsg209
(dp5244
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5245
(dp5246
g15
(lp5247
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5248
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5249
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5250
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5251
asbsg28
g1
(g29
g3
NtRp5252
(dp5253
g32
(I00
tp5254
sg34
S'float64'
p5255
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5256
(dp5257
g10
g1
(g95
g3
NtRp5258
(dp5259
g98
(lp5260
g4443
asg12
(itheano.gof.utils
scratchpad
p5261
(dp5262
g15
(lp5263
(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp5264
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5265
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5266
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5267
asbsg147
(lp5268
g5256
asg149
g1
(g183
g3
NtRp5269
(dp5270
g40
Nsg188
g4574
sg206
(dp5271
sg208
Nsg209
(dp5272
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5273
(dp5274
g15
(lp5275
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5276
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5277
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5278
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5279
asbsg28
g1
(g29
g3
NtRp5280
(dp5281
g32
(I00
tp5282
sg34
g4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5283
(dp5284
g15
(lp5285
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp5286
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp5287
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5288
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5289
asbsg147
(lp5290
g5123
asg149
g1
(g183
g3
NtRp5291
(dp5292
g40
Nsg188
g1633
sg206
(dp5293
sg208
Nsg209
(dp5294
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5295
(dp5296
g15
(lp5297
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5298
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5299
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5300
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5301
asbsg28
g1
(g29
g3
NtRp5302
(dp5303
g32
(I00
tp5304
sg34
S'float64'
p5305
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5306
(dp5307
g15
(lp5308
(g1700
I650
g905
S'rval = self._bgrad(inputs, ograds)'
tp5309
a(g1702
I763
g1703
S'ret.append(transform(scalar_igrad))'
tp5310
a(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5311
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5312
asbsg147
(lp5313
g5118
asg149
g1
(g183
g3
NtRp5314
(dp5315
g40
Nsg188
g1472
sg206
(dp5316
sg208
Nsg209
(dp5317
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5318
(dp5319
g15
(lp5320
(g1705
I755
g1706
S'*[transform(ipt) for ipt in node.inputs])'
tp5321
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5322
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5323
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5324
asbsg28
g1
(g29
g3
NtRp5325
(dp5326
g32
(I00
tp5327
sg34
g5305
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4453
ag770
asg12
(itheano.gof.utils
scratchpad
p5328
(dp5329
g15
(lp5330
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp5331
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5332
a(g4403
I1825
g905
S'*rest)] + \\'
tp5333
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5334
asbsg147
(lp5335
g5066
asg149
g1
(g4901
g3
NtRp5336
(dp5337
g4904
I01
sg153
g154
sg4905
I00
sg384
I00
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5338
(dp5339
bsg28
g1
(g29
g3
NtRp5340
(dp5341
g32
(I00
I00
tp5342
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5343
(dp5344
g10
g1
(g95
g3
NtRp5345
(dp5346
g98
(lp5347
g4283
asg12
(itheano.gof.utils
scratchpad
p5348
(dp5349
g15
(lp5350
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp5351
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5352
a(g4921
I370
g905
S'sm = softmax(x)'
tp5353
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5354
asbsg147
(lp5355
g5343
asg149
g693
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5356
(dp5357
g15
(lp5358
(g4921
I370
g905
S'sm = softmax(x)'
tp5359
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5360
a(g700
I359
g161
S'return Apply(self, [x], [x.type()])'
tp5361
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5362
asbsg28
g4346
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5363
(dp5364
g15
(lp5365
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp5366
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5367
a(g4921
I371
g905
S'return [softmax_grad(g_sm, sm)]'
tp5368
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5369
asbsg147
(lp5370
g5061
asg149
g4941
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5371
(dp5372
bsg28
g4346
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5373
(dp5374
g15
(lp5375
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp5376
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5377
a(g1700
I700
g905
S'sr = Sum(axis=to_sum)(rval[i])'
tp5378
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5379
asbsg147
(lp5380
g5056
asg149
g1
(g1441
g3
NtRp5381
(dp5382
g1444
g4349
sg34
g4349
sg153
g154
sg188
g589
sg1445
(I0
tp5383
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5384
(dp5385
g15
(lp5386
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5387
a(g1451
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5388
a(g1453
I1299
g161
S'broadcastable=broadcastable)()'
tp5389
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5390
asbsg28
g1
(g29
g3
NtRp5391
(dp5392
g32
(I00
tp5393
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5394
(dp5395
g15
(lp5396
(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5397
a(g1700
I701
g905
S'sr = sr.dimshuffle(shuffle)'
tp5398
a(g3312
I324
g3313
S'return op(self)'
tp5399
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5400
asbsg147
(lp5401
g5051
asg149
g1
(g374
g3
NtRp5402
(dp5403
g377
(lp5404
sg379
(lp5405
I0
asg381
(lp5406
I0
asg383
(I00
tp5407
sg384
I00
sg385
(S'x'
I0
tp5408
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5409
(dp5410
bsg28
g1
(g29
g3
NtRp5411
(dp5412
g32
(I01
I00
tp5413
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5414
(dp5415
g15
(lp5416
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp5417
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5418
a(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp5419
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5420
asbsg147
(lp5421
g5046
asg149
g1
(g183
g3
NtRp5422
(dp5423
g40
Nsg188
g2416
sg206
(dp5424
sg208
Nsg209
(dp5425
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5426
(dp5427
g15
(lp5428
(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp5429
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5430
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5431
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5432
asbsg28
g1
(g29
g3
NtRp5433
(dp5434
g32
(I01
I00
tp5435
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5436
(dp5437
g15
(lp5438
(g1727
I1063
g1728
S'term = access_term_cache(node)[idx]'
tp5439
a(g1730
I924
g1731
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5440
a(g2409
I389
g905
S'Elemwise(scalar.identity)(gz))]'
tp5441
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5442
asbsg147
(lp5443
g5041
asg149
g1
(g374
g3
NtRp5444
(dp5445
g377
(lp5446
I0
asg379
(lp5447
I1
asg381
(lp5448
sg383
g5413
sg384
I00
sg385
(I1
tp5449
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5450
(dp5451
bsg28
g1
(g29
g3
NtRp5452
(dp5453
g32
(I00
tp5454
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5455
(dp5456
g15
(lp5457
(g418
I74
g419
S'updates=self.get_updates(),'
tp5458
a(g1162
I259
g1163
S'self.learning_rate*lr_bias_gradient)]'
tp5459
a(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp5460
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5461
asbsg147
(lp5462
g5004
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5463
(dp5464
g15
(lp5465
(g858
I219
g859
S'return theano.tensor.basic.mul(other, self)'
tp5466
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5467
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5468
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5469
asbsg28
g1
(g29
g3
NtRp5470
(dp5471
g32
(I00
tp5472
sg34
S'float64'
p5473
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5474
(dp5475
g15
(lp5476
(g418
I74
g419
S'updates=self.get_updates(),'
tp5477
a(g1162
I259
g1163
S'self.learning_rate*lr_bias_gradient)]'
tp5478
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp5479
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5480
asbsg147
(lp5481
g4999
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5482
(dp5483
g15
(lp5484
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp5485
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5486
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5487
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5488
asbsg28
g1
(g29
g3
NtRp5489
(dp5490
g32
(I00
tp5491
sg34
S'float64'
p5492
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg407
g321
sg408
I01
sg54
I00
sg409
I01
sg410
I01
sg411
g319
sg428
I01
sg60
Nsbasg147
g1
(g486
g3
NtRp5493
(dp5494
g411
g1
(g7
g3
NtRp5495
(dp5496
g10
g1
(g95
g3
NtRp5497
(dp5498
g98
(lp5499
g1
(g7
g3
NtRp5500
(dp5501
g10
g1
(g95
g3
NtRp5502
(dp5503
g98
(lp5504
g1
(g7
g3
NtRp5505
(dp5506
g10
g1
(g95
g3
NtRp5507
(dp5508
g98
(lp5509
g1
(g7
g3
NtRp5510
(dp5511
g10
g1
(g95
g3
NtRp5512
(dp5513
g98
(lp5514
g1
(g7
g3
NtRp5515
(dp5516
g10
g1
(g95
g3
NtRp5517
(dp5518
g98
(lp5519
g1
(g7
g3
NtRp5520
(dp5521
g10
g1
(g95
g3
NtRp5522
(dp5523
g98
(lp5524
g412
ag1
(g7
g3
NtRp5525
(dp5526
g10
g1
(g95
g3
NtRp5527
(dp5528
g98
(lp5529
g1
(g7
g3
NtRp5530
(dp5531
g10
g1
(g95
g3
NtRp5532
(dp5533
g98
(lp5534
g1
(g7
g3
NtRp5535
(dp5536
g10
g1
(g95
g3
NtRp5537
(dp5538
g98
(lp5539
g1
(g7
g3
NtRp5540
(dp5541
g10
g1
(g95
g3
NtRp5542
(dp5543
g98
(lp5544
g1
(g7
g3
NtRp5545
(dp5546
g10
g1
(g95
g3
NtRp5547
(dp5548
g98
(lp5549
g1
(g7
g3
NtRp5550
(dp5551
g10
g1
(g95
g3
NtRp5552
(dp5553
g98
(lp5554
g1
(g7
g3
NtRp5555
(dp5556
g10
g1
(g95
g3
NtRp5557
(dp5558
g98
(lp5559
g891
ag349
asg12
(itheano.gof.utils
scratchpad
p5560
(dp5561
g15
(lp5562
(g1015
I179
g1016
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5563
a(g535
I170
g536
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp5564
a(g538
I4732
g539
S'return _dot(a, b)'
tp5565
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5566
asbsg147
(lp5567
g5555
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5568
(dp5569
bsg28
g1
(g29
g3
NtRp5570
(dp5571
g32
(I00
I00
tp5572
sg34
S'float64'
p5573
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5574
(dp5575
g10
g1
(g95
g3
NtRp5576
(dp5577
g98
(lp5578
g43
asg12
(itheano.gof.utils
scratchpad
p5579
(dp5580
g15
(lp5581
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp5582
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5583
a(g219
I533
g161
S'inplace=False)(input))'
tp5584
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5585
asbsg147
(lp5586
g5574
asg149
g1
(g374
g3
NtRp5587
(dp5588
g377
(lp5589
sg379
(lp5590
I0
asg381
(lp5591
I0
asg383
g58
sg384
I00
sg385
(S'x'
I0
tp5592
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5593
(dp5594
bsg28
g1
(g29
g3
NtRp5595
(dp5596
g32
(I01
I00
tp5597
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5598
(dp5599
g15
(lp5600
(g1015
I179
g1016
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5601
a(g535
I171
g536
S'self.bias)'
tp5602
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp5603
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5604
asbsg147
(lp5605
g5550
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5606
(dp5607
g15
(lp5608
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp5609
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5610
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5611
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5612
asbsg28
g1
(g29
g3
NtRp5613
(dp5614
g32
(I00
I00
tp5615
sg34
S'float64'
p5616
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5617
(dp5618
g15
(lp5619
(g1074
I197
g1075
S'y = self.get_reconstructed_input()'
tp5620
a(g1015
I179
g1016
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5621
a(g535
I171
g536
S'self.bias)'
tp5622
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5623
asbsg147
(lp5624
g5545
asg149
g333
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5625
(dp5626
g15
(lp5627
(g535
I171
g536
S'self.bias)'
tp5628
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5629
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5630
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5631
asbsg28
g1
(g29
g3
NtRp5632
(dp5633
g32
(I00
I00
tp5634
sg34
S'float64'
p5635
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1092
asg12
(itheano.gof.utils
scratchpad
p5636
(dp5637
g15
(lp5638
(g1074
I197
g1075
S'y = self.get_reconstructed_input()'
tp5639
a(g1015
I179
g1016
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5640
a(g538
I4732
g539
S'return _dot(a, b)'
tp5641
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5642
asbsg147
(lp5643
g5540
asg149
g544
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5644
(dp5645
bsg28
g1
(g29
g3
NtRp5646
(dp5647
g32
(I00
I00
tp5648
sg34
S'float64'
p5649
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5650
(dp5651
g10
g1
(g95
g3
NtRp5652
(dp5653
g98
(lp5654
g64
asg12
(itheano.gof.utils
scratchpad
p5655
(dp5656
g15
(lp5657
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp5658
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5659
a(g219
I533
g161
S'inplace=False)(input))'
tp5660
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5661
asbsg147
(lp5662
g5650
asg149
g1
(g374
g3
NtRp5663
(dp5664
g377
(lp5665
sg379
(lp5666
I0
asg381
(lp5667
I0
asg383
g73
sg384
I00
sg385
(S'x'
I0
tp5668
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5669
(dp5670
bsg28
g1
(g29
g3
NtRp5671
(dp5672
g32
(I01
I00
tp5673
sg34
g74
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5674
(dp5675
g15
(lp5676
(g1074
I197
g1075
S'y = self.get_reconstructed_input()'
tp5677
a(g1015
I180
g1016
S'self.reverse_bias)'
tp5678
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp5679
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5680
asbsg147
(lp5681
g5535
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5682
(dp5683
g15
(lp5684
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp5685
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5686
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5687
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5688
asbsg28
g1
(g29
g3
NtRp5689
(dp5690
g32
(I00
I00
tp5691
sg34
S'float64'
p5692
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5693
(dp5694
g15
(lp5695
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5696
a(g1074
I197
g1075
S'y = self.get_reconstructed_input()'
tp5697
a(g1015
I180
g1016
S'self.reverse_bias)'
tp5698
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5699
asbsg147
(lp5700
g5530
asg149
g333
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5701
(dp5702
g15
(lp5703
(g1015
I180
g1016
S'self.reverse_bias)'
tp5704
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5705
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5706
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5707
asbsg28
g1
(g29
g3
NtRp5708
(dp5709
g32
(I00
I00
tp5710
sg34
S'float64'
p5711
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5712
(dp5713
g15
(lp5714
(g20
I76
g18
S'self.initialise_theano_functions()'
tp5715
a(g418
I73
g419
S'outputs=self.get_cost(),'
tp5716
a(g1074
I199
g1075
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5717
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5718
asbsg147
(lp5719
g5525
asg149
g1188
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5720
(dp5721
g15
(lp5722
(g1074
I199
g1075
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5723
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5724
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5725
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5726
asbsg28
g1
(g29
g3
NtRp5727
(dp5728
g32
(I00
I00
tp5729
sg34
S'float64'
p5730
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5731
(dp5732
g15
(lp5733
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5734
a(g1074
I199
g1075
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5735
a(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp5736
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5737
asbsg147
(lp5738
g5520
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5739
(dp5740
g15
(lp5741
(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp5742
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5743
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5744
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5745
asbsg28
g1
(g29
g3
NtRp5746
(dp5747
g32
(I00
I00
tp5748
sg34
S'float64'
p5749
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5750
(dp5751
g10
g1
(g95
g3
NtRp5752
(dp5753
g98
(lp5754
g1
(g7
g3
NtRp5755
(dp5756
g10
g1
(g95
g3
NtRp5757
(dp5758
g98
(lp5759
g1
(g7
g3
NtRp5760
(dp5761
g10
g1
(g95
g3
NtRp5762
(dp5763
g98
(lp5764
g227
asg12
(itheano.gof.utils
scratchpad
p5765
(dp5766
g15
(lp5767
(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp5768
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5769
a(g219
I533
g161
S'inplace=False)(input))'
tp5770
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5771
asbsg147
(lp5772
g5760
asg149
g1
(g374
g3
NtRp5773
(dp5774
g377
(lp5775
sg379
(lp5776
sg381
(lp5777
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp5778
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5779
(dp5780
bsg28
g1
(g29
g3
NtRp5781
(dp5782
g32
(I01
I01
tp5783
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag412
asg12
(itheano.gof.utils
scratchpad
p5784
(dp5785
g15
(lp5786
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5787
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5788
a(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp5789
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5790
asbsg147
(lp5791
g5755
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5792
(dp5793
g15
(lp5794
(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp5795
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5796
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5797
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5798
asbsg28
g1
(g29
g3
NtRp5799
(dp5800
g32
(I00
I00
tp5801
sg34
S'float64'
p5802
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5803
(dp5804
g10
g1
(g95
g3
NtRp5805
(dp5806
g98
(lp5807
g1
(g7
g3
NtRp5808
(dp5809
g10
g1
(g95
g3
NtRp5810
(dp5811
g98
(lp5812
g1
(g7
g3
NtRp5813
(dp5814
g10
g1
(g95
g3
NtRp5815
(dp5816
g98
(lp5817
g227
asg12
(itheano.gof.utils
scratchpad
p5818
(dp5819
g15
(lp5820
(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp5821
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5822
a(g219
I533
g161
S'inplace=False)(input))'
tp5823
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5824
asbsg147
(lp5825
g5813
asg149
g1
(g374
g3
NtRp5826
(dp5827
g377
(lp5828
sg379
(lp5829
sg381
(lp5830
I0
aI1
asg383
(tsg384
I00
sg385
(S'x'
S'x'
tp5831
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5832
(dp5833
bsg28
g1
(g29
g3
NtRp5834
(dp5835
g32
(I01
I01
tp5836
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag5530
asg12
(itheano.gof.utils
scratchpad
p5837
(dp5838
g15
(lp5839
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5840
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5841
a(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp5842
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5843
asbsg147
(lp5844
g5808
asg149
g1273
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5845
(dp5846
g15
(lp5847
(g1247
I216
g1248
S'return theano.tensor.basic.sub(other, self)'
tp5848
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5849
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5850
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5851
asbsg28
g1
(g29
g3
NtRp5852
(dp5853
g32
(I00
I00
tp5854
sg34
S'float64'
p5855
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5856
(dp5857
g15
(lp5858
(g20
I76
g18
S'self.initialise_theano_functions()'
tp5859
a(g418
I73
g419
S'outputs=self.get_cost(),'
tp5860
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5861
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5862
asbsg147
(lp5863
g5803
asg149
g1188
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5864
(dp5865
g15
(lp5866
(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5867
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5868
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5869
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5870
asbsg28
g1
(g29
g3
NtRp5871
(dp5872
g32
(I00
I00
tp5873
sg34
S'float64'
p5874
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5875
(dp5876
g15
(lp5877
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5878
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5879
a(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp5880
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5881
asbsg147
(lp5882
g5750
asg149
g292
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5883
(dp5884
g15
(lp5885
(g287
I144
g288
S'return theano.tensor.mul(self, other)'
tp5886
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5887
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5888
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5889
asbsg28
g1
(g29
g3
NtRp5890
(dp5891
g32
(I00
I00
tp5892
sg34
S'float64'
p5893
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5894
(dp5895
g15
(lp5896
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5897
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5898
a(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp5899
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5900
asbsg147
(lp5901
g5515
asg149
g586
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5902
(dp5903
g15
(lp5904
(g560
I117
g561
S'return theano.tensor.basic.add(self, other)'
tp5905
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5906
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5907
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5908
asbsg28
g1
(g29
g3
NtRp5909
(dp5910
g32
(I00
I00
tp5911
sg34
S'float64'
p5912
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5913
(dp5914
g15
(lp5915
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5916
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5917
a(g1436
I2670
g1437
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp5918
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5919
asbsg147
(lp5920
g5510
asg149
g1
(g1441
g3
NtRp5921
(dp5922
g1444
g5912
sg34
g5912
sg153
g154
sg188
g589
sg1445
(I1
tp5923
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5924
(dp5925
g15
(lp5926
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5927
a(g1451
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5928
a(g1453
I1299
g161
S'broadcastable=broadcastable)()'
tp5929
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5930
asbsg28
g1
(g29
g3
NtRp5931
(dp5932
g32
(I00
tp5933
sg34
g5912
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5934
(dp5935
g15
(lp5936
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5937
a(g1074
I200
g1075
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5938
a(g1464
I27
g1465
S'return theano.tensor.basic.neg(self)'
tp5939
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5940
asbsg147
(lp5941
g5505
asg149
g1469
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5942
(dp5943
g15
(lp5944
(g1464
I27
g1465
S'return theano.tensor.basic.neg(self)'
tp5945
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5946
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5947
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5948
asbsg28
g1
(g29
g3
NtRp5949
(dp5950
g32
(I00
tp5951
sg34
g5912
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5952
(dp5953
g15
(lp5954
(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp5955
a(g1521
I2802
g1522
S'acc_dtype=acc_dtype)'
tp5956
a(g1436
I2670
g1437
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp5957
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5958
asbsg147
(lp5959
g5500
asg149
g1
(g1441
g3
NtRp5960
(dp5961
g1444
g5912
sg34
g5912
sg153
g154
sg188
g589
sg1445
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5962
(dp5963
g15
(lp5964
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5965
a(g1451
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5966
a(g1453
I1299
g161
S'broadcastable=broadcastable)()'
tp5967
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5968
asbsg28
g1
(g29
g3
NtRp5969
(dp5970
g32
(tsg34
g5912
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5971
(dp5972
g10
g1
(g95
g3
NtRp5973
(dp5974
g98
(lp5975
g1
(g7
g3
NtRp5976
(dp5977
g10
g1
(g95
g3
NtRp5978
(dp5979
g98
(lp5980
g1
(g7
g3
NtRp5981
(dp5982
g10
g1
(g95
g3
NtRp5983
(dp5984
g98
(lp5985
g5505
asg12
(itheano.gof.utils
scratchpad
p5986
(dp5987
g15
(lp5988
(g418
I73
g419
S'outputs=self.get_cost(),'
tp5989
a(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp5990
a(g1521
I2803
g1522
S'shp = shape(input)'
tp5991
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5992
asbsg147
(lp5993
g5981
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5994
(dp5995
g15
(lp5996
(g1521
I2803
g1522
S'shp = shape(input)'
tp5997
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5998
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp5999
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6000
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6001
(dp6002
g15
(lp6003
(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6004
a(g1521
I2811
g1522
S"shp = cast(shp, 'float64')"
tp6005
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp6006
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6007
asbsg147
(lp6008
g5976
asg149
g1576
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6009
(dp6010
g15
(lp6011
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp6012
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp6013
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp6014
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6015
asbsg28
g1
(g29
g3
NtRp6016
(dp6017
g32
(I00
tp6018
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6019
(dp6020
g15
(lp6021
(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6022
a(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp6023
a(g1605
I407
g1606
S'lambda entry: isinstance(entry, Variable)))'
tp6024
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6025
asbsg147
(lp6026
g5971
asg149
g1
(g1610
g3
NtRp6027
(dp6028
g1613
(g1614
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp6029
tp6030
sg1617
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6031
(dp6032
bsg28
g1
(g29
g3
NtRp6033
(dp6034
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6035
(dp6036
g15
(lp6037
(g418
I73
g419
S'outputs=self.get_cost(),'
tp6038
a(g1074
I202
g1075
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6039
a(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp6040
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6041
asbsg147
(lp6042
g5495
asg149
g1630
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6043
(dp6044
g15
(lp6045
(g1521
I2824
g1522
S's = true_div(s, shp[i])'
tp6046
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp6047
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp6048
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6049
asbsg28
g1
(g29
g3
NtRp6050
(dp6051
g32
(tsg34
S'float64'
p6052
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg408
I00
sbsg703
g705
stRp6053
(lp6054
g1
(g46
g3
NtRp6055
(dp6056
g727
I1
sg40
g406
sg728
I01
sg49
(lp6057
Nasg409
I00
sg54
I00
sg55
I00
sg28
g425
sg60
I01
sbag1
(g46
g3
NtRp6058
(dp6059
g727
I1
sg40
g769
sg728
I01
sg49
(lp6060
Nasg409
I00
sg54
I00
sg55
I00
sg28
g779
sg60
I01
sbag1
(g46
g3
NtRp6061
(dp6062
g727
I1
sg40
g784
sg728
I01
sg49
(lp6063
Nasg409
I00
sg54
I00
sg55
I00
sg28
g30
sg60
I01
sbag1
(g46
g3
NtRp6064
(dp6065
g727
I0
sg40
Nsg728
I00
sg49
g108
sg409
I01
sg54
I00
sg55
I00
sg28
g115
sg60
Nsbag1
(g46
g3
NtRp6066
(dp6067
g727
I0
sg40
S'W'
sg728
I00
sg49
g353
sg409
I01
sg54
I00
sg55
I00
sg28
g355
sg60
Nsbag1
(g46
g3
NtRp6068
(dp6069
g727
I0
sg40
S'b'
sg728
I00
sg49
g50
sg409
I01
sg54
I00
sg55
I00
sg28
g56
sg60
Nsbag1
(g46
g3
NtRp6070
(dp6071
g727
I0
sg40
g68
sg728
I00
sg49
g69
sg409
I01
sg54
I00
sg55
I00
sg28
g71
sg60
Nsbag1
(g46
g3
NtRp6072
(dp6073
g727
I0
sg40
g471
sg728
I00
sg49
g474
sg409
I01
sg54
I00
sg55
I00
sg28
g476
sg60
Nsbag1
(g46
g3
NtRp6074
(dp6075
g727
I0
sg40
g323
sg728
I00
sg49
g324
sg409
I01
sg54
I00
sg55
I00
sg28
g326
sg60
Nsba(lp6076
NaNaNag110
ag354
ag53
ag70
ag475
ag325
atRp6077
sS'action_vector'
p6078
g1
(g7
g3
NtRp6079
(dp6080
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p6081
(dp6082
g15
(lp6083
(S'denoising_autoencoder_cart_pole.py'
p6084
I97
S'<module>'
p6085
S'gamma=0.9, learning_rate=0.01, corruption=0.5)'
tp6086
a(g17
I31
g18
S'self.action_vector = theano.tensor.ivector("av")'
tp6087
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6088
asbsg28
g779
sg40
g769
sbsS'gamma'
p6089
F0.90000000000000002
sb.