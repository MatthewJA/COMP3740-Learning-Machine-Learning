ccopy_reg
_reconstructor
p1
(cmdp_da
MDP_DA
p2
c__builtin__
object
p3
NtRp4
(dp5
S'symbolic_output'
p6
g1
(ctheano.tensor.var
TensorVariable
p7
g3
NtRp8
(dp9
S'owner'
p10
NsS'index'
p11
NsS'tag'
p12
(itheano.gof.utils
scratchpad
p13
(dp14
S'trace'
p15
(lp16
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/mdp_da.py'
p17
I31
S'__init__'
p18
S'super(MDP_DA, self).__init__(*args, **kwargs)'
tp19
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p20
I58
g18
S'self.initialise_symbolic_output()'
tp21
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/mdp_da.py'
p22
I71
S'initialise_symbolic_output'
p23
S'self.symbolic_output = theano.tensor.dvector("y")'
tp24
a(S'/Library/Python/2.7/site-packages/theano/gof/type.py'
p25
I317
S'__call__'
p26
S'return utils.add_tag_trace(self.make_variable(name))'
tp27
asbsS'type'
p28
g1
(ctheano.tensor.type
TensorType
p29
g3
NtRp30
(dp31
S'broadcastable'
p32
(I00
tp33
sS'dtype'
p34
S'float64'
p35
sS'numpy_dtype'
p36
cnumpy
dtype
p37
(S'f8'
I0
I1
tRp38
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p39
I00
sS'name'
p40
Nsbsg40
S'y'
sbsS'bias'
p41
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p42
g3
NtRp43
(dp44
g11
NsS'container'
p45
g1
(ctheano.gof.link
Container
p46
g3
NtRp47
(dp48
g40
S'b'
sS'storage'
p49
(lp50
cnumpy.core.multiarray
_reconstruct
p51
(cnumpy
ndarray
p52
(I0
tS'b'
tRp53
(I1
(I200
tg38
I00
S'\xc1\x19\xd9\xdd\'\x8a\xaa\xbfB)5N,\xea\xb0?U\x01d1 \xf4\xad\xbf\xcf\xdb\xbc3\x08\x1d\x93?\x88\xa5J\xaa\xd4\xf2\x86\xbfT\xee$63\x02\x90?_\xaf\x03\x880D\xc7?\x8b\xe7\xa3cn\x82\x8c?\x07\x18\x07dy\x1a`?\xb2\xc4\xa4\\\xea\x01\xb0?8\xe7}+\x88\xe3\xa0?\x94\xe8l\x91\x82\xee\x9e?\xaa\xa4\xdeO\xbd\x0f\xa9\xbf\xb5xk\xa5\xf6\xa8\xb8?\xaeEu\xd1\x8a\xfe\xae\xbf\xb2\xfb6\xd6b\xf8\xb6?*\xa5v\xda\x15\xe7\xb0?\xfa\x9e\x84\x12#7\x98?\xad\xf9\x8d\x9bt\xa6\x8e?\xba)\xe2\xa6\x12\xd5\xb3\xbfz\xcb\x88r9\xc9\x96?\x8a\n\xa0\xf08F\xbd?\x87\x1e\xe6[v\xd0\x8d\xbfg\xb0\x7f\x1aw\xab\x87\xbf\x9b\xa01\x97\xc6\x8f\xb0?\x1d\xef\xef\xde\xbe\xd9\x88?V\x9c\x8a(\xe0\xeb\xb0?\xf1\x9d\t\xbd\xa04\xa7\xbfw\xc0}\xec\x80\x8d\xb1\xbf\x839\xeb\xab\x0f\r\x8a\xbf\x99[\xd6\x8a\xe1\xc9\xb4\xbf]\x8e-\xc6\xebE\xa0?\x90\xc2\xfa\xcf\xddW\xb7?\xbd\x9f\xef$\xe8\xf0\x90?I\x7f\x91hV]\xa2?\x87\x1f\xd3\x05\xe3\xb7\xab\xbf\xb2\xee/\xb0\x16\xa9\xac\xbf.|\xfa\x05\x11\xd3\xb0?f\x0e\xeb\xc0\'\xf6\xc4\xbf&#\x8cFd\r\xb9\xbf\xb3A\xba\xc7\x01\xfd\xbb?\xcf\x9b\x91\x1d\xc6/\x91\xbf\xd8\xd8&:\xb2\xb9\xb7?\xa0E\x1a\xa5\x82,\xa4?\xb6pC;2@\xa9\xbf\x84\xc4\xad\x01\x13\xa4\xa1?\x0bx&\xbd\xc6\xe6\xab?\xf0\xf7\x95k\xa3\xe1\xb9?\x8d?eX\xa6\x8d\xb3\xbf,\xdb\x1c\x97\\\xd0\x90?\x94\x1fJ\x84\xac\xd3\x99\xbf%\xdf\xbeY\xcf\'\xb9\xbf|\xd0\x1b\xd5^\xcf\xa4\xbf\x0f\xcf\xf3!\xc6\xeb\x83\xbf\x95Eb\xc9\xc7\xcb\xb7\xbf\x16\x04^q`\xfd\xbb\xbf\x11\r\x08\x8f^r\xa0\xbf2tcX\x99\x96\xa6?\xa3\x08HJ<\x13\xb8\xbfmN.N\xc3\xbc\xa5?TY\x89\xbbo\x87\xb4\xbf\xd6\xa9\x8a\xef\xa1~\xb5\xbfG\x89\xaaB\xa7\xf9w\xbf\x9b\xcd3?\xa4\xd4\x96\xbf,\x1b\xfd#\xf6\xc6\x80?\'\xe9\xb1\xa41\x9e\xa2\xbf\xd8W\x14\xae\xbe\x89\xb7\xbf\xf3\x8b\x00\xa2k)\x91?\x84\xc0\x87\x95\x8d\x97\xa8\xbf\xaf\x17\xf2L7\x00\xb9?\xb5\x0f\xf5k\x1d\xa1\xa3?\xa0\xcag\x94r\xe1\xad?Y:\xc1E\x18\xf7\xa0\xbfZO\xab|:\x96\xb8\xbf\t\x00\xb7k#\xfc\xa4\xbf]\x9a\xc3\xeeFd\x86\xbfM\xdf2\xf5\xa2\x1cp?f\x9e\xb0\xfd\xdb\xfe\x8e?\xff\xd9\x97\x82!\xe5\xae?c\xbb\x99\xd8"B\xb1?A\xe2\xfc>\x0b\xdd\xc5?#\xedn\xfb^\xfe\xab?\xe7\x15\x99\x88Z\xbe\x8e?\xfd\xd4\x14{\x02\xe2\xbc?\x0bw+\xe2=\'\x9e?!\xed6\xe3[\xcex\xbf\x13U\xa1\x90\x1c\n\xa5\xbf\xda\xa6\xb7\xde7\x82\xc0\xbf\x94S\x89\xda\x9c\x11\x96\xbf\xfaC\xf6\xc5\xcd\x9b\x95\xbf\x87:\x1f\xea\x88L\x88\xbf9\x1aW\x16\xfa=\x89?\xc2\x1ct-\x94B\xc5?y\xc6m\x8a\xb9\x99\xc0\xbf\x7f\xcd\xc8\xbb\xa22\xb5?\xb8\xc9\x85\xd7K8\xa0\xbf\xfa\xab\xe7\xb0\xea\xdf\x9d?\xf2 n[\xd8\xd5\x9b\xbfMD\x99\x8aN\x81\x93\xbf\xebMZS\xd2\xe7\xa4??h\xc6\xd6\xc3\x17\xa9?s\xd8\xb3Y5\xec\xa1?\x18\xf3\x0c\x1b\x7fo\x9a?~\x9f\xad\x9c\xa4)\xb2?\x9f\x05$t\n\xf9\xb7?RUm\xa2C\xc2A\xbf\xce\xae\x94\xaf\x9e\xa5\xa9?G\x1dli\x07\x92\x8e\xbf\x1b\xa9\x8e\xb7,l\xa5?\xc4P?\xc7g\xcf\xa1?N\x91\xbe?=\x81\xa9\xbf\xf1A;<\xd8T\xb8?6\xc1\xa0G\xb7U\xba\xbf\x19b\x01i\xb6G\xb1?W\xdcK\x1a\xcc\x18\xb8\xbfT\xf7\xadN\x90E\x8c\xbf\x0bV\x1c\x11EG\xb3?\x00\xc7\x9c\xbfIb\xc0?j\xfa\x1f\xaf\xe5\x1a\xa1\xbfG\xf0\xe4\xd2J\x16\x9a\xbf\r>k\xf5\xc5}\x85\xbf\xdf\xde\x9a!\xe8\x05\xa2?-\xfdd\xc8\xa5.\xa9?\xdb\xa3\x8e\xe2\xcb\xb8\xae\xbf}\xd4\xfb\x82m\xe4\xad\xbf\x85\x9c\x9d\x9cLM\x7f?\x1f.\x03\xb26F\x99?>"\xa5\x85\x12Z\xa4\xbf\xb5>\xf2\x1d\x9b\xee\xa4?\x00N\x8d\xbc\xdf\x05\x90\xbf\x8c\xa6C\xab\xf8B\xb4\xbf<\xc1]\xe7F\x17\xb0\xbfy\xb1&\xa5W\x00\xb2\xbf\x81\xe7\x9c\xe3w_\xa3?\'\xc6\xc5\x8fj\x02\xac?\x8d\x86K+\xacj\xa1\xbf\xfb\xc9\xf4\x00(\x14\xab?8\x94I\xee_\x96\xa3\xbf\xd4\xceyD\xca\x15\x84?\x1f\x96p\x0c\xf0P\x91\xbfoUU\xf5\x8b\x13\xb8?\x14\xe0\xf5\xe5\x1ak\x89?\xf2\'\xeb\xcb\xab\xad\xa6\xbf/\xa4\xbb\x82T\xc4\x8f?P\xbe\x8c\xbe\xca\xf4\xa4?\x10P\x8a\x99g\x14\xa9\xbf\xe1\xc3\xe9bs\xc6\x90?.\xdd\x91\xe1m\xe6\xb9?\x92N\xe4\x04\x11\xf1\xb3?9\xb2\x8a\x89\'MC?\xe687\xcc\x92S\xba?E/\xbet\xa9\x03\x84\xbfhn\xce0y\xd3\xab\xbfX\x916\x1e\xc9G\xc1?ZFs\n\xb5\xaa\xa3\xbfW\xccm\x9c\xd4\xac\xaf\xbf\xfe\xa2\x93\xabP\x93\xd0?\x07\xfc\xf6\x14qa\xad?6\x1c\xf5\xa3\x0b$\x83?]~t\x91\x82h\xa4\xbf9\xda\x9exH\xae\x93?^\x9a\x9c\x7f&\xd6y?=\x8e\xd5Q\xee\xf2\x9e\xbf\x8bh4n\xdc\xae\x89\xbf"r\x99\x18D\xa5\x8e\xbfj\x01\xf5\xc8\x15\xdd\xa7\xbf\xda<\xd9\xf4`=0?\r\x87 \xffR^\xad?\xe0V\x80\x94\xf7\xbb\xb2?\xa7|\x11\xf2\x8e\xf5\x9b?\xc3\xc1\x03%N\xd5\x8b\xbf\xf80jB\xe1a\x94?\x02\xcfB\x0c\xe0C\x90?\xf2\x96\x1c)\xc9\xa0{?\xfe\xcc3~\x8b\x81\xb3\xbf\x05\xde\xf2\x01Q\xb4\xbd\xbf\xc0\x017\xdd\x14\xc1B\xbf\xb0^-\x81\x9b\xc3\xbb?\xc2\xf8s\x98|\xd1\xa0\xbfMI\xb3\x85UG\xb1?>\xfc\xa9U\xeb\xb5\x8e\xbf\x85<\xbb\xfd\x8c\x90`?\xd1\x8e\x19\xb3\x06\xa4i?\x7f;\x97\xa0\xc0\xd5\xb5\xbf`\xcd\x0cp\xea\xe3\x93?8\xf1\x16\xcb\xe1\x8b\xb1\xbf.\xfb\xb6\xff\xf3\x9e\x80?S\x03\xcb%\x14z\x9f\xbf/v)\x9dV\xca\x91? :*\x9f\xf5\x1b\xaa?\xf6\x88\x05a\xba#\x83?"@\xe1_\xc4\x1b\xad?1\x83\xce\xf7\x14\xdd\x9b?:\x0fR\xf7\xbb\xdb\x8c\xbf\x8e\xd8\xa5\xd7\xe0\x90\x9b?Z^\x93D8\x7f\x88?\xb1*\xa4<\xee\x94\xa0?V\x17I}T\xea\x96?\xe6\xe2"\xfe\xee\xac\xb8\xbf\xf0A\x83\xd4>2\x8b?'
tbasS'strict'
p54
I00
sS'readonly'
p55
I00
sg28
g1
(g29
g3
NtRp56
(dp57
g32
(I00
tp58
sg34
S'float64'
p59
sg36
g38
sg39
I00
sg40
NsbsS'allow_downcast'
p60
Nsbsg40
S'b'
sg12
(itheano.gof.utils
scratchpad
p61
(dp62
bsg10
Nsg28
g56
sbsS'reverse_bias'
p63
g1
(g42
g3
NtRp64
(dp65
g11
Nsg45
g1
(g46
g3
NtRp66
(dp67
g40
S"b'"
p68
sg49
(lp69
g51
(g52
(I0
tS'b'
tRp70
(I1
(I20
tg38
I00
S'\xb1\nf\xd9\x88\x1a\xb3\xbf\x81/\xe0\xee\x8b\xf1\xc2\xbf~\x828\xc7\x86\x0b\xae\xbf>b\xd9\xeb\x04)\xc4\xbf\x8b\x83\xc8\x92\xf7\xe8\xc1\xbf6\x1eB\xe2B\xcb\xc2\xbf\xc5x\xa4-\xb2W\xb5\xbfD\xcd\xf6x\x83\xcc\xc3\xbf\xa5r\x05\xf5\\y\xb8\xbf\x97i\xcb,\x92\x01\xaf?H\xe0v<b\x9c\xc1\xbf-\xd7\xfd\x12.\r\x9c\xbf\xf5\xd0\xa4=\x82\xa8\xa8?\xad]b<\xa7\x85\x91\xbf\x93\xe8>9\xc8y\xb3\xbf\x8f\xc4\xe1\xb6b\xd2\x9b\xbf\xfe\t\x19\xdfKKz?\xff;\xcd\x85\x9ab\xc2?\xd4\xa0@E\xdfo\xa1\xbfd\x86_\xc4\x9fg\xb6\xbf'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp71
(dp72
g32
(I00
tp73
sg34
S'float64'
p74
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
g68
sg12
(itheano.gof.utils
scratchpad
p75
(dp76
bsg10
Nsg28
g71
sbsS'symbolic_input'
p77
g1
(g7
g3
NtRp78
(dp79
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p80
(dp81
g15
(lp82
(g17
I31
g18
S'super(MDP_DA, self).__init__(*args, **kwargs)'
tp83
a(g20
I54
g18
S'self.initialise_symbolic_input()'
tp84
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p85
I155
S'initialise_symbolic_input'
p86
S'self.symbolic_input = theano.tensor.dmatrix("x")'
tp87
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp88
asbsg28
g1
(g29
g3
NtRp89
(dp90
g32
(I00
I00
tp91
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
S'x'
sbsS'symbolic_corrupted_input'
p92
g1
(g7
g3
NtRp93
(dp94
g10
g1
(ctheano.gof.graph
Apply
p95
g3
NtRp96
(dp97
S'inputs'
p98
(lp99
g1
(g7
g3
NtRp100
(dp101
g11
I1
sg40
NsS'rng'
p102
g1
(ctheano.tensor.shared_randomstreams
RandomStateSharedVariable
p103
g3
NtRp104
(dp105
g11
Nsg45
g1
(g46
g3
NtRp106
(dp107
g40
Nsg49
(lp108
cnumpy.random
__RandomState_ctor
p109
(tRp110
(S'MT19937'
p111
g51
(g52
(I0
tS'b'
tRp112
(I1
(I624
tg37
(S'u4'
I0
I1
tRp113
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'd\xe4r\xa03]\x92\xd0\xc4\x14\x06\xc4\x13\x1e=\xd9\xaa\xff\xad\x9c\x1c\xea\x95`\x00\x88R`\xe7\xee4!\xef\x97\xbc\xcb\x12U\x93|\x9d\x1c%\xb5\xd5\xb85\xf2\xb6\x96\x04K@\xf6\x04/4\x85\r\xc1X\xffS\x87\xbc\x0bV\xb5\x05\x08w\xd1-9\xeb\xcd\x11>}\xe2r\x1b%\x10\xb5\xdf\xe0\xa1TF\x11\x07E\x7f\xed\x12\xdf\xa1\xde\\!;K\xfa2uq\x8a\xd6\xe4\x9f\x1e\xd7G9=v\xe8p\x844+*\x91\xdd\xa6a\xbag\xed\xf6\x06\xd3\x8f\\\xdf\xeav1_T\xa9\xd8\xda.\xaa\xc8S\x11\xdb?\xe3D\x1b\x96\'\xe7\xbc\xfc\x9a\xea\xb0\xdc\x9a\xa7\xcf\xe3\x8b\xc3d@\xba\x072O\xf5.\x0e\xb1\xd3\xe1\x14\r\x18\xaa\xa6kG\x1b/LK\xb3e0\xb9\xdf[P7\x88\xa7h\xf3\x0f\n\xdb\xa7\xa3)\xa4^\xa5\xd2\xe8\x84\x16\xf7\x97n\xednc\xcd\xcf\x1e%5\xe8\xde\x0f\xf5\xb0\x15\xa6|\xc2\xda\x84LZ\x16\t\xf0\xb4\xc1.\xca\x13\x0b\xe2K\xcf\xa8\xe6\x15\xee\xe3\x90\xafjO\xf5\x10\xb7\xad\x11\x10\x82]\x11\xb0\xd7\xa7\x03\x9c\xaf\x00\xb0\x19\x94q<\x1a\x82\x16\x96\x14\x95T&\xdeg\x14m\xda\xef!!\xa6m\x9a\xe13\xcd4M\xd8\xa2[4\xa8R\xca\xc2\xec\n\x14\x8d\x85Df.#\x16\x96\xa4\x80L\xedi\xc7@\xfd7T\x9e! \xa3\x84\x91\x868\xa2\x90\x10rU\x13\n\x11\xd0\x8a\xe7\xb2\xa4\xac\xa2f+\x8ai\x81T\x98\xbf\x95?\x9d^\xbd\x18\xc1\x1e \x13H\t\xc0\xc4\xce\x92\xf7\x0bt\x93\xaf\x7f:\xd1\xac\t\x0e\xdc}\xce\xac$\xcfjdQ\x9b\x9c,.\x8d@\xef\xa2\xe5\xa0I\x94\xfa\xd8\xa8\xd5\xd8\x84\x9cJ\xddJ~\xccw\xa2\x03H\xaf\xbc\xbd\xa2\xbb\x8a\xc6\xde\x96\xd5j<\xc4\xcd\x9f\xac{\xa32\xc2k*\x11\x16p\xbd\xbc\x00To\x02\xd8\xabU\x97;\xde\x8c\xba\xb29\xe9\x15\xcafh\xecE\x08\x80\xe6cx^\xab\xc3\x1e\xc57\x92m\x899\xbb\xf4\xf5\xfc\x1b\xfe5\x9c\xde\x1b=OT\x85\xdbCqz\xad\xdd\xe7r\x13w\x7f\xc8Fc\xb8W8_\xcd\xdf\x9c:/"\xb2\xf9VT\xf0\xbeD\xf4\x1c\x00pk\xebP\xb7\\\x07\x159\xab\x11\xf9\xca\x82\xd9\x89s\xf3\xab\xb8IL\xe1\'Z\xaf\xfc^Y\nNz\x03\x98\xdf\xf3?\xa4]o7\xda\x95\x83\x9e3$\xeb,`\x8b\x1e\x8f\xbb~+\'\xc57A(\xa6\xce\xc2\xf1c\x99\xf2\xd7*l\xaa\x1d\xf9\x13ev\xec\xb1\x15\xa6a\x88A\x01\xbc\x80\x8a\xe7\n\x13\x8bg\xd5\x9c\xe0S\xceC[)\xe1\xf4T\xb3H\x06\x89\xfb\xcd|@P\xb5\x18\x06\xf4\xa3\x02\x04ov+\xf4\x93\xe7Ic\xa0\x04Z\x83R\x05\x9d\x1b\xba$\xfdy\x99\xe4R\xf3\xa4(\xec\x95\x8c\xd1\xe7\xd7\xe6+\t\xf8\'~\x91~\x92\xf8\x97r\x9b\x96>&m\x9a\xb8\xffa\x9cISN\x89\xda\xb6\\\x19\xcbw\r\xf7<\xc0\x84\x1a\x90\xee\x8e\xe7\xf6\xb6M\x01\xb8\xe0\xeb\x9c\xd6\xf8\xccq\xcd\xcc\x9f\xc8g$S\xa2N\xa3b\n\x0c)#\xb29\xde\xdfexGnR\xc6\x08\x92;\xda\x03\xce[\xb6\xa9\x8f\xad\x19\xc6\x0f\x88\xc7\xa3\xc9:P\xbc\x00\xa3\x86\x97X\xed8<\xff\xf2\x01\xcch\xb2\xaa\x17\x00l\x9e\x9d\xaf\x8ekIq\x942\xc1I\x04\xdapG\x88\x91\xec<\x88\xd95\xf8\x90|\xef*_H\xff\x0ef\x82\xd1\x80WU\x03RF\xd7\x1a\x80\xeb\xf0\xefy\n\xac\xa0A\xdd\xb2%\xf9r]{C\x9bX\xe5[~\x1f\xf1G\xed\xd0&\x9fIv\xfcj\x0f\xd5H\x01_\xcd\xb5\xb2\xff\x16.\xc9\xff\xff\xee\xe6\x06\x90s\x1b\xce\x9eavK;\x06%>\xd0\x98\xcb\x10\xd7\x1cL\xbd>\xd2\xb1\x12F\xa0:j@\t!\x9b>\xfd\x0f$,p\xda%\x07\x84\xd7\xf5\xbf\xb5^\xe9\xbd;\x93%\xe0\xa1\xca\xb5g\xd8< \xc3f\xb1~M\xbaq\x18\x88U\xe2A\xc6R\xff\xf5\x90\x90\xdb\xed@\x03\xc3\xad\xc0O\xd8\xf5\x19~Mr\xd0\xc8\xf9u\xc9`\xe2\x0b\x8e\xbb\xd5\xb4\xb7\x9dXQ\x06\xbc\xd5l\x8ffX\xe9j\x18b\xaa\x07\xe3\xe4\xf1\xa5\x11\x9d\xbf\xae\xe5\x1c[U=\xc5\x0e\xbf\xc5\x89\x11\xcf\xe8\\V\xfd\xeeh\xa7x=\x8aWF\xb2\xde`\xe7\xa4!\x92\x81\xfe2\xfb\x9c\x81\xa7C\x1c\xd0\xce\x08\xa8\x9f.\x0c~\x1f\x94\x9c\xcc\xbfy\xdc\xab;\xf6\xea\x7f{\x02\xe5E\x07\x04k\xdfp\xa1\xc4~7\xcbaJ\xbbW\x01\x1e\x9e\xd2\x1e;\xbe\xe9!\x17\xb0\xf3\xb1r\x9fL\xa6\xb1\xf4\xb9\xb7\x13E\x80\xe0>\x9a\x18l\xd7\x03\x84i\xd9mA\x95XU\xf39\xe7\xf9}|\xa3(\xb99\x9d\xcd\xb4\x0f\xc2vy\xb4\xac\xe9\xc1\x89PUY\xb8b\xcb\x14\xd4\xca)\xed4W\x06\xd1\x02p\xbf\xe1\xda\x14\x8b\xabs\x98J\xa7\x8a\x8a\x1a\xda\x9a\xfb\x85\xd4\n\xf9\xce\\\xba\x87\xfb\x94\x93\x8c\xb7\x8f\xaa\xdc\x91\x86\x0c\x8b\xd3\xe0\xd9l\n*\xe9\xd8\xe0Z}LEW\xf18\xec\xb5\xf9\x00\xef\xeeP\xcf\xd9\xccb\xbd\x87\xb1\x0c\xe7\xceA[+p\x86\xcf\xff\xef\xdd\x1bd(\x9c\xc6Z\xd5\xf0\x0eB\x07\x0c\x90\x89\x94\x13\xca\x1e-~\x87T\xe7\x8e\xe2\xf3\x10\x9ee\x9eK\xc6o\xeeB\xd4h\xc4\xf5oC\xd2\x8a\xe5\xe9Z\x01\xf9\x92 ;_sr\x16\x9dH\xd2q\xef k\x9a\xf6?^\xc6qL\xec\xb7\xed\xb3\xf9\r\x9a\xf0\xc7\xdb\xd9\xe70[\x07\xcejg\xef\x17x\xd1\xca\x04\x99\x94\xd0\x1d\n|\xf7s\xff\x89\x95\x7f@R:\x82\xa9-\'\xa6:K\xefE#\x00\xb4\x01Fw\xbeX\xbe\xc2c\x12\x05\xaaR\x03@\xd2nl\x9a\x99{\\\xc0\xb5-\x0b\xb2\xe7\x13@(\n\'\x91n;{\xb9\xd3\x15Hx\x02=\xe8\xf0\xf1\x87\xd4:\xde\xa0H$\xa8]x&\x0f\x04\x87Iz\x7f\x7f)g\xf2t\xfc\xdd\x0c\x10\xa6\x0c\x0b\xf7\xa2\xa6\xfay\x9a\x81\x1f\x85\xd2&\xf3\xe6\\\x15L\x03\x9a\xac\xf4\x82\x0c\xeb\x19\x9a\xf7\xa9n\xfe\xb0\xf1i\x1d%z_.\x0b\xa7xcn![\xab4m[B\t\xa4^R\x10}n\xf0&i\xca4"NF0\x8f\xe1\xab\xf8j\xc2@\xfe\x92\xb9TY]\xfa.\xde~m\xa8-\xe0\x93\xd7\xe1\x1573\x17\xd6\xc2\xbbn\x9e\xd5\x04\xea<\x1f!\xaa\x97\xed\xe5v\xd2\xc8\xe4\xbfo/\x0b\xef\xb8\r\x83f[q\x0c(F\x06\xb0q2\\=\x10\x1e\\ue\xa7nWUy}n\x01C\xb5\r\xd9[\xacZ\xeb\xfb\x01\xcc\x1dCKp\x15Er|$\xb4\xa4\xa3`\xc6M\xa6\xe1d\xa2\xdf\xb2\xca{!Z\xa6\xbd\xe9*\x1b\x92\xde\xbb\\\x19\xaa\\Zz!\xf9Z\xb5\x9cI\x97H\xc8\xa2\xd5\x19\x80b\xd8\xf0\xfd\xe7\xb6\xe6H\xc8\x85\xb3\xfb\xfe\xec\x8da\x8a\xa0\xbfW\x0b \xa6m\xcf\x0c\x01\x0c\xe0\xe6\xa9\xca\x9e\x9a\x02\xb8\xbd\xa5\x99!dbg\xda]\xad\xb9^u\xf8\xb3g7\x91\xdc_\x91\xec\x154)\x19\x1fN!\x97\x1f\xc3x\xedA\xcb5\x03wX\x96\xb3\xdc\xd0\x08\xb3\x00\xdfu?\xe9\x073\xc53--\xbb\xf6\xbb\xf3\xc3=\x83\xcfq\x86\xf5\xe4t\xf7YZ\xa2\xf8\xe1\x07\x1at\xdfQ\x857\x1c\xc0D\x87\xde\x18U\xfb\x98^\xed\xfc\x83^\xe2\xd6\'M!%>\x80\xfcu\xc1\xbb{\xf6f\x95X\xdc\xa6\xe0\x89\x1d\xd7\\-\xf9\xe0\x80\xd9\xf0\x0b\x95+\x9f\x1e\x11\x052\xb4\x9f;\xa3\xc8&\x8a\x02*\x06\x1e\\\xb8\x92i\x1cA\xd1\xff\xc05T,\xb8\xd4\x999\xa5\x8a.~\xf5HOr\xde\xe8\xe3\x8b\xa5\xcc\xbb\xab\x9a\x18\x8d\x05\x8de\xd6\xaa\xe3*\x92\xdbfY=\xb9\xf5U\xac\x7fss\xb2\r\t\xce]U\xe3\xc8\x02\x1a\x85\x049\x7f:\x1fK\x10O\xa5nB\x12\x13/\xdb\x96^J\xe18>\x93\x0fn\xac\x0f\xf7Te\x95y\xf6\x97\xbd\xb5\xed\x0f[r\x10\x87E\x18\xc9\xd1\xdd\xdb\x14D\x9c\xdc\x81\x87\x967u\x8b\x12\xd3\x1d\x82I\xd5u\xb1\xb0\xbdE,W\x8e\x9a\xb9\xf1\xbdA\xa2_8>!r.|\xf7\x86\xdd\x18Bl\x0f\xd6}\x85}\xb2\x9e\xad/\xfb\xea\xf2u\x0b-\xa9\x9d\xe2p\xb3@\xb0a\x05VYy\xd5\xbc\xa9\x19\x00\xac\x16\xdf\rZ\xfb}j\xecn\x829f\xae\xb5\xb3\x07\xa5q\x17xQ\xdbaf\x929\xc2\x84\xdf/\xde\x9c\xf3\x93 |\x8e\xd0\xda\xae\xa3\xfet\xf7\x1b?\xc8\xe6X\x8fn\x03\x88\xb4\x82\xb6t_\xdd\xbe\x99\xed\xc0\x15\xe7D\xc3\xa5/\xf0\xa4\xce\xb9\xfc.\xd1Q\xc9>\xf7h\xe4\x98\xb3\x00\r\xe20\xb8\x8c\xedy:\xde\xc9\xa8\x8e\x0e%@\xa7K\x03\x884\xa3I\x89{\xa2ib\xeb-E\xef\xdf\xa0\x17\xa0\x00E\xc9\xfcq#\x8f\xe1\xba\x8f">qC\x04&B\x05<Z\xa6K\xcat!\x17\x18\x8f\x0e\x10-b\xeb\x85\x84C\x8f*z\x12\xe0*\xe9\xf5\x82\x9bd\xfb\xae\xb9\x8b\xe1<\xf1\x91\xe8<\x93\x8f#\xdf\x8c\x90^!#\x11\x84k\xec\xb1D\xc6\xc9\x055\xbc\xd7\xcby\x95\xc2:"\xa7G\x7f\xee\n5\xb4;\xf2\x97\xe6+\x15\x13i\x87jv\x01\xb1\xd5\t\xac\xc1\nd0mda\xa5TAU\xe0Uu\xe4F\xca\xa4\x11\t\xf5\x7f\xc6\xca|a\xb0\x87\xf1\x8c@\xf4H\x18\xfbk\xca\xc8\x1f\x9fa\x9b\xfdG\xfb\x02{k\xf2\xd8a\xdf_\x84s\xfaA\xf6\xc3\x1fL\x96\xb6\xd4\x91\x9eG\xfa\xd2\xe4-U\x83\x88\' "\xda_7\xb0\xbd\xces\xd5\x19 \xe1mOaD\xe3\xfed!f\xd1.\x9e|\xe8![q\x8ex\x96\x9d\x99\'ZP\xa5O\x93Qi#\xe3\xa2\xd7Z\xbeH0\x9f\xdc\xbf\x11\x03jow\x9f\'\xdc\x8b\xe1\xdb|\x9eJ\x12\x08\x9f\xed<4g?d\xd2(\x19D\xfb\xdf\xcdn\xa9\x00\xce\xa6\xbe\x85\xe9\xfb\xd4\x90\xa2\xc0\xa3w\x92\x8d!g\x88F~\x04Z$W\xb3(\xc6\xddG!\xae-\xd8\x8d&\xa669\xef\xca3u+wIC>\x07S\x85\xd9\t}\x1bM\tkB\xb7\xdf\x17\xc7.8C~\x11\x16'
tbI400
I0
F0
tbasg54
I00
sg55
I00
sg28
g1
(ctheano.tensor.raw_random
RandomStateType
p114
g3
NtRp115
sg60
Nsbsg40
Nsg12
(itheano.gof.utils
scratchpad
p116
(dp117
bsg10
NsS'default_update'
p118
g1
(ctheano.gof.graph
Variable
p119
g3
NtRp120
(dp121
g10
g1
(g95
g3
NtRp122
(dp123
g98
(lp124
g104
ag1
(g7
g3
NtRp125
(dp126
g10
g1
(g95
g3
NtRp127
(dp128
g98
(lp129
g1
(g7
g3
NtRp130
(dp131
g10
g1
(g95
g3
NtRp132
(dp133
g98
(lp134
g78
asg12
(itheano.gof.utils
scratchpad
p135
(dp136
g15
(lp137
(g20
I74
g18
S'self.initialise_corrupted_input()'
tp138
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p139
I80
S'initialise_corrupted_input'
p140
S'size=self.symbolic_input.shape,'
tp141
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p142
I255
S'<lambda>'
p143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp144
a(S'/Library/Python/2.7/site-packages/theano/gof/op.py'
p145
I401
g26
S'self.add_tag_trace(node)'
tp146
asbsS'outputs'
p147
(lp148
g130
asS'op'
p149
g1
(ctheano.tensor.basic
Shape
p150
g3
NtRp151
(dp152
S'_op_use_c_code'
p153
S'g++'
p154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p155
(dp156
g15
(lp157
(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp158
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp159
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p160
I1140
S'make_node'
p161
S'return Apply(self, [x], [lvector()])'
tp162
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp163
asbsg28
g1
(g29
g3
NtRp164
(dp165
g32
(I00
tp166
sg34
S'int64'
p167
sg36
g37
(S'i8'
I0
I1
tRp168
(I3
S'<'
NNNI-1
I-1
I0
tbsg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p169
(dp170
g15
(lp171
(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p172
I499
S'binomial'
p173
S'ndim, size, bcast = _infer_ndim_bcast(ndim, size, n, p)'
tp174
a(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p175
I386
S'_infer_ndim_bcast'
p176
S"return ndim, tensor.cast(v_shape, 'int32'), tuple(bcast)"
tp177
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p178
I1110
S'cast'
p179
S'return _cast_mapping[dtype](x)'
tp180
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp181
asbsg147
(lp182
g125
asg149
g1
(ctheano.tensor.elemwise
Elemwise
p183
g3
NtRp184
(dp185
S'__module__'
p186
S'tensor.basic'
p187
sg40
NsS'scalar_op'
p188
g1
(ctheano.scalar.basic
Cast
p189
g3
NtRp190
(dp191
S'output_types_preference'
p192
g1
(ctheano.scalar.basic
specific_out
p193
g3
NtRp194
(dp195
S'spec'
p196
(g1
(ctheano.scalar.basic
Scalar
p197
g3
NtRp198
(dp199
g34
S'int32'
p200
sbtp201
sbsg153
g154
sS'o_type'
p202
g198
sg40
S'convert_to_int32'
p203
sS'ctor'
p204
cnumpy
int32
p205
sbsS'destroy_map'
p206
(dp207
sS'nfunc_spec'
p208
NsS'inplace_pattern'
p209
(dp210
sS'__oplist_tags'
p211
(lp212
S'casting'
p213
asg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p214
(dp215
g15
(lp216
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp217
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp218
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp220
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp221
asbsg28
g1
(g29
g3
NtRp222
(dp223
g32
(I00
tp224
sg34
g200
sg36
g37
(S'i4'
I0
I1
tRp225
(I3
S'<'
NNNI-1
I-1
I0
tbsg39
I00
sg40
Nsbsg40
Nsbag1
(ctheano.tensor.var
TensorConstant
p226
g3
NtRp227
(dp228
g11
Nsg40
NsS'cached'
p229
I01
sS'data'
p230
g51
(g52
(I0
tS'b'
tRp231
(I1
(tg37
(S'i1'
I0
I1
tRp232
(I3
S'|'
NNNI-1
I-1
I0
tbI00
S'\x01'
tbsg12
(itheano.gof.utils
scratchpad
p233
(dp234
S'unique_value'
p235
Nsbsg28
g1
(g29
g3
NtRp236
(dp237
g32
(tsg34
S'int8'
p238
sg36
g232
sg39
I00
sg40
Nsbsbag1
(g226
g3
NtRp239
(dp240
g11
Nsg12
(itheano.gof.utils
scratchpad
p241
(dp242
g235
Nsbsg28
g1
(g29
g3
NtRp243
(dp244
g32
(tsg34
S'float64'
p245
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp246
(I1
(tg38
I00
S'ffffff\xe6?'
tbsbasg12
(itheano.gof.utils
scratchpad
p247
(dp248
g15
(lp249
(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p250
I848
g173
S'return self.gen(binomial, size, n, p, ndim=ndim, dtype=dtype)'
tp251
a(S'/Library/Python/2.7/site-packages/theano/tensor/shared_randomstreams.py'
p252
I135
S'gen'
p253
S'new_r, out = op(random_state_variable, *args, **kwargs)'
tp254
a(g172
I509
g173
S'return op(random_state, size, n, p)'
tp255
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp256
asbsg147
(lp257
g120
ag100
asg149
g1
(ctheano.tensor.raw_random
RandomFunction
p258
g3
NtRp259
(lp260
g173
ag1
(g29
g3
NtRp261
(dp262
g32
(I00
I00
tp263
sg34
g35
sg36
g38
sg39
I00
sg40
NsbaI00
aI0
absbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p264
(dp265
g15
(lp266
(g172
I509
g173
S'return op(random_state, size, n, p)'
tp267
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp268
a(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p269
I198
g161
S'[r.type(), self.outtype()])'
tp270
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp271
asbsg28
g115
sg40
Nsbsg28
g115
sbsS'update'
p272
(g104
g120
tp273
sg12
(itheano.gof.utils
scratchpad
p274
(dp275
g15
(lp276
(g172
I509
g173
S'return op(random_state, size, n, p)'
tp277
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp278
a(g269
I198
g161
S'[r.type(), self.outtype()])'
tp279
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp280
asbsg10
g122
sg28
g261
sbag78
asg12
(itheano.gof.utils
scratchpad
p281
(dp282
g15
(lp283
(g20
I74
g18
S'self.initialise_corrupted_input()'
tp284
a(g139
I83
g140
S'dtype=theano.config.floatX) * self.symbolic_input'
tp285
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p286
I144
S'__mul__'
p287
S'return theano.tensor.mul(self, other)'
tp288
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp289
asbsg147
(lp290
g93
asg149
g1
(g183
g3
NtRp291
(dp292
g186
S'tensor'
p293
sg188
g1
(ctheano.scalar.basic
Mul
p294
g3
NtRp295
(dp296
g192
ctheano.scalar.basic
upcast_out
p297
sg153
g154
sg40
S'mul'
p298
sbsg40
S'Elemwise{mul,no_inplace}'
p299
sg153
g154
sg206
(dp300
sg208
(S'multiply'
p301
I2
I1
tp302
sg209
(dp303
sS'__doc__'
p304
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p305
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p306
(dp307
g15
(lp308
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp309
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp310
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp311
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp312
asbsg28
g1
(g29
g3
NtRp313
(dp314
g32
(I00
I00
tp315
sg34
S'float64'
p316
sg36
g38
sg39
I00
sg40
Nsbsg40
NsbsS'label_bias'
p317
g1
(g42
g3
NtRp318
(dp319
g11
Nsg45
g1
(g46
g3
NtRp320
(dp321
g40
S'lb'
p322
sg49
(lp323
g51
(g52
(I0
tS'b'
tRp324
(I1
(I3
tg38
I00
S'j\xc3\xfe\xb0\x89{X?\xd8*)\xc0g\xb4Y?:\xf6\x93\xb8\xf8\x17i\xbf'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp325
(dp326
g32
(I00
tp327
sg34
S'float64'
p328
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
g322
sg12
(itheano.gof.utils
scratchpad
p329
(dp330
bsg10
Nsg28
g325
sbsS'activation'
p331
g1
(g183
g3
NtRp332
(dp333
g40
S'sigmoid'
p334
sg188
g1
(ctheano.tensor.nnet.sigm
ScalarSigmoid
p335
g3
NtRp336
(dp337
g192
ctheano.scalar.basic
upgrade_to_float
p338
sg153
g154
sg40
S'scalar_sigmoid'
p339
sbsg206
(dp340
sg208
Nsg209
(dp341
sg153
g154
sbsS'reverse_weights'
p342
g1
(g7
g3
NtRp343
(dp344
g10
g1
(g95
g3
NtRp345
(dp346
g98
(lp347
g1
(g42
g3
NtRp348
(dp349
g11
Nsg45
g1
(g46
g3
NtRp350
(dp351
g40
S'W'
sg49
(lp352
g51
(g52
(I0
tS'b'
tRp353
(I1
(I20
I200
tg38
I00
S'\xf2\xf8u.\x94\xa6\xe4\xbf\xecL\xc1\x1e]\xef\xd4\xbf\xb7\x16\x14\n\xa0\x96\xda?4H\x88d..\xe1?;`\xacs@\x15\xbf\xbf\x03\xaevr\x87\x10\xd4?\t\x84iuq\xbd\xc3\xbf~\rn\xcc\xc0\x04\xe5\xbf\x9fO\xa5\x1a\x10\x18\xe1\xbf\xff\xd2{\x91\xea\xb1\xdb\xbfb\xe9yc\xa9\xbe\xe2\xbf\xcex\x86:ht\xe2?\x92`\xca\xf9\xa6\x85\xe1\xbf;\xab)\xb1%c\xd7?\xf29h\xca~\xf5\xd3\xbfs\xa7\xe9\xa5\xc3\xfe\xdf\xbf\xfd\xd6\xd8V\x98#\xe3\xbf\x834\xa1:\xd1\xd4\xc9?s\xb4\xfb\xe6\xe2\xf6\xb5\xbf\xd5-\x83\x02,\xd0\x9e?\x14\xe5\xd5\xdd\x03v\x8a\xbf}\xb4\\\x1f\xe6\r\xe4\xbfd\x96!\xca$J\xe2?\x1a\x1b\xca\xcd\x9d\x11\xe0\xbft\x08\xd8\x84\xbf\xfa\x9d\xbfr\x0e\x08\xa29\xd1\xc3?\xe5y\xcd\x978\'\xde?\xfe\x1eq3\xb9\x06\xd6\xbfd\x1fd\xf3\xa2V\xc7?\x97\x08 \xcaJ\x02\xd4\xbfaL\xf8\x8b\x9f8\xd1?NJ\xa2Ei\x92\xb1\xbf\xfe\xa3\xc3\x0fq\x16\xe0?\xc7\x0b\x92d\x99W\xe4\xbf(\x05\x9d\xfc\x83\xd7\xbd\xbf\x80[\xcd.\xf6E\xae?\xffF\xc8\x91+\xd1\x92\xbf\x80\xd2\x00\xe6"D\xd6?\x8f9\x83\x1b\x9a\x03\xd4?!b\xc9\xa8?j\xde\xbfH\xdc\x1b\x9b\x8bR\xc6\xbfit\xca\xde^\xff\xe0\xbf\x01\xf7b\x8fn\x86\xae\xbf`\xa3\xc5\xa3\x1a;\xd8\xbf`\xc94\xf5A\n\xe0\xbf\xf2\xf8BP\xea\xd4\xd8\xbf\x9e\xcaE\xa2\xde\x84\xc6?\xde\xf6Z\xaek<u\xbf\x04\xb8\x1cA\x84h\xc9?G\xe0\xc1\xba\xfe(\xe5\xbf\xbai\xca\x9c6\xc2\xdf?]\x15\xe7 K\xd1\xe5\xbf\xf0\xf8\x07\x98\x86\xe7\xd5\xbf\x8f\xc2\xaa\x05t \xe1?\xb2\xa4\xb2d8\x81\xe0?\x18-\x81.\xee-\xd7?\xed\xa92\xb8\xbe\x9c\xbf\xbf]^\xb8\xef\xe31\xe0\xbf1$d\x9a\xdb2\xce\xbf\xbar\xcfm\t\xb1\xbb\xbf\xc3X\xe1\xea\tL\xe4\xbf\xad\xe0\tE\xdcc\x9e?\xd9\xf0\x85\xb5\xae\xb5\xe3?\xe5xt_N\x03\xde\xbf]\x18\xcf\xbfN\xc6\xb3\xbf\xbb#Lf\x94\xcd~\xbf\xe4\xa8gB9L\xe3?dT\x91:T\n\xd7?\xb8m\xb9\xc7\xe3d\xde?\xb8\x008*v\x8a\xb9?\xc23/7\xd0\xf7\xdb\xbf\xfeHqir&\xdf\xbf\xb6\x81\xdb\xbdO\xe4\xc2?\xa5\x0f*\x10fE\xe5\xbf9\xd6\x0b\xbfw\x1d\xe1\xbf\xe2\xee\x1eP\xe3`\xc4?J\xadb4;\xa7\xe3?\xbe\x08\xe7\xf2|v\xc6\xbf\xfd$K\xcb\xea^\xe5\xbfW\ra\xb2?\x18\xcf?\xe5`T_cq\xc0\xbf\xbdH\x8c7J\xee\xd0\xbfU\xb0\x80\x1aB\xc4\xd4\xbf\xceH\x89\x9f\xb2\xeb\xe1\xbf\x9c\x86W\xb2S]\x92?\xf7\xc4y\xaa=}\xe5\xbf@(\xc3\xbf\xe8\xa6l\xbf|U\xde\xec@)\xd1?L9\r\x19m\x0e\xb7\xbf(d\xd3\xe9\x1f\xfe\xce\xbf3\xa8\x97\xaa\x10B\xd1\xbf9\x14\x07\xda\xf9\x91\xd7?V\x0b\xcdn\xd08%\xbf\x82\xa0\xdd\xd7\xddx\xd7\xbfy\x9d\x1c\x10\xf4X\xdf\xbf\xa3\xc7\xdf\xe67\xbe\xe5\xbf\xcbX\xa4\xda\xca\xab\xd6?\x90\x8f\x88\x91P\x17\xe3?B6\x06*\x1fH\xd9?\xf24\xd6\xa3\xc5\x89\xbd\xbf\xfcj\x9a\xb3_\xa2\xd7?\x05\x89\xc7\xd8\xbb-\xc8\xbf\xa96N\x8cj)\xe2\xbf>\xf5h\xea{1\xb8?\x04\x9b\xeb\xc5\x90R\xe0\xbfWhzp\xd1\xa4\xd3\xbfa\xb0\xaa\x1e\xd1\xb4\xe5\xbf\x15;\xe3\x1b\x1b\x1a\xd2?|p?\xaf\xab_\xc4\xbf4|\x8bQ&\xe7\x8a\xbf\x0bw%O\xfd \xe2?\xd4\x17\xe2j\xcc\x19\xd2\xbfw\x16\xc7\x8di\x91\xbb?0\xa1\xc1:\xf9j\xe0?&B:\xbb\xcd\xd8\xd2\xbf+G&\xb5\x91\xf9\xe2\xbf\x15\xfcUm\x8b\xf1\xe1\xbf\xe7\xfb\x13R\x9e\x8b\xd6\xbfp\xc2=)\x17\xca\xa7?\xb9\xd0\xc9\xe2w\x0b\xd9?\xb1y;\xb2M\xba\xb3\xbf\xf5\x89\xabL\x00p\xbb?\xf5\x92\x9f\x16l\x1e\xc4\xbf\'\xado^\x95u\xd9?\x88\xc4"\xac\xca\xfb\xe3\xbf0\xf4,\xb1y\xf7\xe0?E\xe7\xb0K\xb2\xed\x8e?\xfd\x1f\x01*\x1a\xd0\xdb?\xb1\xddos8%\xd3?H\x90\xa6k+\xdf\xcb\xbf\xf2\x9bj\xb3/\xc6\xe0\xbf2\x8bu}\x18f\xd8\xbf\xf9\xa7!\x9a8\xd5\xe0?c\x93\x98\x12\x92T\xd5?\x96\xe1\x975\x02#\xe4\xbfd\xe2>\xc8\xf4n\xe0?C\xba\xa9@K\x1d\xaf?\xd9\x8b\xc3\xb3\xc7\xf5\xe2\xbf\xdb\xebU\xc2zk\xe1\xbf[\x9a\x08\x9c.\xfb\xc0\xbfc\xe1\x1b^"\xe1\xe2?X\xc8\x84-\xf1\x9a\xe1?\xbc\\\xbd\xa7\x8eh\xc9\xbf\x87\x00E\xa5\xb9\x9b\xe2?\xe4\xa5\xf3H\xfd\xbf\xde?\x1e\x8d\xe6_\xf2\x02\xc5?J\xa6\xe8\xca\xbfi\xdb\xbf\x9a\xc9;cg#\xc0\xbf{\x03\xd3\xc3\xfca\xc6\xbf\xfe\xf5\xeeZ\xb5\xd2\xe4\xbfv\x9d\x06\xb5*\xc6\xc4?\xc0R\x12\xf9\x11\xa8\xd9\xbf\xd8s\x8aBZS\xe3?Q\xad\x1d\x1d\x05\xea\xd4\xbfy\xe0)\xbc\x19\xb8\xd0?\xbc\xddm\x03y\t\xd8\xbf\xf1\xa9C\xfflL\xda\xbf\xc6\x9as}8i\xd0\xbf\xa4)\xf1\xf5\xe0+\xe1\xbf\x1ed\x05>P\xa9\xe1\xbfF\x06\x1f\x856\xa5\xe1?\xcf\xef\xa8\x02u\xf0\xe4\xbfD\x8f\xc7J\xdd\x9b\xe5\xbf\x82\x9a\x82\xfcn\xcb\xd2\xbfl\xb2$pmc\xe2\xbf]\x87f\xb6\x07\xd7\xd6?\xbaF\xb90\xf8\xe7\xe4\xbf\x05v\x1fmg\xbf\xd4?{\xaa3T\xc41\xe2\xbfo\x87;\xb0\x18\x05\xe6\xbf\x8d\xe0|\x9d+\x04\xcf?\xb8\xf4\x98\xcb\r\x01s\xbf\xaf|+c\x9d\xaf\xc7?u\x17Wy\x8e\xdd\xda\xbf\x86\x96\x861\x02\x02\xe3?]w\xf6\xac\xea\x8f\xd9?\xa7\xc2\xa4\x80\x06\xdf\xe5\xbf\\\x0e\xcd-$\xa4\xe0\xbf\xf6A\xa8`\x8f\xb0\xd2?\xbe\xafv\x8c\x83\xdd\xd4\xbf\xe8\'j\x18\xc4J\xc2\xbf\xe3U\x9a?\x92=\xe2?\x86\x95\x01\xc4\xbf\x93\xe3\xbf\xfc\xee&\x8a\x04u\xdf\xbf\xa8\xa3\xe7\xb9\xec\x0c\xe1\xbf-)Q;\xd6?\xd2\xbf\xd9\xc8\x91*\xa2\x9d\xb2?\xc3\xc2g\x1e=b\xd3?9\xa4\xa4\xf9P\xb5\xd9?\xfc\x98\xad&x-\xce\xbfi_\xab\xfb\xecc\xb7?\xfaLZv\xf5\x04\xa0\xbf\x84ku\x8b\xbc\xe4\xdc\xbfn\xb3yF\x13\x98\xda?\xb2\xc5\x82\xb9\x0c\xfd\xe5\xbf\x900\xfd\xf9\xad$\xdc\xbf\x15\xae\x81_\xbb\x9c\xe0?@m\xfa\x11\x93\xda\xd2?z\xcd\xca\xea@\xb5\x9b\xbf\x9eS\xabZ\xbb\x06\xe0?\xe9\xc4\x9b\x1eD)\xda?\xfe\xd2\xde\xd0\xd3U\xd4\xbf\xde\xeec7\x96\xb9\xc6\xbfsDh\xaf\xb9\x1f\xe3\xbf\x01GY\'\xe4\xc9e?\xf9h\x9f\xbb\x01\x00\xe6\xbfL\x89\x0f\x90f\xb7\xd7?\x1a\xfe\xfa\x9d\xe1\xac\xcc?*%\xbd3:3\xe3\xbf90\xcdkM\xcd\xe0?e:16sp\xe1\xbf.4\x1a\x90\xb3\xed\xda?\xa4\x0c\x05\xde\xf8g\xc7\xbf/\x83\xea~\xffT\xdc\xbf\xb6\x97\xcef^\xae\xac?<\x11\xe2x\xd7;\xd0?\x03\xdd\xac\xd9zD\xdb\xbfuz\x1d\xc8\xda\xcc\xd5\xbf\xcd\xc5i\xa2M\xc2\xba?n\x15\x96(DN\xd7?5\xa2\xe3]\x17\xfa\xd1?d\xcfq\x95\xf3\x01\xd3\xbf\x03l\xa2\x16\xe1~\xe1?\x0f\'\xe7J\xec\x91\xd3\xbf\r\xf0\xd9-\xc7\x91\xe7\xbfx\x87\xea\xeb\xf6w\xe1\xbf\xbb(8\xa7V\xfa\xda\xbf\x97\xfa\xbd\xbf\xe9E\xb9\xbfX\xcf3qi\x89\xce\xbf\xf0\x1f\xcb\x14\x9d\x02\xe2\xbfp\xddz\x95\x89\xe0\xe1\xbf[P\xcf\xeb\x8d\x1b\xde\xbf\x93f\x0c\xdc\xd0E\xd4?\xab\xa9\xc3=\xb3_\xdf\xbf\xcb\x1aW\x95\xf8o\xde\xbfl\xc5O\x01y\xa9\xdf?\xbeL\xe8p\xd2\x11\xe6\xbf\x84\xb5W\xc2\xca\x15\xd6\xbf)v\xd1\x8d\xf6\xe2\xd8?\x1a\x8aQ\nZ\xa5\x91?\x7f<\x9e\x7f\xb1B\xe2?\xc5$&\xa7\xa6\xc4\xb3?V\xeen2t\xaa\xe1?c\x8e5\xc6\xce-\xb5\xbf\'\xb0J2@.\xcc\xbf\x05\xbf\x9f\xf9\xa6:\xe7\xbfL\xa8K\x8a\xba\xd8\xc8?x\xab\x06\xfe\x9fz\xd9\xbf+FI\xd0\xba\xeb\xe3\xbfJ\x86\x12\x0b\xcbV\x80\xbf\xd0\xfc\x9e\xfbMn\xd8\xbf\\\xfc\xaf\xd6\x90\x8b\xe5\xbfv\xef(\xdd\xb7\'\xe7\xbf\xf7cl\xa1\xcf\xae\xe4\xbf\xd2\xda\xaa\xb3\x0f$\xe0?\xa7\'[\xfd\xf0`\xbc\xbf\xbdo\x80\xf6U|\xe2?R\x8b\xfa\'\x9aA\xc9?&\xd9\xf2\xa4\xd6a\x91?\xe6\xf1m\xb9\xbbN\xc9\xbf\x07r\x13\xc0*\x83\xe2?\xc9Doh\xab\xf8\xdf\xbfs\xfe\x1c\x80"\xaa\xc5?\x185N\xc9\x1bm\xd6\xbf\x05j\xc4\xcb\x99\xb0\xd0\xbf^\x1ee\xf45\xd9\xd7?\x86?O\xd2]\xea\xda?\xd3\xdb\x99P\x96\xbf\xba?O\x06\xca\xc3\xec\xef\xa4?\x822\xf9\xf0\xd6&\xd9?KM\xd6\x96#\xca\xd9\xbf\xc8^\xe4\xa62\xcb\xda?E\xe9\x00\xf6\x00\xf1\xde?\x8e\xb3\x9f\xdc5\x91\xe0?\xf1J\xf8\xde\r\'\xe7\xbf\xfa\xd7\xc7ya\x82\xc5\xbf\xc6_\xfc\xba\xd4\x0c\xcf\xbfy\xbc\x8a\x7f\xc1?e?\x87\x0f\xf0\xa7\x05w\xcb?&ro8,\xc5\xc3\xbf\xae\x0f+\xaf\xd1\x94\xe0\xbfS\xd6w\x83k\x00\xd0\xbf\xa8I\x99\x8d@l\xe3?\x7f\x9d\x1b=E\x04\xc9\xbf\xd6\x93t\xf0u}\xd6?F\x0f\x87\x84;\x0b\xd4?+.J:\xe6k\xae\xbfo#\x81\x10J\x85\xdf?\xbcBV\x9c\xd3\x8c\xc3?\'z6a\x96N\xbd\xbf{\x17\x07\xc2\x95;\xc1?\x8d\x13\xb7\x18\xd3k\xd6\xbf~_\xf8&\xf4\x19\xd7?\x14t\xca*\x0e\xf3\xe1?;\x19)K\xce\x94\x86\xbf\xc0P\xc5\t\xd8\x8e\xd2\xbf#\\9\xe4\x9b\r\xb7\xbf\xbd\xc2~\x9d\xc3\x01\xcd?\n\xe0o\x16\x1e\x1f\xd9?\xfe\xddtP\x15{\xe6\xbf\xec\xe6X\xb7\x92\x99\xe6\xbf\x10\x91K\xa8\x81\x00\xdc\xbfX\xfd\xce\xe7\xcf\x10\xc5\xbf#\xe2\xfc\xd0\x15\xb1\xe6\xbf\xb2W\xa1\xbf&w\xde?L\xea\tK/\xaf\xc4\xbf7\x1d\x8233\xd6\xe5\xbfj\xc0r\r\xb9\x1e\xc3\xbfu\xa2\xedDE\x18\xc6\xbf{2/\x94\xfd@\xe0\xbfd\xecIv\x1c\xdc\x84?\xef\xe5\xa5\x8f\x08\x97\xe1\xbfsY\x99\r\x80\x8b\xd3?\x97o\xec\x1at\xcf\xe7\xbf\x88*\xbb\xb0\x11\xc7\xaa\xbf\xbc\xb0\xac\xc4\x18q\xe0?\x05C\x86\xcb\x9d^\xe0?(\x93\xe9\xc6vf\xdc?/\x89o\xe2\x1eZ\xbb?J\x98\x83\x03\x18\xee\xe2\xbf\xb6G\x8f<\x96\xf0\xb4?\xbd\x89Gs\xe4\x95\xc2\xbf^\xa9\xee\x8f\'\x86\xcd?\xf6\xc5\xee\xa7w\x10\xd3?k\x1e\xe6\n]\x1e\xd2?.\xdf6jG%\xbf\xbf\xd6\xc9\xd3\x8c$\r\xba\xbf\x87\x1bwJy3\xdc?\xf1\xea\xc3e\xfa\xfe\xdd\xbf\xf2$,T\xab\x81\xe0?\xfd\xd2B\xca\x93\x1b\xc4\xbf\xdc\xcd\x848Z\xf7\xe2?r\x80\x90\xf5mU\xe3?\x96\xe9gq\xb3\x98\xdc\xbf\x0eT\x93{\xb7\xc3\xd9\xbf;}\x94\xf9\t\x12\x9c\xbfw\x01\x7f\xb7V\x19\xd1\xbf\xce\xc3I(\x18 \xcc?\xf5\x8f\x95\xd0b,\xc7\xbf\xdd\x07\'\x05\xa0X\xcb\xbf\xd8i1\xb7\xcc\x05\xe1\xbf\xc4 J@\xd5Q\xc8?]s\x00\xfb\x9b\xa8\xd6?\x1e\x18\x96/\'\x86\xe0\xbf\xfb\x13x\xdc\xd7p\xb0?h\xe9\xe43n\x07r\xbf\xf6Y\x90\n\xfb\xd2\xd3?\x10\xdf\xce\nL]\xe4\xbf\xf7w\xd0-\x0b\t\xc3?\xf9\xe1\xe8\xc1\x90\x17\xdc?"\xf2u+PS\xde\xbf\xa25\x9aekf\xaf?\xa3\xe1K\x0fN\xfd\xc7\xbf\xbe\x169\xb1\x12\xc5\xdb?\\D\x04\x9a\xa1\xe2\xca\xbf\xfda\xe1\xb4;\xb8\xde?\xe3:\x85P\xbc\xe7\xe3\xbfu\xa2 \x13 b\xdf?\xf98\xb9~\xb9\xba\xdb\xbfz\x98\xc7\x7f\xad-\xdb?\xdc\x9e\xc7"\xa4~\xcc\xbf@Jrj\\W\xd3?7\xf4\xe8rgZ\xb9\xbf~\xc8\xffy\xcd=\xe6\xbfG\n\xe2\x88\x12|\xbc?Q&YG\x89\x86\xa0\xbf\xad\xa0-l\x19,\xe6\xbf~U\x13\xc3\x86\x10\xb1\xbfQ\xfa\x13\xd4\xec\xc0\xd2?`\x18\xf7m\xf6\xe3\xb7?\x15]6\xd6\x9d\x19\xd3?5\x92l\x83\x8a\xae\xdb?)\x1fX\'\x19\x11\xde\xbf\xa1=\x9bT\x94!\xd5\xbf\xc3\xe2\xafH%}`?\x91U@\x1e\x81\xeb\xcf\xbf\xee5\xe4\xc3\xc0A\xde?\x1a\x89:7_U\xc1?Z\x8d\xc8i\x03W\xd1\xbf>FY\xd5Gq\xca\xbf>]\xf7d\xb02\xd8?\x15_\x16\xcb\x06W\xa6?z\xf1\x84\x00\xdb\x9a\xd4\xbf\x989c\x86j\xd5\xc7\xbf\xb4\x9d\xdb\x95\xe6\xfe\xbe?\xb4\x80p\x7f\xb1\xb6\xdb?\x13n\x1b]AS\xe1\xbf\xaa<\xea\xd7sT\xe0\xbf\xe2\xac\xf7\x06\x83%\xe3\xbf\x02\xbd:B\xbd-\xe0\xbf1\'\xbb\xe3\xca4\xc7\xbf\xdfp\xb5\x8f\x83?\xbc?\xfc\x06\x19\x84Kh\xd7\xbf?\x13\x10x.j\xe5\xbf\x9f\xd7\x051\x18\xbb\xdc\xbf\x1c\x01Mp\xdd\xff\xb9?\r\x98+\xd0\x1fR\xdd?\xd1%\x1e\x7f?R\xdc\xbf\xbb\xbf\xcfb\xaa\xe7\xc5?^\xa2\xf3I*\x0f\xcd\xbfo\xcb\x11\xa1\xaet\xe6?w:M-&\xdc\xe5\xbf\'\x93>\x9ep\x1e\xb3\xbf\xdc\xc2Z/\xd4\xf4\xe6\xbfe\x9c\xc4:\xa3\xbc\xe5?\xfdb\xab\xa0=\xca\xe3?\x16\xc5\x15\xa4\xfb&\xe2\xbf\x96\xd9\xb0\x05\xc1\xf9\xe0?\x99\xa9\xfdu1\xe4\xe2?u aD7O\xd7\xbfF\xf1\\\x8d%\xf6\xdc?\x13\xb3\x93\xee\x1cP\xe3?\xf6A\x89\x1f\x95k\xd2\xbfgZiX\xcb\xff\x98\xbfJ6\r\xbb\xbcm\xde?c\xa6\x9d\xdc;\x99\xdc?\x0f\xe5\xa9N9\xcc\xc4\xbf\xc0\x9e\x08\xfa=q\xc5?\xc2\x15\x03\n\xdef\xe3?\x05\x14\x95\xe4\x07\xe1\xe5\xbf\xbd\xfe\xfd\x83\x9bC\xc7\xbff\xa3\xc2\xf9\xb4\xde\xdb\xbf\xc9j\xd7\x9eE\x02\xe3\xbf\xf3\xbb\xd5P\xb6\x15\xd5?\x1bLf\ri\xcd\xcd? OhZ\xdd\xbf\xcb\xbf\x83J9zm|\x9e\xbf<\xc7\xd7q\n\x84\xd9?\xc0\x11\x8f\x1fg\x06\xd6?tW\xbcA\xa6@\xe0\xbf\xbb|K.\x193\xda\xbf-\n#\x0ce\xda\xd0\xbf\xb7\x96\xfb?1\xe8\xb2?\xb8\t\xfbc\xc0~\xdb?:\xd4a\x94\x9f\xb2\xe5\xbfgU\x1c\x087\x1f\xe0?\xdc\xc3\x89>Y\x10\xd9\xbf\x00\x91\xca\x85z\x02\xd1?m`\xb4Pu\x93\x88?\t\xb4P\xc7\xf3\x8d\xc9\xbf\xa7\x96t\xf7\x8f\xd4\xd3\xbf\xefIV)\xb2\x90\xdc\xbf\xe7\xd8\xbeT\xdbg\xc3?\x82jqXus\xda?\x9b\xa2\xcf\xb1\xc3>\xe3?p~fI\xaby\xce\xbf\x88\xcb\xfe\x91\x15\'\xe3\xbf\x98U\x7f\xd7\xda!\xdd\xbfHu\xbe\x88*W\xe8\xbf\x9en\xea\xf5\x87q\xdc\xbf\xc4\xa0M\xf4\x8fp\xe3\xbf\x1a\xae\xf2\xe0\xb2z\xdc?\x80\xedS6\xe0\xec\xe0?\x89:\xbd\x1a\xc03\xe0?\xd0Y\x1f\xc4|\xe4\xd9?\x0b\xa3@$\xdf^\xe1\xbfuq\x07\x02\xdbR\xdd\xbf\x85\n\xfa\xa7B\xd4\xe3\xbf\xf9\xbb\xaeVCr\xd2?\xb1\xbc\x9b\x13\xd0\x84\xd6?\x1e(\xa6`\xb8\x03\xd6\xbf\r\xee.8fl\xdf?\x9bJ|\x8c\xffJ\xd8\xbf\xae\xee\xf2v#\x95\xe3?E\xcd\xcd\xad\x9aG\xe1?&x\xc6y&\xe9\xcb\xbf-\xa6\xae~\xa1\x1a\xd0\xbf+\xa8(\x91h\xfd\xc1?4\xfb\x87x\xa7\xb2\xc0\xbf\xd0\xc0\x95\xf0\xbf\x8b\xdd\xbf\x9d7\xcb<\x8c \xdf?\x80\x1cEi\xfb\xab\xe5?\x13\x90\xd0|\xb8\xdd\xd4\xbf\\;\xec\xdf\x9c\x8e\xe5\xbfQ\x9d2C\xf12\xdb?\xe9\x1a\xb6\x1d\x0e\xda\xe2\xbf|y6\xeep\xdc\xe1?v\xf2\xa0\xd7\xf7\x9b\xb7\xbf\xdf\xfd\xf4\xdfU\x98\xc1\xbf\x0c[r\n\x00\x9e\xa1?S\xe0\xdfa\xe5\x89\xb4\xbf\x93\x0b\x15ee\xb3\xd1?\xc4\xb6\xce\xaf\xd4L\xe0\xbf\x0c0\xa8\x1c_\x95\xd1?\x08r\xba\'_\xf1\xd9?"\x8b\xec\x07\xeb\xa3\xd8\xbf\xa8r\x0c`s+\xe4\xbf.f\xf7R\xf4\x12\xd3?\xc8(F\xfa\xf4\xd5\xe3?\x8d\xea\xae;7\x95\xdb\xbfj\xdc\xbcf\xe6\xc1\x88?\xdc\x19\xd1\xabB!\xc7?\xe2ObQ,\xaa\xbe\xbf\xf3\x86\xdf\'\x0cc\x96\xbf\x18\x87\xb0x\x1e-\xb5?\xe41\x17\xcb\xbf?\xc0?\x0f\x9cw\x96\x1e\xcc\xd9?\x17\x9du\xb9\xcd\xfa\xdd?\x0b\x9d\xa7\x89\xd6\xa4\xba\xbf\xe6"r=\x97\xd2\xc8\xbf\xe9v\xfc\xdf\xaf\x01\xe7\xbf\xab\x06x\xd2\xe0\xe5\xd1\xbf|\x8b\xd8G\xf2\xbf\xda\xbf\x0cw&\xf5<\xb3|?h\xe3|(`L\xa3\xbf/\xac\xebV?d\xc1?\xa7\x8f\xe8p\xb91\xe8?0\\\xd5In\xc4\xe4?\r\x9e=\x81\x84\x8c\xe4\xbf\xf2\xc8\xc1\x18\xb4\xf8\xdb\xbf\x1e\xa3\x15R\xeb \xd2?$\x0e\x85@\xfc\x05\xc7\xbf\xaa\x0f\xaf\xf7\x8c\xf7\xcf\xbf)\xc1\xeb\xb2WS\xc4\xbf\xc9K\xd3\x96\xfcV\xb2\xbf\x9cq =\xc9\xef\xc4\xbf\'\xd8*\xb6\xc0[\xd1?\xe8\xc5\xa3\xf1\x0e\x97\xe3\xbf\xeaPp\xca\x9a1\x97\xbf{\xb8\x15\xa4\x7f\xaa\xd1\xbf\xcf\xca\xb2oCU\xe0?\x87\xcd\x1dV\xe3\x9c\xe0?7JZ\xbd\xb2#\xd0?\xad&\x19\xf6\t\n\xe0\xbf\x97\xa0\xc1&LY\xce\xbf*\xd4\xbd\xbd\xa6\x02\xcc\xbf\x9b\x19#\xb0\x9e\x9a\xe0\xbf\xfd\x162_\xb6\xfe\xa7\xbf\x88\xc7\xc5h\x0c\xa4\xe2?@\xf3>\xf1C\x96\xd1?\xde?\x01\xf0\x12\xac\xe3\xbf:a\xee,\x04\xa5\xd9\xbf\x84\xf0\xc8\xbe\x1d\x14\xcb\xbf\xee&\xa5\xfa=y\xdb\xbflWUQ\x11F\xcf?~@\x83\x020\x8d\xac\xbf\xf3ll\xda\x03\x05\xe0\xbf\xe0\x00\xc6\xbfF"\xc6\xbflCj1\x80&\xb6?th\x1f\xe8\xe7Q\xd9?\xfd\x80\x0f\xef\xa7\x8b\xd3\xbf\x06Q\\\xba\xee\x10\xc2?p{6\x89\x92\x8f\xd0\xbf\x11\x86\xb6\xef\xd3O\xce\xbf\x827\xc3\x01\xee\xff\xbc\xbf \x90\x88 F\xfb\xc9?\xcd_O\xbc\xd4-\xd3\xbf_\x89\x0b\xf9Kw\xdd?\xb1\xd9\x80\xac\xba\xd9\xe1\xbf=\x16:\x02\xcf\x13\xd0\xbf.B*\x85x\x07\xe0\xbfH\n&\xe1\x10J\xb6\xbfLy\x99\x1ce#\xd5?Lj\x91\x16\x17q\xd2\xbf\xa0\xdb\x03b\x8e\xd7\xe4\xbf\x14&$\x85\xdeU\xbd?\x0e\xe5;t\x0f\xce\xc5\xbf5\xaa\x88\x8eW\xfc\xdd?\xa5;\xb4x\x16\x9b\x92?\x9fhiI\x1c)\xc2?\xd9q\x94(A\xf1\xdc\xbfOK=\xf5\x93@\xe5\xbf$\xddu\xc1\x9f\xed\xe6\xbf\xad\xb4\xfd\xc77\x90\xcf\xbf a\x8f\xc9\x15\xde\xb2\xbf\x1bX@\x8f\x10\x98\xe5?4T\x07\xe4\x05\xf9\xc9\xbf\xc6c\xc4\xe6\xde\xce\xd5\xbf"=\x93~\xdf"\xe7?\xb1{\x86T\xcc\x86\xd2?\t\xe5\xfc\x06V\xdf\xa6?\xc3\xcf\xcbj\x89\x8e\xe6\xbf\xe9\x85\xb3\x89\xc4y\xc2\xbf*\xd2\x88\x9d\\\x15\xa9\xbfK\x04K:sM}\xbf\xbb\xee\xed\x82\xe7\x9d\xdd\xbf\xc1,=D\xfa\x8f\xb7\xbf*\xfb\xc2\x8fy3\xb4\xbfs\x8e\xd5`\x17\xe3\xc5?\xb9\n\xac;o\xb4\xe5?\xb8\xf1A\x14\xfaq\xe5\xbfq\xef\xd2\x85}\xc0\xc3\xbf\xc6\x17\xfa\xf4?\xa7\xcc\xbfn\xe3\xc7Hk}\xde?\xb6\\\xf6\xd2l\xfa\xe1?3d$\xe4[\x02\xbd\xbf\xce\n\x96]\xbcb\xe0\xbf\xdd\xee\x18\x01\xc2\x02\xe0\xbf|\xdc\x18\xf5\xc2\x8a\xba?\xf9\xde`\x18\xe1\xb5\xd9?\x8eB\'\x8d\xfeK\xe0\xbf-\xcd*z\x82\\\xe3\xbf\xfc\x130\xeb\x8e\xd6\xc7\xbf\x86G\xc3\xaf\x0cw\xe1\xbf\x19\xd9\x07\xbe\x81\xe3\xe0\xbf[\xd6\x12\xe9\xb1S\xdf?\xa8;R\x19z\x9b\xe8\xbf\xad\n\x8c\xe8\xb9\x0e\xe1\xbfw\x7f\x18s\xd8\'\x9a?\xa1\xd3\x0c\x89\xc5\xf1\xcb?z\x1e\xf0)\xf2/\xd5?\x05bY\x91*\x8b\xd0?0\x1f\xa4\x17\n\x13\xe4\xbf\x9b\xe7"H\xf2\xe2\xb8?\xef:\xa8\x8d\x88\x17\xb5\xbf\x1fl\x1e\x8a\x04&\xe8\xbf\xa3\xa6\x9b9\x9b&\xd7?\x83\x02\xfc\xfei\x16\xa2? \xe6\xfeL\x9a\x03\xb1?X\x94\xcc\xb1\xe7\xb3\xdd\xbf\x1bvH\xc85\xe9\xe4\xbf\xb3\x10+Q p\xe4\xbf\x81\xeaLE\xb84\xd4?\x01\xb3\x1a$3\x0b\xe0?m\xd9_T\xbd\x8d\xe1?$n\xe0\x0e\xf5\x91\xd5\xbfd\x8d\xbd\x93#i\xc9\xbf\xbb2 "\x9c\xce\xe7\xbf\xfe\x96\xf7\xfeIE\xd8\xbfI\xbb\xf1\xf4\x81\x92\xb7?\xf8\xb3P\'\x94\xbe\xcc\xbf\x0f_\xa5\x08\xbd\x1a\xe4\xbf\xdeCN\xe2\x9dI\xd9\xbf\xc6D\xb3\xb6\x8b{\xd3?\xff\xfb\xeb\xf1\xc0\xee\xe0\xbf\xeb\xb4l\xd0\xad\x0c\x98?\xc6\xd0\xeb\xfb\x0f>\xd5\xbf\xd3\xfd|\xeb-\x9d\xd3\xbf$2>\x89\xa4@\xda?u\xe3\xb1\xe2g\x99\xe2?y>\xbbz\x97\x08\xe3?g\x81\xcd\x16;\x86\xe0\xbfpa\xea\x0bZ\xca\xe6\xbf\xca\xab\x08\xden\xe4\x96\xbf\xade\xad2\xc1\x91\xd0\xbf\xf80PX\x85\xfb\xd8\xbf^\x14\x81@B\xdc\xdb\xbf\x87K\x1d\xbd\n1\xb8?\xec\xa8\x0f\xdc\x17\xe8\xe1?Cyx\xb3\xc9\xa9\xd6\xbf\xad\xf6\x06t\xcb\xd9\xd4?\xecu\xc1\x83\xa4\x8f\xa6?\xed\x88SHe\x16\xa9\xbf\xbb\xe9b\xa6Ok\xa6?r\x08\xa4\xe5\xc2\x8fJ\xbfc\x14x\xedq\xab\xd2?\x1b`m\xce\xfc\xb3\xa9\xbf\xea)\xb7\xf5H\xa7\xe0\xbf\x1cs\x8f\xbd\xd88\xe0?3w\xef\xe8mB\xac\xbf\x19\x93\x95w\x03\xc8\xc6\xbf\xad\xe8Pl\x8a\x11\xdf?\x0b7\xa4CYc\x89\xbf\x0b\xe2\x8b\xa7\xa2u\xe1?\xc0\x80\x8a\xc1\xc4\\\x9f\xbf\x82n\x06\x7fG\xa6\xb5??\x9c\x02\xc9\xa1?\xda?P\'\xd4E"n\xc6\xbfm\x16\x16\xd7\xe6\xa0\xe0\xbf\x01j\x1e\xaek\xf4\xe7\xbf\xf67\xcbn\x16\xa6\xe1?\xde9&\x1b\xcb\xec\xdf?\xebd<\x83\x1c\x00\xd9?\\\xff\x8f\x16\xf0?\xe1?\xf6X\xf3\n\xf3\xbb\xde\xbf\xa0U\xea*O\xe4\xc8?\xcc"Q\xff#w\xc4\xbfB\x90\xb0\x86\x81\xa6\xdd\xbf\xbb\xe47\xa5_#\xe4\xbf\xc1g\x1671n\xcb\xbf}l@\x96\x1d\xc1\xd3?\xd9\x8c]R5\xb8\xb0?\x82}\x82p\x90\xb0\x9d?\x8f?\xa9\xb8\x87n\xe0?H\xd0\xfc\xa0h\xe5\x8d\xbf:&(\xff\x88\xb8\xd9\xbf3\xc7\xf8\x87\x03\x9c\xde\xbf,r\xb16@\xa8\xd1\xbf\x98\x1f\xae\xdd\x1d\xe8\xb7?1_}}r\xe4\xc1?\xfe\xadT\xb3?\xc5\xe4\xbf\xea\x8b\xfd\x84\xf3\xe4\xd6?.\x8f\xc1\xe3_@\xe4\xbfl9\x88\xe6\xec\xf9\xd3\xbfSV\xb4q\xef;\xdd\xbf\x88\x8c;\x00\xf8\x92\xbf?\xa6\xec0\xaa\x0b\xf4\xe3?)\xf4\xe2\xf6\xe4\x80\xd1\xbf\xce\xae\x0c\xd7el\xc3?\xd0\xd0\x03\xa7i \xe0?h\xa8\xd7\xc2.\xd0\xb9?\x8a\xe2\xa5:\xa3\x7f\xbf\xbf\x1b.\x0b\xbf\xace\xae\xbf\xb3a\x0c\xc0\xff@\xc8?\'\x82n\xfb\x0b\xd2\xbf\xbf\xe1\xf5\xb6{Q7\xb5?{_T,\x15\xb7\xd5\xbf\xaf\x12EQ\xa0\xa7\xd3\xbf\x11\xbb:Fd\xd5\xde?\xe8)\xfe- \xfa\xe1?\x04\x1c*\xd3\x8b\xc0\xb2\xbf\xf7(\xa3!y\xab\xc9\xbf\x97\xdfQ\x0fQ\x1e\xa7\xbf$\xaa\xf3CJ\xd6\xd7?\xe3\xcbX,\xfd\xdd\xbf\xbf\xd8\xc2\xdc\xc9\xb0t\xe1?\xec\x94\xb3\xda\xed\x99\xd4\xbf\x04\xbb\x1b\xa6\xa3)\xe7\xbf7\x80|l\x0c\xfc\xe7\xbf\x05+R\x11\x9c\xbe\xd8?\x8f\xc4Em\xf3\xcc\xe7\xbf\xe9\x91\xe2\xbf\xe1,\xd5?w\xd0\x14n\x1c\xfa\xe0?\xabF\x0c\x9c\xd1\xdf\xe5\xbf\xf5\xdbmzrW\xb1\xbf\xf4\xa67\xaaIl\xde?\x9dhL\xe0\xc7Q\xe8\xbf\x00K\xf7\x1d\xe3\x1b\xe1\xbf\x07\x1c\x88\xda2\x1e\xd0?<k\xef\x1a\xa2W\xdf?x\x02\x93(N\x88\xd8?9\xa6\x7f\xd7\x06\x02\xe8\xbf\xc2\xadnQ\x8cP\xe5\xbfd\xe7\xbb\x850F\xe0?\xad\n\x7fk\x8d\xae\xde\xbf\x96G)\xdd\x82\xeb\xe2?\x81\xd4\x12O\xee%\xdb\xbf\xb7\xdd\xfc\x9fEk\xe6\xbf\xc3\x97,\xa5\xf5\xd7\xde\xbf\x96\x0ba\xf1\x07\x8a\xc0\xbf\xed5\xac\x06\xfe\x07\xad\xbf\xf6\x95\xba\xd8\x8f5\xb6\xbf\x0b+m\xc7qA\xe0?X\xbc\xfc\xe6\n\xbd\xd5\xbf\xc3\xa2\xdf\x97r\xef\xe0?\xde\x88w\x8a\x96\x05\xd7\xbfO\xe9\xcauh\x8e\xe1?1\xe9\xbdw^a\xc8?\x14\xc0yOB&\xc1?\xad\x97\xe5h\xb2\xe3\xc0?\xa1\xe9,\xde\xd9\xb1\xd8\xbf\xf2\x85sF\xb6-\xcf?;U=\xe7F\xf5\xdd?j>7\xf6\xcc\xc8\xe0?\x15\x7f\xe8\xc9\xcc_s?\xaf\x8b\xe4\xbbhS\xc2\xbfi6\x1e-A\x88\xdb\xbf\xb1F\xcc\x84\x9c\x15\xe6\xbf\x10\xbee\xf2\xe6\x89\xbd?\xd9\xd60@\xa2;\xb3?\xe4\x86k\xc1\x82/\xa6?\xbd\x95\x1dq\xd6*h\xbfc\xde\xed\xba\xa7Q\xd9?h?\xb4\x06\xfd\xae\xb4\xbf\x00\'\x8ajW\x82\xd0\xbf\xe7+\xd0\x99\xbf\xfa\xe2\xbf\xee\r\xbd\xac\x807\xd3?\x9d\xf4\xc3l}\xe7\xe0\xbf\rau3"\x1e\xe3\xbfa\x95B\xf3`)\xe4\xbfd9$j\'\xda\xe5\xbf\xf3${`+6\xe0\xbf\tZD*Ep\xbe?u\x15\x045\x94\x18\xb5?\x04D\xe8\xb8\xf7\xc6;\xbf\xa3\x9b\xf3Jb4\xd4?\xd7\xc3\xf8\xa4\xb4\x91\xd9?\x95[\x159/\x1c\xd6?\x07\x87H\x8eX\xbf\xe1\xbf\x84\xff\xb2\'\xfa[\xc0\xbf\xf7i\xfb\xd8\x98Q\xc3\xbf\tR\x98 \xdb\xb6\xc9\xbfeE\xb8\xb5\x0cK\xdd?\xccw\xe2\x99\x99\xc8\xd6?,H;\x0f\xa1J\xb9?\x19\xe9\x98\xb1\xad\xe5\xe2?\x1f\xbb\xb2\x01\xd0\x0c\xdd\xbf\xa0\x15\xaf4\xe2Y\xdf\xbf\xe3{\xe4\xf7\xaa\xf1\xe5\xbf\x02nDzC8\xdf? \x95\x97\xcc\xaf<\xd0\xbfO1\xb8\xdeU\xae\xb7\xbf\xd7\x1c\xb48\xd9K\xe3\xbfms"\xf6\xdbX\xdd?7aP\xac\xef\x14\xcc\xbf\x83\xe4~\x17\xff\x13\xad?Zx\xb8\xc0\xc5\xb8\xda\xbf!F\x89\x03"w\xd0\xbf2\x9f\xab&J\\\xb2?\x17(\xa4h\x1b\x1c\xb8\xbf\xf8\x81\xdc\xbaA\xeb\xda?\x1f\xb4\xe9b\xe1\x0b\xe5\xbf\xbe\xa4M\x14B\xa7\xe3\xbf\xd2\xe5\xbf\x868\xfe\x8b\xbfA\xe0\x1di\xc7\xd4\xcb?\xcd\xce.\x9a\x7fY\xdc\xbf\xf7"\x96\x1e@\xc5\xae?\xb8c\xca\x07\x16\xad\xa8?w\x8f\x81\xb4\x15\xd7\xc1\xbf\x84\x0f\x95L\xd6\xe7\xb1?\x99\x87\x9c\xc9~\x9b\xd1\xbf\xcc\xf3\xaa2Q\x8b\xda\xbf\xa2\x9fq\xe3w\\\xbf\xbf\x96#\x85\xfc\xfc\x95\xc6?v\xec\x91\xf4kU\xe0?\xb1\xb4\xa4\xe6\xe9\x85\xd2?\xdd\xc5-\x9aV\xe8\xdc\xbf\xdd\xa3\xd9\x16\xc4!\xb2\xbf\x95\xaf3\r@8\xe3?U}\x17&GC\xc6?\'\xc0\xf5w\xdb\xe4\xc6?\xce\xf2n\x1b3\xcc\xbe\xbf\x1a\xc2\x19\x83Y\x1e\xe1\xbf\xc1I\xa6\x83v\xc4\x8f?\xaa\x16FEC\xf9\xdd?9$\xc4\xb6\x1a\x90\xb4?X\x16\xc1\x9dy\x1e\xe2\xbf8\xd4\x94\xbb\xa05\xa2\xbf\xdc\x95r\xc8\xabS\xd0\xbf\x01\xf0\x88\t\xe5\xd5\xca\xbf\xb4^g|\xed\xcf\xda?!3\xcd]\xc7\xf7\xe2\xbf*\x9d\xc5\x08s\xed\xe1\xbf\xff\xd1\x15t\xd1\xc6\xe0\xbf\xdd\xd92\x1a\xd2\xc5\xe0\xbf\x97 \xdd\xd50\x8a\xde\xbf\xc8p\x90@\x99\x83\xe6\xbfsD\xe0\r\xbe,\xba\xbfk\x98P\xd1H\x10\xcf?\xc2\xd4\x8d{\xaf\xee\xb3?/\x13\xb9\xc4\xff\xb2\xda?\xb7l\xb3\xdc\x96\x05\xe2?\xfe\xc5H\xd1\xb0\xab\x8e?\x98\xe4\x9e\xdb\xa1b\xd5\xbfm\xe7c\xd0\x1aN\xd8\xbf\xb4\xf3\x81\x05\x1b*\xe2\xbfp\x0b\xf7J-\r\xe4?\xab\x98\x1b\xbc\x81?\xde?\xf8\x90\xfd\x1c\xa8\x98\xc6?L\xc8\x98\xb0|\x1a\xd9\xbf4\xc7S\x0b\xb0\x84\xcf?A\xcb\x04\x11yA\xe3?\xf0\xab\x99_f\x88\xdf\xbf\x8c\x1e\xf1\x80\xcaf\xdd\xbf(E/\xb5G2\xdd?"\xed\xab\x82\xe9\n\xe3\xbf\x99\xfa\xc9\xe9\xfcB\xa6\xbf\x01>cE\xe1\x03\xc6\xbf\x98\x12\xa5.f\x95\xe1?j\x15\x08\x92\x8c_\xe4\xbf\x92t\x8a=C\xa8\xd5\xbf\x07\x14c=5H\xde?\x0eI\x9e\xb1\x82\xa8\xaa\xbf\x17(3T}T\xe3\xbf\xf2\xb3[\x18{\xa7\xb6?\xf9g\x95\xc0Z\x04\xca?o)\xc0_o\x01\xc8\xbf\x80ZfM^\xd2\xba?\xfa\xcc6\x8b?\x98\xb5?\xfcH\xd3\xfe$\xc6\xc1?\n\x87\t;\x94C\xd3?\x1b\xf5*t\xea^\xbb?j\x18\xc6\x16\x87x\xe1?\xcd\xb1\xec\x9c\xa9\x98\xd2\xbf\x0b\xdb{\x8cM\x99\xb1?Y\xd2v!Q\xa0\xba?\xd3\x0f\xef([`\x9e\xbf\x9f2\xce\x87\xcaJ\xd9?\x8c\xbb#\x16D\x8a\xda?v.\xae\xf6\xb2;\xd8\xbf\xf1$r9\xdf\xac\xc7?\xf2~nI\xea\xdb\xe2\xbf\x89\xeb\xb2D\x00\xf9\xb0\xbf\xa4\xbe3\x92"@\xd9?\x05\x94\'\xed>H\xbe?pk\xa8h$\xee\xd1?o/l\xc6e\xdd\xb3\xbfG;\xa0){)\xe3\xbf&\xeb\xf6^\xa0\xfe\xc1?\x1f\x9d\r\x94\xaa\xbc\xd3\xbf\xa9\xd8#\x8e\x98\xc0\xdb?\xacI\x8dTD\xb8\xd0?h\x00S"5\xff\xc3\xbf\xa5U\xf4{\xa6\x84\xe5\xbf\xab\x0f\xf5o\xbb\xb9\xd2?V\xc7\xb4X\x0c\xa6\xde?\xa12K\x8a\x9clB?\x00\x85\xca\x18\x8d-\xd8?q\xf0\xe9\x8fY\xc8\xe0\xbf\\V>c\xc5\x0e\xd8?L-W\x8a\xe9\xbd\xc8\xbf\xa7\xa7\xc7\x1b\xac-\xbb\xbf\x18)\xb4\t\x17&\xd0\xbf\xb7\xe2*\x9b\xaa\x01\xe2\xbf_\x97\x9c\xd2\x7f\xc9\xc6?!\x13\xaa\x10u\xb9\xc2\xbf\xcc#i\xe0/o\xc1\xbf\xec\xbc\xf5\xb3\xe7r\xd6\xbfJ\x04\xf0\xbci\xe4\xd9?#|\xf9bvV\xba\xbf\xab\xb5\x0b\x83\xd4\xf0\xde?E,B)l\x9e\xdf\xbfT*\xd7\xdb\x9c\xca\xd6?M\x85\xaa\x83>\x16\xcb?\xe5\x07(\x91\xaf\x9d\xe1?\xff\xb3\xb0\xf9(\x06\xd1\xbfQ\x91F\xd9\x85&\xdf?\xf9\x9d\xb1\x82;\xd9\xda\xbf\xae=\xc3\x8d\x00\x0e\xaf?]\x9a\xe9( \xea\xd9\xbf"+8+\x05\xb3\xd0?\xda\x01k0D\xd6\xe4\xbfk\xe8\xb0\xd5\xab\xa4\xc0?|L\xba\xa2\x13@\xd5\xbf\x8aj8w^\xfa\xe0?\xaeF7K\xf3%\xda\xbf\xa1\xb8\xe4\xde\xfa\x98\xe0\xbf\xff\xdfb\\\x14\xad\xc1\xbf\x894DF&\xea\xc5\xbf\xae\xaf\x90\xc4\x87x\xcc\xbfY\xfa\xda\xc9\xec\xcd\xe0\xbfr\xa7\xe7\xb8_\x1aT\xbf,\x96}\xcd\xc8\xad\xdb?{\xb62)/P\xe1\xbf@\xa5\xd6\x8d\xbd]\xdd?\xd5r\x7f\xcd\xb4\xc0\xa8?\xa1\xcfb9\xab\x80\xd7\xbf)\xe6\xb3<\r6\xd2\xbf\x9a\x83\x84\xd8\x99\xc2|?33\xc9\xffy\x94\xd2? \xdbH\xd6u\xe0\xda?\xcb\xfd\x1a\xe2\xa3\x04\xe0?\x9e\xbeB\xc3I\x8e~?~\x8fW\x11\xdc\xdc\xd3?\xb7\xf6\x1dn\x8e\x1c\xd8?JB\x0f\xdam\xe4\xcf\xbfz8\xf5*0x\xca?\xd5\xd3\x1e\ts/\xe1\xbf9\xfa\x92:|\xad\xd8\xbf\x12\xaf\xa7?D\x05\xb4?\xad\xb2>n+\\\xe5\xbf\xd4\x9a\x19,\xc2z\xd4\xbf\x00\xf0\xc7\x05\x9b\xa0\xc1?\x1fL\x11\x8aa\xf2\xe3\xbf\xde<5eSD\xd7\xbf\xdd6\x9a\x19 _\x93\xbf\xdf\xac]z1A\xce\xbfsq\t\x97\xdet\xe6\xbf\xb4\x13\x8d\xb0\x9bB\xb4?\xdc\xed\xca\xe4\xa8-\xdc\xbf\'$\'\x93E\x02\xbc\xbf\x7f\xd0o;\xe75\xc0?_\x1b\x0f\xf8<{\xe1?\xe1\xa7\x1e\x07\x85w\xe3\xbf\xe0z\x83\xb1\xdeJ\xdd?\x15\xe8\n\x1f Z\xd9?\x8b\xcb\tg\xe4\xcd\xaa\xbf\tQ\xe7|;%\xdb\xbf\x12Y\xb5\x90\x19k\xbd?\xd9\xee\xbf\xeeH\xf8\xda\xbf\xe4\xf7\xda\xaa\xb2\x99\xe0\xbf\x80\x93\xad|\xc8\xe5\xd1?\x10)\xc0\x04a\xeb\xc0?E\xe1d\xa5\xa4\x05\xe3?N\x9a\xdew\xc2\xe2\xe2\xbf\xe1\xacEq\x86\xa7\xe6\xbfY\x99p\x1a\xe0$\xdf\xbf\xc9I\xdc4\x0c\xe4\xe2\xbf\x92\xcc\x9cb7<\xe6\xbf\xba{\x1cP\xbf\x1f\xa2\xbf\xebT!]Np\xdf\xbfp\x11\xe6?\xe3\x9a\xb4\xbf\xa9\xf8\xfb\xff(\x7f\xbf\xbf1\xaf\xbc\x8f\xfc~\xda?e\x8c\x9c\xca\xe66\xe6\xbf\xe1\xb5\xac\x86\x18w\xc2?\x92\xf0\x813f\xfc\xe6\xbf\xc5\xbd>MI\xf3\xdd\xbf^Q\x0bmf\xf3\xd1\xbf\xacD\xd7\xed\xc5\xb5\xdf\xbf;\xd9\xd9\x97\x0c\xcd\xd0?{i<s\xbd\x03\xc5\xbfHt-\xe3\xed\x92\xa2?<B\xc6b\xaa\x86\xb9\xbfS\x13d\x97\xc1R\xe1\xbf\x01\xe3\xc1K\xcf\xdap?\x1d\xb2\xd5x\xf1\xc6\x99?YC\xa4}\xe5\x16\xe1?\xbe\x91\xe4Hjg\xa2?\xc6\xd4j|\xde\x8c\xe1\xbf\x05D\x80\x8d\xe5\x7f\xd6\xbf\xda\xa1\x9b\x00\x90\xad\xaa\xbf\x9aQ\xd1\\\xd0\xf1\xdd?QZ/T\x17\xf8\xe7\xbf\xdflt\xac\xe9K\xc0\xbf\xba7\x9b[\x13x\xd6\xbfI\xc2\xfdZW\xc5\xbd?G\xbe\xb6\xfc-\xce\xce?-0"\x1f|N\xd7?.OQs\x1d\x19\xd1\xbf7\xf9\x06 \xfa%\xe0?\xfc\xd9\xda\x01a\x00\xe3\xbf\x8f^\xde\xcd\xf6\xde\xe1\xbfv\xb6\x0b\xb4\xef\xe6\xdb?r\x16\xe9\xd9CN\xe3\xbf\xd8R0#\xfc\xbe\xd6?\xcb\xdf\xa8\xea\x9f\xcc\xcc\xbf[n\xdd\x18\xa3E\xe7\xbfX\xcc*\x0b\x1d\xe6\xd4?X\x1b\xbd^\xe3\xf5\xdc\xbf\xef1\x08\x97\xc0E\xd5?\xa8\tZ\xcb\x81\x93\xc7\xbf5\xb6\x80{\x12\xca\xcd?\xf8M\xd4KK\xbd\xe3\xbf\xc7-\xd5\x81\xd7\xe3\xda?\xe5\xff\x05\x89\xc6{\xa8\xbf\xb8*\xdc#\x07\x81\xd8?\x0cU;.\xfe\xd9\xe0?eX\xde\xfaL^\xe5\xbf.\x03\n\x85\x16V\xcb?\x9dv\xaaL*\xfc\xdd?hZ\x16\xf2\xd5\x8e\x88?\x96\r\xee\xf4\xb1\x99\xd7\xbf\xbdb\r+\xecY\xda\xbf4$\x80\x97\x9aF\xda?$v$\x1d\xd3\xd4\x85\xbf\xedBvS+\x16\xd8\xbf)\xea\x04\xd7?\xe1\xa0?\t\xf2\x1b\x05\xfc\xc2\xdf?\x89\xad2+A\xc9\xcb?\xa0X`\xa2Rh\xe0?\x7f\x82\xf5\xb1\xc8\xd2\xdf\xbf\xe4\x0cu\x0c\x1a\xb1\xe7\xbf\xcc\x11\x8b\xb1\x00\xb8\xe0?\x86g\xb9O\rQ\xe1??U\x94z\x10\xb0\xd6?\x8c\xc2\x15B\x9a\xf6\xcf?\r\xe7\xf9\xdf\x0e\x8d\xd3\xbf\xfb\x96@\xd0\x05\x0e\xd2?D2\x04\xd90A\xe2?\xea\xeb\xb6*S\xf3\xdb\xbf\x8dl\xd8\xc2KK\xe0\xbf\x12\x0b\t\\\xa9\xeb\xd3?!\x9dC\xbc\x10\xcc_\xbf:\xe5\xbf\xe4{\x1f\xd4?(\xb67\x12\xd4\x94\xe3\xbfM\xd4\xb3\x9f\x17[\xe4\xbf,\xea\x83\xab\x86\xdf\xe4\xbf\xd9\x82\x8a_S&\xb7\xbf\xef\x16\xb3i\x97\xd0\xdb?\x86\xcc0\xbc\xb6\xd3\xe3\xbfU\xfe^\x05\x15\xbb\xd8?\xbdi\xf7R\x0c6\xd5?\xb4\x8c9)\x82\x90\xbf?\x97B8\'\x0eh\xc8\xbf\xb1\x89\xe1:\xf6\xe4\xdb?\xf5Ci\xbdX\x17\xdf\xbf\x94|\xf3\x88\x1f8\xbc?\xfcknE\xdc\xbf\xd0?\x9a\xd5\x89\x82>V\xd9\xbf\xda\xa3\xcf\xd3?D\xe1?\t\xde\xb6HC|\xb4?\xa8\xfe\xe3A;\xde\xdc\xbf0--\xff\x1eg\xde\xbf\xaa\x96\xea\x9d\x1cV\xd2\xbf\xaco\x9aAsA\xd4\xbf\xfc\xb9\x93\x01@Q\xdd?\xcd\x8b\xcd\xc7r{\xa6?\x8b\xfc"\xd2\xf2k\xce\xbf\x8e\x07%u\xed\xdb\xe2?\xaa\x8fW\xfe\xe34\xd8?\xd7\x0cj\x039\xcd\xe5\xbf8\x05#D\x85(\xdd\xbfE\x05R\xe7\xff\xf3\xd6?K"W\xff\x97d\xdd?\xaeb9p#\x87\xd5?\xbf\nR*\x0b\x04\xea\xbf~\xab\xd2v\xf7\xd9\xcb?M:\x14\xae\x8bl\xd2\xbfd1\xf5-x\x00\xbc?\xa8\x12\x7f\x9cM\xc5\xd8\xbf\x15\xe6\x04\x1a\xf2\xea\xdb\xbf\xd8\x8d\x07R\x1c\xbe\xd7?\xb7\x14\x89\x0b\xb4m\xe5\xbf\xfc\x94\xec\\O]\xe3\xbf\xf8x\xbf2r\xd0\xae?\x9c\x01\x1es\xb4\xdc\xe3\xbf\x91\x9c\x99\x92~\xe1\xc7\xbf\xfe3T[f\xec\xcf?\xea\x02u\xd6\xd3\x1b\xc1?\xfbWx\x8b\xac\xab\xb0?\x93\x90\xdf\xcc\xe9\xfa\xe0?\x1f\xc1Fg\x05\xd2\xca\xbfB\x98\xa5\t\xa0\x1e\xd6\xbf\x8d\x8b\xc3\xca\x1b\xaa\xbf\xbf\xf1\xae\rc\x95W\xdd?\xa6w6\xc1\x87\x03\xd9\xbf\x8e\xea\x83\xae\x02\xf3\xa1?P\x81\xe4\x04NG\xe2?\xea|\xb3sx\xfd\xe1\xbf\xd7f\xe8\xcc\xff\xbc\xe0\xbf\x83T&9~@\xdf\xbf}\xde\xe1s\xa9\xbc\xe2\xbf\x055\x87\x17\x17\xc4\xde\xbf\x1fz"\xdb\xc7b\xd4\xbfO\xff\xd4\xf1x\x1d\xeb\xbf\xee$P\xaf=\x17\x98?\xc2s`P`W\xdb\xbf\xe9\xdc\x91\xd01\x0f\xe7\xbf\xcf\x02\xba\x80\xe5\x8a\x9e?\x19\x00\x85\xe9\x9e%\xc6\xbfD3s\xfa\xdf\x02\xe1?.kZ\xeffO\xd8?\xbau\xd1#\xe3z\xd8?&\xacm\x94\x1c\x1f\xd0\xbf\x92s\xe7)\x0ci\xdc\xbfS\xf2D\x82\x1d\x8b\xe8\xbf\x1di\x9b\'[\xa6\xd4\xbf\x98\xf64c=5\xd7\xbf\xad\x0cWf1\xa5\xe2?\xab\xa3Q\xf1\x9a\xa7\xd3\xbfi\xe8V\x88^5\xe0\xbf\xa8P,Bd\x7f\xcf\xbf:>\nB\xdf8\xe0?\xc6r\x9a9f8\xe0?\x8ax\x8b\xf4\x00{\xda\xbf\xdaOM\xe5xp\xe2?\xf9\x13/\x9f\x86L\xe0?\x8d\xedx\xaf\x13\xfb\xcf?~\x12\xd5\xc0\xef^\xce\xbf\x92,N \xe9@\xe6\xbf\xc5\xa6\x92:<\xe0\xb3?|?\x905\xeb\xb1\xe7?~J\x93\'\t\xad\xe2\xbf\x81\x14O\xea@o\xe1\xbf\x05\x93o\x98\x8c\xa1\xd7\xbf\xa6\xfc\xef\xeb&\xa4\xe5\xbfma\xc4\xd14\x10\xe0?\xf7\xb0jR\x1d\x12\xdc\xbf}\x03\x06\x1b:\x1c\xdf?.\xdc:\x85\xfa\x17\xdd?mb\x0e\x87b\xfa\xdf?\xa2#1\x7fT\n\xe6?k\xa5-{\xf2\x1a\xdf\xbf\x8fs4\x83\xce\xdab\xbfJ1\xb7\x9bI~\xd8?\x9b\x8aj\xcbN\xf0\xc4\xbf\xefP\xb9\x07\x0f\x13\xd5?\x0c\x81\xe9X\xfa\xdf\xc9\xbfTc\xa6)R\x02\xe5?\xfc9\tA\xb91\xe3\xbf-\xda<\xb2\xb7s\xde\xbf\xbfn\xd4F\xbfe\xea\xbfS\xff\xf9S\x8e\xfe\xe0?~\x91\xe2\xf4r\x07\xe6\xbf\xc6\xe8\x15\x97de\xb9\xbf\x97\t}^C\x88\xdc\xbf7X\xadN\x91[\xe0\xbf\xec\xeb\x8f\xe7\xb8h\xdd?\x05Yp*f"\xd6?\x17P\xff \xb84\xe1?\xa6\xbak=\xcc7\xd2\xbf\x82\x94\xcc\x19\xc7\x87\xb4?\xdb\xa0Y\xf3\xbb\xe3\xc5?R\xdb\x12&\x84\xe9\xc7?\x82\x86\xc9>F\x19\xd4\xbf3\xf7#V|[\xd9\xbf\x9d\xefU\x91>\xac\xc8\xbf\xf3L\x86\x1c\x91\x13\xd1?\xe7\x9fm\x9b\xbc\xf3\xd8\xbf\xc5\xdf\xedlg\'\xd6?\xfe\xc6\x84ty\x88\xe5\xbf\xc4*\xaa\xf1\x9b\x7f\xe8\xbf\x91^M<\xd3\xad\xe9\xbf\xd1\xe6\x91\xe8\xb0\x0c\xe3?$!\xb5\xe3S\xb5\xde?\n\xcd\xcb\xc6\xbb\xe4\x8e?I\xd5\xfb\xab\xce\xb1\xe9\xbf\xe6\xea\x07h\x84\xe1\xe0?\xe0\x94s\x1bU \x86?\xfab\xe2\x10.\xfc\xda?\x1b\xd3\xf8\xa9\xa9\x03\xdc\xbf\x98\xc8EF6\x80\xc2\xbf\xaf&\xb0\xb4x\x86\xc6\xbf\xce(\xd4n\x0ck\xe8\xbfY\xb4\xcc\xdf\x0b\x91\xe4?EwY&\x84v\xe1?C\x95t\xa1\x7f\xec\xc0?y\x9blBda{?Py\xcf\xa2\xc8\x12\xc2?\xa98<\xc8\xd1\x01\xe1?\x98\x92\xd9\x86V\x97\xc6?\xaa\n\xc8\x85W=v\xbf\x1f\x12\xee\xa2\xc6\x83\xd5?=\xda\x10\xa9\xc5\xe3\xd8?@2\xce\xd1\xb1n\xa1\xbf&t\xee\x7f+\xf1\xdd?^H4\x15\xe6#\xdd?\xbf\x15=\x1fNN\xc3\xbf\xa3\xb6\xab\x13\x90\xfa\xdd?pQ\xa36\xdf\xd5\xe3\xbf.!\x18\xb9\x05\xd8\xe4?\xd6\xc1\x87\xa3\xec\r\xe5?\x87\xfa\x8eA8\xda\xe4?\xef\xe4q\xd00\x90\xe2\xbfC\x9d\xc0\xd5H\x84\xe2?(\xbbH\xf2P\xff\xab?\xc1\xe5\x06i\xd4!\xc4?\x81\\\xd4\xbe\xd9\x18\xe4\xbfs\xf7W\xe6\xb3\xcd\xdf\xbf\xfa\x0b\x19\x84fr\xc3\xbfw5\xec\xb5\xb7\x8d\xe2\xbf+NU\xd1Z\xfb\xe5?E-4\x80w\x1c\xc3\xbf\xa9U+\x19\xb6(\xea\xbf\x05/\x15"0)\xc0\xbf\xb3\xd1,#\xb1\x9b\xad?\xc2\xc0\xb3\x08\xe2\xc9\xe1?\xa2\xea\x9e\xdem\xcf\xa5\xbf\x90vL5\x8b\x04\xe5\xbfT\xc5\xce\xe0\x05q\xe9\xbf\xd6\x7f\x06\xad\x84h\xe0?y\xbbGU\xb6k\xe8\xbf\x82\x96Ph\xd0\x19\xde\xbf\x9e\xe0\xce>\x0bh\xe4\xbf7\xeb\x02\x10r\x0e\xda?\x851&Z\x9b\x01\xcb?\x1d~;\x98\xd5~\xdd?\xeaA[\xbff\x01\xc0?z|\xb4\xd6\x19\xc7\xca\xbf\xcb\x13{\xa0N\xe2\xe0\xbf\xafpA\xec\x01\xe6\xc1?\xf7\x9f\xf7b\xa6m\xe1?\xb6F\x150\x86Y\xec\xbfi\xac,\x1f\xe6\xca\xc9?P\xe8\x96\xd3\xd3\xdc\xde?\xd2O\x83LRP\xd1?\x86\r\xf3G\xb5\'\xc0\xbfw"B\xd7\x1cY\xe3?\x17\\\xb8W\xe9\xab\xe3?\xd2\x8b\xeb\xe1\x87\x10\xdb?.noG\xac\xb7\xd8?"\xf3\x164\xe0\x9e\xc9?U\xd7\x8c\x89g\xb8\xbd\xbf\x96\xb2\xe6\x1bl\xab\xe2?\xc8\x17)|\xa2\x96\xe6?(\xd3\x91c\xa5\xb8\xc3\xbf\xb3.\xfaK\xf0#\x9b?\xd8\xc3\xbc\x13\x81\xca\xd8?\x1b/\x9f\xd5\x0b\x81\xe5\xbf\x0ff\xf3\xb2#3\xd8?isj\'ZW\xd5?\xa7\x10"">\x15\xd5?#\x08V\xd7(1\xe7\xbf\xcdb5V\x80k\xbb\xbf@\xc1\xc4\x8e\xef`\xdc\xbf\xd1\xccwD\tk\xe4\xbf\xb0\xbf\x1d\x95\xe8\xc7\xdf?#\x92\x7f\x8d\x0b\x93\xa8\xbf\xd5\x88\xfdk\xae3\xc8?Qz\xc3\x16\x10g\xbd?\xb8-\xaf\x01\x1f\xca\xd7\xbfRO\xf9{\xe5\x9b\xcc?\xf3\x81\xc8\x7f\x18B\xdf?t@\xd0\x9c\xa6\x86\xb9\xbf\xfd\xf1\x9a\xd6\x02\x0b\xd7\xbf\xf5\xa8\x14\xf9\xf6f\xa7\xbft5\xeeu\xfe\x8c\xd6?\xeb0X\x03\x0c\xa0\xe2?\xb2:2\\\xc7\xb1\xcd\xbf\t\xa7\x85[\x9d1\xc2\xbf\x01$E\no\x13\xda\xbf-\xc0V\xa1\xa2`\xb4?tH\x08\x19\xb5\xf9\xd8\xbf\xd0\xff\xe3\x01|)\xde\xbf}<&\x92\x06r\xab\xbf\xe6B\x08K\x91Q\xaf\xbf[\x8f\x00p\xe5\xfe\xe0?\x17H{]$X\xd6?\xb1\x8e/\xa4~f\xea\xbf2\x89\xf8y|i\xe7\xbf\x1d\xba?\xd6*\xd0\xd8\xbfE\xac\xe8\xc4H\xdd\xc3?\x11\x82\xb0\xbd\xbaW\xad?Ph=\x80\\\xff\xb1?\xb5\xe7\xc3\xd5\x1a9\xa8?\xe7R\xdb\x0b\x05\xf8\xd0\xbf\x9fS\x1f./+\xd7\xbf\xed\xd2/\xd7\xe7\xa1\xbb\xbf\xdc\xb3\xdf\x10\x00\x85\xa6?\x03\x9e\xb6\xe6\xccX\xc2?\x99\x14\x84W\x0f\xd4\xe1\xbf \xcf\x1bk\xdes\xe3\xbf\xa6\x13e\xb4\x91\x90\xdb\xbf\'\xbf\xbe\xe44\xa8\xa7\xbf\x82\x07\xd7|f\xca\xe0?\x0b; \xfb\xc8t\xe2\xbfeeH\xe9\xf8Y\xe1?\xa8\x02OT\xc9\xef\xe7?\xd5\xfcy\x88\xea\\\xd9\xbf\xc9\x8a[\xdd\x1at\xe3\xbf\x8b\xf8\x1c\t\xf6\x83\xe6?\x87n\xc1\x9c\xb1\xee\xc5?\x8f]G\xec\xffz\xe4?9\xd0\xec\xe2\xc3w\xb8?\xeaAO\xf1BF\xe0\xbfF\xad\xacL\xc0T\xb0?)\xee\x92\xe7\x92\xb9\xe3?0\x90&\xd4\xf3g\xe6?\x18\x8f\x1e\xd5%w\xe2\xbfM\xd3\xda\xb99\xf8\xd3\xbf\xbe\xf1\xdb\xbdv\xe8\xcd? \xbf\xf6\xea\xee@\xe2\xbft\x9aCt(#\xc9\xbf\x90?,\x8f\xa5\xe6\xbe\xbf\x01\xc7w\xafT\x12\xd7\xbfA`N,\xfd2\xca\xbf\xcd\xbc\xc55\x7f\xca\xda\xbf\x0c\xca\xa0~3_\xd5?\x8a\x18\x9db\xc7\x8f\xd0\xbf\xec\xd3>B\x06\x1d\xda\xbf\x95\xa4"\xa7~\xab\xd7?\xe9h\xfeky\xc5\xc4\xbf\xdc\x85\xb4\xa1\xbc%\xd0?G/k\xa8\xc4\x1c\xe6\xbf\xb0\x19Q\x80\xa9\x14\xd8\xbf\xfd\xa8\xf6\x890\xa0\xca?\x8c]{\x15Z\x1f\xc3\xbf\x9a}\xbe\x9eB\xc8\xe9\xbf\x0b\xd0\xbd\xfehq\xcd\xbfK\xfd\x9c\xfe\x19w\xda\xbf?W\x7f\xaf\xf3b\xdb?\xc4\xa2U\xa9XG\xc6\xbf>\x9d\x8bvP\x0b\xe3\xbf,\xf3i\x19w]\xc0?\xa7\x11\xf6 \xf6\t\xd1?D\x85\xde\xd1kq\xe4\xbf\x98\x91\x94\xf0\xbbe\xd6?Bq\xcd\xd2,\xb2\xe6\xbf{\x10d\x10\xb1\xa4\xe4?\xcf\xaf~n\xbe\xd9\xe5\xbf\x9e\xcdd\x0c\xbc\x16\xa9?\xa2\xcd\xb0\xbf\xea\x13\xd8\xbf?\'@\x04m\xad\xd5\xbf\x9a^|\xf7\x97\x8c\xd0\xbf}\xd5\x1dM1{\xd7?x\xac\xeb\x08A\xf7\xc2?\x10yl\x03\xe0\'\xc2\xbf\xaa\xf0\xf3E.\xd8\x83\xbf\x89\xbf\xd6\xe1\xfe\x17\xc9?G\\\x9e\x07\x16\xae\xd7?\x03\x80\x07\x84\x87\xec\xd2\xbf\xca0\x8c\x84g\x8a\xd9?\xcfMK\t_\x13\x8c\xbf`\xb7\x0fb\xaf\x15\xd3?\xd6R=\x95\x14\xa2P?\xa5y\x88\x87\x82m\xcd\xbf\x18[^\xf9\x9b\x9c\xdd\xbf\xda\xcc\xe0\x07e\x19\xd4\xbf\xa3\xf2\xf1\xdd;\x9a\xc0\xbf\x84x\x0eQ\x87\xab\xe2\xbf\\\xe2\xf4P\xcf\xd3\xd6?\xda\x91`\xf7P\xcf\xe4?o\x04\xe0\x80o\x18\xcd?f\xd5\x8d\xa6\xd5\x84\xe0?\x07\xbeG\xaa\xb3\xc8\xe5\xbf\xf7?\xb7S\xae\xcd\xdb\xbf\x87h\xe9?\xf2\x8e\xce?\x10\xbdN\x89>\x9d\xe0\xbf\x0b\xe8D\xc2\xd1\x9d\xc0\xbf\x90\xf3\xaaq\x8e\xc5\xe4\xbf\n\xe5\xd1\xb9O=\xe2?\x1b\xbb\xdcc\xc3\xe5\x90?\xe3\xa3\xc8\x10X\r\xe5?\x0c\xfc\xa3\xb9\x9b+\xe3\xbf0\xc6%\xc3Ow\xb5\xbf\n\t&\xf8\xfd\x9b\xe0?$\x82\xddW\x0f+w?:\xda\x15l\x1d\\\xd6\xbf\x8e\xd2\xb5\x08=\xc1\xab\xbf*a\xb7c\xe8\xc2\xe4?\x9dt\xf9\xc5\x18\xdd\xb5?8\xff\xbb\x96\x08\xc0\xbf?v\x9c\x9f\xe9\xc8\xc8\xd5?T\x8d\xdai@=\xe8\xbf*\xd5D\xa4w\xc3\xda\xbf.rB\x08\x88T\xd9?\x8aE:\x92\x81\x01\xe2?\xb0\x8e\xec(0\x94\xa4\xbf\x1f\xfe\x8f\xa2\xafg\xe3\xbfG\xbc\xbdz\x006\x9a?3\x83o\xb5\xf5\xab\xac\xbf\x05SC\xf6\xe2\xb3\xc8?\xe7\xa6S\xe6\xe6\x12\xc9\xbf\xd3.\xef\x025\xc7\xd4?\xdc\xf3Lt\xa9\xad\xe4\xbf8\x83\xb2\xdb20\xd0\xbf\x14\xf5\xc6\x7f\x15\xc5\xdc\xbf\xd5\xca`\xf0\xa7\xf2\xa9\xbf\x17\xec\xc0\x19\x17@\xd8?\x84\x976\x9d\x17]\xe1?\xe6\x90cl@\x17\xe2\xbf\xeaA\xbb}\x8d\\\xc3?L:\x01(R\xba\xe9\xbf\x18\xed\xd3N\x1e\t\xbd?\xe4\xb7/\x8b\xeb\xbe\xcf?7]\x13O\x02\x9f\xd3?\x01\xcc\xa1G<\xb8\xc9\xbf%\xbf\x13B\x84i\xe1?g1{H\x18\x15\xe2?l_\r\xd4y\x82\xd8?\xd2\x1c)\x05` \x8f\xbfd\xfb\xa8\xf4\xc8\xf4\xd5\xbf\xdd\xb3\xdf?\xf57\xd8\xbf\x98>\x96Q\xbb\xff\xd3?oJ\xfc\x13\x97k\xc9\xbf\x05\xa7\x89#\xf1\x97\xe1\xbf\xb8j\xab\x83\x80\xda\xd9\xbf\x06\x8c5#\xdd|\xdb?W\xe3\x15k\xd8"\xc4\xbf(\xd0P=\xe1\x05\xd2?\x17N\x08\xdf4?\xe2\xbf\x97j\x14\xc9\xba\x1e\xd2?\x879\xc2*\x9a\x99\xdd\xbf\xea\xbc2eu\xe4\xc4?\xf54\x99\x1e:\\\xd8\xbfV\xc1\xe4\xa1v+\xdd?\xa9\x12H\xd5D\xdb\xab\xbfH\x0f\x0c\xd0n\x0f\xdd?\xde(L\xafJ\xba\xe0\xbf\x1a.\x14\x14\xc8\xd5\xd0?\tV\xaf\xedz\'\xdc?I\x14\xe5\x8f\x1f\x9e\xd3\xbf~\xdd\xe78\x84\x0e\xcf?r\xe1\x99ug\xe1\xcc\xbf\x95n\x8a\xfd(\xf2\xd1?\xf8\x9c\t\x12\xc8\xfa\xdf\xbf\xea\\NmP\r\xd5\xbf\xae\xb1\x06\x06\x125\xd3?\xc1\xd1A\xdc\x11(\xdf\xbf\x91\x11\n\xda\xcdZ\xe6\xbf\xa8\x86\xd4\xd3b\xed\xb4\xbf\xa5[\x9ebH\x0f\xd4\xbf{\x96\x1b\xe1\xcf\xc5\xd1\xbf4\xa9Y\xaf\x946\xdb?F\xe8\xd1f\xe7\xaa\xc2\xbf(\x10\xe8\x12\xe5\xe4\xdf\xbfBX\xfa\xa2\x88\x9b\xbb\xbf\xc4e\xb8\xdej8j?\xc3\xa18\xff\x0eB\xe2\xbf\xbdb[\xdd\xa16\xce\xbf\xa9\x8aK3m\x83\xc0?;\xd7-g\xcb!\xde?\x996]\x0b\xde\n\xbd\xbf\n!\xec\xe5\xa7:\xe5?%\xb6\x16\xdd-\xa3\xd3\xbf\x87\xe7:\xd1\xf5q\xd4?\xb3\xa8""6X\xe1\xbfI=\xabY\xcb\xee\xca?\x8f\xa7\x10\x060\x9c\xc1\xbf\xe5\x08\xb6\xf0!\xc4\x93\xbf\x07\xce\xe5;\xaa\xaf\xce\xbf\x90\xfc\x10TB#\xe1?\x83>\xb3\x7f\xff@\xe2?F\xdf\xd6\x06\xc9\xf2\xd5?\xa6b\xb3\xd5\x10\x0f\x99\xbf\xb7\xed\x13\x03\xd7\xc0\xa5?\x87|\xc0\xf1\xb1K\xbd\xbf\x8cKH>\xfe\x08\xca?\xb2\xaf\x84Z n\xe7\xbf\xf1\xf4\x99!\xcf\x84\xde?\xde\x8dd\x15\x15\xb0\xda?\x08.hk\x16\xec\xd6?+\x89\xcf\xcd\x1d\x05\xd9?\x00\x0e\xd5\x90\x89\t\xdb\xbf\xf5\x80\xc9\x8d\xf9p\xbd\xbf:\xb4\xc1nc*\xde?\xcd.Q\x07\x1e6\xda\xbf\xdeR\x8au\xe7\xda\xe2\xbf\x97\xbb\x86\xdb\x0cP\xdd?\xb6r9\x9d\xff\xda\xd7?\r\xa0\xe9C\xb1\x97\xb5?14\xa4V\xee\xc2\xe0\xbf\x16\x83\x00\x84\xc2H\xbf\xbf\xf2\x03\xc9\xbcm\xdb\xe1?\x9e\x99S*!?\xe0\xbf\x01\nL\xf8\x87\x8b\xe4\xbfD+/\xa3\xa8x\xda?\xbf\xec\xf4l\xd5l\xe1?\xd5\xfc]#\x0b\xda\xc7\xbf\x8dr\xc6?\xb5\x12\xd9?\xb1h+~\x84n\xe4\xbfs\xf5\xe8\xb5;<\x9d\xbf\x80\xbe\xf2us@s?\xb2\tVl\x9e\xa7\xc6\xbf\r\xd2R\x97D\x82\xc5?\xf3\xd8u\xe4\x10\r\xbf\xbf\x11=\x01\xbb\xad4\xd4?/\xdf\xe2\xbcC]\xda\xbf\xb4Yg\xe2\xac}\xa1?\x9a\xfe98\xe0:\xe2\xbf\xc1\xfapyn%\xcd\xbf\xd3&=\x95^\xd7\xe4\xbfQV\x0b\xdb\xce\x14\x86?\xc6\x99~I;\x01\xe5\xbf\x06\xc8W\xed\\Q\xd7?\x19\xcf\xa7.\x08\xb0\xe1?\x9bWo+h\x12\xdd?\xaa\x8cb\xbd\x9f\xc2\xe6\xbf\xc6\xc7\x7f\xfa\xf6\xe2\xe4\xbf\xd6\xe7\xe5\x98\xa2X\xe1?\xa9\xe9\xd9U\'\xb3\xd2?G\xcb\x897\x16\x83\xcb?\xca*\x05\xb6\xa9\xc3\xc7?E3\xb9\xdbe\xc8\xcc\xbf8\xdb\xdf9\xfd~\xb3?\xea\x86\xcdPw\xf7\xcd?\xda\xa4.J\xd5w\xe0\xbf\x18\xb0P\x12\x07`\xda\xbf\xa7\xaedP\xd5\x0b\x91\xbf\xb7\xe3\xbf)\x8d\xf5\xe2?\xd5D\xf7\x04*\xd2\xd4?\x1b\xe6\xcf\xe7M\x08\xd4\xbf#\xcf\xfe\x8a\x97\x1d\xe2\xbf\xbd+\xe6\xae\xd4L\xbc\xbf\x81T\xbdE\xa0\x08\xda\xbf\x05F\x94\x89\xfbP\xdb\xbf\x18\xcd\xe5\xa3\x11\xf6Q?G\x02\xfb\xd6\xb4\x80\xce?\xf3a\x83\xdaP\xa1\xe2?\x8f\xb6\xd2t\x1bj\xb3\xbf\xb2\xb2\xd3[\x9b\xa4\xb9\xbf%\x05$\x93\xa5\xf1\xb5?\x08\x00*\xf0\xec3\xc5?=pK\xac\x04x\xd8?\xf7M\xe9\xd0\xdfn\xa7?\xbf\x81\xab|gD\xd1?0\xde\xfd\xe1\x05\x90\xdb\xbf\xf0\xe9GL\x88C\xcb?\xf8?\xf7JV\xfd\xd3?\xe2\xb4`O\xfbA\xda\xbf\xc6g\x81\x8dj(\x8b?\r\\Zn\xd4,\xb7\xbf\xf4Ak\x1c6\xa9\xd8?o\xabEX\xc5\xd1\xc7\xbfb\x92dC\x8b\x1f\xce\xbf$\x08v\xb4\xc2\xcc\xe8\xbf\x89"j\xe0@\xa1\xc1?Kz.(\xd77\xc7\xbfG;\xd5V\xd5\xf0\xc8\xbf\x00\xd6\x0f\xdd/\x80\xd2?\xa1\xf1\xccc\xbfn\xdf\xbf\xe6"\xeeRNa\xde?M2O\x18\xfd\xdd\xa5\xbfM \xeb\x8c\xe4\xd7\xbe\xbf3\xd9\xcdG\n\x85\xdd\xbf\x0c\xbc\xad\x8f\xab\x04\xcb?\xd7\xfb:`p(\xd3?\xc6$\xc4\xa7]\x15\xd5?.\x93\xd5\xa2\x80\xc5\xcb\xbf\xc6)\xb1\x13oB\xd6?y\x1c![S\x1c\xd9\xbf\xf7\xa42$\x8cp\xd1\xbff\xfcJf\xfb\x9d\xc1\xbf\xc9LL\xb2p*\xd8\xbf\x88?u|\xe5\xdb\xe2?*\\\x9d\xb0\x81\x01\xdf\xbf\x93[+\xfb\xeb\x8e\xe7\xbf\xd9_\x97\x13\xd6\xc8\xd5?\xd5\x19\x0b\x9b\x03\x9d\xba?y\x96\xf1\xed\x03\xf9\xdc\xbf\x80.0\xa3\xeb\xc4\xe5\xbf\xea\xea\xc4w\x1f\xc0\xe3?\xd4\xcdaF`\xa5\xdf?\xa8y#\xdfv\xaf\xd9?{\xc63d~\xb0\x8a\xbfB\xaf\xdc\x89{\xbf\xd5\xbf\x1a\x10\x05\xdc\xe6\x85\xa9?Q\xd2\xb9\x15\xc7V\xae\xbfb\x8e`\x8d\x19\x97\xaf\xbf\xfe\xc8S\xc9\x99>\xd7?UpO\xf0\xc0\\\xd0?9\x0f\xde\xfcN\xf6\xd0?O\xbd\xe4k\t[\xd8?i@sB\x1c&\xde?-\x0c[\xc5"V\x97?v?\\\x17#\x84\xe5\xbf\xc1$\xfa\xdb\x17\xb4\xdf\xbf5ng\xbe\xd1L\xcb?\x11\x08\xc4aJ\xb8\x93\xbf\xca\xe25\x01\xc2\x8a\xeb\xbf\x8f\xb6>fD\xba\xe3\xbf\xa4A\xc2\xeb83\xd7?X\xa6^\xe1R\xa5\xb8\xbfH9\x7f\xbb\x92}\xe0\xbf\xfb\xdc\x06"\xefo\xc8\xbf\xa7\x92 \x13\xc9o\xe5\xbf\x98=\xd5\xee\xa2\xc5s\xbf^\xa3\xb3&\x1c\x00\xd2?\x0c@\x8c\x98\xf9\xc5\xdd\xbf\xbc2m\xadc\xb3\xd9?\x99m\x8e\xa9Ew\xda\xbf\x1b\x9ft\xb8\x07\xa4\xcf\xbf\x84\xbb\x8f\x94;\xd7\xcb\xbf\xb2\xba\xa8|\x1a\x00\xa5?\x1e\xb9\xad\xe8i\xd3\xd7\xbf/D\xe6\xda\x06\xbf\xc5?pkt\xb7h\xbe\xe4?n*i\r2n\xd4\xbf\xa4u/\xd0DD\xd5\xbf&1Se\x881\xe3?y\xb1U\x00\'\x15\xdf\xbf\xc3\xd6\xd8\x05\x8a\x0b\xaf?}\xd8\x1b\xd7\xca\xf9\xd9\xbf\x1fFi\xfd\xf9\xed\xd4?\x1f3\x0f\xffS6\xb8?g\x823\x99R\x11\xdc\xbf@\xfa\xf7S\xce\x0b\xe6\xbfT\xdaA\xcb\xe9\x04\xc4\xbf\xe6<\xa5;\x91\x18\xc1?j\x14\xdeC{Y\xd2?,s\xbf\xc9\xbe\x15\xda\xbf\xe7\xdd\xfcP+\xc6\xe4\xbf\x0b\xe6\x18\xbb\xb5r\xe3?\'n6.\xa4\xe8\xc3?\xb7\x9c\x01\xa6Z\x96\xd9?\xf0\x801\x1a\x16G\xe4\xbf?0\xa1}k!\xd9\xbf\xb2\x1a\x17\xe7\x15,\xea\xbf\xc0\xe3\xa9W\xfc\xc4\xd5\xbf\x90\xcaC\xc4\x7f\xba\xe7\xbf\x0e\xbd\x05\xb4\n\x93z?i\xe6d\xe8\xc9\x17\xcd\xbf0\xdf\x1e\xd9\xb6\xc8\xd6?\xf9\xea6D\xd1\xc5\xda?\xfaI\xbe\xdb\x1a\x85\xe4\xbf\xf5K:u\x0e\xd5\xdf??\x1e\x9b\x16\xea\x0b\xe3?;Gw\xa6\xc8.\xe8\xbf\x04?5{\xef\x9f\xd3\xbf}\x19\x0c\x016\x1b\xb6\xbfP;_\xd1\xbe?\xd2\xbf\x93,\x1c\xff\xd5\x90\xe3\xbfw\xea\xfb@\xf2\xff\xd5?\xe1\xf3\x18\xcf\xddW\xd3?\xe7\x11\xa7B\xc92\xb3\xbf\xe2gh\xdd\x8c\xc2\xc7\xbf\xb64\xb1\xb5\x91\x93\xe2\xbf\xe3\x1ak<\xc3p\xdc\xbf\x11\x82\xb5\x9e\xc5\xda\xa6?Z\x81Ss\xfa\xfc\xe2?Y=\\\x17(\r\xe8\xbf_~\xed\xc6\x94\xf3\xd2\xbf\xc0\x0f\xf96\xf2X\xe8\xbft@%\xd0\x0e\xd3\xd0\xbf\x8d\x13\xf0\x13\x9a\x86\x89\xbfAS\x8c\xdb2\xdd\xd9?=E\xe7\xfc\xc5\xc8\xd5\xbfs\xa0U\xbb\xea\xce\xdb?\xe9\xa7\x8e!\xd8\xc0\xe4\xbf\xaa\xc9H98\xc2\xd8\xbf\x90\x00\x1e\xec/\xef\xd5?c\xdd\x7f \x13\xd6\xe7\xbf\xf5\xc2\xb8gv/\xe3\xbf\x849\xc2\x1bB\xaa\xd8\xbf\xd6\x93\xdc` 6\xd4?\x86\xef?O\xf3\x1c\xe3?\x1dD0A\xefx\xd1\xbf\xf3\x83\xdd\x7f\xe2\x07\xd6?\xd1\xcaD\xe0C\xdd\xe1\xbf\x9f\xfbBr\xca\x9b\xde\xbf1\xd8\xf3\x82_J\xe4?\xcbI\xf3w\xc0\xa9\xde?\x11\xe0\xb14\xdf&\xe0?\xf3\xb2E(\xb0R\xd5?=\xdf\x15\x0f\xc6W\xd6\xbf))\x80\xee]\xdeq\xbf"\x89$[\xbc\xf1\xd6\xbf\xf01\x14<xT\xdc\xbf\xffH\xdea\xf8\x85\xd1\xbf]1G\xf5\x94\xde\xb5?\x0b\xf6|p\x99y\xe0?\x94,l\x1c\xa9\xf0\xdc\xbf\xa6T\xe8bA\xdb\xde\xbfT\xb4\xa6/7r\x8b\xbf\xcf\xdau\xfd\xbd\xdd\xdc\xbf\xaf\xb7$-Fj\xd1?\xa1\xfbo{\xb3\x9d\xe3?\x15p_?u%\xe7\xbf\xf0\x1ax#\xacL\xe1?S\x99\x02Bv\xe4\x9a?\xb3 \x91H\x08\xd3\xab\xbfpqb\xde\xad\xda\xa4\xbf\xcc\xfd\xe4\xb0`\x1d\xde?\xcbf\xcc\xc5\xc5i\xd5\xbf\x0e$0\xe7\xf5/\xca?\xa80\xf1\x80_\xc5\xd3\xbf\x03\x7f\xe0\xfd\xc3\x88\xd5?\x0f\xc2\xe9\xff\x87\xeb\xe2\xbf9/\x19\xdc\xcd[\xdf?T\xe7T\xec\x99(\xcf\xbfHdm\xd85\xd7\xe6\xbf\xe1o&&yf\xe1?\x8b\xd39,\xb0\x1a\xd6\xbf`\x03a\xb1L\x91\xe0\xbff\x03\x8e\x0f\x14\x10\xd7?[s\xd0\xd1\xc5\x93\xe5\xbf\xbf\x8ch\xba\xa6\xf4\xb5\xbf\x19(\x08\xfbr\xbb\xb8?\xed\xd4m\x0e\xfa\x83\xe3?\xb3\x0f\x92\x80\x0c\x05\xa7\xbf\xa1;\xce\xbe\x8dD`\xbf\x93\xeei\xc1\x08\xf6\xc9\xbf\x05\xff1\xe1<\xc1\xe3\xbfA^<\xb4{?\xd8?G1R\x8b\xfd\x03\xd1\xbf\t\\D\x152\x05\xaa\xbf\xa8\xaf\x85*\xf2V\xd2\xbf\x95l\xe5|=$\xda?#>\x9f\xd2%\xcc\xe2?\xd4\xa7\x19cb0\xcb\xbf\x13\x84M\x1eJ\xc8\xa0\xbf\xafBMs\xed\x98\xa6\xbf\xc7mTO\xdeA\xaf\xbfW\xdf\x98\x9a#\xad\xc5\xbf#_\x00n.\xfa\xd3\xbf\x7f\x9b\xaa\x834\xd7\xd4\xbfE\xe5l\xf2~\xdb\xde\xbf\xb2\x17\xb2\xa4\xcd\xc7\xca\xbf>\xc6\xfeK\x8d>\xb3?^\xd5q\x10\x03\x01\xd8?\x0b{\xa8\r\xe7i\xe3?.\xe4,\x07\xd1C\xe6\xbf\x83\xe6\xf4\x02L\xa9\xe2?w\x8f\xefZ\x10(\xe6\xbf.\xc1\xc1\x1d\x85\xf7\x89\xbf\x1b\xafs\x9bAW\xdc\xbf\xf0\xf7\xf6\x8fs\xf2\xd4\xbf\xa1(\xf3\xfd]"\xe7?\xf3\xb1\x05\x03S+\xe3\xbf\x8aVd\xe7\xab\xfa\xd4?\x9d@\xb1i\xf3\xf2\xc3\xbf+\xfb\x80\x8a:\xfa\xdd? ^\x9a\xd7\x10\x0f\x9d\xbf\x84\x11\xb4\x17\xffi\xd8\xbf\xc6\\8,\xb41\xd5?Gw6\x12\n\x08\xe4?5%\x17\x00\x97\xd3\xe6\xbft\x9eIjm\xa0\xdb?^t\xc7\xdf\xfe!\xe6\xbf \xee\x8db@\x07\xd9?\xa6X\x8f\x1d\x17\x85\xe1?7zu\xc4j\xb8\xe8\xbf!\t|\xff\x139\xc8?\xd4\xe9\r\xb0\xf5\xf7\xe0?\xc3\xb0\xb19\xe6_\xd0\xbf>W\xbew\xce\xa0\xe5\xbfE\xd0\xfe\x9fW-\xe4?\xa9.\x18\xff|1\xdb\xbf+\xe3\x12K1_\xd7?\xf9RWF^8\xe1\xbf!\xcbx\xa1pC\xe5?<\xe2\xe2W\xefH\xb9?\xa9\xc6\xbb\xc3\xc7r\xe3?\xc6\x83\xb3\xc5r\xa0\xd4?s\n\x91\x97\xe7H\xd4\xbfT\xc5\xb1<R\x04\xd5?\x92\x10\xfb\x8cM\x89\xce\xbf\xf6\x8bb?\xcd\xdf\xe4\xbf\x16@gH\x89R\xc3?\xb2\xa5\xe6\xfc\xdaS\xac\xbf\xc94\xb4\xb8\x90\x03\xbf\xbf\xd6\xcdU\xd4\x97\x07\xe6\xbf\x04\xb7\x85\x9a\x08\xeb\xe9\xbf\xb4\xc47\xc0\x14\xa9\xe3?\xb8\x0f!\x87\xf4\xf5\xe4?\xd3u\x15w\xef\xe3\xb6\xbf4]\xbbdX\x98\xbc\xbf\xff\xb5\x8c\xcb\xbc\x9d\xb4?\x97\xab\x90\x981\x99\xd5\xbf\xf1\xb9R\x9c\x10)\xe2\xbf\xd6|\xb6\xddX\xae\xd1?\x80\xb3\xbe\x9a\x19^\xd0?\xaf\xdb\x85!\xe5\xb8\xd6\xbf\xa5\x8bI\x14#\x13\xe2?r\xea\xd7\xa8\xaa\xd3\xcb?\x8d\x14\xfcL\xc1\x97\xe5?\xe8;\x17>-F\xa4?)\x01\xb2\xc1\xe2\xea\xdf?\x19Bv\x8e,6\xd0\xbf\xc6\x15\xb0cc\xa1\xe2?[gU\xe5L)\xc9\xbf\x9c\xdb\xd2Z\xd5W\xb1?\x9a\x82\x05PR\x1e\xe4?\xa3\xe3\xab\x8e\x02?\xd4\xbf\x9cL\xe3X\xbb\n\xd4?\xf3\xa3\x93\x89O\xf8\xc1?\x91\xfaa\xd2P"\xe1?@0(\x92B\x98\xd7?\xcdT\xae\x1d\x1fZ\xe4?R>\x97\xd0\xc2\x10\x95?\xc2\xad\xcdK\xfa\xbc\xd2?gDs\xf3\x94\x83\xc7?\xf1+>\xea\x8d\x11\xd0?5\xe2\x88H\xd7\xa8\x84?\xb0o*\\\xcb\xeb\xe2?_s&\xf7\xdc\x01\xd1?\xd4\x83\xdb\xb7\xc4\xd1\xdc\xbf\x17\xbf6\x90;?\xd0?L\x1a\x11\xa0\x1eL\xc3\xbf\xf4\xc0`\xbb\xaf\t\xd8\xbf\n\xaf\xff\xbc<\xf8\xe3\xbf\x98\xb0wby\xef\xb9?]\xda\xe7\xcdLb\xb8\xbfu\xf8\x00y\x8c\xdb\xd7\xbf\xabv\xa4?Y\xef\xd0?\xb0\xbd\xa4\x06\xe4\x81\xe6?\x97CF\xba\xaa\x95\xda\xbfsUpwc\xe5\xd3?\xc2\xfa\xa6\xc8\xb6i\xdc\xbf}3\xd1\xeb\x89\x08\xcf\xbf\x96\x1d)r\\=\xd6\xbf\xd6S \xc4\xd3C\xe5?\xa1\xa6\xfe\xcf\xfbR\xd8\xbf\xe4\x07z<\x8eR\xe6\xbf\x99\x94\xf4\xb0\xae\xdf\x91?\x07\x14Kc(\xa1\xc5\xbf\x8d\nZ\xd4\xee\xf5\xa8?\xcc#\x08\x9c-\xc5\xdd\xbf\xc6\x0c\x14\xd1\x06\xfb\xe0?]\xcem\xe8\xb93\xa1\xbf\x97[\xaf8\x13F\xbc\xbf\xb7\xd7\x92\x86\xf6-\xa5\xbf\xa4\x81\x91\xd6|f\xe9?x\x94U\xb0\xb9}\x82\xbf\x89"\xd0\xc4\xe8\x99\xae?\x0b\x06\xd2O2\xfb\xd4?\xcb\xc4\xa4\x8d\x04\xbd\xe7?\xa8\xa1\x19\x9e\xac\xa8\xe3?d<\xb2\xd8\xc0\xa2\xde\xbf\x8a\xa7\x7fN\x15e\xd2?\x01N\x07S\xf1d\xd3?\r\xfd\xeb=\xe3g\xc6\xbf\xf7\xf8\\\x17\xa20\xcc?8B\xcf\xbb\n\xcc\xe8\xbf\xf5\xbea\xea\x89D\xd3\xbf\x08\xff\xa6\x01<m\xe5?\x0f\xe9[\xee\x17]\xc9?\xb9\x11&2\xdd\xc3\xdd\xbf\xd4\xf4/\xf9\x9f\xf3\xde\xbf\x89+\xfa\x9a\x11\xc7\xc8?+\x1a\xa1\xe1H%\xd8\xbf<\xbf\xdcn\xc9R\xcf\xbf\xf0\xf6K\x8cF\xbc\x8f\xbf3\x7fS/\x91D\xe4\xbf8\xd1\xf3b(\xf3\xe0\xbfk*\xb0\xc0\xcb\x1e\xd6?l\xd8\xd3\xad\x95\x16\xd8?\x02\x0b\x02\x1bJ>\xd8?\xb9\x98\xedp\r\x0e\xdf?\x9au\xea*B\x85\xd2\xbf\xf1\x92S&\xf7\xb2\xb1?j\xcb\x06\x8a\x0c\x03\xdb\xbf\xf3\x86\xc1xSz\xe6\xbf\xc3\xb5\x83\xe2\xc4\xfe\xe2\xbf\xe1y\xe4;\xe4\x94\xe1\xbfh\x19\x8d&\xce\x80\xd9\xbf\x0e\x8c\xb5[0\x04\xb0?}\xfdG\x03h\xe6\xd6\xbf\xb2\x99_\xe9o\xaf\xdc?\xe0\xe1\xd2\xa1r\xbf\xb9?\xd4\xaf4\xbb\x19\xf4\xe7?\x83\x079M\x12m\xd9?\xe5\xbd\'\xed`\x06\xd9\xbf\x9c\x9e\x16\x9d\xd8\xfd\xb7\xbff,\xd3]\xc5\xc4\xdd\xbfj\x11\x99\x1d\x15J\xe3\xbf\x1f\xce\xc8jR\xfc\xd0\xbf\xf71\x89\xa7\xf7\xd9\xda?A\'\x0b\xd5\x82\x0b\xec?Hq2I\xa5r\xdd?\x1d\x13\xaa\xc6Yv\xc1\xbf"\xc5\xcb\xf6.\xa2\xd6\xbf_B\x10t\xbe\x9a\xe3?\x10\xc3\x94\xc8\xf6U\xdc?\x92\xc4\xc3\x8eK"\xd0\xbfr\xd37\xed\x04\x82\xd4\xbf\xbd\xf9\xbe\xc13i\xea\xbf+[\xd7X\xb47\xdc?\xa9Vo\xd0`\x7f\xd7\xbfGq%LT\xb4\xd0\xbf\xbf\xee\x7f\xbf(\x93\xe7?N@\xda\xec\xd2I\xdd\xbf\xb0\xc4\xaa\xc2`\x80\xd3?y3\x9a\x1a\x1ft\xb8?m+q)\xa3\xd4\xbd?E\x16R\xda\xf0\xe9\xe4\xbf\xaas5\x80l\xc1\xdb\xbf\x89;^bn\t\xe7\xbf\x89\xc2\xc1lmd\xcc\xbf\xf7\xe2\x06\x10^\xba\xe1?\xf7\xe5\xb9\xac$+\xd5?\xa4Z\xce7\x1eJ\xd0?\xb5jYS\xea!\xa1?\xe8\xa9\xdd3\xbc\xb9\x9f\xbf\x14c\xf1k"\x15\xd3?7,9\x97\x88>\x9e?.x\x17\x93\xc2\xeb\xdb\xbf8%\xec\xac\x1d\xa6\xca\xbf\x7fF\x15)\xc0\xc0\xe2\xbf\xcb\xe2_0\x96\xfc\xe5\xbf\x98%\x02W\xd9A\xd3?\x08\xd2\x19\x8fG\xd8\xa3?\xfa\x9e\xaf\xfal\xa6\x9e?\x85`\xeb\x14)\xad\xc6\xbfR\x8e\x98\xbb\xb3\x85\xde?\xbb\xd8%\xb2\r)\xdc\xbf\x08l3\x10\xad}\xdf?NI\xe4 \xb2\xe5\xce\xbf\n\xaa2\xd0\x92x\xe2?\xadW\x01\xb3\xbe:\xe4\xbf*\xdc\x96\x06\xa9U\xe6\xbf\xf8\x8f. \xa2O\xe7?9\x1d\xb1\xcc\xdc\x95\xd4?!\xe8}\xa1H}\xdd\xbf\xb2\r\xf10\nt\xe3\xbf\x98(q\xb5\xc8\x1c\xb2?DG;\x17.\xab\xe1\xbf^\x0bp\x0bn\x0c\xd6?<|\x12\x9e\xe7\x8b\xe1\xbf\xdd\x86\x19\xb4\xbe\xfc\xdb\xbfj\x0c\xef*\x87\x8d\xc9\xbf\x7f\x8e\xd0|\xf3\xd2\xd8\xbf9Lf\x14\x88\xf0\xe0\xbf-\xd6\x01\x13\x92\x9e\xc7?mN\xd5}\t8\xe3\xbf\xa2\xa3\xd1\xe1\x19\t\xc6\xbf\x84!\xf2\xd4\xd3\x94\xd7\xbfT\xc3\t\x1c\xc4\x84\xe3\xbf\x1f\x0eN\xf9\xe9 \xda\xbfolU\x163*\xd5\xbf\xc9\xdb\xa1\xc9\xc6\xb7\xd0\xbfIM\xa9n\xbc\xc5\xbf?y\xc3\xb3\xcf\xc8\xcd\xe7?ON\xdb\x14\x0e\x99\xd1?@v]3c\xa0\xe0?U]\x95\xd2\xd25\xe3?->\xb0q\x92k\xe2\xbf|;\xd8\xeb\x866\xe0\xbfl\x0cw\xe0\xe81\xdf?\x99\xd9\xca#\x9b\x05\xd5\xbf\xe84v/`\x11\xcd?\x16\xcf\x12\x80\xfc\x18\xdb?\x07Ir\xf6\x1ao\xcc?\xa3^\x18\x08\xbbL\xdd?\xdb\x90\xa1\x7f2G\xe3\xbf]\xee\xeb^\x8cV\xaf?\x19\xcfA\x08\xee|\xb2?@p^$\xd8\xd9\xc2\xbfK\xe0\xf5\x99\xe5q\xda\xbf\xf1=e:;\x1f\xed?\xe0\x0e\x7f\x86)\x07\xd2\xbf8(B\xd1P\x07\xdb\xbf\x1aZ\xb7\x9d\x9e\xba\xe7?\xfd\xdc\xf7\xd2e\x84\xc4\xbf!UV\xa2\x7f\x19\xd5?\xe0\x88w\xbe\x03\xe4\x98?\xa60\x9c\x13\x16\xe8\xe2\xbf<\x0f\x90\xaa\x8e\xcb\xcf\xbf~\xe7\xeeU\xafL\xcb?\xb6\xcc\xaf\xd4\xa2Z\xdc\xbf7:+\x16b\x13\xe4\xbf\x00>C\xd9\x107\xd4?\xf9\xcc\x04!\xe1\xdf\xbd?9D$\\\xca\xc7\xe5\xbf{\xef\xfd\x80u\xe2\xe3\xbf\xb6\xf3\xc7v\xdc\xff\xd9?\xd2\xf2~\xb8\x9b\x1e\xc6\xbf\xe3\xa6\x06\xcez \xc3\xbf\x97>Pz\xfd\xd3\xc3\xbf\x81\xa7\x1f$\x81N\xe4?\xbf\xb0\xdd\x86,\xfb\xb2\xbfXR\x92\xef<\xdc\xd6\xbf\x99\xc5\x0e\xe6"\xb0\xe4?3\x1f}b\xa9\x8d\xe4\xbf\xc3\xdaA\xa9\x83\xe9\xcf?\xa2lG\xbe^u\xd6?\x98Q\x15mQ\x02\xe2\xbf\x89\x82\xdb\x7f\x05\xbe\x98\xbfo\xc2\x02\x16\x9cK\xe5\xbfrw\xe4\xa1W\xf1\x9a?\xa3\x04\x93,\x93\x8c\xc6?\xcc6\xc7\x93"\x13\xb0?\x1d\xdd\r\xdenQ\xe2\xbf]\xeb\xdc\xf3\x8e\x9e\xa7?\t\x90S\xdbE\xc4\xab?n\xa4L\x9b\x1b\xf7\xcc\xbf4\x8c\x9c\xa9\xc5l\x90\xbfd4\x98s#\x83\xbb\xbf\xae\xf7P\xa5\r\xb6\xe2\xbf\xd5e\xdf\x03\xbaP\xd4\xbf]ji\xdf#\xfe\xa2\xbf\x95\x14\\.\xcce\xd6?\x9e|\xda=\x05\x96\xbe\xbfU^\x1cM\xec-\xc1\xbfz\t\x07\\C\xf6\xce\xbf\x94F\xc1\x81\x9b\xd1\xdd?\xba\xae\xa9\x81\x0c\x83\x86?.L\x92\xfc\xfd\xd1\xd1?\xae+3\x93\xaf\xe1\xd5?*\x7fDW\x06\xd4\xdb\xbfT)\x13\x9e\xff]\xac\xbf\xa3^\xcc\xec\x8f\xd1\xc9?6\xb4s\xc8\xd4E\xbd\xbf\x17!*5\xd4\x07\xc1\xbf\x14\x1e\r\xc4:t\xd8?\x05gz\xe9\xec\x07\xcd\xbf\xf8\x06I8\xf0\xf4\xc1?\xc7\'\x84\xe8\xa7\xca\xa3\xbf\xfd\x18G&\x7f\x94\xdc?\xbdM\xc5W\xfb\x8f\x90\xbf\x92z\x9e\x97@?\xc9\xbf?B.\xfaU]\xc0?\x92\xf6\xe9\xdeDA\xa9\xbf\x97\x98J\xfd\x9d\xbeY\xbfN\x9fb\x1b\x80 \xca?\x15\xdb"h\xab"\xc3\xbf3R\x0e\x10k&\x9d?0\x03Z\x9b\x0b\xfb\xb6\xbf\xcd\xa6J\xa1\x16\x97\xb0\xbf\x0cQ-i\xb6\x18\x99?E"m\x9f\xbb\xb0\xc5?\x9c\xf6\xfd\xbe\xe1\x03\xd8\xbf\xa7J\xf0\x93P\x8a\xd3\xbf~\xd9\rx<\xf0\xda\xbf\xde\xc1\x10yH\xcb\xbe\xbf/\x8d\xc1\x96\xd1\xd6\xdc?\x87\xdd/@\x9e\x7f\xc8?\x04\xfd}\xc0I\x81\xcb\xbf\x8a\x84\x16\xbd\xa7\xe7\xd4?2\x86\\\x1d\x98\x88\xcd?\x996.>k\xe4\xcd?\xf7l0\xd9\x82\xe1\xdd\xbfp\xdbe\xf8\xf5\x0f\xdd\xbf{\x07\xd5ct \xc9\xbf.\x05\xd2^\x8dF\xd4?\r\xf4\xb7\x17"\n\xd5\xbfJ\xd3R\x97@Z\xbd?\t\xbd\xdd\xe7\x7f\x02\xe1?\xa7\xffJ\r{\xbb\x8d\xbf\xa2)\xef\x13P\xc4\xac?G\x96[\xbb\xc1\xa6\xc8?{X\x18\x1c\xf5\x0b\xd8\xbf\x84\x9b\x99\x99\xc2\xb3\xb0?\xbe7c\xac\x91j\xb3?V7\x85\xa9\xf9{\xc7?^\xd1+\xf3F^\xce\xbf\xdbac\x89PK\xb8\xbf\xdc\xd5\xa34\x17<\xa6?\x02>\x15\xf8\x198\xd2\xbf\xbb\x01\xb6\xb6\x81\xdc\xcc\xbf\x05\x8c\xb4\x04\xfd\x03\xc9?\xd3\xb4`I\xc5\x18\xd8\xbf7\xd95\xef)\xfb\xb3\xbflMD\x08Wk\xc0?j\xa9}I\xe6\x93\xc8\xbf\xb6rH\x8b\x83\xbb\xb7?m\x174\xf3K\xf8\xb4\xbf\x9f\xa1f\\\x9f{\xc3\xbfcj\xed\x8d\x84\xb6\xb4\xbfR\xfd\xb8\xa4\xbcK\xa3\xbf\xac\xf3\x8d\xb1g\xf1\xc1?|\xa89\x1d\\d\xce?\xb5\xee\x83+\xcf\xe8V?"\xc1?K\x96\xe6\x91\xbf\x12\x88\x92\xab\x81=\xcc?t\xd1h\xf3i\xd8\xd4\xbf8)\xca(\xc5K\xca?Z%\x15\xd7\x0b\xfe\xc2\xbf\xfd\xb1q/\xd3\xbd\xe1\xbf\xee$\xf0\x04\xf4g\xc1?\xfc\xaa\x91b}\xff\xa6?\xd0\xc0\xc8\x92\x074\xc1\xbf1\xc2\xcb$\xba?\xc8\xbf]\t\x1e%\x18c\xdb\xbf-\x08\x9ei\xbf\x94\xce?\x8e\xe9\xff\x7f\x01\xbd\xd0\xbf\x8f1:G0r\xde?|\xe6\x06\xef\xdf\xd8\xa7\xbf\x86Sg\xb6\xedX\xce\xbf(_\xd6\x07@\xb6\xbe?\xe3\x02\xad\xab\xd5S\xcd\xbf\xb4\x14\xa2G\x83m\xe1\xbft0\xde\xddX_\xc4\xbf\xf4\xb1eC\x85\x00\xb5\xbf|\x99k6\x8dG\xc3\xbf\xd1\x8d)3\xd6\x80\xbb?\xd5\xb84\x14\xa1f\x97?\xf2\x7f\x9e0C\xbd\xce?\xb4\xefIF~\xaa\xba\xbf\x91V\x89\x00/\xd7\xc8?%\xea\x94\x9b\'\xff\xb4\xbfAY"\x8b\xa2\xa8\xb7?r<\'\'\xdd\xee\xce\xbfG\xf0\xf2\x16\xf2\x12\xaa\xbf\xae\x87\x12\xd1\x13O\xd3\xbf\x12\x1bIMZ\x93\xd1\xbf\xd0~\xa3\x9aG*\xc3?\x07\xee1\x1d\x89\xc5\xca\xbf\xfc\xc4\x97Z\x80O\xca?s}\x90C\x07\xe6\xd2?\xc4\x92\xb8 \x1d\xee\xd1?\xad\x0b\x89d\x07/\xbd?\xe4!33@z\xc1\xbf\x0b9g\x05a\xe3\xbb\xbfrf\xde\x0e\xc2\x0c\xdb\xbf\xa7\t_\xfd\xfb\x00\xc2?]\xd1C2\x83_\xb4?\xa1\x90\xed\x9f\x17\x1b\xc5?\x7f\x89\xba\xbd\x98\x9c\xc3?[\xca\x96\x1f\x89p\xc6?\x0b\xae$P%\x02\xd4\xbf^\x13\xb1e\xf0\xe4\xb0?^\x8d\xd9onu\x9d?\xfa\xd4\xb1\xd3+_\xc4?\xdc\x07`V&a\xb1\xbf{\xc5\x07\xab\xbe\x01\xbd?Yb^27\xea\xc1\xbf\xf2`\x0e\x8b\x8c\xa7\x80?\x02\xc8\x12\x81\x04\xaa\xcb\xbf\xe70[z*\xf4\xa7?\x8c\xbe\xed;\x15p\xa8\xbf\x9f\xeci\x15\xe8@\xd2?\xe3\x81R\xf82\xb7\xd1\xbf?|\x1ce(\xfd\x98?*-\xa9b\xf8\xb4\xda?\xea?\x17c\xda\x11\x91?zd\xc4\x90\xd9\x8f\xcc?D\xf5<\xdf\x1b\xbb\xbd\xbf[\x0cT\xf4\xdf=\xd9\xbf)\xe7\xfe\xb6g\xf4\xcb?\xe8/C\xd4\x95\x95\xc0?n|\xa4\x15\x1b\xb3\xad?\xe7W1\xe9\xdfS\x8e\xbf\xe6Am\x04p\x14\xc9?=`D\x92\x0em\xd2?l\xd3e\x1c/\x00\x89\xbf\x9e/+\x9c\x90s\xd1?E\x13\x07:e\'\xe4\xbf\x1eX\xa7M\x821\xc1\xbf\xd8\xc2\xfc\x1fo\n\xaf?\x90\xde\xc5XO\x03\xd6\xbf*\x9bW\xaa\xdcB\xc1\xbfS\x0fl\xfdG\x00\xe0\xbf\xd5\xf9\x0fM%2\xb5\xbf6B\x81\xe2\xaa?\xd7?\xe1\xf8d!\xe9\xba\xb1?\xcd\x11\xb4\xec\xb7\xcd\xbd\xbf\x8c\x87\xfe\x8cZ\xf4\xc5?X\x97X\xaf\x15B\xce?p\xcf{\xcb(\xd9\xcf\xbf\xd3o\x1e\xd9=o\xc2?\xf1\xf5\xc5\xee\xc8\x1d\xca?\x0c\x99u_\x95\xff\xd7\xbf\xc2\xc4c9$\x95\xc6?\xc7\xd6\na\x1bN\xd5?<\x81\x9b\n\x9e\xc3\xcf?\xfc:\'\x13\xeb\xa9g\xbf\x17n@D\t\xd1\xb1\xbf\xbf\'\x9fg\xfb\x0e\xc9?\x9bT\x88\xb0\xb4\xdc\x98\xbf\xed\xac_\xa2\xf5\xcb\xbb?\x86D\x88\x8f\xde\xf7\xc7?\n\xacr\xc0\xd4\xa6\x92\xbf\xb0j\xf9B\xa3\x92\xbf?\x04\t\xac\xcaz\xdc\xcd\xbf\xd9\x8c|\x93-?\xcd\xbf\xef2\x00\x8c\x04\xae\xd1\xbfT\xac\reQ[\xa2\xbf{j\x96\x8d\xad\x04\xd7\xbfd\x0cB\xda\xf3\x8b\xd1?\r\xc7\x04K\xc6\xb4\xd4?w\xba\xd4#\x1b\x9d\xd5?\xe0\x18}\xb27\x16\xc6?\x91f\xbf-\xe8<\xd5\xbf\xa1vQ\x12=!\xb6\xbfM?H\xab\xd9\xc0\xd0?\xfc\x1c\xd2\xbd/\t\xab?\x10~\x14Iw\xba\xc1\xbfgc\xa5\xab;_\xca?\xb5\xce\x1a\xa7C\x06\xd2\xbf\xb5\xcd\xed\xd5\xc8r\xd0?\xea\xd0\x0b8\xfb\xa0\xd7\xbfn\xb0\xf3\x1e-\r\xd6?\x10WEu\xc6\xc7\xca\xbf=D\xb4.&\xc4\xc0?y\xf0}[\xb2S\xa4?\xd1\x8e\x95\xb39\x9e\xd1?\xb9\xf8\xddp\xc4\xc4\xce?)\xcf;\xa3\x99N\xa8?[\xd5I~\xc5\xfe\xc3\xbf\xcb\xcd\x9dAh0\xb1?ly\x05\xff\x98\x0b\xa3\xbfkp9R\xda\x1e\x90?<1\xe6\xaf\x7f\xbc\xcf\xbf\x91\x998\xe956\xa8?+\xd5\x93\x17q\x8c\xda?Y\xa0\x92\x10{0\x82\xbfU\x0c\xc8\xdc`/\xb4?\xdb\xac&%\xfc\xb9\xc7?wu\xd1\x14\xef\xe0\xbc\xbfT\x04$\xc83h\xc0?\x05?\x81J\xe0\xe3\xba\xbfG\x18\n\x13X\x9e\xb3?\x00\xc2\x0fh\x1e\xbd\x86\xbf}\xf8d\x8f\x82\x8a\xce?\xca\x00\x05!\xb6\x96\xc2\xbfC<C\xdb0\xb1\xca?\x99[\x92\x15_;\x86\xbf\xd3\x08\xdf\xdb\x1e1\xcf?\xe34\xb5\xeb\x9e\xac\xc9\xbf\xc3\x04\x0b[\x1e\x81\xa3\xbf\xd1[ =\xc3\xfc\xa4\xbfku9ej\xe9\xb1\xbfT\xd0\x12\xd4\xa8\xca\x8b?y\x04\xe3\xba;\xbf\xc3?\x1c\xae\x02.\xfe\xa8\xa0?lJ\xd4\x08;2\xa5?\xd9\x15\xe3\x8c\xc1\xd3\xbd\xbf\xd2T\xa1rT\x9c\x93?\x7f\xe5z\x18\\l\xd1\xbf\xf46\x87\x0c(/\xc6?\x10-\x08\x0c\xb10\xaa?\xc36\xc1l\xc1\xd7\xae\xbfEr\x85\x01\x89\xc1\xcb\xbf\x13\xc6\xd74\xf9\x9c\xb9\xbf\xbc+Dp\x8a\xc2\xa8\xbf\x0e\x9a\xa4\tz1\xca?\x0b@FD%\x9f\xbb\xbfI\x1a\xa5\xce\xc4\xac\xca\xbf5d\x90\x80\xcc\x8a\xba?\t\x84DJ\xf4\xf0\xc2\xbf\x89\x00l\xa1xh\xaa?\xc8H\xba\xf1M\x9a\xd2\xbf(\x17\xe6\xee\xf4\xaf\xca?\x93\'\xdd^(1\xbb?\xc7 c\xd9\x9ar\xbb\xbf\x83+\x85\xdcF\\\xc9?\xbc\x00\xbb\x95z\xb3\xcb?WF\x14\xca\x99\xdb\xcc?p\xa8\x11\x15\x91\x14\x9a?)w\xa1;\xc6\xab\xb5\xbf0\xbb\x92/\xd1\xf4\xc1\xbf\xffB_\xbe\x9a\xb2\xd4\xbf\xac\xfa\x1c>i\xd1\xc2?\r\xa4\xb9\xc0\x8eJ\xa6?I\xeb91d\xb8\x94\xbf>\xae\x88{\x8a\x16\x92\xbf\x81y\'?U0\xb3\xbf\xadD\x05_?\x90\xc8\xbf\x86c\xe5\x95\xb5\x92\xc4\xbf\xdc\xf6@\xd5\xe7\x15\xb3?\xd6\xd3\x9cls\r\xb9?\x8f\xbf\xa2H\xf1|\xcf?3|\x8cL\xb9\xcd\xb3\xbf#\xf3#b\x9f0\xb6?K\xa3\xabnQ7\xbf\xbf\xbb\x1d\xda.\xada\xce\xbfE\xc4\x02\x84U\x8c\xc9?\xf6\xe5k\x80UF\xc0?*\x08\xdfP\'\xfb\xc9?\xad<\xb9\xa6\xf6\xbf\xcc\xbf\xa1\xc6\x0e\x80\x96j\xa0\xbf\x94\xb7\x1a\xf4\xdag\xc6?\x95\xe9a\xc7\xe2\xc1\x9a?\xaaB\xae\x9a\xba\x9a\xa8?\xd6,y }\xbc\x91\xbfo\x1e)\xea\xbf\xed\xa8?\xe0\xd7\x94 \xba%\xc2\xbf\xf9\xeftb\xd1\xaa\xd6\xbf\x82\xd1\x8e\xbf\x00:\xc5?d\xcf\x8e\xf9\xf8p\xb2?\xa0\xc6\x8d{\xda\x0b\x9c?\xe4\xc0\xd8\xc1\xae\x1b\xca?\xf3\x17-.D5\xa5?<\x9aE\xe9\x00\x12\xbe?\xf1\xc4\x85M\xd7\x11\xba\xbfZf\xd1\xc0[\x9f\xb2?\xf2\xde\xf0\xf2\xd9\xe7\xc7\xbf\xfdd:\xd2\x8c\xb8\x8f?\xe5\xb0d\xde\x7fI\xc0?O\x10c\x1a\xb4&\xa7?\xa6/\x0e\xcb1K\xb6?\xb7i]<bN\xb5\xbf\xa4\x8c"\xd7\xbf\xa5\xc5\xbf\x8b\xd5R\x86K\x86\xca\xbf\x04i\xfcp(\xcd\xb5?\x16\x1c\x04\x170\x82\xbc?\xa4\xb8\xdc\xff\xea\x86\xbb?\xa9g6Sf\x97\xaf\xbf\xdb\xc0\xd7\xd1\xa9\xb4\xba?sXq\xd5\x83\xe7\xa4\xbfB\xbf\xfa\xa2Nt\xa5?\xad\x1f\xef\x95\xe54\xac\xbf\x1c3I\xb8U\xaf\xb3?\xd6\x06e*|l\xa8\xbf)\xfb\xdaI\xc1\x17\xb8\xbf\xa6\x81\xb1s\x0eY\xb2?\xe6L&\x80\xe5\x9f\xb6\xbf\x05\x9aV\xb9\xbc\x1e\xb5?\x1fyi\xf2\x11\xe2\xc1\xbfJ\xfe\xc2?\xea.\xcc?\xb0,\xb9\xa6,\xd1\xba\xbfM?`\xc85\x18\xb3\xbf\xbbm\x0e<9\xdd\xce\xbf\xadveDg\xd1\xc4\xbf\x1b\tiHK\xfe\xd1?\x0b\x83\xe7\x9fHH\xd1\xbf\xfc{\'\xaf\xcd\xa0\xba?\x19\x15B\xd2\x01^\xb3\xbfSl}n\x01%\xc9?C\xb2\xfe.\xe2J\xc7?\xea\xbc\x1dd\x13\xfd\xbe?,\xb9\x1f\xa5\x90\xcb\xba?C%ck\xb4\x05\xb9\xbf\xca\x92\xd9\x818\xa6\xc3?\'a\x90\xd2\xe7\xcc\xb5\xbfNC\x91n\x15\xf3\xb5\xbfk\x85\xd3\xb29d\xb8?I=\x1c\xb2\xfe\x83\xa0?,\x91k\xa2\x9d\x00\xad\xbf\xc5r\x04~\xe8H\x81?\xd3\xc5\xedO\x112\xb3\xbf\xf0\x0e\x1f\xf85\x97\xa5?\x9d\xc90\x97k\x04\xc5\xbf\x93\x11\xaa\xdf\xe4\xf8\xcb?\x93\xf9\x93M\xe1\xf7\xc6?\xc6\x1a>\xd9U\x91\xbd?\xb3\xce\xd6y\x7f\x1a\xa0?\xbc\xb7^n\xdc\x03\xc3\xbfm8\xc5&\xf4X\x99?\xbb\xa8w?\x1b\xfd\xb7?\xc4a@A\x1es[\xbf\xe8\xc1\n\x1a\x02C\xc0\xbf1#\x92!\xe3\xee\xc4?*\xe7\xd5\x80q\x93\x95\xbf \xa7\xbd\x90\xc0N\xab\xbf\x16\xeb\xa16\xd0\xc8\xc4?2?\xa1\x07~S\xc0\xbf\x82\x00{a\xc5n\xba\xbf_\xc8\x1ag\x98\xcc\xaf\xbf\x86\xbb\n\xf2\x11\x89\xab?\xe3N\xbe\xef\xfd\xd8\xae?]\xebEa\xcb\xce\xc5?\xear\x07\xb1\xde\x17\xb0\xbf\xa6\x9b\x86\x85,\x90\xa1?}\xcf\xecmh%\xd2\xbf\x16\xe5)\x1e\xd9@\xbe\xbf#\xc8,v5\xa7\xa6?S\xdb\xa8\xff$\xb9\xa0\xbf\xf0S\xf2u\xb1\'\xd0\xbfS,u\x8e\xd9Q\xae?\xabf\xa9\x90\xbd\x1a\xb2?u#\x80_&\x1e\xa8?\\\x9a\x96\x82\x83\xd7\xc6?\x86o\xe8<n7\x85\xbf\xd4u,\t\xf0\x9f\x8e?\x9fg\x9f\x7f\xcb\xd3\xa9?8\xc7K\x85\x04\x17\xc8\xbfzHo\xf8D\x13\xa2\xbf\x9dx\xa5\x8c\xc6\x88v?\xef\xf1\x843\x0b\xab\xb8?A\xd5\n|-6\xc0?\xb0\x0fwi(\x8f\xc1?\x08c`%\xa9\x10\xc1\xbf\x85oJ\xe6c\xde\x9e?g\x11\xf7\x01\xd1\xfc\xa3?%\x1cPp\'\xef\xb3?5\x04\\2\x9a\x0c\xb8\xbf\x8e\xb8@\xf1\x14}\xc3\xbf\xc9\x19Zwa+\xc7?*F\xda,p\x18\xcc?|_v\x08e\x84\xc2?\xee\x80\xb6L\xc15\xbb\xbfz\x9c\xd2\xce\xe6\'\x9c?\x81\xa5\xc4`<\xa3\x99\xbf\xddd\\\x1cDHu\xbfh\xbe\xbb\'\x13\xd9\xc0?\x19\xc8\xbb\x00\x18\x9b\xca\xbf\xd6N\xf13\x14Q\xc9?\xbf\xad\\ ~\xd8\x9c?\xdc%\n[\xff\xea\xb1\xbfJ~FS\xd7\x83\xb6?\xef\n\x1f:\\\xde\xcb?e\xd7\xfc\x0b\xca\xc9\xbb\xbf\xd9E\x11\x06\x83\x90\x97?)D\xc2\xd2/\x9a\xbe?\x9c\xb9Y\xd1\xe2\xcb\xa0?\xc1*\xc2\x0b=\x82\xa8?\xe1U\x91w\xa2G\xb8\xbf\x9aX\xcbn\xb4P\xd6?_\xae\xbcr\xe8\xc3\xd1?\xe4\xd5\xc4\xa9\x00\xb7\xc0\xbf\xcb]\xf6\x1d\x17V\xc8\xbf\x90l\xa0\xc8\x0bRK\xbf\xca\xa7I\xa7h\x9c\xa6?\xffzt\'c4\xd3?~\'\xb5\x8f\xc5/\xb1?)\x8aK6E\xd7\xce\xbf[\xf0;@\xae\xfe\xc1?\x12\x0f\x96\x01m\xce\xd0?\x12\xb6\xd3\xee9\xcd\xd0?\x00\xe8\x088X6\xce\xbf\xa3\xa5k\x85\xde\x01\xd3?\xed\xe8\xa7L\x1a@\xc7?I\xc6\xaaN\x8a(\xcc\xbf\x1b\xa9\xa8\xe2N\x95\xc9?\xb7\x02\x1e\xa3\xd1\x92\xc5?2*\x9b\xd3W[\xa8\xbf\xa7#\xf9\x03\xb9_\xcd\xbf_4\xc5\x0f\xb7d\xb1?\\\xe9\xa0\xeaRE\xa5\xbfjr\x82\xb6\x94U\xd3\xbf\x9c\x00\x10\xb3G\xa5\xd1?Q\xeb]\x8c(3\xaf?\x8c\x9a\xa5\xee\x17g\xcc\xbf\x18\x10\xace\xa3X\x9d\xbfdx\xc87\x95b\xb7?\xe0\xf9\xae"\x1f\x01\xb8\xbf\xbf\t\xf0\x84\x8d\xe7\xb9?\x10\xf5\x88D\xda\xb6\xd1\xbf\x91\xbd\xe9\x13S\x9f\xce\xbf\x97T\x0b\x92\xcc\x93\xc8?\xee\x9c\xc2\xba\xb7U\xb6?z\x1du\xe2p\x8e\xc7?Bu\xc5\xf3!r\xb1?\xde\xe1\x7f--\xd7\xd3\xbfs6\x02\x19?~\xb5?\x85T6%\xa3?\xc2\xbf\x91\xbd*\x85\xd8\xd0\xd1\xbf\xe3\x1b%\xd3:\xc3\x9f?a\xcbl\x97q\xb0\xcc\xbf\xb9\xa9:\xc9~\xd3\xd5?\xa4\xa8\xc6\xca\xe8\xb8\xd2?y\xc0\xf2\xa7\xe6p\xc3?\xa4\x1e\xa2\xe2\xe7b\xb0\xbfq\x89\xa3\xdb\'\xf5\xc8?\x00\xe9\xaa\xc1\xa7\x8c\xc3\xbf\xc9\xed\x14(\xd0<\xd5\xbfW\xbd\xdd\xb2\xe3`\xce\xbfW\x14\x16%\xb7J\xca\xbf(\x93\xe7\x1bp\xba\xb1?\x00\xb05\x0b\x9c\xa0\xb0\xbfh\xa5"c\xd4\xa9\xc4\xbfX\x8dc\xed\xe8\xa7\xbc?\xa0\x9d\x11\x00\x8ai\xd2\xbfv\x9c#\xfe7\xda\xb4?3L\xfc,\xda&\xc1\xbf\xaaSy~\xe7\x19\xae\xbf\x9d:\x028eP\x99?\x8b\xf0\x83 \x90\x8b\xbb?\xc09C~\xb9&\xbc\xbfL\x0c \x81\xff\x8a\xd1?\x8c\xe7,\xf3\xd5\xce\xac\xbf\xa5.:\x15u{h?\n\xe92\x8b{\xcf\xc7?Bk\xebX\xcc\xac\x99\xbf\xe2\xba\xb7\x10\xce\x99\xb1\xbf\xa3\x12\x82\xae\xde\x13\xce?o\xc8\x85\xe8\xa5\xd5\x87?=!\xeau\x9d\x87\xd1?\xbe\xb40\x1cy\x995\xbf\xd7\ti\xe2\xe7Y\xb9?\xef3\xbb\xff\xce\x97\xbb\xbfR1\xfc\xf5S\xbe\xb8?\tb\xd4\x94\r\xa2\xca\xbfvf\x1a~\x88\xa7\xc0?\x01\x05\xd85\xa3J\xcf\xbf\xc9\xea\x9b@\xcb*\xaf?\x94\xfc\xd0\x0cF\x92\xd5?\t\x9c\xca\x9b\xc6\xf9\xc7?w\xe2P\xe0?`\xcc?K)\x87\xe3\xed\xb9\xcd\xbf\xdb<\x84/Fd\xd3?N\x93e\xbeZQ\xcf?\x99\x93\xcb\x12\xc8\x8e\xd0\xbf\xfa \xdb_\xce\n|\xbf\x80$K\xfa\xcf\xaa\xce\xbf\n\x85\xcaC#\x1d\x90\xbf\xf9@\xca\x89\x80\xf5\xbd?\x98\x87\xad\x9d\xf9~\x98\xbf\r\x03O\x97\x8d\xf4\xcf?\x11\xd7\xabC\xb0\x1f\xd3?\x0e\x82\x83\xbc\x1c.\xbd\xbf\x1c\xbd\'X\xae|\xc4?\xc7Jok:\xf2\xa3?2g\x03\xb7q\xcf\x90\xbfxL\x9e8\xf0\x89\xbe?\x02\xafL\x12\xa5my\xbfC\x99\x12\xf7\\\x84\xc2?x\xf7[\x1a\xf2|\xb6\xbf\x88\x8c\x1e1\xc6}\xcb?!T\xb82|,\xb8?\xbe\x1a9\x14x\x12\xd3?\xe7\xca\xfd\xe1j\x91\xb7\xbf\xecR\xdf\xb7\x1d\x17\xc9?B\x16f\xe7}\x93\xd5?\xf0!z\xdd\x02\x0f\xc1\xbf#}Sz\xc6S\xa2\xbfO\xd5\x11\xec7=\xd1\xbf\xd3\xb6\xeb\xaaH\x85\xd4\xbf\x92\xe8\x8c\xbf\x84\xf1\xbb?\xc5w\xc4\xad\x0f\x7f\xa3?Y6\xa0\t\x86\x0b\xb3\xbf\xef\x8e\x11\xcc\x8f\x95\xa1\xbfd\xd7r\xb2\x14\xe9\x93?&\'\xc79\xe3U\xc9?n\x84\x90\x9c\xb5,\xa2?4\x95g\xc3\xb0\xfa\xb9\xbf@\x17\xef\x07\xb7\x9b\xca\xbf\x7f4(\x89\xb0#\xb6\xbf\x04Xo\x1f\x07\xa2\xd1?\x90I2c0\xb8\x99?E\xb5\xc4\xc7\x08\xd3\xd0\xbfBe\xd6\x84\xab\x10\xb8\xbfg\xe1g\x12\xcc\x82\xbe\xbf\x1d>\xae\xb9\x83\xa0u?\xd4*\xb4\xc1\xd9\xb4\xbc\xbf*\x93ACT\xfd\xcd?)\xc0\x04\xb5\x9cm\xc0\xbf\xee+u/\xfc\xc5\xb4\xbf_\x9f\x98L\x05\xff\x99\xbf\xa3\x82:\x8f\xc3D\xd1\xbf\xba\xb6\xcfNx\xab\xd1?\xcf\xbeO*\x15g\xd1?\x0f\x84GF+U\xc9\xbf\x0b\x00\x8b\xb4\x06\xad\xc5?\x9b\x85G\xa7\x1e\x93\xc2\xbfD!P\x83\xb5\x0f\xa5?\xf2\xdc\xe4\x1e\xc1B\xc4?\xbf\x00\xc0\x0b\xda\x99\xbd?\xdfx\xe9t3\x8f\x9f\xbf[Y\x05\x9b\xcf\xa2\xd0\xbf/\xabO\xff5{\xba?\xd2J\x94\x17Wu\xd0\xbf\xf6\xbf!\xc0kk\xd3\xbf\xe6\xfc\\\x91\xb5\xcb\xb4?\xd6T\x89\xd1\x82\xe2\xc1?\x8f\xd1n\xad\x1dq\xd7?\xefK\xe1j\xdeX`?\x87\xbd\x15\x9a"\x1d\xa2?\x97\x1f\xb4AfW\x9f?`k\x1e\x8fkz\x9f\xbf\x9f\xd5\\\xd1\xad\xbf\xd0?6f\xee\xa5\xf0\xdb\xd0?\x92g\xcc\xb3\x19\x08\xd4\xbf\x1c\xfb7\xa2\xc9\xdc\xd0?\xf4e\xf5\xb9\xed"\xbc?M\x01A\x0b\x1eiy\xbf\xae\xa9\xa1G\x85\xb3\xd0\xbf\xb66\x92\x99O3\xae\xbfe\x90\xda\x1aq\x0f\xc2?\x12\xb2\xde%g\x17\xc5\xbf\xf9\xfa\x00\xad:\x1f\xd7?\x1704\x81*d\x8f?J\xc44Q"\xcc\xb8\xbf\xa6j\x84\xc3\x1e\xaf\xc9\xbf\x02\xb0PU\x96`\xc7\xbf\xf0\xcb\xcc\xf6y\x0e\xc5?D\x9b\xfa\x0c\x86\xb6\xbb?\xf5+\x15l"7\xad\xbf\xc2\xacLJ\xde#\xb5\xbfW\\\xc1\xaa=[\xbe\xbf\xc8\xdcv\xd6D\xb1\xc3?\x81\xb5\xdc)\xf1\x91\xd4\xbf\xb1\xef\\5c\n\xc4\xbf\x86\xc8\x8a\x8e\xbc<\x94\xbft\xbfK?\xdc\x19\xd5?5X\xbb\x0eP\xf1\xb7\xbf\xb63\xfd\xa4\x00\xaa\xcd?\xff\x9e\xbe\xfbCN\xd1\xbf\x98I\x8c4K\x8a\xc5?\xdb\x181#\xcc\x19\xc8\xbf\xd8\x9b\x10\x00\x8a\xb4\xc4\xbf\x95>\xf7\xa1\t\x1b\xc3?\xf2\xa0\xf2\x94P@\xc1\xbf\xd4\x08\x17\x11\x81\xb3\xd0\xbf\xad\xa6\x18(\x06\x88\xd2\xbfeT\x9bs\xca\x14\xa2?\x94\x8a53P\xbe\xc1\xbf\x19\xa9\xf7P\xee\xbe\xaa\xbfhx9 \xfa\xc1\xc2\xbf\xa5\xd3\xefuk"\xc3?\x8a\xa1\x08\x18>\xbc\xd2\xbf\xcam\xa2\xabP4\xc3\xbf\xf8~\xe0\xd8\x1b\x8e\xb4\xbfj\xfb\xaf\x0f\x04ab\xbf\xbc$)\xd2\x04\xf6\xae?\xf7\xb7\x9e\x1f\xb5C\xcf\xbfM^\xa6\xa3\x96\x0b\xa1?\xcdz\x16y\x9cu\xd1?\xfaG_\x13UB\xce\xbf\xba\xa7;z\xb5\xfd\xca\xbf(?\x0b\xff\xfdz\xbc?k\xcb\xdb=\x82\xda\xb9?Tn\x06\x80\xc2r\xc9?x\xc3\t\x16}\x15\xdf\xbf\x12\xe6\xaa\xdc\xd0\xe9\xa9?1\xfc\x86\xc3\xc9\xc3\xd2\xbf\xd1\x99\xaf\xe4:\xb7\xd2\xbf\x99p>\xb3\x8e\xce\xd9?ox\xc3\xa8\x02\xcb\xc2\xbf\xa7n\x0f&\xfd\xb1@\xbf\xb3\x8d7F\x1f\xb5\xca?Er\x8fq<\xe2\xb3?\xff\'\x85\xba\xf8\x8a\xd4\xbf\xfa\xeaV\xd42G\x99\xbf\xa2\xd0\xf5\x12Df\xd1\xbf\xe8\xfa\x02\x96w\x80_?\xbe\x99\xec`\x03p\xda\xbf\x06\xba\x1f\x83\xe0\x85\xd0?\xc3\x9a6\xded\x13\xc0\xbf\xb4\xc0T\x80>\xc5\x9a\xbfp@\xad\xf2\xf0T\xbf?U\x86B@ew\xc7?\xbb\x06\xb2\xbe\xfcs\xd6\xbf\xc8\xdd\xfb\xbb=\\\xa2?\xdd\xbdRvE\xea\xc4\xbf\x98\xe6\xa3h\tu\xc8?\xe8\xdb@\xc8\x94\xc8\xb1\xbf1\x8e\x9dl/\xd6\xb3?q$\xe4\x89\xf3\xa1\xd2\xbfB\xec\xfb"\xd8\xf3\xa1\xbf\x13{0\xce&6\xd4?\xa3\x8f\x03\xc6\x9dO\xcf?Yg\xce\xb8\xf35\xbf?\x1f\x16|\x03|p\xd1\xbf\x06b\xc4\xfe&*\xb5\xbf\xb8\xf8;\x10\xee\xd4\xb8\xbfDE\xed\x1ba\xcd\xab\xbf\x93\xa5pT\xac\x82\xc1\xbfB#Gx\xfft\xaf?1X\xcdP+\xfc\xd1?p? \xf8\xae<\xd2?\x9f\xba\xd5x\x99>\xaf?\x05\x1e\xa2G\xda\xad\xc1\xbfU\xa8\nw\xbc0\xcd?\x97S\xa6\xee\xcbc\xc6\xbf\xd6\x84g\x8a\x131\xda\xbf\x07\x95\xd2\nG\xc2\x97\xbfN\xe1B7E;\xd1\xbfRgj9\xa9\x91\xb7?N,\x8ad\n\xb1\xd4?5~9\xbc!\xf9\xc6?\x996(\xf0\xee\xad\xd0\xbf\xe2\x7f\x00\x16\xe34\xc3?\x87W\x14\x89\x9a{\xca?$\xd8\x10\xda\x81\xaa\xc5?6\xf7\xdc\xe6E\x95\xc7\xbf\xed,\xfbj\x0e\xb3\xd6??\x07\xab\xf5\xa2\xe5\xb0?\xb3\xc1!p\xc2m\xc5\xbfSvi\x1bj\xb3\xd3?\xa6\xd4\xfd\xb5\xaa\x11\xa6\xbf\xe5\xf39\x01\xf4\x07\xb4\xbf\xe8?$\xa6q\xfe\xba\xbf\xefq\xe5|\xc5\xf7\xba\xbf2\n\x1d\xbe\xc6\x8a\xb5\xbf\x8b \xdb\x14\x895\xbd?\xafI\xefO\xd3\xa8\xbe\xbf\xdep\xd2L\x9bH\xc1?\x1es\\\xf7\'H\xc9\xbf]\x87:\x14\xb6<\xc9\xbfXks\xec+C\xbd\xbf\xc5ti\x1dR\xd6\xcb?V\xcb\xcdR\x85s\xcd\xbf \xeeHR+\x8e\xad?\xa3\x12\xe1\xe5\xb3\x11\xb6\xbf9_\x0ecQ\xdd\xd2?D\xd8Y\xa6\xb1\x1c\xe0?/u\xbdC\xd0\x86\x80\xbf\x9a(\xa4\xdb4\x8a\xd0\xbf\x9cG\x83q=\xbe\xb7?H\xb1\xf1?\xe94\xc3\xbfo\xa9\xf6\xbd!\x04\xc9?aP\xd4\x15\xcd\xf3\xb0\xbf\xb6\xa238\x88\x9e\xac?\x93\xeb\xeb\x1bR\xd6\xd9\xbff\x88_$\x14\xd8\xc9?[\xc7\xc1\xfc\x10$\xb7?\xa2H6\x93g\x0e\xce\xbf\xc2i\xa7\x83\xdc\x19\xab\xbf\x7fFJ\xe4\x1f\xed\xc7?4dP\xe9#\xa8\xc2\xbf9\xfa"\x8el\x11\xaa?\x05\x12\xde6Zh\xd3?\x94`"\x18\x0b\xce\x8e\xbf\xa6\xe8\x9fT,\x90\x94?!\xd7\xa8\xfaXQ\xc8\xbf\xfe\xfe\x109\x13h\xca?\xe92\xdb\xedn\xc8\xb3?-\xa8\n\x81\xd21\xc1\xbf\xfa\xbdC\x10\x1a\x1e\x98?\x02\xbe\x1c\x01N4\xb0\xbf3l\xfd0)\xa9\xcb?\xeek\x18\xfd<\\\xd0?DEA\xe1\xb6\x90\xd4?q\x8dW\x06C\xb3\xa7\xbf>\xb8}\x06-\x13\xce?\xc6\xe0\xdaX\x80D\xbb\xbf\x0e\t\x18"\xe2\x9e\xd0\xbfE\x12\x1f\xc9\x87K\xcf\xbf\xda\x93\xf6\xf8\xd3\x88\xc3\xbf\t<\xd8Ot|\xc0?\xb2\xb1 \xf9\xde)\xd2?\xfd\xc5\x81=\x9e!\xdb?\x00L\x16F\x97>\xcb\xbf\xe75j\xe3\xc2O\xcf?>\xcaZ\xbb\x9fs\xac?K\xf8\xaf&!\xfb\xc0?>%p/9U\xa6?\xf5\xe3\x8e0\xb4\xcc\xb7\xbf.\x17=\x1a\x07 \xc9\xbf\xfb\xbd\x90g\x8e*\xa9?{8~\xb0\xb0u\xc8\xbf\x96\xcfc\xde^\x1c\xd0\xbf\xda\xc3n\'\xce\x88\xb3?\xef\xb4\xf7aN\x91\x9a\xbfcMUe\x8fV\xb5?\x18DeU|m\xa0\xbf\xd1\xcfa\x92\xc5\xd1\xc0\xbf\xe5\x17\xa8\xafL7\xc5\xbf=\xc3@\xd6\xa4t\xcd\xbfRra\xa0Jl\xb9?\x9f\xdf\xe8\x95\x16\x07\x95\xbf\x98\x9a\xc6\x1f\xbb\x03\xcf\xbf8c\x18\xdbQ\xe8\xbf\xbfE\x89.\x96\x17\xc6\xc2\xbf\xe6\x8ed\xf8\x96\xfe\xb0\xbfIsD\xdf\xc3\x8e\xd3?a\x9e\xa3\r\x0b\x01\xce\xbf\x08\xce\xbf\xa1pa\xd1\xbf\x86]\x12\xc3\xb2\x1f\xc4\xbf\xa4\xee\x1e\xe7u\xe2\xb6?9P\xf4\x06g0\xd3\xbf\xcd\xec\r3\x17A\xcb\xbf?\x0f\n\xbc\x05\x13\xca?\x93-\xb9\xfbs\xea\xd4\xbf\x8b\x1e\x16e\x97g\xe0?+\xdd\x12\x1a\xcc]\x99\xbf\x80+\x1fE0\x97\xc4?\x809\x03\xc7\xb8\x1a\xcb?\x01\xb6\xae\xc9k\x92\x81\xbf\xbe\x14\xa9\xff\x10\xe5\xd1?\xc7>;C\x03\x11\xbc?\xc9\x02a-\xb7w\xcd\xbf\xd51\xb1h\xda\xc2\xd2?\x18\x87\xd6O2h\x94\xbf\xb8\xc7\xe93\xd24\xc6\xbf\xf3\x0c\xcb\x0f$\xb0\xce\xbfx\'\xdaq\nA\xd6?k\xf0X\n[\x9d\xd1\xbft\x03\xba\xd0\x08\x84\xcb\xbf@\xe4v\x8b\xf7\xf9\xbf?\xdb\xe0\xd7.\x9a\\\xd4\xbf,z&\xd4w[\xd2\xbf\rZE\xda\x1a\xa6\xd3\xbf@\x11\x0f\xda\xddn\xb6\xbf\x17\xed\xf8R\x97\xea\xc4\xbf\xf6\x1d\xe8\xec\xc3\xfb\xca\xbf\x81c\xf5EU\x06\xc5?-#\xf8\xfb\xa4\xda\xa5\xbf\x9fTH/\x90O\xc6\xbf\xa8j\n\xac\xd1\xf4\xc8\xbfM5t\x8cEr\xbf?\xfd\xc10\x94\x06\xce\xc6?\x01%\xddY\x81H\xc1?\x05\xc4d\x91\xf4Ws?\xa5v9\x00`9\xc4\xbfT\x1e0\n<8\xca?=\x10\xb9?\x9d\x86\xbd\xbfjS\x13\xad\x91\xa9\xd7\xbf\x13\x85;\xa8\xc9\xc6\xd4\xbf\x8f \x00B!\xfd\xc2?h\x0f\x9d\xf8\x17\x01\xa9?\xcf4~\xf2\xc0|\xb3\xbf\xc0\xea\x1a\x94\xef\x95\xa4\xbf>F\x96b*NM\xbf\rTW\x05I\x1d\xc9?M_b"\x7f\xe6\xc0\xbfS\xa3\xce\xe2\x19\xb9\xc9?\x89\x81\x86,$\x8b\xa1\xbf\xc2{YX\x07\x12\xd5?\x92\xdb\xbc\x00\xf0d\xd4\xbf\xbaG\xca\xd8Yn\xcb?\xf5s\xe5lj{\xc5\xbf\xf3@D\xa3\xd0\xdf\xc5?y\x15\xc1X\xc76\xc8\xbf\xa5\x1e\x9d7\xae\xe0\xb5?d\x9e\xd6\x07^\xbe\x95\xbf\xb6T\x13\xa3\xd1{\xc0?\xef(g\xf7D\xf4\xe2\xbf8\xc8\xa54\x0c\xe8\xb8\xbf\xc17e\x99\xe5\xd4\xb9\xbf\x84SLq\xa8\x88\xe0?[uh%\x18(\x86\xbf\x92\xbe\xbc\x06\xe7\x9c\xe7\xbf\x90p\xaf\x9b\x83\xe7\xd9?\x0bZ\xcd\xf5u\xa2\xb0\xbf\xe0|\xedo\xffZ\xe5\xbfwX\x7fd\x1eW\xc0? vf\xfe\xf7\x99\xe0\xbf\x81\xb9\xecz\xd9\x90\x85\xbfg\xc4\xde\x15Nt\xd6\xbf1\xb09jl\x1d\xcc\xbf,>l\xfc^>\xe4\xbfuq\x85\xd4K\x08\xcd?\xfa\xa8t\xfe4\xf0\xd5\xbf\x9fE>^-\x82\xd0?\xc2\xb6\xe5D\xe7\xa9\xbc\xbf\xfb\x1c\xc3T\x8f\xab\xbe?\xe6\\\r\xbd\xdf\xe9\xde?</\xfd\xc3 \x95\xdf?\xfb\x93e\x92l\x86\xa3\xbf;\x8e\x95d\x17\xf0\xc1\xbf\x00y\xcb\xe6}\xa7\xde\xbfH\n2\xbf\xb2\r\xca\xbf\xd5\xc4+1\xaa\x05\xce?\xa9\x9c$\xd7\xdd\xcd\xc3?w\x15sm\xa3,\xbb\xbf\xab\xe2\xde\xd7\xc4\xf5\xe2?~\x88\x89&p[\xb6?i~{\x9eB\xb5\xda?>\t\x0eLM\xae\xd5?[\x10\x93\xc2\xc9\x13\xe1?6\xa5~\xfaR\xfe\xcc\xbf\x86\xe7\xa5\x18\x1b\xe9\xd8\xbf|\xbb\x14\xde\x8e\x97\xe2\xbf\xd1F$\xfd\xf2~\xe0?@\xe6\xdeD>\xc9\xd7?\x9d\xb0\xd1\x86o\x96\xd7?\xf98\xb6&)R\xc2?6\'[\xbc%\xbe\xb3\xbf\x9bJl-\xa6\xbf\xe1?\xddOM\x14r\xf8\xda\xbf\r\x9b:\x02\xf15\xd8\xbf2.;\x8a\x89\x16\x93\xbf\xdbC\xa3\x90\x05\xd0\xc0\xbf\xb5\xe7?\xa3\x00V\xde\xbf\x9d\xc5\xdbP f\xc5\xbf\xa0J^mJ\xe7\xa4\xbf\x80\xa4\\\xabB\xa3\xd4\xbf\xad\x8d\nv\x13?\xe2?\xe8\xb2\x8d\xb6\x0cr\xe3?o\xd4^\xdf\xc9\x00\xc2\xbf\xa3\n\xf7O\x04\x06\xd8?\x8d\x00\x8e&>F\xc5?#]\xa1\x1bl\x97\xa8?\x10\xcdB\xe9)I\xd2?\x9b\xf3T:\xb9t\xcb?\xc2\xde\xa4\xe5\xde\x03\xc8?\xed\xb9\x9e\x1cLs\xd3\xbf\xa5x<\x8ao\xf2\xcb?\xe3\x17\xd3\xd4\xd0\x81\xd3\xbf6\')\x97$\xa0\xc7?\x19V\xb8Tj\x82\xbd?\xc2tR\xbd\x94\x0b\x98?\xd2\xd3\x98N\xecV\xe1?b\x95\xf3\xd6\x04\x89\xc8\xbf>c\x9a\xba\x93\xf6\xd6\xbf\x9c0r\x84\xaaL\xe2\xbf\xdbx\x1b\xda\x9f\xc0\xd4?\xd3vG\x12\xe7\xd5\xdd\xbf&\xe2A~u\x8a\xd6\xbf\x95!\xf0\x8a\xebA\xdf\xbfYBb\xc4\xa1\x08\xc2\xbfq\x0c\x9c\x95;6\xd5?\x0cr""\x06\xe4q\xbf\xefNi\xe0\xd1\xd9\xe0?\xc9(}\x93\xe1\xf7\xe6?\xa9\xf1\x91\x8b.\xec\xc1?\xd0\x90\xbf-D\xc0\xe3\xbfj\x83\xd2\x9b \xee\xc8?^\xe3%\x9aB\x87\xe1\xbfW\xc1\x82>\x94a\xdd?\x13\xf3\x17\xdd\xe6\xea\xb4\xbf{\x82\xa2\xe7\x91^\xb5?\xc0\xc5;\x8d\xca\xe0\xdf\xbfj\xec\xae\xf9\xe3F\xc0\xbf\'\x1bdE-<\xde?\x80R\x96\x9e\xa2\xc2\xc8\xbf\xc4\x12\xce\x02@)\xc3?\xcd\xb3u\x88\xed\x1a\xdb?\xac0\xf3w\xd9\x0b\xb5\xbf>\x82\x95?\x81\xb4\xbf\xbfq\xff\xd4\x15\xf8\xb1\xe2?\n\xe1\xec\x03\x9a\xde\xdf\xbfd\xc96\xa1?\x0e\xde\xbf[\x19\xc4\x88\x7f\x18\xd3?\xdap\x8d\x92o\xaa\xd5\xbf\x91(\xfe\xa6\xd4\x86\xc6\xbf\xa3\x93\x01\x01\x95\xef\xd1\xbf\xac\xdf\x14}\xe8=\xd0\xbf\xa7\xd3\r\xc0\x01\xed\xa6?\xf1\xf1\xd5,4\xca\xce?\xdf\x14\xdc\xfc\xa5\xc2\xbb?B\xde\xc1\x8d\xe3\xc7\xa9?\x1a\xf1\xb3Gn^\xcc?\xde\xf7\x80\x08\xc9\\\xe2?\xb2Kv\x19\t\x8c\xc6\xbf=\xd9\t\x0fU+\xc6?\xd6\t\xa9*\x9a\x93\xe2\xbf\x97\xba\xb7>\xd5\xeb\xd1?\x9b\xc2\x11\x0e\x10_\xc8?\x9fV\xe7\x9b\x8a\xdf\xd5?S\xa8\xb1\x9a\x9f\x0c\xd9?\x17\xda\x8bl6\xda\xe1\xbf?3%\xeb\x1d\xb8\xd1?j\xfe\x01\xf4]\xdc\xe0\xbf\xd1\xc6e\x9a"\x08\xc5?\x9b\xa4\x15\xb1\x0f\x1e\xd8\xbf\xb6w\x1fl\x9a\xae\xcf?QQ=\x94\xe12\xd3\xbf\x06\xc3\xacZAz\xb8\xbf\x18\xf9fg\xb0\xa6\xc2?O4}Hi\x13\xe0\xbf\xca(fe\xd1\xac\xcf\xbf\xf6\xcf\xff\x88\xba\x7f\xc3?\x92\xdd;\n9\xc9\xe2\xbf\x12\x0b\x0cfF;\xc6?\x1a\xbe\xa2_\x11\x0f\xd5?a\xad\xe3H\x92\xf9\xd6?&\xef\x9ewA`\xae?\xea3\xf5\xaf.^\xb2\xbf\x0b=[\xac\xb8t\xcb\xbf-\x82tdl\x1a\xe4\xbf\x05\xc1+\x8e\x01(\xe4\xbf\xc7L\xdbn;2\xc2?Od\xfc\x16\x93C\xa8\xbf\xf2(\xdb!\xb0\xcc\xd4?\x84\xd9\x11\xe7v+\xe0\xbf\xe5\xdd:\\y\xa5\xb2?Hf\xc9o \xd1\xa4?\xc2\xaa\xef\x08\xe4\xff\xd5\xbfM@2\xd2St\xbc\xbf\xb5q:\xe0c\xa7\x91\xbf\xe4\x08\x94\xcfw\x9f\xc1\xbf\x94\xf2\x93\x87&\x03\xbf\xbf\x86\x9d\xae\xe2ei\xe4?\xc0\xebn\x15\xa7\xed\xd9\xbf\xa3\xfc\xb4\xd8\xd2\'\xcb\xbf\x93\x13\x028\xdd\xcf\xd8?t\xf1v\xcd\x88H\xbd?\xb5\xe1\xc4D\x99\x04\xbe?\x8f\xae\x9a\xe9>\xab\xd2?\xf7\xba\x01\x91\x1b5\x93?\x0b\xef\xcdXfZ\xba?\xea\xf1\xeb<\x9d\x92\xc6\xbf:9O\xdf\x9a\xaa\xc0?r\x13\x04j\xbb\x17\xbd\xbf\xfb\x9e\xf7j\xff~\xde?\x14\xa9\xf6\x0cm/\xe0\xbf+\xe5\xb9\x9f\xa31\xcc?jr\x13\xe9\x9c\xda\xdc\xbfP+\x80\xd0\x8f\x8f\xc1?>\xa81\xd9\xfa\xec\xd7\xbf\xf0\xa1Y\xc3\xa7\xf9\xe0\xbf\xba\xcf^c\xb5\xc8\xb5?\x9a\xaf#\x97\x8dE\xd0?i\xc3\xa2\x8a\xd5\xeb\xe1\xbf\xfcLa<\x92\xef\xb6\xbf\xe9KT\x1f\x8b2\xdd\xbf\xaf\xab\r\x93\n\xfe\xda\xbf\x03e\xe0\\\xd8\xb5\xb7\xbf&\x8b\xae\r\xe3\xbf\xdc?\xbem\xdc\xfb\xcc\x83\xc1\xbfN\x08:\x12sl\xb0\xbf\xeb\x81\x1c\xca\xd3\x9f\xd7\xbf\xf6G-y\x06\xa8\xd2?\xe7\x1c\x95}\xc0\xcc\xd0\xbf\xf0\x94\x83\x07-.\xe4\xbf\xd2OM\x01]\xc7\xe4\xbf\xa6\x93.1\xf3\xc0\xa3\xbf\xd3\xe0$\n\x95W\xc2?\xed\x80\x80\xcfh>\xd4?\xed\xc0\x80\x8cZS\xb5\xbf\xbf\xde\x0c\xbcsv\xd2\xbf\x08\xe6\x80\xe2LI\xd5?\x82\xba\xca\xc3\xa6s\xb0?\xfd5V\xc6Z\xbd\xce\xbfH\x12\xaft\x0b0\xda?\x96\xcd\x8bq\xed\x14\xd6\xbf\x8b\xdf\x85\xf4U"\xcb\xbf%$\xe4\x85\x90a\xd1\xbf+\xa6\x86\xe6\xc7o\xa2?\xfcQ\xaau\x06>\xb5\xbf7\x81\xfd\x03\xd8j\x9a\xbfh\xafZ\xcf\xeeT\xd1\xbfU\x87o$0\x12\xbe?\xf3\xe3\x1c\xf6\xf5\xdc\xd9?\xe8.\xdeP\xc7\xfc\xc0\xbf\xb7J\x1c\x984h\xd3?\x14w\xe3_\x1b=\xd4?\xfe\x8a:\x9d|7\xe0?\xdc\xb4\xe0\x13\x15:\xda?!Ws5\x88\x92\xe1\xbf\x80x\x08\xc1\xaa\xae\xdb?`\'>"\xe7\x12\xe1?\x0eKm\x1a(\xe0\xd2\xbf\x11\xaedMC\xa7\xe0?eg\xc7\xc2\x19l\xd9\xbf\x84\xaf\xc9\xf4\xa3\x0e\xc6?8t\xa0\xd3\x9f3\xe1?)7\x0b\xeb\xd5\x8b\xd9?\xd9\xc1&\xf2\x1ck\xc4?Z/\x06Ur+\xdd\xbf^\x1b\x0e\xfd\xce\xdc\xd2?\xcc\xf4~\x11A\xe5\xd3?H>U\xbb?\xb0\xb3?\xab4\x87\xfa$5\xd2\xbf;;A\x1dC\x04\xda\xbf\xb2<\xd6K\x06\xa9\xc3\xbff\x90\x0f\xa4c\xbf\xcb?\xdd\n\xfe\x04\xd1\xfc\xc2?\xfe\xe5\t\xb1\x14d\xde\xbf\xd5dz G\x13\xc3?u\xe1\xc7f\xe6y\x8a\xbf\xdcw\x8d:\xcdY\xd1\xbf5\x00R\x96\x8aT\xe2?\x18_\xc0\x94a\xe2\xe0\xbfw\x16w\xbb<\x08\xdb?\x1e\xf4\xea\xe2\xc83\xb5\xbfi\xf9L\xf4\xdcO\xe0\xbf|\xcbG\x15\xe3\xde\xdf\xbf\xca\x9eX\xa3\xfc\x88\xaa?A\xbf6\xb5M\xf6\xd0?\xedyf\rf\xda\xd6\xbf\x8f\xe7\xee\xce\x0f#\xd5?\xe2Cv\x99\x93\x0e\xe0\xbfa\xc2\xcd\xc2D\xdd\xc2?0\x15M\x85U\x9e\xd4?\xef\x1fZ\xa7\xd9\x97\xd3?|\xdc\x0e?\xe9\xc1\xcb?\xa9\xe7\xdb,0\xcd\xb1?\xc3d\xdfJV\x14\xcf?\n\\B\'a\x96\xd0?\xdf Y\x89\xf1\xcc\xd5\xbf3\xe2\xaaB\xf6\x1a\xdd\xbf\xd6\xab\x1e\'\xbc_i?./\xa7\xef\xbb\xa7\xe0?,\x9c\x1a\xab\xd4\x97\xe2\xbfK\xad}\x8c\xf0"\xdb\xbfwSjcA\x16\xc6?\x9d&\xc3\xd7\x15\x06\xd8\xbf\xcf\xf1\xa7\x83\xa6[\xbd?A\x0c\x98&\x90\x85\xcf?\x85n\xc7Oc\xc9\xd3\xbf\x14M @\x19\xff\xbc?\x80\x06\xd6\\\xe7\x91\xd6\xbf\xa84\xaabi\xcb\xe1\xbfa+\xa4\x8e\xa2x\xe1\xbfJ\xab\xf6Q\xc3\x0e\xb5? a\t\x96e>\xd5\xbf\xb4 \xec\x89\xbe\x0e\xe1?\xd3\xea\xe6I\x81\xef\xc7?\x8a\xcd\xe5\x88C\x06\xd3?dJe\x86\x85P\xdb? ^\x12\xb7z\x04\xdb\xbf\xda\xb2\x8a^\xe6_\xc5?\xed\x89\x97\x1b\x10\x85\xe2\xbf\x89l\xf5\xca\xbe\xe4\xa0?2\x10\'\'\xbc\x84\xdd\xbf\xe8\xaeB\xa3z\xc4\xda\xbf\xd6a\x18p4\x1e\xd1\xbfh\x08-\xf1\xf9\x0c\xd7?\xd36\x1a\x8e~.\xdd?\xccm.^$G\xde?\x03X\xb1\x7f\xe3\xee\xdd?\xb7\x04\xe3\x01\x1f\x9a\xc2\xbf\x11\xadK\xad\xb38\xbf?\x89\xbcc\'\x83T\xdb\xbfN\xf0\x02y\xe0\r\x91?\\\r[al\'\xe1\xbf_\xa2\xe3\xb68\x80\xd5\xbf\x19[\x90\xb5c\x1b\xe1?rd\xaaK9\t\xd7\xbf\x95\xa6\xe6\xe9\xdb\x1e\xd0?\xa2y \x19BM\xda\xbf\x90h\x82\xa6\xe9\x13\xc1?j\xa4\xf1b~\x88\xa5\xbf\x00E+Q\xa5\x83\xd7?&W\xc0\n\xf7\xa7\xa9?$_d>(C\xa5\xbf\x90\x07|\x086v\xd4?\xfa7\x95\x10\xe1\xbd\xdc?\x97\xea\xbe\xc6\x97\n\xd9\xbfp{\x9b\x05\xb5P\xbe?\xa2\xac\xaf\x1a\xf6\xd7\xc3\xbf;4\xf1H\x10\xa6\xd8\xbf\x8em\x08\x96X\xf8\xd1?\x88\xeb@\xc4\x81\xf7\xd4\xbf$C\x96\xd9\n\xda\xc0\xbf]0\xb8A\x8bt\xd4\xbf]m\xd3\xf0>q\xbf?2@8\xb4\x93\x84\xd4\xbf\x98{[\xe8\xa9+\xe3\xbf)\xfa M\xad\xac\xe2\xbf\xf2~\x16\xbbu4b\xbf\x05\x13\xe2\x94o8\xc5?\xf7\xb3\xae\x03\xd1\x8f\xd2?\xec\xa0\x97\x951:\xce\xbf\x12U\x80\xf2cN\xb4\xbf\xc2\xa7\xb71\xa7\x03\xe1?\xe9\xb4;\xc1\xd8\xe0\xd6\xbfN|\xc3y\xc3n\xe0?l\xeb\xa6:&\x15\xd9\xbfq\x019\xd9\xfd\x9f\xc4\xbf\xf3\x0b\x10\x8c\xd6V\xbe?\x1c\xa6\xb0\'\xb1d\xdb\xbf\x8f1\xe0\x8d1\x0b\xdd?]\xe4;\xc2=B\xde\xbf\xa5\x85\xa9#@\xf8\xd9?-\x11b\x0cY\x8b\xcc?\xec\xda\x0bM\x88\xcd\xd9?(\xdceS\xb5H\xda\xbf\n\x03z>\x0c\xf6\xde?Y\'\x14Np\xa0\xa5\xbf\x8c\x0edu\x1b\xb3X\xbf\xe4\x92\xba\xca\x9b\xa4\xe2?s \x1bx\xcf\xae\xdc\xbf\xff\xc6*0/\xca\xa1?\x8cH\xa4\xe3\xd9\xe2\xab\xbf\xf5\x02\x80#W\x01\xd4\xbf\xf3\xe21\x15\xc44\xe1\xbfd\x1f\x17\xd2g\t\xe1\xbfF\x12=so\xa2\xdc\xbf\xfd\xbcD\x97\xb6\xaa\xcd?\xbb\xba\xcd\x92\x86\xf6\xb7?\xfaN\x1e]\x14\x8f\xc9\xbf\xe7G\r\x9ej\xf0\xe2\xbfz\xb1\xad\xc9\xfe\x1e\xd9\xbfV\xc7\xe8\x94fj\xe2?\n2KLA\\\xd6?2\xf0\xfe`\x1f\xb2\xd8\xbf\xcc^c\xf3e\xa3\xac?k\xeaw\xfcU\x86\xdb\xbfc\x9d\x1e,=D\xc1?<\xcb\xc0\x00\xeaR\xc9\xbf\x04X\xe7\xe0\x95\x14\xd4\xbf!\x83\xb6\xac\x82\xfb\xd9\xbfMC\x94\x94?\xbe\xca\xbf\xde\xce\xdc\xa9\x0c\xa3\xe3\xbfVV\xe7\x89F\x85\xa4\xbfG\x03\x8d9\xdb\xa1\xd3?\x89.\xd4\x1c0}\xca\xbf\x1b\x8fj\xfa\xcdu\xd1?\x0e\xdd>\xdc\x87T\xce?\xc7r\xe8j\xde`\xe0?m\x9a\xc8\xa57\xb2\xcb\xbf\xc5\xdf")*Y\xde?\x8f\xde\xe9\x9b\xc4\xed\xe2?\xe1M&\xa2\xba3\xd9\xbf\x97\xeec\xc3\xcc\xcd\xc4\xbf\x90\xc1\xd1s\x8a\x08\xd6\xbf\\l\xb5a\xc3\xe4\xde?U\xa0)\x1b\xc7]\xbe\xbf\xf0\xa0\x85\x8e\xd49\xc4\xbf\xd1\x02<\xcb\'\t\xe4\xbf\xdeu\xf9\xd4*\x14\xd1?\xf9\xbe\x13\x1f\x1dJ\xd3\xbf\xe9\xd37\x04\x1e\xca\xd6\xbf\x8di\xa0\x06o\xea\xd6?\xfdd\xdaI\x0b\xf5\xd4?\x98\x92\r3G\xa1\xb3\xbf\x08jz\xb0f!\xdf\xbf\xebF_\xbc\x8bR\xd3?4\xcd96B\x13\xb2\xbfD@\x1c\xe7M\x1b\xda\xbf\xd9\xfbnw\x1d\\\xd1\xbfER$\xcb.\xaa\xb1?\xcc\x13g\xbb_\xeb\xb6?\x07\xb0d\x8f\x0b\x1e\xd8\xbf:\x1c\x0en\xa6\x97\xd2\xbfy`\x0be\xc5\xce\xd1?l\xb8q\x86q\x04\xdf?L~\x89\xb9c\xa6\xc6?\x1b\xeej\xbc\xe6m\xcd?\x8c=^\\?\x08\xd9\xbf&YwW\xb5\n\xd4\xbf@y\x9d\xaa\xa0\xe9\xcd\xbf\xc3\x0f\xec\x06\x84\x13\xcf?\xce1M\x15Mu\xdf\xbf%c\xd2\xdc\xb1\xf2\xcf\xbf\x85\xde\x1e\xb6v\xd1\xe0\xbf\xf7\xe03\xcb\xf7\x8e\xd0\xbf\x1b\xa7\x0e\xaf\x8f\x16\xe1?\xd4`u\x1e\x10~\xaf\xbfi+\xf6hR\xe9\xd9?L\xc5\xd8\x9c\x9a\xfd\xb4\xbfO\xa6\xb7m\x1fn\xd3?\x8d\xa8\xbf\x10>#\xaf\xbf\xc87\x17\xec\x08\x9f\xa7?\xcb\xd8\xc9\xbab\x90\xc1?\x9c^\xc0\x08\xcdz\x83\xbf.=\x1e\xb3C\xbc\x83\xbf\xa1\x9ebQ\xe5\xda\xa7\xbfx&\xf3o\xe9\xee\xb9\xbf\xc1\xa0\x03v\xe7\xee\xbb?Jd\xd9\xe1R\xc5\xb1\xbfg\r\x8f\x1b\xcb\x85\xbc\xbf,e\'G\x97\xe0\xbb?[\x92V\x9dM\x02\xba\xbf\x13\xb6\x9b\xbc\x12\xe4\xa4?\xf2\x1d\xf4J\x83\x84\xc0\xbf\xc4\xc7\x08\x80\xe8v\xa9?\x19\x11{\x13\x8f\x16\xc7?=\x01\xa0\xc58\xdd\xb4\xbf8=\xd9\xc8\x99h\xa0?<\xe9\xee\xa4\xc2\x8b\x9b\xbf\xf6\x16\x12\xff@\xc7\xb6\xbf\xe8ig*\xc6\xdb\x91\xbf\x99\xb6D\x9e\xcc\x1c\xba?\x7fJk\x1d\xb9\x87\xb0?P\x01\x1bex\x81\xb2\xbfkV\x1e\xbb\xef3\xae?\x9d\xef.\xe8\x17\xed\xaf?\xa7N\xbe\x019\xae\xb3?\xa4\xd5\x8d\xcb\xf0\xdcp\xbfH\xf9u\xe2n\xa3\x91\xbfKe\xd1=\xb0\x80\xc1\xbf\xd8\xa0\xefk\x0e5\x87\xbf\xbaS\xca\xf4s\x8bz\xbfX\x15\xc8\xd3\x9c\x04\x94\xbf$\xb8i_\xa1\x95\x91\xbf\x94\x04"\xcf\xb8?\xb4\xbf\x1e\xe7\xf1\xc8\xcdv\xbb?\x89l\xf6\x0fan\xaa?\xcd\x0b\xc9G\xbd\x87~?\xf9\x97\x84\r\xcc?\xbc\xbf\x1c@\xc6?\xc8\xdb\xb5\xbf\x9e\xf2\xb0O\xd7[\xba?\xd7\xe0\xc6\xa9\xf3\x0e\xb5?\xb7\xf1\xe9\xa3dw\xae?\xc1\x9b\xe7%,\x13\xa7\xbf\xae\x93\xf7\xe6m\x13\xb0\xbfV\xbe\xb8\xef\xc9\x9c\xb0?\xec2\x99&Ys\xc3\xbf6\x94 \xe4\xb9\x12\xb4?\x8e\xb10\x9a\xd6\xc2\xa2?.\x8c\x96,\x02\x1e\xae?\xb8\xac[\xbf\xber\x99\xbfNvX\xf9`\x92\xb3\xbfj\x1c\x18\xf3\x98\xb7\xba\xbfLb\x1a\x14\xba\x8d\xc0\xbf\xad\xf7\x14 2g\xb5\xbfv:\xfb\x02\\O\xb8?+\xfeU\xda \xe9\xbb?\xd0\x0e<\xea\xc72\xa3\xbf\xef\xb8i?Z\xcf\xac\xbf\xb5\'\xf0\xdaBJ\x87?8A\xcb\x91\x1e\xe4\xbf?(\x80\xca?+_\xc0?\xf5k\xfa!\t\x1e\x84\xbf,?\xd8[!\xb5\x9a?\x9e,\xd5\xd8\xd8\xd2\xba?lU3\x93%\xf6\xae?\xeb\xc2\x89\xbfA\xdb\x8c\xbf=\xb2\xfe*\xf3B\xa5\xbfM\xdd\xa7\xb7k\xf3\xbc\xbf\xbbW\xcfQ\xda9\x94\xbf{&6\xe5\xaa\xb0\x9f?\xd2\xc2\xdc9w\xd7\xc0?\x85\x17%\x11\xbfon\xbf=\x12s\xc6\xac\xa4\xa0\xbf\xc7F\xdd\xe4 \xc9\x99\xbf\x19n\x9c\xce\\\xc1\xa4?\x85fl\xa7xf\xab\xbfxp\x01\xd9\x1e;\xb0\xbf\xce\xd0\xad\xcbI\xfe\xbb\xbf\xf1m\xfd\x12G\xc2\xb3?ZL\xf8\xf2\xb4\x07\x90\xbf\xb8\x10c\xe3\x84-\xc4?\x85<~\x18\xea#\xba?\x82\xcf\x9c\x15\xf0\xbb\xa9?~:e^j\xd2\x8e?\xcaU7\x13\x01\xdf\xb0\xbf\x0fb\x0f;\xa0\xc2\xba\xbfC\xad\x9d\xc0\xe2u\xb4\xbf\xa8\xdd\xe3J\xe7r\xa4\xbf\xaa\xa8\x82\xd1\xe3\x11\x83\xbf+\x81\xcc\x7fs\xc8\x94\xbf\xaf\xe50\xb4/\xa9\xa8\xbfw@7F\xbbP\xc3?I\x15Y\x13]\xf1\xac?Ht\xc7z6\xb6\xa3?\x01&Y\x0f$<\xb8\xbf\xbb\r\x9e\xf5\xd1\x1f\xbf?k\xe9\xae\x84\xa7\x9b\xa5\xbf3\xce\x0f?M\xf0\x9d\xbf\xbc\x0b9\xd8.\x14\xbd\xbf\xa9\xd5\x03wnA\xa5?\xac[a2b\xe2\xaa?\xcc5\xdc>\x96\x9f\xa7?\xcf*2]\xd7=\x8e?\xf1\xd4J\xe1d~\xaa?Q\xf4\x08\x1fC\xb2\xb1\xbfUfr\x1b8S\xa5\xbf\xaa4P\x1f\x13\x8b\xa4?\xe7\xa98\xd4\x8b4\x98\xbf\x05UFg\xfc\xda\xb6?m7\xe93Iy\x9f?\xd2\xf6-0\xf5%\xc8?J\xd2\x87\xd9\xd8+\xbb\xbf\xa7D\x08Z3\x98\xb9\xbf\x9e\x83o\x9c\x1a\xfa\xbb\xbf\x89H\x92U\xc7\x0f\x8e\xbf\xbc\x15\xcb\xc5\x14^\x83\xbf\x82\xbf\x89\x0buU\x8a?\xfcnM\xfd\xd2x\xb0?q\xbf\xeda\xb0L\xb1\xbf\x1d%\xd8?\x83+\x9a\xbf\xc2\x7f\xddm\xce@\xaa\xbf\xff\xcd)\xe6\xf6\xbca\xbffE\x86\xc7P\x12\xc1\xbf\xb8\xda\x9c\x88\x02l\xb5?+[RC{\x94\xb5\xbfy\xd1rz\xd6\xa0\xb6\xbf\xa5\x17\x89?\xb8b\xb4\xbf\x17\x94\x8d+\xb9yH?\xe1\x90\xe6U\x94\xa0\xa9\xbf\x01\x18\x12\x82uP\xb2?\xc0\xfc\x8d\xb2\xe3\xd1\xac\xbf\xe3\x91\x9aX\xc7\xafq?\xa0\xc4y\x8e?-\xb2\xbf4g\xb8\x1d\xe9\xe6\xb2\xbf\x14\x04\x90\x8e5\x9b\xb2\xbfF\x9f\t\x04\xc1\x85\x97?\xc8\xf8\x17\xf4z\x95\xb1?N\\m\x02\x1a\x8b\xa6\xbf\xa0\x864`i\xf1\xa9?\x0f\xc1AD#T\xbd?\xcc\x04\xbbGq\xe5\xc2?*\xd6\xb8t\xf5C\x9d\xbf\x96)\xaej>\x19\xa3\xbf\xf1S\xa6\xb2\xda\xa1\x9c\xbfX\xc2\x87$+F\x91?\t\x83\x96\xc5*\xe0\x98\xbf\xce\xd8\xaa\xf4\xa9\x0c\xb0\xbf__\x87\x10\x7f\xb6\xbb\xbfU\xc4_\x88\xee\xf9\xb2?aE3\x16\xc9\x0f\xc6?{\'\xe7\xabG\x98\xc1\xbf%\xbfj^E\x86\xb9?\x02T\xad\x8f/\xb6\xc2?~\xf0j\xd3\n\x98\x8f?\xb0\x84b\xc3\xedp\xae\xbf\xf0\xc6\xaa\x8eJ\xfe\xbd?\xf2S\xf9+\xc5\x1c\xb8?d\xd7\x10\xf36~\xc2?\x90\x95\x99}\xd9\xb4\xc1?\xb8|\xa2\x9a\x10\x9c\xb3\xbf\xbf\x185\xda:\x8f\x99\xbf\xdd\xbe\xf1|\x8e\xb8\xb0\xbf:\xed\xf2\xfe3\x9f\x98?\x15\x9a\xce\xd1\xa2I\xb5?]\x9d\xf4\xe0\x93e\xb5?\xa3f\x91\xae\x93\x98\xb8\xbf\x91\xde\xa1\x8e\xd6\x03\xab?\x9b\xbf\x16E.\x88\x83?\x02Hz\xe8\xdc\xa7\xae?\xa9\x8cD\xa7\xf7\x96\xb2?\x95\x1a\x031\x1d\x83\xb4?\xdcI\xb33\xdax\x90?=\x03\x811fm\xab\xbf\x04\x0bc\x99hi\x88\xbf\x1e\xd7~\xbf=\xfe\xb6\xbfQ_\x9d\xa6\xa0\x94\xbe\xbf~\xa5,\xac\xf6\\\xab\xbfk\xd1\xf5\xca\xfd\xd8\xac\xbf\x7f\xdcv\xe3\xaf<\xaa\xbf\xac\xb2\x1d\xfa\xe58\xba?\x9er\xc1V\x87\xd1\x8b\xbfX]\x84G/\x91\xb6\xbf\x0e\xba\x9d\x1f\xcat\xbe\xbf\x1d\xa4\x05\xac2G\xa0\xbf\x1f\x01"\xfb-J\xb9\xbf\xbcK\x8a\xce\xc3_\x99\xbftc\x9cD\x00I\xbb?\xf7u\xc9\n\x1b$\xbf\xbfa\xd4\xd3\x0c$\xc9\xb1?\x87^\xe9\xaa@n\xb6\xbf\x85\xc8\xf2\xd9\x1f.\xac?\xf1\x9b\x07V\x83c\xab\xbfL\x86\xbfS\xea\xa2\xba?\xb3\xedk\x99\xb66\xba?I\\\x8b\xe6\xeb.\x98\xbf\x91G\xc8H)\x9e\xa0\xbf( d\xb5\xf3\xd7\xc1?\xc5\xfd\xb4\xaf(+\xbc?#"\x89\xedT\x1d\xb4\xbf\\\xfb\xf3\xe7\xcf+\xda\xbfx\xa9\x13\xed\xbd&\xd3\xbf&\xe3#|oA\xe0\xbf\x9e\x0e6\xf7\xed\x18\xd4?\xf2\x9e\x1by\x8a3\xc3?\xd7\x1aK\xd6\xe1 \xa7\xbf\x9bI!O\x1cC\xe6?\xcb_\xd4/\xa5\xfb\x9e?\xeb\x85\x87j\xc4\x0b\xe1?\xcf4\x039\xcb\x1d\xd7?\x15Ph)\xfe\xf0\xc4?\xd8e~[\'f\x86\xbf\xf6O.\x0e\x98\xec\xd3\xbf\xdfN\xfe\xb5\x01\xa4\xa6?+\xf9\n\xff\xab\x9a\x82?S\xe6\xc4[\x05/\xe3?vs\xd7\x9d\xdeY\xba\xbf\xb9\x8c\xac\x9c\t\xd3\xd8\xbf\x0b\xef\xcf7X&\xab?I@JD\xe4\xf3\xd2\xbfl\x9a\xa9\x08\xf6\xc3\xd8?\x16\x91Tz\x95\xa6\xda?\xd1\xa6\x8f\xa2\x1d\n\xd3\xbf\xce\xe7R;\xb8\x00\xe1\xbf\xa0\x7f\xd1\x85F\xe4\xca?\xac\'Y\xc8\x95G\xd5?\x16J\xe4\n\xad\xee\xbb?\x0f\xad\x05\xbe\x19\xb6\xd8\xbf,^L\xdf\x88\x91\xba\xbf\xd4\x8a2C\xef\xda\xe0\xbf\xebz\xb5\x07t\xac\xa5\xbf\xb9\xff\xb26m\xcd\xe1?o\xf0?\x92:B\xdd?\xd6\xd83I\xef\xd2\xdc?^Xe\xc1c\x17\xb1?\x8b\xf9y\xa7\xed\xb0\xd8\xbf\x1fu>\xb6x\xdb\xdb\xbf\xe0\xb3\x04\xbb6V\xe2?L\xab\xd4BS\x12\xc6\xbf\xb8X\xa7\x15\xc3l\xcc\xbf\xb6/&\x00\x1ao\xe5?\x7f\x8c\x071\xc0\xa6\xb3?MM{\x0b\x1f2\xb5?\x81\xd5\xbfc\xe0\x8b\xcb\xbf\x82\x19~\xeas\xe6\xc8\xbf\xc0\xea\xed"\xac\x04\xd4?m9^F\x0eF}\xbf*\x8b\x17\x8f\xb1\x0e\xd6?\xd2\x9b\n^M\x82\xe0\xbf\x0cVw\x03\x08\x01\xc4\xbf\xa7\xd3\x9dJ\xf6\xec\xd6\xbf\xe9\xb2g\xb0\x05\xc5\xde\xbf;;\xa2c.\xc1\xb0?\x10$\xaf\xf4\x90\xe1\xbb\xbf\x91:\xd7\xd9\xa4\x15\xe1\xbf\x19\xc5QzYY\xe1\xbf\x97\xfd\x8a\xf8#}\xe0\xbf\xee>\x14\x8f\x03\xbd\xe2?\x92\xe7\xa0\xa95o\xc8\xbfk\x9e\xdd\x9e\xc7A\xc5\xbf7!\xf1\xf0p\xd8\xc7\xbf\x99\x0b\xc6@\xb3\r\xdc\xbf\xeb\xc4\xda~\x81\x83\xd1\xbf=\xb5\xc9\x19\xb0\xe9\xd3\xbf\x0c\xb7\xc5\xaf]\xe8\x98?yq\xf4?\x1e\xdf\xda\xbf\xbc\xb7\xc8\xed\xa9\x85\xc2\xbf\xbc^\x88\xac\xc1\xd7\xe3?\x15V}\xd1\x845\xdc\xbf\xc22\n\xff\xb85\xe3?\xdeg\x89\x87S\xdf\xbf\xbf\xe4L\xb9s\xdfe\xdf?\xcc\xf7m\x8aq\xb3\x9a?\xb6B\xa0\xc3\xd9^\xd5\xbf\xa5e3\x9dw\xcb\xdd\xbf\x9a\xd5\xe0\xe6?m\xbf?\xb3\x03\xae5{\x06\xbd?\xcd\xa9>\xfe\xad\x93\x93\xbfo\xbe,\x19\xf5\xc8\xe1?\xf9\xa3f\x1eD>\xd3\xbf\xd0(\xf8\xc67,\xe5?\xb8\xc6Q\x11\x89N\xd8?\xd8m)!\xbb\xf9\xc7\xbf\xddkA\x88H\xf7\xd7\xbf6>\xbe\x8c\x8d\xb0\xbc?\x9a*\x87\xb5\x9b!\xd4?#\xd9\xbd\x1f\x96\x95\xd2\xbf"\xb8\\\x1c"{\xc3?\x1eS"\xe5}\x13\xb2?\xfcIU\xb0{\xc2\xb8?\x9b:4T\x84\x90\xdc?u\xd3\xc4\xe0\x0f \xd3\xbf\xbe\xe8\xaf\xd4\xe3P\xe2?\x94\x98\xdf\x89\x1cI\xe0\xbf\x1ac\xa0\xf1\xc8\xb0\xd8?w\xdeF7n}\xd0?\xe0\x07.+\x03\xcb\xbf\xbf\x94\x1d\xbdkw\xf4\xe4?L\x0e/\x1d\xd2V\xd3?g\xcd2K\x10G\xd3?\x83\x85Y\xf4\x8c\x8d\xa7\xbf\xad\xf13\x04*\x0e\xda\xbfn#\x08\xc3{R\x97\xbf\x82j\xeeE\xcf\x90\xe1?\xbfX\x08#\x13\x18\xdc?\xa0]/4\xef\x7f\xd8\xbf_\xfav\x14C<\xa6?\xca\xd7`\xcc\x8d?\xa6\xbfD\xa7r\xbd\xfc\xed\xd1?t-\x00p\xe3\x10\xd4?\xea\xe4\xdf\xf3\x1f}\xd3?\xf97\xc6D\r\xfe\xdb?\xa5\x93\xb5\xf6\xac\x9e\xd7\xbf\xe6\xc8\x84\xe9\nL\xe0?9\xc4(1\x84%\xd3\xbf\xc6\xf8\x02.+\r\xd4\xbfk\xdc\x908\x8e\xaa\xd6?#\xd4E|\x15\x9a\xda?\x81f\x81\x19\x02X\xc8\xbf3\xce\xa5ba\xae\xdb?\x0b(\xec)_\xbf\xb6\xbfi}\xb6G\x11\xea\xb9\xbf\xf0T\x1ai\x94R\xc6?t\xa4\x1fV\x1e\xa3\xc7\xbf\xbf,\x1b\x98\xcc\xbb\xe1\xbf\xe8\xee\xbe\x14\x93\xa0\xe0?7\x9e\xc5\xa6\x11\xa1\xa2?\x1d\xcf\xf4w\x96\xa5\xcc?\xf2\xc4\x8c0f"\xbd\xbf;\x0b\xc9-p\xf5\xdb?08s\x10\xc5_\xe3\xbf[\x9c\x9e\x13QD\xce?\xbd\x81\x9bQ\xb4/\xdf\xbf\x8d\'(\xf8\xe6\x97\xc9\xbf\xb0\xd8\x1c\x80?\x8f\xd2?\x95\xe42/U\xe0\xcb?\x03\x12\xf5W\xc2\xad\xc8?f\xbb\xf9P\xa4\xee\xd8\xbfU\x90J\xaeQ(\xc3?b\xac\x0bY\xed\\\xe3?"K4\xd4\xb7\x0f\xc8?\x83Qt\xcct\x90\xd8?\xf6\x88\'2h\xea\xdc?\xe43y^\xb5\xad\xa7?\x16.\xc1\\\xbe\xff\xd9?d:w\xe4\r\x90\xb1?\xd7\xdeU0o\xfd\xb2\xbf\x9a\xa6(\x80\x89\xa9\xb3\xbfmY\x9aB\xbeT\xe1?!:\xd9>>r\xa3\xbf\xca\x0fA\xee\x86\xb1\xe2?.\xe98\xc0\x91f\xdb\xbf;\xd4\x94\xb0\xb4\xd6\xcf\xbf\xa9\xde\x8d\x07Cj\xe4?m\n\xd8\xb6E\xc8\xe1\xbfa\xf0\xf8\xf1\x032\xcd\xbf3\xfd\xa6\xf6Sx\xe6?/ZhS\xcb\xad\xd8?\x88^\x98\x97\x02\x1f\xd0\xbf\xdf\xf0\x07Xh\x85l?}\xe2\\\xb9h\xc3\xd1?R\x1dd/\x91\x83\xce\xbf\xf6\x8d\xe6G\xd7>\xd1?\xf7J$F\xd4q\xde\xbf\xcbq\x15#W`\xd9\xbf\xa8\x13w\xb9\xd4\xa0\xdf\xbf\xe4T\x1ct\r\xec\xce?q\xf2\nEGC\xd4?p\xbcu\xc4\x80\x02\xe2?\x01\xd3\xa9\x14\xf8\xa6\xd0?\xdf\xcc\xd6\x98\xe4\x85\xdf\xbfa\xf0\xa18K\x02\x8a?\x1f\xe36\xd0Q\x15\xa8\xbfq\x0e\x1e\x08L*\x91\xbf\xae\xbf\x7f\x15\xda\x93\xd7?@\xb4r\x98\x9b\xc3\xab?:\xf6\x10\xa8s\x11\xd5\xbfA\x04\xc3n\xdbY\xbd?\xf7\x89fe\xf9\x88\xc1\xbf\xb7h:&M\xe5\xda?\xdf\xd5\xb8\x9d\xaa\xbc\xdc?\xb59\x84\xab\xfe\xc2\xd6\xbf\x9fH\xbc<\xaa\x18\xce?\x7f%\xa7\xa6\xb5\xd8\xc7\xbf.7f\xf9\x11\xc0\xd9?\xe2\\,TL\x97\xa1?D\xed\xf6\xee\x81t\xda?\xc9\xcc8\x1f@\xff\xd7\xbfa#\xe7\x1a\x1b\xc2\xdd?\x04\xf8\xd0_\xf7\xf4\xd5?\x10\xe5^z\xd1\xbe\xc1\xbf\xfe\x96l\xa6?\xbb\xce?\xc3\x14;\x91Z\xa6\x96?\xd0\x85\xb2\xb9Q\xa6\xd4\xbf\xeb\xa0/g\x90\xb4\xa2?u\x1f\xae\xebC\xea\x87\xbf\xaa\x8cM\x93\xc4h\xda?\xf2\xa2\xad\x93\xee\x12\xc1?R\x85\x9eOQ\xa8\xd3\xbf1\x90\xa4\x1c\x11\xb2\xe1?\xbb\xd6\xcdIX2\xb8\xbf\xc3CuDm\'\x8e?\xcf;\x02x\xf8\xf1\xad\xbf\xc3\x1b\xc8\xa8`\xcc\xb2?\xf7$\xee\t\xd7\x86\x91\xbf\xfd\x87\xb1\xd6\x0fs\xa4?\x8a\xad\x8f\x14\xa1#\x88?x\x86&\x0f4Z\xb4?\xa5t\t6@\x81\xc0\xbf\xa3.\x86\xb6\x0c@\x94\xbf\xfe\xa9\x94\x9a\r\xb1\xb0\xbf\xc3<v\xe5\xed\x8d\xa7\xbfO71_{\x9c\xa4\xbf\xd0!\xe5u\xc1\xdd\xbe?\xfd\r@6j\xb3\xa1?4Bq\xd4\xcb\xe8\xbb?\\\xcb5`<\x93\xc0?\x05\xe4\'j\xeb\x0f\xa8?\x07J\xd2\xe0\xe7\xbd]\xbf\x1a\xf9\x1f\x82\xb4\xce\xbf?\'`^\xc9\xea\xf5\xad?\xa1\xb2-\n\x1d\x05\x8e\xbf=$oG\x93s\xa2?p\x0e\xb2\xf1\xeb\xdf\xad?\xad\xa4q\x96QT\xa3?S\xb1\x90\xb0\x97\x91\xb4?\x00\xb2\n\x17o\xe5}\xbfO\x8c\xdbMt`\xbf\xbf\x0c\xf4\xcd\xa6x\xc6\xb5?6pT\x11l\xee\xbf\xbf\xb0\xf2[$\xe9Cm?}s\x87\xb7\xc7|\xb0\xbfs\x85\xac\xb1\x18\x15\xbd\xbf.\xc0\xd7j\xc4\xc7\xa1\xbf\xa0\x8f\x1f)\x8cg\xb6?,\xcduB1;\xb6?\xa8h\xa0q\x1e\xc1\xa1\xbf\xb4\x139\xa1\x1d/\xb3\xbf\xab=\x83\x86_\x0f\x83\xbf\xc22\xb4\x81H\xb7\xc0\xbf\xb3\xe0\x85P\xd1\xc0\xc0\xbf\x0e\xd0x\xd8\xc0?\xad?v#\xf3u\xdfc\xa5?\x94}\x00\xed\xd9\xfb\xbb?HiY\x06\xb5\x1a\xaa?3\xf3\xbc\xf5\xc8\xb7\x9e\xbfZ\xca\x14\xd7{X\xb9?\xae\xa3\x82;\xacd\xc2\xbf!o\xd8@D\x05\xb8\xbf\xaf\xb1)\x8e\xbf\xfb\x9d?Z4C\xaa\xc7\x83\xb0?\x04\xabA\xd9\xb1\xd0\xb6\xbf?\x0b\xf9\x01\x14\xa7\x97\xbf.\xf2\xd2y\x85\x05\xa1?\xa7\xcc\xbd\xc9\tF\xc4\xbf\x8b\xc4\xf2\xeb\x1aO\xb7\xbf\x19>\x1a\x8a\xba=\x91?\x99\xebj\xcbA\x92\xba\xbf@\x9ek\x7fq?\xb9\xbf\x82\xf5,\xf2\xb2\xff\xb5?O\x95&\xfa\x85\xeb\x80\xbf\x13h\x16Y_3\xba?\x98f2\x1a\x99f\xb5?\x1dEMX\nd\xc1?\xfe\x12dL#\xaa\xbc?\x8e\x9e\xb1A\x84\xba\xb9\xbfA\xb7\xd5\xd7\x05\x1c\xc2?MV\xbf\npf\xc0?s\x83\x9b\xe2\xbc\xec\xb6?\x8f\xa4D\xbf\xa4\x80\xc1\xbf\xf4\x9f\xaepoE\xad\xbf\x19sS2\x08\x86\xbe?\x06N\x81R\xed\xc6\xb7\xbfT\xc4\xda\n\xc4\xb2\xa8\xbf_c\x10\t8\xf2\xb8\xbf\xb0\x11vL\xc6\xef\xa8\xbf8\x82I\xe5\xc7\xd0\xb5\xbfN\x15\xea*\xa3\x9c\xbb?\x84V\xdc\xf3\xbc\xc1\xb5\xbf:\xe5XN\x81C\xf9>\x96\xa8T\xfd~\xb5\xb6?\xe3"\xa3y\x9fW\xa8\xbf\xed\xe2\xd0\xcb\xb7\x0f\xa4\xbf\x9b`\xf5d\xaa\xaa\xbc\xbf\xb7^O\x9d\x7f\x86\xba?\x87\xd3\xbc\xdf\x81\xa9\xb0?f\x89\x98\xb8\xf4\x91\x8d?:Y\xd1\xec[\x07\xaf\xbf\xae\xa9\x9b8TW\xb6\xbf\xdd&p\xa5:\'\x88\xbf\xfd\x17\xcdN\x0b6\xad\xbf\x9bn\x15W\xa7\x7f\xb2\xbf\xfbC\xccb\x07\x9d\xc0?\xf8\xe6\x8d\xa4\x1d\x8c\xc3\xbf>\xf5\x1c\xa9zw\xbd?\xe8\x85\x1b\x15R \x93?#d@\x07\xffF\xb5\xbfq3\xee\xf6\x94"\xac?\x06\xdfG\xfa\xb1\x91\xb4?(\xfb;8&\xa7\xbb\xbf\xeb\xea$h\x8c\xf6\xad\xbf\xd9\xe5r^w\x06\x85\xbf\xcd~\xbb\xb4\xb5\x17\xb2?\xd7\x15\xf6\xf2}\xc1\xb5\xbf"\xfd\x178\xe8\xaes\xbf\x83\xda\xa9{\x0f?\xbb?$l\x10\xb4r\x84\xbb\xbf\x1a\xc8\xc8<@*\xbb?`5\xdc\x94\xa1X\xc2?\xf1\x84\x97\xef\xfc\x9e\xc0\xbf\xba\xef\r\x84\xbcQ\xb6?O\xdd\x0f\x10\'\x81\xc5\xbf5\x19\xf9\xab\x1a\x02v?y4a\xe1y\x9f\xb8\xbf_@\xedY\x137\xaf\xbf\x86\x86\\\x9f\xc4[\xb0?\x01A\x8c\xed\x9c\x8a\xaf?+_?\x93\xfb\xe4\xbe?\xb4J\xb5\x0e\x08\xda\xb4\xbf\xd8\xf3\x1b\xc9\xa1\x8f\xb8\xbf\xda\xe2\xbbe\x91\xd2\xbc?\xa9)\xd8\xfbi\xfe\xb3\xbf\xe8\xd3\x07?\xde\x8a\xb4?\xd4(o\xe7\xe6\xc6\xc3?\xe9\xc9\x0e\xa2\xff(\xc0?\xb6T\xa0\x91\xe1\x04\xbc\xbf\x815\xf0\xeb\xab\xfb\xb1\xbf\xe2J\xcd\x03\xa2\xd9\xb8\xbf\xadU\xd5\xb5oL\xa1\xbfPO\xdd\x97f\x11\xb7?(\x1fS\xc5\x99#\xc3\xbf\xab(X\xdb\x93\n\xba\xbf\x1d\xfb\xaa_\xa5|\xa1\xbfW\x0en\x86\xb2&\x90\xbf7b\xbe\x7f\x0b\xe7\xbc?8\x8d,\x86I\xf0\xc5\xbf;\x81{\x95h\xaa\x82\xbf\xe6.9\xdfg\xdd\xb7\xbfb\xc4Yv\xbd\xc9\xb3\xbfIP\x1bn\xec@\xaa\xbf\x0b\x07i\xc8\x1c\xe2\xb0\xbfQ\xb9\xc9\x0ce2\x83\xbfllH[\x1c?\x9b\xbf\xbf\xad\xba/\xd4\xc7\xb4?\xd3\xcf!\xa2\xc9\x02\xc0?\xca\xe8\xdc\x82\x92\xfe\x9f\xbf<,H\xcf\x97\x96\xaa?\\Gl\xc5b\xe1\x9d?\xb7\xea\xf1\x978V\xa1?\x8c\x8cK\xf2C\xf3\xb4?[z)\x05\xc9\r\xc2\xbf\x9d\x0c\x8c\xac\x18|\xaa?\x92\xb2\x8b\x016\x90\x9d?e\xff}erc\xbd?/\x8a\xb0^\x94k\xb9\xbf\xf8\x8cP\x9b\xf6\xd4\x8f\xbfY\xa8\n\xec\xab\x9c\xbb?\x100j\xf1\xdb\x8a\x97?\x8cj\r\x8a0\xd1\xa8\xbf`t\\y\xfc~\x8b\xbfl\xd7`\xf0\x0fQ\xa1\xbf\xda_1!\x17\xbe\xb5?\x15\xc2\xe6\x88\x19\x1d\x85?\x0e\xd5\x83A\x93-\xc1?\xd1\x94\xb7\x8d\x93S\x98\xbf\x1e\x04\x1fNt\x95\xaf\xbf\xd2t\x972\x10D\x9f\xbftb\x03\xf4G\x1eK?<y\x1e\xb1\'c\xb2?\x99\xcb\x10\xd2\x9f:\xc4\xbf\x1f\xe5u8s>\xa7?\xfe/\x1d2\xad4\xc0\xbf\x9fo\xf4\x16Q\x85\xad\xbf\xa8\x85\xf6c\xf1\x8a\xad?\\\xe6q\xeci\x11\xaf?rK\xdf\x89\xb8\x11\xb4\xbfg\xd9\x9f\x1d\xf5O\x92\xbf%\xcf\x93\xb0\x94\x10\xa0?^\xf6\x14X\xdd/\xc4?\xa5\xf7Qp\xff\xed\xa6?w\x1c\xab7$\xb2\xbb\xbf\x97\x04\xafD\x7f\xb6\x9a?e|@;\xc0\x91\xba\xbf\x8d\xaf\x0b\xee\xe4{\xa7\xbfw\xde\xfa\xf9\xd7\xf4\xb1?\xca/\x0e\xee\xab\xd5\xc0?\xfc\x88\x8cY7\xf5\xa2?/\x0c\xc1\xa9\x97&\xa9?\xdd\x9aR\x9a\xdd>\xbc?N\xe3\xee@\xf2[\x85\xbf\x82\x9e\x0f\xbd~\x18\x93\xbf\n}\xf1\x0f\t9\xa2\xbf7J\x9a\xb0\xb0\xa6\xb6?U\xab\xda\xd2\x8e\xcf\xb7?v8Q\xdd\xf2\'q\xbf\xb1\xff\xdf\x8f\xc6W\xbe\xbf\x83\xdb6\x88\t\xdb\xbb?\x89N\xe8d\xb1\x11\xa9?\t\xf91\x08\xd8\xae\x80?\xfb+\xcf\\\x07\x04\xc3\xbf\xef\x83eD\x1cX\x95\xbf\xbe\xfez"b#\xd9\xbf\xc6xq\\GA\xd1?\xce"X\xce9\x8a\xd2?POb\n8k\xc5?#\xf2\x8b\xac\xedG\xd3\xbf\x02\x9bN\xcc\xa3\xd8\xb9?g\xb9\xfb~\xa0\x12U\xbf9\xd7j\xd5\x9f\xb9\xe1\xbfbmk@*\xc7\xb6\xbf\x08<\x10}U\x9e\xd5?Z\xd6X\xe4\xd8\xa0\xd0?\x93\x1d!:\xf9\xb9\x91?\x92:\xdd\x9fb8\xc2\xbf\xbb\x80\xc7\x00\x98qT?\x7fI\x10\xec\xd3\x81\xda?\xcf\x15\x0fB\xd3\x95\xb4\xbf<\x8fE\xaf\xc4\x1e\xc5?\xf3\xa9^\xc3+6\xd3\xbf(U\xbe\xbc\x89\xcb\xc6?\xf0+\xd7R\x9aI\xdf\xbf\xd1\x98\xc3\xaf\xb4\xc9\xd4?L+/\x8f\xfa\xa7\xdb?J\n\x103\xe9\x15\xb9?|*\xd8\xe4\xbc\xf1\xda\xbf\xb3\x94\xc8]\xba\xc0\xaf\xbf\xd8\x8d5\xd8&\xec\xde\xbft\x93n\xeaPl\xb9?:\xa2xvg\xcf\xa6\xbf\x9bO\x0fl\x0b\x8d\xdd\xbf\x818\x9f\xb7\xc0#\xdd?5\xdb9\x1a\x9c\xa0\xa0?\xd6\xc7\x1d x\x18\xd9?\xb3\xcf[\xca\x17i\xc4?\x0fe\xe6uj\'\xce\xbf\xedH\xf0\xa6+\xb1\xe1?\xeb0\x9dx\xce\x9a\xa2\xbf\xe8]\x0c%P/\xe3\xbf\xee\x04\xf8p!\xb9\xd1?y\xf2\xeb\xb2\xfd\xff\xda?VmB\x13Db\xdf?FA\xe2\xa2\x90/\xda\xbf\x181\xad\x19\xa3]\xc7?\x18\xe3\x0f-\xf2\x99\xd2\xbf\x83g\xb8js]\xdd\xbf5Y\t\x1e\xe0\x01\xa4\xbf3\xad)\xc1s\xd3\xa4\xbf\x16\x88\x06\xe6h\x80\xdb?\xb0\xe0Uk-\xd5\xc6?\xc8\xd1\x93\xfa\x93\xe1\xd9?ZQ\x8d\xa6Y\xcb\xd1\xbfC\x99\x9fPD\x9c\xdf?&\xe2\x9a\xe1\x9da\xdd\xbfb\r\'\x0f\xba\xf1\xde\xbf \xed\x11\xdd\x07\x04\xc4\xbfc\xc6b\xc1\x9b\xaf\xd1?a\x9aC\\\xe3\xab\xdc\xbf\xba%\x14.\xb0K\xb8?E\xe7\x08\xfb\';\xd9?n\x1d9\xe3\x9b\xc5\xcc\xbf\xe9\xdd\xb6\xd6L\xbb\xcb?\x8e\xb1\xbf\x0f\xe60\xdf?\xceN\xd2P6\xde\xb4?\xe4\x9d\xa0\xb9rF\xc8\xbf5\x8c{R\xf1\xd6\xb9\xbf\xc7\x8c\xdeV\x19\xa1\xe1\xbf\xf5>H\xd7\x82\xd5\xb8\xbf\xbd\xa5\x10.\xbe-\xb3?5\xc7\x00\x0f\'I\xa1? \r\xe8\xe4\x8d\x14\xc0?$CB\xae\x02\xa8\xe2\xbf\xa8^bMl\x9e\xd7\xbfy/h,\xeb\xff\xdd\xbfQ\xa6\x9c\xf5\xaa\xa9\xbc\xbf\xcc\xc4 o\x81\xf4\xe1?\x7f\xa7\x06\x8b9\xcd\xc3?i<\xa3\xfd\xcc\x1a\xe0?E\x13\x02{\xf0\xe0\xe2\xbf\xd7\xa5\xcf\x83\xf0\xb4\xd8\xbf\xcb\xbc\xd1\x8b]A\xd1?sf\x858=\x01\xc8?\xce\x8b?2\xcf\xb0\xbe\xbf\xd7\xe2M6I\x04\xe1\xbf\xebn\x92N\xe5\xdc\xd6\xbf\x06\xee\xccm\xb2\xaf\xbc\xbf\xb9\x19.P\xa97\xd2?C\xe5r\\\xdc\xaa\xe0?p2\xc6\xa2P\x07\xdc?\xf1\xe15C\x9d\xcb\xae?\xdd\xb4\xf1\xe2\xb5\xb8\xd8\xbf\xc3\x8f\xd5\xee\xbd\xf2\xb2?\x7f\xc2A\x93\xf87\xd3?S=\x172\xe19\xb6?c!e\xd3P\x80\xc5\xbf\xb1\x906\xc0\xaeC\xc6?{\xa4\xb8l\xf2\x94\xdf?\x01_\xdfhm\xdd\xd3\xbf\x87\x0cB\xaa?&\xdd?\xf0\xb5\xc6\xc8\xc8\xeb\x8a\xbfL\x96j\xdayp\xcd\xbf\xdf%\t\xd5\xef\xa6\xdf?\xf5D\xc9\xbfl0\xdc?=\xa6\xa8M\x1f\xce\xa5?\xb2\xf2\xdb\x8a\x95*\xd8\xbf\x1f\xedT4\xdb]\xe5\xbfK\xfc#\x01\x947\xe4?\xe8\x97G\xba\x07\x03\xd9\xbf*\x8a\xaeH\x9b\x06\xcb\xbf\xf5h\xd5\xd0\xf5>\xdb?\x04\x9b\x03\xc8\xad\xb8\xe2\xbfa\xfe\x82d\xa9\x08\xc3\xbf\xae\xa9\xfa%p\xe7\xb0?7\x10\xc3\x88\xcek\xbb\xbf\x80\xbf>\xd1"G\xd0?\x85\xffF\x97Y\xf6\xc8\xbf\xab\xc9\x8a\xa4\xc8\x15\xb8?/@\x8d[\xb4L\xdf?y(\xc5\x81g\xbf\xd5\xbf{\x04$#U\x1f\xd2\xbf\xfdf:\xf8e\x91\xa7\xbf\xaa\xf9\xd6}\xf3\xd2\xe1\xbf\xae\xb5\xb2v\xabp\xdc\xbf\xe6\xea\xc3\xe8\xd6\xd6\xc3\xbf\x9d\x91q\xdeWK\xcc?{\t\xb2\x8f\xd4bn?\xc8.\x9ck/i\xaf?\xfct\\\xd2\xda\xe5\x85\xbf\xa3\xd4\x92\xb3\xf4.\xe1?\x17\xec\xc0P\x8a\x1d\xc3\xbfK@/O[\xb9\xd6\xbf\xe3Zj\xeb\xb8\xbd\xe1?\xd8\xc3\x85U8\xa4\xb3?\x83\xda\x9b\x1a<L\xe4\xbf\xc6\xd7\xb4/\xd43\xe0\xbf\xd9|\x10d\x8bl\xc8\xbf&W\xce\xe1\x93P\xda?\x8c\xf74\x11N\xdc\xcf\xbf\x7f\xc21\x1d\xf9\x9f\xc6\xbf\xbf\x1e\xf1\x9a\x8e\xda\xd8?I\xedAwXI\xdd?R}\xab\xd2AW\xd7\xbfp\x93\xd8\x90\r\xe1\xb0?`\xbe\xa1j\x13\xe0\xcd\xbf\xd3zv\xbc6Z\xd2?\x06\x1a\x13B\xc9\n\xa2\xbf]5W\xa7\xe1@\xd6\xbf\x87\x81\xdd\xf6y\x98\xbf?\xdf$\xe8\xe0\x8c\xc2\xdd\xbf;\x89\xef\x17U\xfe\xe4?\x128\x86\x11\xfaw\xc0\xbfZ~\xdd\x1e*\xbb\xb6\xbf\xfb2Eh\xf7\xbc\xd8\xbff\xdd\x92A\x95\\\xdd?\xec\rx\xc8\xa2\xb8\xe2?L\x0c\xf4|\xea\x97\xca?\xbc+\xa2\x1c\x14|\xcb?X\xaax\xea8\xa1\xe1\xbfE<i\x882C\xde\xbf\xb0\x99\xdak\xf2L\xc4\xbf\xd2]\x10z\t\xf6\xaa?\xce\xd54\xaf\xa3z\xc6\xbf\x02\x0cxC\xf2\x0b\xdf\xbf\xb2\xbeV\x83\xfc\xeb\xdd?\xb3\xb1\xf3?s\xb8\xd5?\xc3t\xef\xc0yT\xde\xbf\x90\xfbtM\xc5l\xd1?v\xe0!\xe3\x80\xd8\xc2?>\xc3\x90&k\xeb\xd8\xbf\xe8\x19v\x85\xe6\x04\xaf\xbfcH#m\xd7r\xc4?\xeeT\xe2\xe1(\x04\xda\xbfySz\xa8\xe2\xe4\xd0\xbf\x89\x9dXb\x8f|\xdc\xbf*\xa7\t\xf0o\xe8\xba?\x80aM\xf0@\xa0\xda?\xbc\xcf\xdb\xc8|M\xce\xbf\xdb\xcb\xf8)\xa1J\xdb\xbf\xe8\xf1\xd2yg\xab\xc0\xbf\xe0~\xe2\x8e\xcbI\xcf?u\xbfS\xfa\xc4Q\xb4\xbf_\x01\xe6\xc6\xb8!\xe2\xbf\xe1\xf6\xea#\x9a\x08\xca?\xae\xcd\xa3\xe5\x1f\'\xda\xbf\x80a\x07\x18\x95\xea\xb0\xbf\xb39\x89\xf5\x1d\n\xb6?\xe5kYs\x9a\x80\xc0?5R<\x96\xc4B\xd7\xbf\x03\x1c\xaaPp\xce\xc8\xbfm`<\xb9\x93\x1f\xcf\xbf\xd8\xf0\xf0\x9b\xe7\x80\xd6?\x9c\xb3\xfcZ\x9e0\xe5\xbf\xe3\x9d\x1e\r\x03\xab\xc1\xbf\xcf(\x17\xfc\x8f\r\xe4?\x12\x1c\xc5\xff\xdf\xef\xe0\xbf\xf5t_\\^\xd5\xe0\xbf\xef\xf0_\xc7\xdd\xa2\xb0\xbfe[z\x85!\xdf\xcb?\xc3\xcf\x1fv\xabr\xd0?\\\x02\xbf\xfc\xa6\x90\xbc\xbfjn+\x0b\x16\xc1\xd5\xbf'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp354
(dp355
g32
(I00
I00
tp356
sg34
S'float64'
p357
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
S'W'
sg12
(itheano.gof.utils
scratchpad
p358
(dp359
bsg10
Nsg28
g354
sbasg12
(itheano.gof.utils
scratchpad
p360
(dp361
g15
(lp362
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p363
I128
S'initialise_parameters'
p364
S'self.reverse_weights = self.weights.T\t# Tied weights, so the reverse weight'
tp365
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp367
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p368
I3084
S'transpose'
p369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp370
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp371
asbsg147
(lp372
g343
asg149
g1
(ctheano.tensor.elemwise
DimShuffle
p373
g3
NtRp374
(dp375
S'drop'
p376
(lp377
sS'shuffle'
p378
(lp379
I1
aI0
asS'augment'
p380
(lp381
sS'input_broadcastable'
p382
g356
sS'inplace'
p383
I00
sS'new_order'
p384
(I1
I0
tp385
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p386
(dp387
bsg28
g1
(g29
g3
NtRp388
(dp389
g32
(I00
I00
tp390
sg34
g357
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T'
p391
sbsS'learning_rate'
p392
F0.01
sS'get_expected_rewards'
p393
ctheano.compile.function_module
_constructor_Function
p394
(ctheano.compile.function_module
_constructor_FunctionMaker
p395
((dp396
S'profile'
p397
NsS'function_builder'
p398
ctheano.compile.function_module
Function
p399
sS'accept_inplace'
p400
I00
sg98
(lp401
g1
(ctheano.compile.io
In
p402
g3
NtRp403
(dp404
g40
S'ix'
p405
sg272
NsS'value'
p406
NsS'borrow'
p407
Nsg54
I00
sS'implicit'
p408
I00
sS'mutable'
p409
I00
sS'variable'
p410
g1
(g7
g3
NtRp411
(dp412
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p413
(dp414
g15
(lp415
(g20
I76
g18
S'self.initialise_theano_functions()'
tp416
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/mdp_da.py'
p417
I78
S'initialise_theano_functions'
p418
S'input_matrix = theano.tensor.matrix("ix")'
tp419
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p420
I771
S'matrix'
p421
S'return type(name)'
tp422
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp423
asbsg28
g1
(g29
g3
NtRp424
(dp425
g32
(I00
I00
tp426
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
g405
sbsS'shared'
p427
I00
sg60
Nsbag1
(g402
g3
NtRp428
(dp429
g40
Nsg272
g1
(g119
g3
NtRp430
(dp431
g10
g1
(g95
g3
NtRp432
(dp433
g98
(lp434
g104
ag1
(g7
g3
NtRp435
(dp436
g10
g1
(g95
g3
NtRp437
(dp438
g98
(lp439
g1
(g7
g3
NtRp440
(dp441
g10
g1
(g95
g3
NtRp442
(dp443
g98
(lp444
g411
asg12
(itheano.gof.utils
scratchpad
p445
(dp446
g15
g137
sbsg147
(lp447
g440
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p448
(dp449
g15
g157
sbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p450
(dp451
g15
g171
sbsg147
(lp452
g435
asg149
g184
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p453
(dp454
g15
g216
sbsg28
g222
sg40
Nsbag227
ag239
asg12
(itheano.gof.utils
scratchpad
p455
(dp456
g15
g249
sbsg147
(lp457
g430
ag1
(g7
g3
NtRp458
(dp459
g10
g432
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p460
(dp461
g15
g276
sbsg28
g261
sg40
Nsbasg149
g259
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p462
(dp463
g15
g266
sbsg28
g115
sg40
Nsbsg406
g106
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g104
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp464
(dp465
g40
S'W'
sg272
Nsg406
g350
sg407
I01
sg54
I00
sg408
I01
sg409
I00
sg410
g348
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp466
(dp467
g40
S'b'
sg272
Nsg406
g47
sg407
I01
sg54
I00
sg408
I01
sg409
I00
sg410
g43
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp468
(dp469
g40
S'lW'
p470
sg272
Nsg406
g1
(g46
g3
NtRp471
(dp472
g40
g470
sg49
(lp473
g51
(g52
(I0
tS'b'
tRp474
(I1
(I200
I3
tg38
I00
S'M\xce\xca\xc4"gC\xbf\x8d\xb9DO\x99+y?\xc6_\xab\xf6\xb4\xbev\xbf\x9b\x9d\xffA\xb9\x08\x83\xbf\x1c_\xfbj\xc45R?\xd41\xa0\xb4\x00\xc2\x80?\x80o\xcf\xc9_+`?=\x16\xa9\xeaGBU?\x81\xfa#\xbf\x83\xccj\xbf\x1a(\x0b\xfc\xfbLI\xbf\x12B\x1a\xf5\x82R~?\xb7\xdd\x98u\xe3({\xbf\xf8\xc4\xcc\xba\x02uq?\xa5\xf3`U\xe7\x9ay?\x8b\xdc\x16\x08\xf5\x87\x85\xbf8+\xa8^\x07$V?{\x19\x9b\xb9hRw?*$E\x91j\xdb|\xbf\xc7\x8f\x8fx2\xbfy\xbf\n\x03\xda\x7f\x18\xed\x80\xbf\xaf\xca!\xbc\xb1\xcc\x8d?\x82\x96 4m\xb1l\xbfH\xef\xdd)1\x12\x86?w\x93\xab\xb9\xab\xcb}\xbf\x8e\xddThu1h?N\xe3\xbd\x8b\x08\xaa\x82\xbf1XQcV;y?\x1a\x15\xf0\t\xb8\xdeQ?\xa5`\xb5\x8e\x01\x84\x8d\xbf\xa1]w\x8d*H\x8b?LYO\xaf\x0c=O\xbf\x84\x18n*\xc1\xb9T?\xaa\xab\x19K\xebl4\xbf\xc4\xa63\xb2{\x91\x8a\xbf\x1a\xf5R\x8a3\x03b?<\xe9\x9e\xcf\xae\x10\x86?\x94S"\x07\xf3H#?Fw\xf7\xa1\xc5d\x83?\x8e\xff\x13n\xe9\xb1\x83\xbf\x02\x12\xb3\'\x054>?N=\x90\xcf\xb1Nn?\xa5OC:\x99\nq\xbf\x99J\xe4\x19LSl\xbf|\x9c\xfe<F\xb9_?\xe6\xf9\xc9\xf6Q\xedX?W_E\xf4H\xbbb\xbf\xb2%\xbc\xee\nPw?3\xeb2\xe9\xcc\xe4k\xbf\xfd\x17i\xc1\xe1\xa6t\xbft\xb5\xba\xd9\x9b\xa3t?\x00\x14\x18s=/\xca>\xa4\x93\x9aD/$\x95\xbfJ\x18\xd7\xd5\xe6\x93w?\x19\x9bI\x1ek~\x8e?6A\x00\x9c<\nx?\xb7Mv$\xbahK\xbf_wqW%\x9dt\xbf$\x86R\xf0\xa7\xea|?w\n\x11`5y\x8e\xbf\xcc\xc7\xe7g\xe1\x03\x80?S\r\x92\xf1\x1d\xd7w?\xbe\x8a\xe5hmvY\xbf:\xaaX\x97\x82yq\xbf=\xd9\xda\xb9\x8f\x03\x81\xbf!\xed\xa5s.mr\xbf\x9e\xcf\xad\xf3&:\x8a?\tk5\xbc\xa4\xf3\x92?\xa8\x03V\xa6\xd5\xbc\x90\xbfN:\xfb\xaex\xb6a\xbf\x04f\xecE\x87\xab1\xbf\x9a\xdc{\x12\xe5\xef\x86?rxL\xd8\x88b\x86\xbfC\'\x92\x99\x90\x0cJ\xbf\xaf\xf9\x81\x08s\x1ag\xbf\xae\x83\xe6.\x97\x9dm?\xf4\x0c\x17\x1bX\xa9o\xbf\x067\x84\x08Koa?\xc7\xab%%\x1at\\?\x9cQk\x1d\xedEV?f\xf1\xf9\x1b \xcc\x82\xbfF\x87Lxb\x03\x80?\xe6"\xda\xee\xa4\xf2\x7f\xbf|\xd1\x87\x18\xe6pb?\x07:\x96\xe21\xbav?1\xf7\xd9\x87\x01\x02\\\xbfz\xdf,z\x13Ga?\x14!\xff\xb1\x950:\xbf\x8b2\x9b\x9c)\xaab?\x8d\x96w\x8aY_T\xbfA\xcf\xbe\xae\xf9\xf4P\xbf\x9a\x1a`\x9c\x8de\x83?\xcd\x97\x95&\xc9s\x84\xbf\x06\xe4W\xa3\xb8\xe3@?(2\xf96\xc4Hy?]\xb4\xc9\x86\xafB\x92\xbf"\xcf\x16\xf2\xfc\xe0\x87?w\xfb}\x87\xe8\xee{\xbf\xc2\x0c7\xf7a\x16\\\xbfx\xdf\xa5\x82@z\x81?R\xb4:\xf4\xe2Q\x81?<x\xfdS\xb1e`\xbf\xd5\xabv>\xedpz\xbf2X\xd0>\xac\xb7P??\xc5l\x81\xac\x8bb\xbf\xe02\t\xc4\xac_T?\xd3N\xe6w\xda\x1a|\xbf{\x19\xbf\xd2fl\x88?\x15\xe3\x97-\xf3\xbdt\xbf\xd6A\xd1\xb3\xe9\x9cc?v\x92\xcb\xc3E\xca\x83?]\xe2\xbf0\x80\xb1\x88\xbf\x0f^<\xc3;Ga\xbf6l\x90\xa7\x80\t\x84?\xb8\xa9\x82mco\x7f\xbf8\xab\xb1\xee\x9fYj?&\x94>\x80\x87\xfap\xbf\x06\xf8-G\xbcmN?\tT\xf3\x94\x86\x81q\xbfT\xb5S{\x9fO\x81?D\x16\xb4a\xb8\x1dq\xbf\x9aY\x02l\x88}x\xbf0\xedz\x0cr\xc5\\?\\\x9e\xe3\xe8+Lq?\x8f\xfcYb\xa7\x93\x84?\xab\xf8\xd5\xc9yCj?\xffz\xcf\xd4\x85$\x8b\xbf\xceB":;\x84\x8b\xbfh\xf5\xbb\xb6\x8dv~?|\x90\x88\xbd\xe8\x91x?p\x08\r\x93LpM\xbf\x1e\xe5\x8e\xc44`\x89?B\x14^\xfb/\x89\x87\xbf\x94cu\xc4T\xc2\x82\xbf\x8e\xfc\xb6\x80\x8b\'u?\xb0\xca3\x08\x1e]p?\xe8\xbc\x9e\xb7P\xcdn\xbf6v\x17}Q\xadO?S\xdfXX\xfc\xe1f?\xef8C\x0bW\x98\x87?\x88\x88\xa2\x9c\x99;B?=a\r\xa5\x10\xbc\x88\xbf\x92\xbf:%\xf6.t?\'a\xb8\x00\xe5\xfe\x8c\xbf(\x01\x1b\xeei\xe7\x82?N\xd1pu/\xa2w?\x93\x04VkB\x01\x83\xbf\xeaov\xc2\xaa\xc0l?\xf4\t\x83\xad\xa5W;?Pp\xb64\xd22p\xbf!\x80\xbc\xb3\xaf\xfal?\xcc\xbe\xd6\xa7 \x86\x86?\x1e\x10\xda\n\xa60x\xbf\x13m\xd3D\x9b\xdbt\xbf\xbb \x88\xa7b}a\xbfW!,\xde#h{?"\x11h\x8ar\xa9r\xbf\x89JZq\x8c\x15g?h\xd4\xbd\x9bZ\xad5?\xf2\x04\xd2\xc47\xcbi\xbf\xb6D\xfc\x16\xaa\xee~?\xc1\xe8;\xd2\xfd\x9ai?\x8a\x1c\r\x80\x14\xde\x85\xbf\x7f\x19\xe4bW\xa7t\xbf\xb6\x15d\x82\xe8\xf4w\xbfw\x17\xa4\xf2\x1fN\x86?\x12\x0cc\xa0qMu?a\xe2\xa4~\x1ewn\xbf$mB\x84\x89GX\xbf\xcd\x845\xfa\xa0\x91\x8d?\xa7n\xa2#e\x86\x81\xbfE+&\xadw\x16x\xbf\xfdle\xc9[l_?\x91\xb9\x0cw\xbb\rf?\x1c\xb8\xdf\xad\xf4\xe1r\xbf\xc3\xa9\x8b\x8cX\xd3e?l7\x17\xbd\x82Q)\xbf\x8a6\xba`@>d\xbf\x07\x80&$S\x81\x7f?C\xb6-\x81)\xac\x82?\xf5z\xa0\x89i6\x91\xbf&\x8f\xa1|\xa9\xeft\xbfP\xeb\x0f~\xe7\xeb:\xbfA\x8e\x82\xf4g\x9ev?|\xc4 a!jH\xbf\xbb\xdf\x9f\xcd\xc9W\x83?\xf1\xd2\x8d\xb7\'\xd1\x81\xbf\x91\xcc\xc0&r\xe2t?\x90+\x0b(\xd1\x9d\x8e\xbfK\xc5\xaa\x14\x98,\x84?\xa2\xf9y\xf1a\xbb_\xbf\x05\x8d|\xbe\xf0\xbah\xbf\x1f\xc5\x9c\xdbPLt?\xdd\x16\xc5\x8a\x07ap\xbf8u\xe2C\x14\x18??\xd3\xdf\r\x8d\x0c\xdfl?\xe0\x1f\xc0u\xad\xad{\xbf\xd2\x02CNgcz\xbf\xad\x91\x01b\x8a\x08\x8b?{\x83\x00\x9f\x88\x93c\xbfv\xb1\xd5T\xd3\xc1o?\x13\\\xaak\x95\\X\xbfD\xd2\xfc\x02\xa8\xebO\xbf\x08\x89\x92\x9d]\xdbq?\xc6\xdde:\xd1\xbbk\xbfvK\x7f\xc57\x1aB?\x83\x853D\x93\xb2U\xbf\xf4\xbe\xe7\xc2\xeeJI?#)\xea\xe5\xf7\x9d}\xbf\xaa\xdb\x85$\nXY\xbf\'\xd0\x857\xfd\xf9\x81?\x80g\xa6\\~\x19w\xbf"J\x8bQ\xe1u7\xbf6\x1c\xbfq\xdc\x90x?\xc4u\x96\'t\x05x?\x001\xd1{\xc4wp?>\xd3\xb3Q\x9c>\x84\xbf4\xdd?t7cq?}\xe0\xec\x10\xec\'g\xbf2\xb2%\xaf\x05=W\xbfW\x8bog\xcb<\x7f?\x86\x86c\xf2l>\x89\xbf\xcc\x82W}\x0e@s?\x9eD\x87\x97OrX\xbf.\xe6x\xf0\x0f\xc2\x8b?\xd7\xfc\x87\xfd\xc5\xb3\x88\xbf\x19\x99\x99\x91\xe8\xdag\xbfR\xdf#\xde\xd8\xd2~\xbf\xcaUx\x93&`\x85?\x0f\xfdD\x86fLY\xbf\x13\x98\xa9\xa4\xfc\xe9u\xbfm\xd7:F\x16=|?(I\xf4\xcf\xfa\x1ap\xbf\xb0\x8eA\xd3\xbb\x05\x7f?\xc0\x8a\x9a\x06\x82\xd5m\xbf\xf6\xe0\xbc[\xc9\xa2]?\xda\x17\x1f\xfe30}?g(\x87*sL\x82\xbf\x10\xac\xd1\xf5/A\x88?\xca\xc7A\x8e\xf4\xc1o\xbfg9A\xd2\xb2P\x80\xbf\x14\xaf\xd3;%r~?\xe8Lh\x10k\x9c\x82\xbf\xae\xa9\xf3\x93\xc3\x1a[?\x95\xa7\xf9\xc9\x1b\x98\x81\xbf\x83\xafMX\x08\x04e?Lx\xccg3\xaex?\xc1\xceO$\x87(X\xbf\x86\xb2/u\x0c\x87L?\xdb\xe9o\xd3\x01\xcaC?\xd2\xec\xe4\x8d\xf4)x\xbf\xf8~lV\xc04f\xbf0\x96\x8d\\*\xa2\x81?DD\x92\xe6\'\x9dr?\xa8\'\xfb\xab\xeb\x0ex\xbfD\x8e\xa3\x15\x0f\xc7U?,\xc5\xa0\xa2\xe3Pt?\x8d\xbbB\xb7\xacQD\xbf\x90m\xb8\x0b\xae\xc6q\xbf\xae|\xdb_\x18\xf3x?\xc4\'\x83&\xa4Mb?H\x88\x8e9\xf5\x0c\x81\xbf\xd9\xb5bv\xc8\xa8p?\x0e\x0b7M\xa4\xb1a\xbf\xfe\xc0\x1c?\xd9?_\xbfw;\xd5/N\xf5[?\xc2Q\xbc\x94\x1b0{?V\xd0X\x90\xb7\x16\x81\xbf\xc1\xf1\xe9\xe9yTY\xbfA*\x9a\xb5C\xa2t\xbf\xe7\xa6\x140b\xf7z?\x00\x006\xeaB\xf2t\xbfv\xac\xd5\x98,\xab|\xbf\x16\xd6\x85\xc1\xb7\xce\x88?\x87vo9\xeb\xfc\x80\xbf\xbc\xc1H\xb1\x11>w?\xf2V,\x83\x89we?\xfc\x9a\xc3Q\xe6\nm\xbf0\xecYF\xe5\x19\x7f\xbf\x91\xdc\x9d7\xac\xcf\x86?\x9c\xca\xd3\xbe\xb1\xdba?(O\xe9\xb4\xae\x80\x1e\xbf\x19\x80,I\xac\xe7`\xbf\x06SXT9\xb5p\xbf\x1a\x19\xef\xc0\xdf\x1e}?&\x8d-\xd9L\xd3h\xbf\xbf3\xa7\x10\xd2\x8av?\xa0-m/~\ty?i0\n (\xca\x87\xbf\x88+\t\xd2\tww\xbf\x00\x10\x0b_[\x1en?KG\x07E\xb8\xcf`?\xcb\x1c\x97\xcb#\xd0y\xbf\xdb\xfd\xb71 \xe8w?L\xf5\xf1\x9d9\x80>?\xb0\x13\xf9\x1e\x8cL\x8c\xbfM\r\xe6\xcc\xa4\x1bl?\xa6\x8f\xbf\xeb\xa2E\x85?Fq\xa5cx!}?\xb0\x12\xef}>+]\xbf\xb4\xac)\xc4\xa8\xd6u\xbf\x0eK\xd0\x9aRl\x8e?8Q\x95\xdd\xbe]}\xbf\xc3D\x0bX\xe6z\x7f\xbf\xcc\x1a_\xd0\xc3Kt\xbf \xe1\x8fJ\xe7\xcd\x14?\xd8\xda43\x8c\xf8s?\x04A\xfe\x166it?\xf6\xba\xa4\xf7Ea{?b~Q\x07>\xe5\x87\xbfRB\x93YR\xa8\x83\xbf^\x81>,MZO\xbfF*W,\xf7\x9d\x85?\xda\xf3\x9b_\xacy:?b\xfb\xaf\x19\xbb\xdau?\xea\xb9\xa9\xdfU\x82w\xbfh\x0c]\x06\xc2\xa7\x92?\xc3(Y\xc72\xe5q\xbf\x9d\x84\r\xa9\xea\\\x8c\xbf\x82~w\x07k\\\\\xbfV\xf6sB*\xc1P\xbf\xb4\xba\xf5\xa4\xca\x8ef?\xb5le\xed\xafLH\xbf\xd8\xc7\xaa\x8b\x9f\xcea?\xe4\xd8\xa2 \xe7vW\xbf\x07\xd3\x84\x87+yz?#\xec\xe2hE\x8dd?m$\xfb\x1d\xe7_\x82\xbf\xba\xd2\xf0*\x87\tZ\xbf"\x88\xaf\\@\xac>?\x84\xf0\xc4\x13w^R?=\x99Tx\x13\x01t?7\xa0}dm\x05w\xbf|;Ha\xcf"H?\xf3\x8aE\x01zk\x81\xbf^I\x06M\xf4J|\xbf\x8b\xaf\xc8\'\xf4\x90\x8f?Tb\xfa\xcf\x15\x19U?\xddy|\xbc\x12\xd8x\xbf\xc5\xe0}H\xcd\x91s?Gf}zT}t?6^A\x8cu\x17\x85\xbf\nV\x05\x9e\x96\xb1u?\xcf\x0f\n\xb6\xfb,~?<M\xb1*\x0cz\x7f?\xc5\xae]\xf0\x83\xd3\x8e\xbfz\xf5\xa5Q\xed\x8d\x90?i\xbbr\xa3\xdf$I\xbf\x03\xbf\x14\xa9\x8c\x89\x8f\xbf\xaa!-\x079\xa6o\xbf\xba}\xf9\x9b\xfe\xf2m\xbf*P\x93\xd1\x9b\xcc~?,F@\'\xe6\xa0|?\x18{\x1c\xb9+Gh?\xe0A\xe7\x01>b\x84\xbf\xe2-\x80\x1eZO7?\xaf\x0c\x19#\x19>\x87?x\r\r\xf4\x93\xf8\x87\xbf\xd8\x13\x1fw~\x80\x82??\xc2\x02\xb31HW?\x16l\x7f\xad\x84i\x85\xbf\x1d\xd8\xdc\xda\x15\xa8|?\xc1\x8f>\x10\x9awv\xbfi\x1ey*\xef\xc1X\xbfn\xba\x93\x94ZN\x8a\xbf\x18\x03\xfe\xbfq\x1fw\xbfJ^I\xba\t\xef\x92?3\x8b\xed\xe8\xdd\xea_\xbf\xf1\xaf\x1a8%\x80z?\xfdL\xdf\xbdm\x85r\xbf|x\x857\xc4\xd5v?\xab\\\xe5g3i}?\xa4j\xb5\xcf{\x1f\x8a\xbf/\xfd\x1c\xe5:\xae[?\x90\x10"7\x8e\xc1q\xbf\xe1\xa1\xb5\xfb\xfe\xabe?\xe4\x91w=Myw\xbf\xbdf2\xeeWYr\xbf\x89\xfc\xd4\x95R\xe9\x84?1\xa2m\xb0\x7f\xdb^\xbfq\x9e\'\xc5\x8eMs?\xcbj\x18\xb2]-g\xbfp\xff\x97\xd3\xb9\xd9r\xbf\x82\x1a\xf7\xb44]i\xbf\xce\x8c\x13.T\x88\x7f?`\xe0\xd0\'h;o\xbf\x01OJo\xa6\xf5j?\xcfE\x1a\xe2\x06\x17A?\x9d\xa7\xb7\x86\x0f\x1b{?\xc8\x88:\x04\x9e\t\x85\xbfB\xd3z\x03Y\xf0m?\xcb\xd6du\x80\xad\x81?d\x8dVs\xd9\x14\x86\xbfW\xdc\xc6\xf7c\x9da?\x0b\xa5k\xc1\x9b\x9ae\xbff\xe0\xfc\x93\xe4\xc1g\xbf\xccB\xb4*@\xaev?.w,\xad)\xc5l\xbf\xc6\xbbH\xdca\xc5H\xbf[S\x1f\x12A{q?\xf7\x86na\xf8E\x7f?\xd7\xdb\xc4\xed\x95_\x8c\xbfk0\x1bz3yy?\xdb\xdb\x0c\xf8\xfd<k?\x89Q\x84\xe8\xcd\x88X\xbf@e\x95\x07.\xf1]\xbf\xad,&X\x90\xb1V?\xd7\xca\xb2\xa8\x1f\xf9n\xbf\t\xb5\x9f|W\xa0c?F\x10+\xd1\xee\xefc?\x96\xed:\x1c\xd4\x92\x8f\xbf\xaa)\xf0g\xd8\x96\x8a?\x98\xb8^\xc5\x1am\x84\xbf\xccl\x98s\x8e|q?3\x05%\x17\xa7]w?`\xce\xff\xc2\xb8\x18y?\xf6\xabzO1\xe6\x82\xbf\x94\x12\xeb\xb7Sgi?\x86\xba\xc4 \xcb\x92\x80\xbfL@R0\xb7\xc7p?\xb747\x11\xdf]p?\xe3\xc8\r\xf0\xc3H\x84\xbf\xe7Ts|\x05\xd4]\xbfs3\x9c\x9fD\x03\x88?\x08\x01%`\x89\xc1\x8d\xbfP\xf2K\xee\x93@\x0b?\xfb\xb46\xccH\xa6\x8d?\xc1\x04&r%\xc3E?R+t\x95\xa3DJ\xbf\xbe\x9e8\x8d\xf8\x05"?\xa5r\xd2UEG\x90?\x13\x0f\xd3\xe5M\x1aw\xbf\x8b]\xbb\xb8c\x01\x85\xbf8\xf8\xd3\xf9\xf3\x9c\\?(\x96+\x00\xd2\xb9u\xbfx0m\x03*%m?E\xe3q\xceQ$E?\x95\x89\x00k\xff\x07\x85?^\xa7\xe7\x87DZ\x86\xbf<\x9cS\x9e\xd7\xb9n?>\xde\x01\xec\xe1\xdb\x90?\xc8Q\xcc\xdf\x1c\xb3\x94\xbf\xcf\x92R\x10\xf0(\x8a\xbf\xafx^\xd2\x94hx\xbf\xc3\xe7\xc0<\x9d.\x93?) 5\x06[\xd6k?\xecs\xab\x9a\xc1\xfdz\xbf\xcb\xc7!/(%j?x\xa8\xbe\x93,\x8ep\xbf\xda\xac\x1e&\x98\xbbu?\xf2\x10\x80I\xae\xb5T\xbf\x15\x16\x81\x13(\xb5n?]\xf0\xfe\x0b\x9f\xfbs\xbf|\x95\xf9\x08,\x84R?\x03\xe9\xff>\x9d\xfc\x86?\xabB$\xc9\xc2\x12`?\x1d\xf9H\xf1M\x01\x8b\xbf\xf8\xde\xde\xec\x92Tx?\xc1\xd9m\xcf\xd8~r\xbfO\x14\xc4u\xe8VW\xbf\x84S\x16\xe9\xa6Hr\xbf\x94\xa9\xdf\xf6\x98\x885\xbf\xb2M\x84x0\xa1s?#\xb4T%\xb4I\x80?\x93\x0e\xe9\x19p\xfbj\xbf\x98\xe1\xb4=\xb0\x15s\xbf h\xd2\x869Cc\xbf\x16\x8aB\xd0\x85W\x81?b\xe0\x1b\xddn\ry\xbf\x88P\xdd.\x18\xafc?\xc5\x82\x03\x8c\xa1\xc2_\xbf\xc6u\xdcF;n>\xbf\xa1\x17\x00\xb5\x0f\x87^\xbf\x12\xea\xb6jfqw?&\xc8\xed\xfaD\x9fo\xbfp0\x98\x80DGl\xbf\xd3\x7f\xf8\x96o4\x84\xbf\xfd\x8b\x1e\xb7@F\x8b?\xf9\x9d\xc0\xb2\xef8}\xbf\xa0{\x10\x81w\x90\x80?\xd1\xcf\x02{\xfa?O\xbf8[\x7f\xc9h\x99\x88?Z\xd5\xd4wd\xb3}\xbf\xa7\xe0)\x1bm\x7fs\xbf)\xb0\x81\x04G8^\xbf\x12\xaa\xdce(8M?\x80\xb4&\xa3e8O?3_\x19|\xb5\x7fM?\xe2\x81\xe9n\x99V}\xbfgVf\xbf\xa2\xa6y?\x18\\\x03xl\x88g?\n\x19\x9e,\n\xd0k?u\xbaPR;\xacy\xbf\xf9\xc0\xa0\xccC\x0f\x8d\xbf\xa1\x94\x95\x8fu"q?\xe6\xf6\xd5\x04\t~\x84?(\x1b\x18\xc4\xac2s?\xdc\xc0\x1f\xd6b`Z\xbf>V \x1d(5i\xbf\tbiT\xde\x93x?k\x0b\xed\x11d\xddB\xbfo\xc0+\xd218v\xbf~I5\xb2=Zu\xbf\x86\xbf\xe1\x81\xcb\xb5a?^\xd2\x88\xe2\xaf\xfeh?G\xcd\x07\xa8\xe4v\x88\xbf\xe8B\xac\xc0\xb6\xcb\x1b\xbf\x8c%\x89\x15|\xae\x88?\x11\xb6\xc1O\xf1/l\xbfP\x80p\n\xf13r?\xe4\x94>\x8a\xe1oP\xbf\xe4PRTZ\xd1?\xbf%\xeb\x96\xc1\xdd\x87|?U\xc6Q\x1c\xc8\x8az\xbf\x8b\xb4!\xcc\xd0\xd8y\xbf\x80,\xc6\x0c\xf3\xe6x?\x84\x18q\xeb\xb7;.?kh\xf2\xe9\x88\xb3\x83?>.\xd5v\x8cd\x8e\xbf.\x8c\xc5\x19\x07bu?\x9f\x11\xc1\xa2\xf5\x0ba?P\xabO[\xcf\x96\x8a\xbf\xa5f\x9f\xf2\xd1S\x86?W^\x91X\x86\x0f\x88?\x9d>Eb\x1c_v\xbfu~\xddN\xf0\xbfy\xbf\x00\xc0O\x83\x7f\xfbn?\xd3\xc2\x86\xd3\xbf\xc3j\xbf\xe0\xf2#\xbf\xfe\xde@\xbf\xb2=y\xcd\x83\xd5b?\xda[*\xa7(-z?o}\xf3F\xf5\xcb\x81\xbf(\xe8yE>\xa4(\xbf\xe1>\xdc,f+w\xbf/\x0e\x08\x1f\x88\xf0w?\xf8\x9c`(\xcc?P?\xf8\x0c-l\xd8qX\xbf\xec\xdf\x98\x87\x18d@?p\xcb\xec:\xbe\x07\x80\xbf\\\x9c}\xd6\x11^\x87?&CCnNYm\xbf\x03D\x80]E\x11A?Dl\xd7`_\x93z\xbf\x18d\'\xb56qx?9\xda\xe4\xb5\xb5\xcaN\xbf]O\x87\x8c\xd0\n\x80\xbf\x1c\x9d\xe5\xe7{\xf7\x81?c\xb8\xf0+h\xccp?\x01\xbe\xc4gVI\x89\xbf\x83a\xccQ"\xe3\x80?\xb6j%p$\x14\x86?t\xffj\xe7\xad\xff{?:u\xed\xb1\xfd\t\x92\xbf\x8cI\n\xbe3\x04g?y<\xc4"\x0e\xdc\x82\xbfOT\x83f\x026z?!O\xa7HO\xf0s?\xc0\xb1\xed\xc1\x1dO0\xbf\xffs\x88l]\xebr\xbf\xbeN\x8d\xa6\xc0\x88h?(@vL\xb7A\x84?\'\x94\x19v\xe7c\x8a\xbf\xbc\xb9\xe8.\xba\xf6a?\xb2\xba\xf0h\x15cH\xbfN\x16Y\xa9\xe9\xbbW\xbfj\xf7\xa2*\x98.\x82?\x89\x88\x13B\xbdra?\x94\xd9\'{G\x8b\x86\xbf\x8a\'Yj\x07Hn\xbf.7 \xca<\xb8q\xbf\xb7e\xa6? n\x80?p\x11\x06X\xda\x98W\xbf\x0c3\'\xfd\xfdS\x81?2\xe1Ld\xc5\xc1|\xbfX\x06P)fla?\x02\xc9\xa0\x91\xd6Nt?\xcb\xcbH\xa6\t\x05}\xbf\x19*!S\xc8\x16\x88?\x93\xbe\xcbh\xd7\x1c~\xbf\xc4\x94v=\xb9\x10r\xbf\xcdP\xba\x8b\xc3\xe5n?.,+\x14\x0c\xcf\x83\xbf 0yb6+x?\xab\xc6t9>\x8b_?F\xcf4\x1c\xe5/o?\xcc\x98w\x1c\xc2zw\xbf*\xe7\xd7\x8c\xa1\xe8j\xbf\x16\xb2\x0e\x14\x8a\xf8u?\x8c}E\x9br\x08a\xbf\xad\xe3S\x93U\xe9P?\xf0C\xd4O\xf8\xc7R\xbf\xb0\t\x06\xc8+\xea\x1d?F\xa9q\xad\xdc\xceY\xbfEj&\xde\xb2\x0bq\xbf\xcb\xd4\x82\tj\x7fw?\xdfL\xbe\xdb\x7f\x06\x85?=\xbal\x9c\x01\xfa@??\x18\x85\xf5\x1f\x16\x86\xbf\xfb}\xce\x8f\x81\xb6\x8d\xbf\xac%0pq\xf3\x87?6`y~@\x0cg?'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp475
(dp476
g32
(I00
I00
tp477
sg34
S'float64'
p478
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg407
I01
sg54
I00
sg408
I01
sg409
I00
sg410
g1
(g42
g3
NtRp479
(dp480
g11
Nsg45
g471
sg40
g470
sg12
(itheano.gof.utils
scratchpad
p481
(dp482
bsg10
Nsg28
g475
sbsg427
I01
sg60
Nsbag1
(g402
g3
NtRp483
(dp484
g40
g322
sg272
Nsg406
g320
sg407
I01
sg54
I00
sg408
I01
sg409
I00
sg410
g318
sg427
I01
sg60
Nsbasg147
g1
(ctheano.compile.io
SymbolicOutput
p485
g3
NtRp486
(dp487
g410
g1
(g7
g3
NtRp488
(dp489
g10
g1
(g95
g3
NtRp490
(dp491
g98
(lp492
g1
(g7
g3
NtRp493
(dp494
g10
g1
(g95
g3
NtRp495
(dp496
g98
(lp497
g1
(g7
g3
NtRp498
(dp499
g10
g1
(g95
g3
NtRp500
(dp501
g98
(lp502
g1
(g7
g3
NtRp503
(dp504
g10
g1
(g95
g3
NtRp505
(dp506
g98
(lp507
g1
(g7
g3
NtRp508
(dp509
g10
g1
(g95
g3
NtRp510
(dp511
g98
(lp512
g1
(g7
g3
NtRp513
(dp514
g10
g1
(g95
g3
NtRp515
(dp516
g98
(lp517
g1
(g7
g3
NtRp518
(dp519
g10
g1
(g95
g3
NtRp520
(dp521
g98
(lp522
g458
ag411
asg12
(itheano.gof.utils
scratchpad
p523
(dp524
g15
g283
sbsg147
(lp525
g518
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p526
(dp527
g15
g308
sbsg28
g313
sg40
Nsbag348
asg12
(itheano.gof.utils
scratchpad
p528
(dp529
g15
(lp530
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p531
I231
S'get_symbolic_expected_rewards'
p532
S'theano.tensor.dot(self.get_hidden_output(),'
tp533
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p534
I170
S'get_hidden_output'
p535
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp536
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p537
I4732
S'dot'
p538
S'return _dot(a, b)'
tp539
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp540
asbsg147
(lp541
g513
asg149
g1
(ctheano.tensor.basic
Dot
p542
g3
NtRp543
(dp544
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p545
(dp546
bsg28
g1
(g29
g3
NtRp547
(dp548
g32
(I00
I00
tp549
sg34
S'float64'
p550
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp551
(dp552
g10
g1
(g95
g3
NtRp553
(dp554
g98
(lp555
g43
asg12
(itheano.gof.utils
scratchpad
p556
(dp557
g15
(lp558
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p559
I117
S'__add__'
p560
S'return theano.tensor.basic.add(self, other)'
tp561
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp562
a(g219
I533
g161
S'inplace=False)(input))'
tp563
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp564
asbsg147
(lp565
g551
asg149
g1
(g373
g3
NtRp566
(dp567
g376
(lp568
sg378
(lp569
I0
asg380
(lp570
I0
asg382
g58
sg383
I00
sg384
(S'x'
I0
tp571
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p572
(dp573
bsg28
g1
(g29
g3
NtRp574
(dp575
g32
(I01
I00
tp576
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p577
(dp578
g15
(lp579
(g531
I231
g532
S'theano.tensor.dot(self.get_hidden_output(),'
tp580
a(g534
I171
g535
S'self.bias)'
tp581
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp582
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp583
asbsg147
(lp584
g508
asg149
g1
(g183
g3
NtRp585
(dp586
g186
g293
sg188
g1
(ctheano.scalar.basic
Add
p587
g3
NtRp588
(dp589
g192
g297
sg153
g154
sg40
S'add'
p590
sbsg40
S'Elemwise{add,no_inplace}'
p591
sg153
g154
sg206
(dp592
sg208
(g590
I2
I1
tp593
sg209
(dp594
sg304
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p595
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p596
(dp597
g15
(lp598
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp599
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp600
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp601
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp602
asbsg28
g1
(g29
g3
NtRp603
(dp604
g32
(I00
I00
tp605
sg34
S'float64'
p606
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p607
(dp608
g15
(lp609
(g417
I93
g418
S'outputs=self.get_symbolic_expected_rewards(),'
tp610
a(g531
I231
g532
S'theano.tensor.dot(self.get_hidden_output(),'
tp611
a(g534
I171
g535
S'self.bias)'
tp612
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp613
asbsg147
(lp614
g503
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p615
(dp616
g15
(lp617
(g534
I171
g535
S'self.bias)'
tp618
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp619
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp620
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp621
asbsg28
g1
(g29
g3
NtRp622
(dp623
g32
(I00
I00
tp624
sg34
S'float64'
p625
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag479
asg12
(itheano.gof.utils
scratchpad
p626
(dp627
g15
(lp628
(g417
I93
g418
S'outputs=self.get_symbolic_expected_rewards(),'
tp629
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp630
a(g537
I4732
g538
S'return _dot(a, b)'
tp631
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp632
asbsg147
(lp633
g498
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p634
(dp635
bsg28
g1
(g29
g3
NtRp636
(dp637
g32
(I00
I00
tp638
sg34
S'float64'
p639
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp640
(dp641
g10
g1
(g95
g3
NtRp642
(dp643
g98
(lp644
g318
asg12
(itheano.gof.utils
scratchpad
p645
(dp646
g15
(lp647
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp648
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp649
a(g219
I533
g161
S'inplace=False)(input))'
tp650
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp651
asbsg147
(lp652
g640
asg149
g1
(g373
g3
NtRp653
(dp654
g376
(lp655
sg378
(lp656
I0
asg380
(lp657
I0
asg382
g327
sg383
I00
sg384
(S'x'
I0
tp658
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p659
(dp660
bsg28
g1
(g29
g3
NtRp661
(dp662
g32
(I01
I00
tp663
sg34
g328
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p664
(dp665
g15
(lp666
(g417
I93
g418
S'outputs=self.get_symbolic_expected_rewards(),'
tp667
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp668
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp669
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp670
asbsg147
(lp671
g493
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p672
(dp673
g15
(lp674
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp675
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp676
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp677
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp678
asbsg28
g1
(g29
g3
NtRp679
(dp680
g32
(I00
I00
tp681
sg34
S'float64'
p682
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p683
(dp684
g15
(lp685
(g20
I76
g18
S'self.initialise_theano_functions()'
tp686
a(g417
I93
g418
S'outputs=self.get_symbolic_expected_rewards(),'
tp687
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp688
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp689
asbsg147
(lp690
g488
asg149
g1
(ctheano.tensor.nnet.nnet
Softmax
p691
g3
NtRp692
(dp693
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p694
(dp695
g15
(lp696
(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp697
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp698
a(S'/Library/Python/2.7/site-packages/theano/tensor/nnet/nnet.py'
p699
I359
g161
S'return Apply(self, [x], [x.type()])'
tp700
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp701
asbsg28
g679
sg40
Nsbsg407
I00
sbsS'mode'
p702
g1
(ctheano.compile.mode
Mode
p703
g3
NtRp704
(S'cvm'
p705
g1
(ctheano.gof.optdb
Query
p706
g3
NtRp707
(dp708
g40
S'OPT_FAST_RUN'
p709
sS'require'
p710
c__builtin__
set
p711
((ltRp712
sS'subquery'
p713
(dp714
sS'position_cutoff'
p715
NsS'exclude'
p716
g711
((ltRp717
sS'include'
p718
g711
((lp719
S'fast_run'
p720
atRp721
sbtbstRp722
(lp723
g1
(g46
g3
NtRp724
(dp725
S'provided'
p726
I1
sg40
g405
sS'required'
p727
I01
sg49
(lp728
Nasg408
I00
sg54
I00
sg55
I00
sg28
g424
sg60
Nsbag1
(g46
g3
NtRp729
(dp730
g726
I0
sg40
Nsg727
I00
sg49
g108
sg408
I01
sg54
I00
sg55
I00
sg28
g115
sg60
Nsbag1
(g46
g3
NtRp731
(dp732
g726
I0
sg40
S'W'
sg727
I00
sg49
g352
sg408
I01
sg54
I00
sg55
I00
sg28
g354
sg60
Nsbag1
(g46
g3
NtRp733
(dp734
g726
I0
sg40
S'b'
sg727
I00
sg49
g50
sg408
I01
sg54
I00
sg55
I00
sg28
g56
sg60
Nsbag1
(g46
g3
NtRp735
(dp736
g726
I0
sg40
g470
sg727
I00
sg49
g473
sg408
I01
sg54
I00
sg55
I00
sg28
g475
sg60
Nsbag1
(g46
g3
NtRp737
(dp738
g726
I0
sg40
g322
sg727
I00
sg49
g323
sg408
I01
sg54
I00
sg55
I00
sg28
g325
sg60
Nsba(lp739
Nag110
ag353
ag53
ag474
ag324
atRp740
sS'output_batch'
p741
Nsg102
g109
(tRp742
(g111
g51
(g52
(I0
tS'b'
tRp743
(I1
(I624
tg113
I00
S'\x976Ior\xf0`\x18zL\xc7\x18\xaa`\x1eb\x05\xc5TAS\xa1\xa4.\xe0\xed\xf8\x9b\x0e\x85J\xd0S0\xfd\xabu]\xa2\x13v>\xd0\x81\x183\x06,\x85*Xy{\xd5\xc2\xc1\xf8\xc1}\x84 \xa5\xa0\x05\xe7\xa2\x19\xebT\xfd\xef&t\xef\x1f\x03\n\xa3MFb\xbb \xafc\xf9\xb4\xf1OX\x07\x8d\xdb\xa4mN\xcev\xc6\x81\n\xdf\xf1\xc1\x10\xf0\xc9NBK\x1b\xaa\x0e\x90,[\x87g?\xe9>h\xc2\xbd!\x91\xc2\x1b\'Q\x97\xf2\xfcdVK\x96\x1b\xafBWBn\xeb\xca\x97\xcb\x9f\xcd\xbc%\xd1V2\x9e\xa9\xfb\xfe\x9a\x1a\r\xa47\xfd\xa4K\x11C\x10\r\x0b\xf8[\x106\x06\xe4\x86+Y\xf8\xf64\xa3\\\xae\r\x0e\xcde\x06\x95\x85\x18\xa1a_\x91\xb3Tf5\xd2\xc5\xd7\xdd\x80\x14\x12\xeaU\xef\xa9\xa8\xa5y\xa8\xdd\xd8\x1e\xe5\xb36\x04\xbb\xcf\x9b\x85\xe9\xb8\x9a\x12\xfb\xefy\xd0q\xd8\xc6\x9f\xeawI\xaeqS0\xe6x\xf28\xd2\xc55r\xaa\xab\x11(\xca\x02\xbf\x89\n\xfe}\x97\xfb\xd4\x85\xd2\x0c\xac}o_\x19\x97\xb2\xcf\x15&\xd1\xd9\x7f\xed&S\x98>\xe6\xf2\xcdcMw\x0e\xedJ\x10b\x03c\x93a\x1c\xc0\xbeB\xbb\xb5>\xb2\x96\xb5+\x92\xac\x85L\x1em.\xd6\xdfF\xff\xb51|\x8fy\xd5\xc8\x02\xed\xca\xd2\xf2\xe3\xdc0KD*8\x1a\xc8\xc8\x17\xf3Fk\x00z\x8c\xea\x99\xee\xabN\x9a\x12\x9c%\xed\x96A\xeb\xc7\xc7Ykh\xd2`\xc0<\xcbT>J}S\xca\xad\x14\xab\xc6\x9c\xf8\xdf\x97\xd8,\xda\xe4\xdf\xd7\x93\xeaP\t\x8c=X3\x94_\xd1Q\xe3F~r \x8b\xb8\x15\x1b^k\xc2\x17k\x81\x92\xa8\xdb\xff\xb4\xc9\xd7\xdb[\xe38\xc6\x1b$.\x1fk\x83\xab\xa0\xc3\xa4\xf0\x0f!\x82\xaa\xa59\xff\xfax@\x15[\xa3\x1e\xd8E\xa7\xbbT\xdd4\x8c.\xde\xa2\x06\x06\xf3\xf0\x1c!\x15\x1dY\x06\xa4\x8b\xc9k\x9bV}\x96f\x90\xb8\xba\xfc!\xca\xafsu)\xa8\xfa\x1f,j\xec\x9b\xe4\xd0%\xe3F\xc0"O(d\xd0:\x1c}\xbf\xf1\xd6\xdc\x81\xfd/K\xadc\x80\xb0nw\xa1\xe6t\x19\xff\xa3\x17\re\xaf$\x18n\x03\x15\xe8&\xe5\x0e\x14\xf0=\xf5\xee\xd1s\xcc\x13.\xca\xdf\xcdb\x80\xf0\x8d4\x9b\xf2l\x14\x0f\xb5\xd0df\xb7M\x8a\x04\xea\x82\xc6\x9f\x03\xe0M\xe9\x9f\x18\xa6\xd1Nq\x1d\xdc\r\x19\xb6#\xfa\xcerwT~\xa9\x03o=k\x8d\xbf\xf3u\x8a\x8a\xa0S\xf0\xa1\x9b\x00*\x97#:i\xb9\x7f,!\xf6\x1d\xcd\x84=\xf1,\x97V\xd2\xeb\xe7n\xe4\xba\xdb\x81u\xd4\xa7\x8a\xeaU\x8dd\xbd\x90\xf5\x81\xa7\x93\xbc\tQ\x14\xafp\x8c\x82\xd7\x14\xe9 \xc6@\xe7\xbdq\x04-\x05G\x0b*TA\xbdtcn\xcb\x83\xc3\xb5W\xb6\x1b\x0e\xfe\x92>\xa2\xb9J\xea\x8a(\xeaO\xb7\xb7M\xf9\xef_\xb9[\x01\nWes\x81\xba\xd9v\xab<\xc7\xe3M\x9aW\xe8\xa4\xec\x00b\xf3\xe7\xf3\x94t\xfb\xb3\xe4i\x18\x03&\xfd\xf9\x01\xc5\x1c#e\xfa;`\x15&\x83z\xadI\x99Yw\xb3\xc2&a\xab\x89\xf3WTx\x81Q\xa5oR\xe7\xce\n\x821\xa4\xf1\x00\xdaH\x8d,\x80V\x1d\xc09\xdb\xab\x19\x1d\xe7\x8c\x15\xaf[\xd2=6\x87\xfc\xb9\x10\x93\xca\xb1\xf3\x91\xf1A\x06\x1b\xd4\x17\x9f\xae\xa3\xd4\xa1\x13\x8a\x97V\xcf\x16K\xe0=hh\x01ZwY\x17\xbb2\xff\xc6\x03P(\x9fY\x9f\xb2T$(\x12\xd8\xed>d\xab\x90{!\xe3E\xef=)>\x91\x1b&2\xbb;\xf5\x9cN\x18\x9c \xb4\xe9\xb9q\xb0O\xe9\xdc\xe8\xd9\x81\xcaK\xf7\xf2%#\x05\xae\xa4xt\xea\xa9\xc3\x8c\xb3l\xf2\xf0,+\x19\xb9\x80q\x83\xcf\xf8\x05P5\xa8C\xf3\xc1\xa6c$_D\x11\xc0\xe3\x9d\xe6\x1c\xb6@)\xb5\t\x9c\xb5\xeb0\x0e4<Y\xf8\xa7\xac\xf9]\x17\xe8\n\x9b\xe1\x04f\xeeK#\xbak\x8d\xda\x1a\xd2\xfda[E;Y\x9b"\x15\xe7Eu*\xf2#R\xef\xda\x17\xb5\x8f>\xff3S\xc4\xeet\xd6!Q\xda\xf7v\xa2\xca\x14V\xa1\xaf\xd9C\r&\xb6b\x03\r\xfbe\xda\xda\x9e\x15}1\rx?\xd9\xe5\xb9\x86\xa2\'\xa5g"u<\xa9!\xfc\x93\x14a\x15q^\xb2\x83u\xdc\xc5\xfc\xa4\'c#\x04w\x9cG\xdd\x94DCm\xa3H\xaa\xa3\xdfn\xf2O\x91\xcci\xbe\xe0\t\x03\x1a`#\x96\x13\xaa\xd1,4\x80\xa6R\x90\xde4kJP\xcd\xa5!\x15N@\xae\x9a\xcb\xad\x83#\xc2\x1e\xb9\xf42\x17\xc7O\x8e\x1c\x15>\tP\xd1!\xffy4*\xcc\xcf\xed*\xe7\xba\xb1\xf9F\xe1s\x8b\xd3\xf90\xdb\xe1\xdeq\x06{\xcc#Y_\x8e\x14\x08\x15\xca`J\x9c\xf0v\xc6\n\xb4\x84F\xdb\xc3\xedv\x94\x8c[\x14\x0e!v\x02W\xa3Y\x93\xb9#\xbf\x9b_\xec\x0e\x1b\x06\xe0\xc9\xf6\x1f\xe4\xc8\xb6\xf1\xe0\xceu\xb1k\xdd]\x9aYo\xab7-\x14u\x19\x96\xf1\x0e\xdf\x84\x00\xaeP\xb9*\xa9\xfcn ??\x0f\x12\xcb\xb2\x99\xb2\xf8\x8a\xa7m\x12\xc8\xd4\tT\x12Eu\x92.@\x8e\xf7\t#\x1egGn\xddy^\xe45\x1f\xbf\x04\xe2#\xcd@\x1e\xc0\x07\xa4\x03\x8fb\xdf]\xaaE\xa2O\x0f\xd8\xd8tG\xdf\x06\x0f\x10\xf9\x81\xa1\xe9\x05\xd2\xdb+\x96A\xb8\x10\xaa\xe3\x18%\xd6\xd4m\xdc\xae.Y\x15\xa9\xf6vP\xce\xd3\xf4\xf8\x81\x9d-I\xf4\xed,\xcaY\xe7J\xa6\xb4)\xb4[\xcc\x9a\x9b\xfc\xb8\x0c\xc2\xea}T\x9d``\x96\x08k\xc8S\xee!?\xf2\xcc\x98G\xc9\xfe\x99T\x7f\xaej\x1d\x14\x86\x88\xa1\xc4\x80_\xef\x0fO\xf7\xac\xae=\x9dp\xffqs\xd3*\xd6\xfc\xb6\x1c:\x98^\xee$\xfb\x95\x12B<\xa4SB\xbbr4h_`\xed\t\xb2\xee\xac\xe9]\xb6lv\xf6eM\xaae.\x92\xe6\xa7L\xef\xce\x07\xd2\xd0x\xc9a\x0b\xee\xf9\xfc\xc7\xa3n\xb9\x90\x1cw\xbed\xfa\xd9\x1f\x12f\x18\xe1\xe1\xde\x89\x84\xd5\x10\xc6=\x85%\xb8b\xee31\x17u\xda\xd4\xec\x1d\xeb*\xd2}\x05T\x82u\x05\xe7i\x8b?\xfa*`\x03\x0c>\xd0\x80\xe1\xa2\xb4\xa7\xd2\xce\xf5\x19%\x87\xc2\xd8\x8d\x1e}O|\x13M^\xf4mDP\x0c\xb9LQt\xdc\xd9&I\x0b\x9d\xd4V\xa5E\x82\xceLE\xc6K\x912\x12!~c\xef\xc2\xf5\xe4\xf7\x1e\xf8a\xd7\xfb\xf7\x85\xc5W\xbb\xfc~\x8e\x04<8\x9c\xc7\xc0\xf6\xee\x17e\nl\x96\xb4\x0b\xd8\n\x9f:S\xd7a+\xd8\xb5\x17!\x06zuqB\x03YSF\x1c@.\x84h\x83 \xfb\x9e0\xcb\xb1O\xdf\xa4L\x84\x99S\x04\xd7~\x86F\xd6\xf1oJ\xa1\x9c)\xa1h\x99x\xde@:=\x83\xccZ=\x9f*<\x0cy\x92\xa3\xbdSc\xd1J\x83\xb3\xdav\xed\x0e&\xc8\xe7\xdc\x03\xe1n\xf1\x80QNQR\x07\xd2\x12\t\x1f\x82\xf6.\xf9\x07\x9d\x916\xd0\xd7"y\x0fQ7\xd9\xbb\x1d\xbew\xd6n\xf8\xf5\x1a\\\xc8\xfe\t8co\xdd\xe1\xf4\xc6|H\xe2\xd0\x89\xbb\xb8\xc2_\xe6f\xdavj\xa7\xd2a\xf3Y\x8a4\xd6\x03\xdf\xcd\xc2%\xe3\xce\xafH.\xfe\xd6D\xf6\xa66\xee\x11\xc3D\xde\xa2\xe4\xbaa\xe4\xf5\xa8\xf0x(\xb6\xeb\x89\x9b\xabH\xceJU\x9e\x860-\x84\xda)db\xdfk)\xe4\x02\xa1`\xc8K^\x8f\x83iNw\x0b\xc6:\xe3\xe8\xc2\x82\xd1Em\xd9~\tq\xe0U\xa5 F\xf8\xe7\xd8f\xb7\x00\xfe\xfb\x1e+\xf6\x0e\xccH\x02\xe2J\xd0\x10H\xcbz\xbe\xf6]\xe6\xc0\xfe\x8e"\xba\xce\x12\x06Z\x06!\x9a\xd9\xac\xec,P7\x1f9#)\xb7\xa2B\xeb\xc8\x81E\xb6i\nG\xc9\xdb7\x0f\xae\xf1rQi\xb9\xbc\x90\xd9\x08\xa4)x\xa9<J\xe0\xdeM\xb1\x10nN\xe0\xc7\x92\xb1BX\xf1\x08\xbaEuS\x94\'\x98\xde\x05\xba1+\xf5`\x96\xff\x9f\x1c\x0f\x89\xaf\x91\x1fFr,F{\t9\xd5#T\xa4b\xc6\xd7&\x9b\xae\x8e|D\x88\xe0\xdc\x1e\xa8\xd8o\x0ef\xc0T\xc7\x8b^l\xb0k\xa6\xa2\xaf\xd8\x81Wz\n\xea\xb0\xf9o@\x88\xbd@\xe2p\x86\t\x169\x1b\xd2\xd9pk\xb4\xcb/\xca2\xc93\x8b\x0b|\x91#\xa9\x0e\x17\xfb\xe3\xe7$\x16\x1cE\x1c\xe8<\x87/4\xe5\xbfO#\xcc\xa75e:\xa4v\x17\x91\xf3EJ\x1c\xe44\x17\xe5\x1d\xc5\xf1,[GI\x94w\x90\x06KR5\x1d\xce\xb7\x95|\x83$,\xa9\xac\xca\xb9\x05"w/\x1d\rI\xf2\x145T]\xcd\xbb%\xef\x0c\xf3`.\x92i\x89U\xb9\xff\xb8{\xa3\xe0}\xdf\xdb\x81\xcc\x12i\x86\xf6\xb2\xa9\xcd\x80\xe6Gz6\xf3X\xe4\x7f\x1d\xf4@\xe2\xf9Z8Qpu\x85zg\x1b/\xe1\xc8\\\xba\nDW\x17\xf9\xf0,+\x9c\xec\x03s\xef\xb3;e\xb4\xe4"\x9b\xaf^\xdd\xb3\xdb\x80\xf5\x7f\xa6\xe4\x0e`\x03z!(\xbb\xac\x018\xdd;)\x85\r\xaer\x0c\x99\x06Gg\'\xf5G\x9c\xc8\t\x8c\xbf\xc4\xbc\xe1\x92.\x97Gjp7\x7f?\x12\x08K_\xdc\x9b^\xeeF_t\xa1\x10\xaa\xfc\xeax\xcf\x82\x8f\xb2\xc2b\xb1N<\xbbx@\xd9]\x10\xc8\x98M\x0b\xc7\xe9\xe4Vu\xd8\x1d\xc5O4\x98\x17\x04\xa4C]\xee\\\\\xf5\xd4\xfe\r0Sh=\xa8C1\x0b\xe7j\x98\x82\xb3\xb6\xabQ\xf34\x1f\xaa \x01\xac2\xf6\x82M\x01\xcdi\xad\xe0mEa\x95\x07fi\xdc\xbc\xc66\x9cz\xa3ge\xb7\x12\xd7N\xcd"z\xa5\xe8\xf96\xff\x86!\xa7\xfd\xa4\xae\xc5\x00\x12\xb7\x9a^D`\x9c_\x8d\x92$\xe9D\r\xc0S^E\xe2\x08\xdbX\x93\x0cX\xa5\xe3}\xe2\x82\x07\xb8\x18\x16\xa8\xd6\xcf[;\x99\xd6{\xb0Z/\xda=_\xa7\xf5\xef\xd3\xb1\xcb\xfe\x81\x03s\xa4\xbc\\\x92:2jP3R~\x9f1 @Q\xeb\xcbB\xe9\xc5\x05\xb4\xfe\xe8\xe3\xa2:\x9bDh,q\x00\x8ePG\x95\x82m\xe9\'\xd5\x16\r\x1f:\x86\n\xd2\xcd'
tbI513
I0
F0
tbsS'hidden_dimension'
p744
I200
sS'output_dimension'
p745
I3
sS'input_batch'
p746
NsS'theano_rng'
p747
g1
(ctheano.tensor.shared_randomstreams
RandomStreams
p748
g3
NtRp749
(dp750
S'state_updates'
p751
(lp752
g273
asS'gen_seedgen'
p753
g109
(tRp754
(g111
g51
(g52
(I0
tS'b'
tRp755
(I1
(I624
tg113
I00
S'\xf0z\x17\x80\xb1\xfc+\xb3%l9\xb2u\xe7V\x86\xb93\xac\xc3\x0e\xeaf8\x19r\x96\r!t|\xc0\xf5\xbc\xbe\x15f-\xba*\xc4\ry\xd5-{d\x0f\x0c\xea\x15\x1c\x9a,\xf7\xeb\x7f\r\xf3\xc1dJ^.N\xe3\xd6\x14b\xc2\xf1)86\x83\x1d\x07{\xed\xc8\xd0\xe9;\x1f]\x1c+F+\x92\xfa\x19C\xf9y\n\xd7\xd4O\xe9\x05E\xe0\x8a\xcc\xae\xd4z\x17V\xcd\x88\xa7J\xccM\'\xbfk8=[T\xe5\xeb\xb5\xeb\xbb\xa6|\x05@\x80F\xa2Y\x14\xb93`\x83\xcd\'\x11\x95\x8d\xb39\xc5\xffP\x8bA\'\x04\x13\x89\xc9b\xc6\x98o\xe6~\xb0\xde\xb0\x93w\xb8\xa8kq\x97r\xf0QW\r\x90\x1dY\x9b\xe1\xd9H\x8e5\xa5\xf8\x91f\x9a\xa7(\xe1\xb8\x96\xcfd&\x92\x91\xf0\xcb^\x9b\x8dp\x11\xfe\xd7\x92Z\xcfo\x99\xce\xcd\xd0v\x90uV\xe0\xafS@m|\xb9c\x181\xb1<\xdeK^pi\xd3\xc3\xd5 fh\x1f\x7f\x9b\x14\x939\xcd\x9d|@\xb9t\x19Y\x02\xc2c\x86\x89\x1c\x0ftt<\xa0\x19(9\x15\x80\xe0\xa5\x95`\xc5 \x03\x9c]\xfd\xf3\x08\xe8\xfc\x03\xe94\x18.1f\xc8\xe8\x04\xb2\x95\xe4\xc5\tOo\xf4\xff$\x18\x0f\x1c`U\xf3f\xfac\xbf\xf2\x8f\xfb\x92pS\x7f b\xae\x0fOR\xd3\xf7\xbf6\xa2+\xfb\x12d\x0b\x88\x8d\xdd\xb9\'\xbf&\x8f;\x0e\xfa\xc0\xa0\xfb\x804ug1^B\xe2!=\xce\x88\x8c\xa75\xa0}\xc0v_O\xb7\r\xee4\xe1\xe8\x1fK\x18ex\x95\x93H\xb4\x93l\xf2\x1c\xcdD\x86YA`.k\xbc\xff\xf0y\xb4\xccn\x07\x01\xbd\xb0iYw\xa8D\xd9\x08>\xdf\x1c.i\x92\xb1\xc0\x1e\xdeYSOO\xdb_\x17\xb4\x83\x90\xa0\xa4\xad(-\x8c7p\xd4\xa2C\xa9\xec\xe5Q9~\x11\xee\x94\x86\x12w\xc0z\x08\xa4\xa6\xc3\x9a\x94R\x96\x13\x0e6p#\xe0\xde\xae\xd0%\xd7\xcd\x997\xd1\xdd\xb9\xba\xd5\xbb\xc9S\xd8\xd7\r\xbb\xf0\xcd\xf2C\xcfr\x88\x18&\xc0\x92\x94\xfa\x161\xa6\x95\xa3#\x94\x1ct\xf2\xe2\xf9\xb7@\x1c\xbc\xa2\xf7L\xf9\xae \x02X\x8a\x1a\xbcB_&\xcb\x84H,\xd7\xfa\x18\'1}g\xe7hx\xe8\x0e\t>\\\xedV^\xa7\xd0]\xc4\x11`\x1am:wg\xea\\\xa58\xbf\x9f\x12m\xa6\x16\xfdO\xed\xebH\x7f\x13\xb0\xe0\xb6iu\xc9\xceV\x04\x1c\xa1\x07\x96\x05\xe3\xa6h\x02\xabW\xb5\x11\x12s\xbf\xde\xf4\xb4\x7fI\xae\n\x8b.\xdf\xf36]\x82\x1e\x02\xedK\x1d\x9bU3@E\x9c}\x1d\xb8\xdb\xaf\x0e\x0b[\x07\x11\x120*Z\xe3\x19\xabo\xcfl\xc1\x88\x89I\x02\x12\xb2K\xcc\xe8s\x11>k$\xa7Ji\xbb\xa4If\xfe\xd4n&\xd0\xbfP\x00W3Z\xaeU\x1a\x86\xef\x7f\xca4\xa3 \xa1\x91Q\x9c\xa0\x91\x88M\xc9\xa9[\xa4\x18(\xf5,\xcc\xe8|\x91\xa1\xc8*%]\xb3\xb3\xf4\x06\xd7\x81DU\xe7\x94\x07\x03\xb3\x9bse\xed\x91Z\x98\xab\x11\xee\xab\xf7w\xb5w\xe0\xcdsO\xee.M\xeb$\xb6\x1c\xae\xa3\x97G\xe2\x06\x14\xf9\x0c\xc9\xa6U\xa3V\x82\xad(6\x14\xb9\xa6\x88b\xe1\\\xd6S\xf0\x97\xb6E\x80\xec\xc9R\xc1\x9b\xd45:\x1e\xd0\xd2\x93\xac\x1fW\xc3\x97}z\xceo\xd0\xcb\xe5x\x103Q\xaa\xf9 \'\x86\xad\x9eM\xa41\x18\xcef\x96yY\xe4\xf3\x8a\xddb\xca\x16[\xe9t~;\x11\xef\x1b\x0c\x17\xd3\xc4y)\x8e\x87\xecc\x00\xe4X\xba\xc7\xaa\x04\\l\xb4\xed\x91\xdf#\x87Ct:#\x86V\x1a\xa9\xfb\xe9\xfa@G\xd4o_!\xb9\xde+\xd4o\xf2\x96\x97\x02\xc6r6\xf2\x10\xb1\x07\xd8)\xa2=5\xfbg\xd5\xceu\xfbG\xb98\x96\xf6\xd3\xb2\xdc\xb0\x99\xf1=\xae\x1d\x91O\xfa5\xdf\xbc\xc6\xc8\xbf2\x14\xec!\x9c\xe7\x9a\x91)\xa9\xdeB]z?\x148\x1fg\x93\xb8\xb65\ns\x94\x87\xcf\xf0\xad&\xad\xae\x9a\t\x8c\x12\x8fh\rhNeS\x1bq\xce\xc8\x06\xac\x19!\x19\xff\x01\xdf<\\\xa6;\xe7\xaf)+\x017h\x17\x9b\xfd\xd7\xcc\xad\xc7\x9b\xe7\x82[JH\x131\x86\x03\xb4s\xfc\xe3. \tl9\x03\x9b\x9f\xe0\x1b"\xec\x8c\xff\x97\xa1\x01\xfe\xa9\xfd\x16\xbaKn\xb3\xbdp\x08{\xf7\x93\xfe\xf8\xedm\xec\xbb\x9aU\xe2k\xdcB\xb8\x00\xe4\xe6\xd4A\xa5\x11\xfa\x7f\xff\x01\x13\xe6\x06(?\x9f\xfa\xdf\x05\xc2\xe4\xf1!\xebZ\x9e\xf0q$\xe5[G9\xa2e\xa8\x19\xad\x82K?\xc8\xeeX)\xe0qS\x91F<r`\x19Z\xa7l\xb5\x17I{\xf2b9\x1c\xb8\xe7k\x1bi\xcd\x93A\x0f\xc4\xfb\xce\x13\x16rt0\x8a\xba\x15\x00[\x94\x04\xbd-zS\xde\xfd\x9f\xadk%\xda\xa3\xb5V\xb4\xfc\xf4U\x01\xae6\x1c\x15\xf7\x97\xb7\xf6;\xc6c#\x03\xc5\xabS3\xe26\x00\xa2\xff\xe2$\x10\xce\x15\xbc\x06\xa8\xd8p\x10\xe7\xbc\xady8\x8f@\xddV|\xdc}\xea\x8a-\xb3\xa4\xbb\xb0j\\c\xb1`m\x1a\xa3-i8\x1b\xb6\x12\xbb\xf6\xe8\xc5l\xf8\xc0\xc2GFT\xb6\xe2\xa8\x94\xed?eKO\xd7G\xf8{\xa1$q\xaaVX\x8d\xee\x00\xcdQ7Itr7\x9b\x1f\xcf\x1a\xe4\xd8\xbc\xd4OC\xfa\xc4\xdew\xb3\xdfssQ.b\x8dx\xdc\xcb\xa7$a\xb0"\xe3%b\x05\x91:q\xfc\xf9\xa7+\xca<\x14{\x1c\x81\xda\x0c\xa0\xa25 \x87\xd2\x07Y\x00\x03,\xfaX3)H\xb9Fd\xf4%\xfe\x84\x1a\xca/\xbd\xf6A\xf8\x95\x00\x15Z\xde\xe2\x03\xf1|l\x9e\xe39\x07\xbe\x90\x00}\x89D\x87L\xb0O\x0b)\xb1"c\x19\x84\x8e\x93\xaaCW\xde\x03K\xa1\xa6\x06\x1fE\x07\x0b\xaf`\xb2\x854\xab!\x92c5\xb4Dv\xe6iu(8r\x9a\xaaR\xa1\x1b\t\xb3\xcd\x893m\x02e\xdaHY\xd9{U\x02\x99O|s7\x18\xc6e\xdcU\xf3V\t\xd9\x01y6=Qn\x9cl \x12\x94\x82(\rp\xee\xa8\x9d\xf2\x12d\xb2P\xfb&u\x97\xf3O\x009\xb7\x0b\x8f}\xe3\xd5Tm\x80iF\x19\xf2\xaa\xd0v=7\nOs7)h\xa4\xc2\x9f\xe9\xd1\x91\xc1i\x95\xd6\xf7\x07k\x9ds1\xcf\x99\xceg\x80\xa5\xc6\x9c\x92^\xa26\x1e[n\xde\xb2\xf8\x1c.\x9a\xd9\x8e\xf6\x88\x84\xd1\x16t\xaa\x88\xb3H\xa8\\\xe1).*\x8f\xc5&\x8f\xc8\x16M\xbfY\xb8\x90"Pa\xd5\x10\xdez\x12\xc3\xb7*\xa8\xd2\xb2\xacXN\xee\xb9p\xfb\xea\xff\xee.\x0f\xa2\xf4F\xee\xd9)\xdc\xce\xce\xb5O\x0e\xb3At\xec\x95\x11+\xd25|xcr\xc3|\x85T^\xcd=W\xe3\x1dZ\xbd\xe3\xd4\x9a\xc7\xf2\xd7\xa8\r"\x9d7\xa0\xc1\xb8\xd4\x1a$\xb7\x8evI\'%"\x84\x89\x91\x02~\xf2Z\x82\xecV\x10\xd9(\xfbV\x89\r\xbap\xbf\xac\x96\xdd>\x82c\x08\x0c\xc4g\x1c<\xa3p\x84\xa5f\xa3r\x1a\xe5MK\xd2s\xa6\x1d\x9e1\xd7)0{\xb6=\xe7\xb3\x94*\xfc7\xa9x0_\x99:.\xbd\xf7\xcfh\xa0\x13\xc7Bu\xb2\xac(\xfe-z\xdc\xe4\xb9z\xc2j\x8eC6\x83\x80q~\xc1~\xd0K]F\'\x8erv\x02e\x1e\x1b\xdb\x0e\x08\xff\x94xV\x0e@\xf7\x02\x98\xe1\x82X\xdd\nK\xf1\xe0\xe2R\x88\x18\xef\x99\x07\\&\x87\x07\t\xe6\x82\x84\xdf\x94\x80\x8aV\xe6\xed\xef\x7f\x7flV&\xdf}+v\xa45\xa9,\xf2g\xa7k\x8d\r\xef\xe5\x94C\xe5\x17\x18r\xd7$8\xc9\xd4\'\xd4\xfa\xbc\xce\x9a\xce\xa5z\x9aB\xdf\xb7,\xd5|\x8c\xb32x\xef\x1e/@5\x08\xd6\xabW\xd1 \xe9\x95`\xaa\x17\xbc\r\x0e\x91$\x15\xe9\xe4\x1c\t\xf5\xb0\xcbc\xd9R\xbd\x17\x1b\xeak:\x0f9E,\xfbr\xaaJ\x82\xda~Y?d1\xb3\xdaH\x9e\xafNJ\x99\x9di\x86\x0c\xbf}\xacx\x95\xcat\xc3\x1c\x8d+\xd6EGf\xda\x18,\xb7\xde6\xa4\xc35!\xe8\x8e\xe4\xa9\xf2<\xf2\xc8\x12\xadf\xa2\xb7b\x8f\xe3:\xf4\xa6\xb8b\x8fBLUwE\x9f\x07\xe6C6\xce\x0b\xe6S_k Ha]\xc5\xb8\x03\xe4\x1a\x17B\xe7\x92\xd2\x1a\xf2\xd8\xf7\x08HX\x96U=\x8fBc\xba\xd4~\x10;\xd9\x89\xf5\xc2sv\xaaq\x07\xb4\xb5LOk\xfb\xec(\xc0T\xe2H\xe6F\xdd\xf4\x99\xed3\x87\xd9\x14EE\x9e\xbej\x1a\x07\xd7\xaf\xacik|\t\xf5f\xa2/\r\x98K.\xd5\x92\xa7\x9e\t\xe9\x10\xfa\xdd\xea0\x9e\x8a\xf7\x08\xcfN\xaf\x03\xb4]d\xfb$\xee\xdd\xb2\x0f\x97D*\xbe~\x07\x9e\xc4\x06\xa8><U\xaf\xacd[\xb1\xe9\xa5\x82#\xdb\x1a\xcdd\xe0\xe9\xaa\xa2b#\n\xd9F\x89\xc1e\xccb\xc3+_|\xf9\x8b\xa8\xd7\xe1\x85Vh\x8d\xe9\x97\xa0\xca\xd6\xb8\x0f<\x0b\x1a\xb3\xb1\xaf\xfd\xb0\xe2\x8c\x93\x19*\x18@\x05\x82\t\xf4\xdf\x8e\x03\xd8\xc0;\xb3\x89\xc9U\x98\xd7 \x16\x03\x14m\xb0\xfd\xa9\xeb\xba\x82\xc2G\x13\xe2\xf6\x9c\xbe{\xd9z\x9a\x1a\xf1\x98\xc2\xf8\x9b\r:\xfar,\xea\x93\xdc\xe4gbt\x9a\xe9\xfe\xcc`\xfe0\x04\xb7\x80\xfb@m\x1eS\xc6&\xdbh\xbe\xb8R\xf1T\x18\x9a\xfd1\x16?#\xd9\x98=\xbb\x9c]j\xb9\xa3\xb0-\xf6\x1c{\x01S\x1d`\xbf\xee\xb1I\xbc\xf9\xbcl\x051\x91\xdax\x9b\xb3\x91\x14+\xf8|\'o\xa8;\xc6~\xd53\xd9\x00rR\x86\xadIb\xd8M\xe9\x8a:#K\x98?\xee\x9a9\x84xE\x10`_x\xee\tf\xf9\xb5p#\xe7c\x8d\xd1\xcf\xb4\xe1\x90ZfU\xa6\xde\x11H\xc4\xb8\x19\xb9\xa8\xc6B\x11\x04\x19\xa2Y\x13\x97\xc1\x131\xe0Q\xae\x04kg\xd9\xe5\xc2\xe7\xaeF\x0cq\xfa\xeb|\xf7r=\xeb\x00e\x86\xd5\'~\xc8j\x0cf[\\S\'^m#\xc5=\x17\xbe#!\xc7\xf7W(\xf7\x08\xd9\xea\xdf0\x1f\x9b\x13\x1c\xfc\xc3\xff\xd5\xb9\xf0\xeb\x02\xe7^3\n\xc4\xb54\xd4\x1eo\x04\x85\r^\xeb\x1be0\x15W\xa1'
tbI1
I0
F0
tbsS'default_instance_seed'
p756
I710416925
sbsS'label_weights'
p757
g479
sS'input_dimension'
p758
I20
sS'corruption'
p759
F0.29999999999999999
sS'weights'
p760
g348
sS'train_model_once'
p761
g394
(g395
((dp762
g397
Nsg398
g399
sg400
I00
sg98
(lp763
g1
(g402
g3
NtRp764
(dp765
g40
g405
sg272
Nsg406
Nsg407
Nsg54
I00
sg408
I00
sg409
I00
sg410
g411
sg427
I00
sg60
I01
sbag1
(g402
g3
NtRp766
(dp767
g40
S'av'
p768
sg272
Nsg406
Nsg407
Nsg54
I00
sg408
I00
sg409
I00
sg410
g1
(g7
g3
NtRp769
(dp770
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p771
(dp772
g15
(lp773
(g17
I31
g18
S'super(MDP_DA, self).__init__(*args, **kwargs)'
tp774
a(g20
I76
g18
S'self.initialise_theano_functions()'
tp775
a(g417
I80
g418
S'action_vector = theano.tensor.ivector("av")'
tp776
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp777
asbsg28
g1
(g29
g3
NtRp778
(dp779
g32
(I00
tp780
sg34
g200
sg36
g225
sg39
I00
sg40
Nsbsg40
g768
sbsg427
I00
sg60
I01
sbag1
(g402
g3
NtRp781
(dp782
g40
S'ox'
p783
sg272
Nsg406
Nsg407
Nsg54
I00
sg408
I00
sg409
I00
sg410
g1
(g7
g3
NtRp784
(dp785
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p786
(dp787
g15
(lp788
(g17
I31
g18
S'super(MDP_DA, self).__init__(*args, **kwargs)'
tp789
a(g20
I76
g18
S'self.initialise_theano_functions()'
tp790
a(g417
I79
g418
S'output_vector = theano.tensor.dvector("ox")'
tp791
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp792
asbsg28
g30
sg40
g783
sbsg427
I00
sg60
I01
sbag1
(g402
g3
NtRp793
(dp794
g40
Nsg272
g1
(g119
g3
NtRp795
(dp796
g10
g1
(g95
g3
NtRp797
(dp798
g98
(lp799
g104
ag1
(g7
g3
NtRp800
(dp801
g10
g1
(g95
g3
NtRp802
(dp803
g98
(lp804
g1
(g7
g3
NtRp805
(dp806
g10
g1
(g95
g3
NtRp807
(dp808
g98
(lp809
g411
asg12
(itheano.gof.utils
scratchpad
p810
(dp811
g15
g137
sbsg147
(lp812
g805
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p813
(dp814
g15
g157
sbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p815
(dp816
g15
g171
sbsg147
(lp817
g800
asg149
g184
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p818
(dp819
g15
g216
sbsg28
g222
sg40
Nsbag227
ag239
asg12
(itheano.gof.utils
scratchpad
p820
(dp821
g15
g249
sbsg147
(lp822
g795
ag1
(g7
g3
NtRp823
(dp824
g10
g797
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p825
(dp826
g15
g276
sbsg28
g261
sg40
Nsbasg149
g259
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p827
(dp828
g15
g266
sbsg28
g115
sg40
Nsbsg406
g106
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g104
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp829
(dp830
g40
S'W'
sg272
g1
(g7
g3
NtRp831
(dp832
g10
g1
(g95
g3
NtRp833
(dp834
g98
(lp835
g348
ag1
(g7
g3
NtRp836
(dp837
g10
g1
(g95
g3
NtRp838
(dp839
g98
(lp840
g1
(g7
g3
NtRp841
(dp842
g10
g1
(g95
g3
NtRp843
(dp844
g98
(lp845
g1
(g226
g3
NtRp846
(dp847
g11
Nsg12
(itheano.gof.utils
scratchpad
p848
(dp849
g235
Nsbsg28
g1
(g29
g3
NtRp850
(dp851
g32
(tsg34
S'float64'
p852
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp853
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p854
(dp855
g15
(lp856
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p857
I219
S'__rmul__'
p858
S'return theano.tensor.basic.mul(other, self)'
tp859
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp860
a(g219
I533
g161
S'inplace=False)(input))'
tp861
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp862
asbsg147
(lp863
g841
asg149
g1
(g373
g3
NtRp864
(dp865
g376
(lp866
sg378
(lp867
sg380
(lp868
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp869
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p870
(dp871
bsg28
g1
(g29
g3
NtRp872
(dp873
g32
(I01
I01
tp874
sg34
g852
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp875
(dp876
g10
g1
(g95
g3
NtRp877
(dp878
g98
(lp879
g1
(g7
g3
NtRp880
(dp881
g10
g1
(g95
g3
NtRp882
(dp883
g98
(lp884
g1
(g7
g3
NtRp885
(dp886
g10
g1
(g95
g3
NtRp887
(dp888
g98
(lp889
g1
(g7
g3
NtRp890
(dp891
g10
g1
(g95
g3
NtRp892
(dp893
g98
(lp894
g823
ag411
asg12
(itheano.gof.utils
scratchpad
p895
(dp896
g15
g283
sbsg147
(lp897
g890
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p898
(dp899
g15
g308
sbsg28
g313
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p900
(dp901
g15
(lp902
(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p903
I4578
S'grad'
p904
S'ygrad = dot(x.T, gz)'
tp905
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp906
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp907
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp908
asbsg147
(lp909
g885
asg149
g1
(g373
g3
NtRp910
(dp911
g376
(lp912
sg378
(lp913
I1
aI0
asg380
(lp914
sg382
g315
sg383
I00
sg384
(I1
I0
tp915
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p916
(dp917
bsg28
g1
(g29
g3
NtRp918
(dp919
g32
(I00
I00
tp920
sg34
g316
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp921
(dp922
g10
g1
(g95
g3
NtRp923
(dp924
g98
(lp925
g1
(g7
g3
NtRp926
(dp927
g10
g1
(g95
g3
NtRp928
(dp929
g98
(lp930
g1
(g7
g3
NtRp931
(dp932
g10
g1
(g95
g3
NtRp933
(dp934
g98
(lp935
g1
(g7
g3
NtRp936
(dp937
g10
g1
(g95
g3
NtRp938
(dp939
g98
(lp940
g1
(g7
g3
NtRp941
(dp942
g10
g1
(g95
g3
NtRp943
(dp944
g98
(lp945
g1
(g7
g3
NtRp946
(dp947
g10
g1
(g95
g3
NtRp948
(dp949
g98
(lp950
g1
(g7
g3
NtRp951
(dp952
g10
g1
(g95
g3
NtRp953
(dp954
g98
(lp955
g1
(g7
g3
NtRp956
(dp957
g10
g1
(g95
g3
NtRp958
(dp959
g98
(lp960
g1
(g7
g3
NtRp961
(dp962
g10
g1
(g95
g3
NtRp963
(dp964
g98
(lp965
g1
(g7
g3
NtRp966
(dp967
g10
g1
(g95
g3
NtRp968
(dp969
g98
(lp970
g1
(g7
g3
NtRp971
(dp972
g10
g1
(g95
g3
NtRp973
(dp974
g98
(lp975
g411
ag1
(g7
g3
NtRp976
(dp977
g10
g1
(g95
g3
NtRp978
(dp979
g98
(lp980
g1
(g7
g3
NtRp981
(dp982
g10
g1
(g95
g3
NtRp983
(dp984
g98
(lp985
g1
(g7
g3
NtRp986
(dp987
g10
g1
(g95
g3
NtRp988
(dp989
g98
(lp990
g1
(g7
g3
NtRp991
(dp992
g10
g1
(g95
g3
NtRp993
(dp994
g98
(lp995
g1
(g7
g3
NtRp996
(dp997
g10
g1
(g95
g3
NtRp998
(dp999
g98
(lp1000
g1
(g7
g3
NtRp1001
(dp1002
g10
g1
(g95
g3
NtRp1003
(dp1004
g98
(lp1005
g1
(g7
g3
NtRp1006
(dp1007
g10
g1
(g95
g3
NtRp1008
(dp1009
g98
(lp1010
g890
ag348
asg12
(itheano.gof.utils
scratchpad
p1011
(dp1012
g15
(lp1013
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1014
I179
S'get_reconstructed_input'
p1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1016
a(g534
I170
g535
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp1017
a(g537
I4732
g538
S'return _dot(a, b)'
tp1018
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1019
asbsg147
(lp1020
g1006
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1021
(dp1022
bsg28
g1
(g29
g3
NtRp1023
(dp1024
g32
(I00
I00
tp1025
sg34
S'float64'
p1026
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1027
(dp1028
g10
g1
(g95
g3
NtRp1029
(dp1030
g98
(lp1031
g43
asg12
(itheano.gof.utils
scratchpad
p1032
(dp1033
g15
(lp1034
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1035
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1036
a(g219
I533
g161
S'inplace=False)(input))'
tp1037
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1038
asbsg147
(lp1039
g1027
asg149
g1
(g373
g3
NtRp1040
(dp1041
g376
(lp1042
sg378
(lp1043
I0
asg380
(lp1044
I0
asg382
g58
sg383
I00
sg384
(S'x'
I0
tp1045
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1046
(dp1047
bsg28
g1
(g29
g3
NtRp1048
(dp1049
g32
(I01
I00
tp1050
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1051
(dp1052
g15
(lp1053
(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1054
a(g534
I171
g535
S'self.bias)'
tp1055
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1056
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1057
asbsg147
(lp1058
g1001
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1059
(dp1060
g15
(lp1061
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1062
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1063
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1064
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1065
asbsg28
g1
(g29
g3
NtRp1066
(dp1067
g32
(I00
I00
tp1068
sg34
S'float64'
p1069
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1070
(dp1071
g15
(lp1072
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1073
I197
S'get_cost'
p1074
S'y = self.get_reconstructed_input()'
tp1075
a(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1076
a(g534
I171
g535
S'self.bias)'
tp1077
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1078
asbsg147
(lp1079
g996
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1080
(dp1081
g15
(lp1082
(g534
I171
g535
S'self.bias)'
tp1083
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1084
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1085
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1086
asbsg28
g1
(g29
g3
NtRp1087
(dp1088
g32
(I00
I00
tp1089
sg34
S'float64'
p1090
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1091
(dp1092
g10
g1
(g95
g3
NtRp1093
(dp1094
g98
(lp1095
g348
asg12
(itheano.gof.utils
scratchpad
p1096
(dp1097
g15
g362
sbsg147
(lp1098
g1091
asg149
g374
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1099
(dp1100
bsg28
g388
sg40
g391
sbasg12
(itheano.gof.utils
scratchpad
p1101
(dp1102
g15
(lp1103
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp1104
a(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1105
a(g537
I4732
g538
S'return _dot(a, b)'
tp1106
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1107
asbsg147
(lp1108
g991
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1109
(dp1110
bsg28
g1
(g29
g3
NtRp1111
(dp1112
g32
(I00
I00
tp1113
sg34
S'float64'
p1114
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1115
(dp1116
g10
g1
(g95
g3
NtRp1117
(dp1118
g98
(lp1119
g64
asg12
(itheano.gof.utils
scratchpad
p1120
(dp1121
g15
(lp1122
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1123
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1124
a(g219
I533
g161
S'inplace=False)(input))'
tp1125
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1126
asbsg147
(lp1127
g1115
asg149
g1
(g373
g3
NtRp1128
(dp1129
g376
(lp1130
sg378
(lp1131
I0
asg380
(lp1132
I0
asg382
g73
sg383
I00
sg384
(S'x'
I0
tp1133
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1134
(dp1135
bsg28
g1
(g29
g3
NtRp1136
(dp1137
g32
(I01
I00
tp1138
sg34
g74
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1139
(dp1140
g15
(lp1141
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp1142
a(g1014
I180
g1015
S'self.reverse_bias)'
tp1143
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1144
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1145
asbsg147
(lp1146
g986
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1147
(dp1148
g15
(lp1149
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1150
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1151
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1152
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1153
asbsg28
g1
(g29
g3
NtRp1154
(dp1155
g32
(I00
I00
tp1156
sg34
S'float64'
p1157
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1158
(dp1159
g15
(lp1160
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1161
I241
S'get_updates'
p1162
S'da_cost = self.get_cost()'
tp1163
a(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp1164
a(g1014
I180
g1015
S'self.reverse_bias)'
tp1165
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1166
asbsg147
(lp1167
g981
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1168
(dp1169
g15
(lp1170
(g1014
I180
g1015
S'self.reverse_bias)'
tp1171
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1172
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1173
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1174
asbsg28
g1
(g29
g3
NtRp1175
(dp1176
g32
(I00
I00
tp1177
sg34
S'float64'
p1178
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1179
(dp1180
g15
(lp1181
(g417
I85
g418
S'updates=self.get_updates(),'
tp1182
a(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1183
a(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1184
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1185
asbsg147
(lp1186
g976
asg149
g1
(g183
g3
NtRp1187
(dp1188
g186
g293
sg188
g1
(ctheano.scalar.basic
Log
p1189
g3
NtRp1190
(dp1191
g192
g338
sg153
g154
sg40
S'log'
p1192
sbsg40
S'Elemwise{log,no_inplace}'
p1193
sg153
g154
sg206
(dp1194
sg208
(g1192
I1
I1
tp1195
sg209
(dp1196
sg304
S"base e logarithm of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1197
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1198
(dp1199
g15
(lp1200
(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1201
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1202
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1203
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1204
asbsg28
g1
(g29
g3
NtRp1205
(dp1206
g32
(I00
I00
tp1207
sg34
S'float64'
p1208
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1209
(dp1210
g15
(lp1211
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1212
a(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1213
a(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp1214
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1215
asbsg147
(lp1216
g971
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1217
(dp1218
g15
(lp1219
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp1220
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1221
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1222
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1223
asbsg28
g1
(g29
g3
NtRp1224
(dp1225
g32
(I00
I00
tp1226
sg34
S'float64'
p1227
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1228
(dp1229
g10
g1
(g95
g3
NtRp1230
(dp1231
g98
(lp1232
g1
(g7
g3
NtRp1233
(dp1234
g10
g1
(g95
g3
NtRp1235
(dp1236
g98
(lp1237
g1
(g7
g3
NtRp1238
(dp1239
g10
g1
(g95
g3
NtRp1240
(dp1241
g98
(lp1242
g227
asg12
(itheano.gof.utils
scratchpad
p1243
(dp1244
g15
(lp1245
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1246
I216
S'__rsub__'
p1247
S'return theano.tensor.basic.sub(other, self)'
tp1248
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1249
a(g219
I533
g161
S'inplace=False)(input))'
tp1250
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1251
asbsg147
(lp1252
g1238
asg149
g1
(g373
g3
NtRp1253
(dp1254
g376
(lp1255
sg378
(lp1256
sg380
(lp1257
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp1258
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1259
(dp1260
bsg28
g1
(g29
g3
NtRp1261
(dp1262
g32
(I01
I01
tp1263
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p1264
(dp1265
g15
(lp1266
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1267
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1268
a(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1269
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1270
asbsg147
(lp1271
g1233
asg149
g1
(g183
g3
NtRp1272
(dp1273
g186
g293
sg188
g1
(ctheano.scalar.basic
Sub
p1274
g3
NtRp1275
(dp1276
g192
g297
sg153
g154
sg40
S'sub'
p1277
sbsg40
S'Elemwise{sub,no_inplace}'
p1278
sg153
g154
sg206
(dp1279
sg208
(S'subtract'
p1280
I2
I1
tp1281
sg209
(dp1282
sg304
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1283
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1284
(dp1285
g15
(lp1286
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1287
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1288
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1289
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1290
asbsg28
g1
(g29
g3
NtRp1291
(dp1292
g32
(I00
I00
tp1293
sg34
S'float64'
p1294
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1295
(dp1296
g10
g1
(g95
g3
NtRp1297
(dp1298
g98
(lp1299
g1
(g7
g3
NtRp1300
(dp1301
g10
g1
(g95
g3
NtRp1302
(dp1303
g98
(lp1304
g1
(g7
g3
NtRp1305
(dp1306
g10
g1
(g95
g3
NtRp1307
(dp1308
g98
(lp1309
g227
asg12
(itheano.gof.utils
scratchpad
p1310
(dp1311
g15
(lp1312
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1313
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1314
a(g219
I533
g161
S'inplace=False)(input))'
tp1315
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1316
asbsg147
(lp1317
g1305
asg149
g1
(g373
g3
NtRp1318
(dp1319
g376
(lp1320
sg378
(lp1321
sg380
(lp1322
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp1323
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1324
(dp1325
bsg28
g1
(g29
g3
NtRp1326
(dp1327
g32
(I01
I01
tp1328
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag981
asg12
(itheano.gof.utils
scratchpad
p1329
(dp1330
g15
(lp1331
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1332
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1333
a(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1334
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1335
asbsg147
(lp1336
g1300
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1337
(dp1338
g15
(lp1339
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1340
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1341
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1342
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1343
asbsg28
g1
(g29
g3
NtRp1344
(dp1345
g32
(I00
I00
tp1346
sg34
S'float64'
p1347
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1348
(dp1349
g15
(lp1350
(g417
I85
g418
S'updates=self.get_updates(),'
tp1351
a(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1352
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1353
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1354
asbsg147
(lp1355
g1295
asg149
g1187
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1356
(dp1357
g15
(lp1358
(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1359
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1360
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1361
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1362
asbsg28
g1
(g29
g3
NtRp1363
(dp1364
g32
(I00
I00
tp1365
sg34
S'float64'
p1366
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1367
(dp1368
g15
(lp1369
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1370
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1371
a(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp1372
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1373
asbsg147
(lp1374
g1228
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1375
(dp1376
g15
(lp1377
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp1378
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1379
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1380
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1381
asbsg28
g1
(g29
g3
NtRp1382
(dp1383
g32
(I00
I00
tp1384
sg34
S'float64'
p1385
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1386
(dp1387
g15
(lp1388
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1389
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1390
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1391
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1392
asbsg147
(lp1393
g966
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1394
(dp1395
g15
(lp1396
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1397
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1398
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1399
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1400
asbsg28
g1
(g29
g3
NtRp1401
(dp1402
g32
(I00
I00
tp1403
sg34
S'float64'
p1404
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1405
(dp1406
g10
g1
(g95
g3
NtRp1407
(dp1408
g98
(lp1409
g1
(g7
g3
NtRp1410
(dp1411
g10
g1
(g95
g3
NtRp1412
(dp1413
g98
(lp1414
g1
(g7
g3
NtRp1415
(dp1416
g10
g1
(g95
g3
NtRp1417
(dp1418
g98
(lp1419
g1
(g7
g3
NtRp1420
(dp1421
g10
g1
(g95
g3
NtRp1422
(dp1423
g98
(lp1424
g1
(g7
g3
NtRp1425
(dp1426
g10
g1
(g95
g3
NtRp1427
(dp1428
g98
(lp1429
g966
asg12
(itheano.gof.utils
scratchpad
p1430
(dp1431
g15
(lp1432
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1433
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1434
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1435
I2670
S'sum'
p1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp1437
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1438
asbsg147
(lp1439
g1425
asg149
g1
(ctheano.tensor.elemwise
Sum
p1440
g3
NtRp1441
(dp1442
S'acc_dtype'
p1443
g1404
sg34
g1404
sg153
g154
sg188
g588
sS'axis'
p1444
(I1
tp1445
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1446
(dp1447
g15
(lp1448
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1449
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp1451
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1452
I1299
g161
S'broadcastable=broadcastable)()'
tp1453
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1454
asbsg28
g1
(g29
g3
NtRp1455
(dp1456
g32
(I00
tp1457
sg34
g1404
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1458
(dp1459
g15
(lp1460
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1461
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1462
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1463
I27
S'__neg__'
p1464
S'return theano.tensor.basic.neg(self)'
tp1465
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1466
asbsg147
(lp1467
g1420
asg149
g1
(g183
g3
NtRp1468
(dp1469
g186
g293
sg188
g1
(ctheano.scalar.basic
Neg
p1470
g3
NtRp1471
(dp1472
g192
ctheano.scalar.basic
same_out
p1473
sg153
g154
sg40
S'neg'
p1474
sbsg40
S'Elemwise{neg,no_inplace}'
p1475
sg153
g154
sg206
(dp1476
sg208
(S'negative'
p1477
I1
I1
tp1478
sg209
(dp1479
sg304
S"-a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1480
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1481
(dp1482
g15
(lp1483
(g1463
I27
g1464
S'return theano.tensor.basic.neg(self)'
tp1484
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1485
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1486
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1487
asbsg28
g1
(g29
g3
NtRp1488
(dp1489
g32
(I00
tp1490
sg34
g1404
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1491
(dp1492
g10
g1
(g95
g3
NtRp1493
(dp1494
g98
(lp1495
g1
(g7
g3
NtRp1496
(dp1497
g10
g1
(g95
g3
NtRp1498
(dp1499
g98
(lp1500
g1
(g7
g3
NtRp1501
(dp1502
g10
g1
(g95
g3
NtRp1503
(dp1504
g98
(lp1505
g1
(g7
g3
NtRp1506
(dp1507
g10
g1
(g95
g3
NtRp1508
(dp1509
g98
(lp1510
g1
(g7
g3
NtRp1511
(dp1512
g10
g1
(g95
g3
NtRp1513
(dp1514
g98
(lp1515
g1420
asg12
(itheano.gof.utils
scratchpad
p1516
(dp1517
g15
(lp1518
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1519
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1520
I2802
S'mean'
p1521
S'acc_dtype=acc_dtype)'
tp1522
a(g1435
I2670
g1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp1523
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1524
asbsg147
(lp1525
g1511
asg149
g1
(g1440
g3
NtRp1526
(dp1527
g1443
g1404
sg34
g1404
sg153
g154
sg188
g588
sg1444
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1528
(dp1529
g15
(lp1530
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1531
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp1532
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp1533
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1534
asbsg28
g1
(g29
g3
NtRp1535
(dp1536
g32
(tsg34
g1404
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1537
(dp1538
g10
g1
(g95
g3
NtRp1539
(dp1540
g98
(lp1541
g1
(g7
g3
NtRp1542
(dp1543
g10
g1
(g95
g3
NtRp1544
(dp1545
g98
(lp1546
g1
(g7
g3
NtRp1547
(dp1548
g10
g1
(g95
g3
NtRp1549
(dp1550
g98
(lp1551
g1420
asg12
(itheano.gof.utils
scratchpad
p1552
(dp1553
g15
(lp1554
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1555
a(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1556
a(g1520
I2803
g1521
S'shp = shape(input)'
tp1557
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1558
asbsg147
(lp1559
g1547
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1560
(dp1561
g15
(lp1562
(g1520
I2803
g1521
S'shp = shape(input)'
tp1563
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1564
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp1565
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1566
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1567
(dp1568
g15
(lp1569
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1570
a(g1520
I2811
g1521
S"shp = cast(shp, 'float64')"
tp1571
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp1572
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1573
asbsg147
(lp1574
g1542
asg149
g1
(g183
g3
NtRp1575
(dp1576
g186
g187
sg40
Nsg188
g1
(g189
g3
NtRp1577
(dp1578
g192
g1
(g193
g3
NtRp1579
(dp1580
g196
(g1
(g197
g3
NtRp1581
(dp1582
g34
g35
sbtp1583
sbsg153
g154
sg202
g1581
sg40
S'convert_to_float64'
p1584
sg204
cnumpy
float64
p1585
sbsg206
(dp1586
sg208
Nsg209
(dp1587
sg211
(lp1588
g213
asg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1589
(dp1590
g15
(lp1591
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp1592
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1593
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1594
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1595
asbsg28
g1
(g29
g3
NtRp1596
(dp1597
g32
(I00
tp1598
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1599
(dp1600
g15
(lp1601
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1602
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp1603
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1604
I407
S'__getitem__'
p1605
S'lambda entry: isinstance(entry, Variable)))'
tp1606
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1607
asbsg147
(lp1608
g1537
asg149
g1
(ctheano.tensor.subtensor
Subtensor
p1609
g3
NtRp1610
(dp1611
S'idx_list'
p1612
(cnumpy.core.multiarray
scalar
p1613
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1614
tp1615
sS'perform_cache_cdata'
p1616
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1617
(dp1618
bsg28
g1
(g29
g3
NtRp1619
(dp1620
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1621
(dp1622
g15
(lp1623
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1624
a(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1625
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp1626
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1627
asbsg147
(lp1628
g1506
asg149
g1
(g183
g3
NtRp1629
(dp1630
g186
g293
sg188
g1
(ctheano.scalar.basic
TrueDiv
p1631
g3
NtRp1632
(dp1633
g192
g297
sg153
g154
sg40
S'true_div'
p1634
sbsg40
S'Elemwise{true_div,no_inplace}'
p1635
sg153
g154
sg206
(dp1636
sg208
(S'true_divide'
p1637
I2
I1
tp1638
sg209
(dp1639
sg304
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1640
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1641
(dp1642
g15
(lp1643
(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp1644
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1645
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1646
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1647
asbsg28
g1
(g29
g3
NtRp1648
(dp1649
g32
(tsg34
S'float64'
p1650
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g226
g3
NtRp1651
(dp1652
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp1653
(I1
(tg38
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
tbsg12
(itheano.gof.utils
scratchpad
p1654
(dp1655
g235
Nsbsg28
g1
(g29
g3
NtRp1656
(dp1657
g32
(tsg34
S'float64'
p1658
sg36
g38
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p1659
(dp1660
g15
(lp1661
(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp1663
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1664
I1124
S'_float_ones_like'
p1665
S'rval = tensor.ones_like(x)'
tp1666
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1667
I2070
S'ones_like'
p1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp1669
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1670
asbsg147
(lp1671
g1501
asg149
g1
(g183
g3
NtRp1672
(dp1673
g186
g293
sg188
g1
(ctheano.scalar.basic
Second
p1674
g3
NtRp1675
(dp1676
g192
g1
(ctheano.scalar.basic
transfer_type
p1677
g3
NtRp1678
(dp1679
S'transfer'
p1680
(I1
tp1681
sbsg153
g154
sg40
S'second'
p1682
sbsg40
S'Elemwise{second,no_inplace}'
p1683
sg153
g154
sg206
(dp1684
sg208
Nsg209
(dp1685
sg304
S"Create a matrix by filling the shape of a with b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1686
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1687
(dp1688
g15
(lp1689
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp1690
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1691
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1692
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1693
asbsg28
g1
(g29
g3
NtRp1694
(dp1695
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1537
asg12
(itheano.gof.utils
scratchpad
p1696
(dp1697
g15
(lp1698
(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1700
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1701
I763
S'_bgrad'
p1702
S'ret.append(transform(scalar_igrad))'
tp1703
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1704
I755
S'transform'
p1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1706
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1707
asbsg147
(lp1708
g1496
asg149
g1
(g183
g3
NtRp1709
(dp1710
g40
Nsg188
g1632
sg206
(dp1711
sg208
Nsg209
(dp1712
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1713
(dp1714
g15
(lp1715
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1716
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1717
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1718
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1719
asbsg28
g1
(g29
g3
NtRp1720
(dp1721
g32
(tsg34
S'float64'
p1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1723
(dp1724
g15
(lp1725
(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1726
I1063
S'access_grad_cache'
p1727
S'term = access_term_cache(node)[idx]'
tp1728
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1729
I924
S'access_term_cache'
p1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1731
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1733
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1734
asbsg147
(lp1735
g1491
asg149
g1
(g373
g3
NtRp1736
(dp1737
g376
(lp1738
sg378
(lp1739
sg380
(lp1740
I0
asg382
(tsg383
I00
sg384
(S'x'
tp1741
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1742
(dp1743
bsg28
g1
(g29
g3
NtRp1744
(dp1745
g32
(I01
tp1746
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1747
(dp1748
g15
(lp1749
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp1750
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1751
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1752
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1753
asbsg147
(lp1754
g1415
asg149
g1
(g183
g3
NtRp1755
(dp1756
g40
Nsg188
g1675
sg206
(dp1757
sg208
Nsg209
(dp1758
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1759
(dp1760
g15
(lp1761
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1762
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1763
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1764
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1765
asbsg28
g1
(g29
g3
NtRp1766
(dp1767
g32
(I00
tp1768
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1769
(dp1770
g15
(lp1771
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1772
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1773
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1774
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1775
asbsg147
(lp1776
g1410
asg149
g1
(g183
g3
NtRp1777
(dp1778
g40
Nsg188
g1471
sg206
(dp1779
sg208
Nsg209
(dp1780
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1781
(dp1782
g15
(lp1783
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1784
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1785
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1786
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1787
asbsg28
g1
(g29
g3
NtRp1788
(dp1789
g32
(I00
tp1790
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1791
(dp1792
g15
(lp1793
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp1794
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1795
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1796
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1797
asbsg147
(lp1798
g1405
asg149
g1
(g373
g3
NtRp1799
(dp1800
g376
(lp1801
sg378
(lp1802
I0
asg380
(lp1803
I1
asg382
g1790
sg383
I00
sg384
(I0
S'x'
tp1804
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1805
(dp1806
bsg28
g1
(g29
g3
NtRp1807
(dp1808
g32
(I00
I01
tp1809
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1810
(dp1811
g15
(lp1812
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp1813
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1814
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1815
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1816
asbsg147
(lp1817
g961
asg149
g1
(g183
g3
NtRp1818
(dp1819
g40
Nsg188
g1675
sg206
(dp1820
sg208
Nsg209
(dp1821
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1822
(dp1823
g15
(lp1824
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1825
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1826
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1827
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1828
asbsg28
g1
(g29
g3
NtRp1829
(dp1830
g32
(I00
I00
tp1831
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p1832
(dp1833
g15
(lp1834
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1835
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1836
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1837
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1838
asbsg147
(lp1839
g956
asg149
g1
(g183
g3
NtRp1840
(dp1841
g40
Nsg188
g295
sg206
(dp1842
sg208
Nsg209
(dp1843
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1844
(dp1845
g15
(lp1846
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1847
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1848
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1849
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1850
asbsg28
g1
(g29
g3
NtRp1851
(dp1852
g32
(I00
I00
tp1853
sg34
S'float64'
p1854
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag981
asg12
(itheano.gof.utils
scratchpad
p1855
(dp1856
g15
(lp1857
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1858
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1859
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1860
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1861
asbsg147
(lp1862
g951
asg149
g1
(g183
g3
NtRp1863
(dp1864
g40
Nsg188
g1632
sg206
(dp1865
sg208
Nsg209
(dp1866
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1867
(dp1868
g15
(lp1869
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1870
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1871
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1872
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1873
asbsg28
g1
(g29
g3
NtRp1874
(dp1875
g32
(I00
I00
tp1876
sg34
S'float64'
p1877
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1878
(dp1879
g10
g1
(g95
g3
NtRp1880
(dp1881
g98
(lp1882
g1
(g7
g3
NtRp1883
(dp1884
g10
g1
(g95
g3
NtRp1885
(dp1886
g98
(lp1887
g1
(g7
g3
NtRp1888
(dp1889
g10
g1
(g95
g3
NtRp1890
(dp1891
g98
(lp1892
g961
ag1233
asg12
(itheano.gof.utils
scratchpad
p1893
(dp1894
g15
(lp1895
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1896
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1897
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1898
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1899
asbsg147
(lp1900
g1888
asg149
g1
(g183
g3
NtRp1901
(dp1902
g40
Nsg188
g295
sg206
(dp1903
sg208
Nsg209
(dp1904
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1905
(dp1906
g15
(lp1907
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1908
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1909
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1910
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1911
asbsg28
g1
(g29
g3
NtRp1912
(dp1913
g32
(I00
I00
tp1914
sg34
S'float64'
p1915
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1300
asg12
(itheano.gof.utils
scratchpad
p1916
(dp1917
g15
(lp1918
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1919
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1920
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1921
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1922
asbsg147
(lp1923
g1883
asg149
g1
(g183
g3
NtRp1924
(dp1925
g40
Nsg188
g1632
sg206
(dp1926
sg208
Nsg209
(dp1927
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1928
(dp1929
g15
(lp1930
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1931
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1932
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1933
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1934
asbsg28
g1
(g29
g3
NtRp1935
(dp1936
g32
(I00
I00
tp1937
sg34
S'float64'
p1938
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1939
(dp1940
g15
(lp1941
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1942
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1943
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1944
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1945
asbsg147
(lp1946
g1878
asg149
g1
(g183
g3
NtRp1947
(dp1948
g40
Nsg188
g1471
sg206
(dp1949
sg208
Nsg209
(dp1950
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1951
(dp1952
g15
(lp1953
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1954
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1955
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1956
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1957
asbsg28
g1
(g29
g3
NtRp1958
(dp1959
g32
(I00
I00
tp1960
sg34
g1938
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1961
(dp1962
g15
(lp1963
(g1726
I1090
g1727
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp1964
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1965
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp1966
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1967
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1968
asbsg147
(lp1969
g946
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1970
(dp1971
g15
(lp1972
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1973
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1974
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1975
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1976
asbsg28
g1
(g29
g3
NtRp1977
(dp1978
g32
(I00
I00
tp1979
sg34
S'float64'
p1980
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1981
(dp1982
g10
g1
(g95
g3
NtRp1983
(dp1984
g98
(lp1985
g986
asg12
(itheano.gof.utils
scratchpad
p1986
(dp1987
g15
(lp1988
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1989
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1990
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1991
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1992
asbsg147
(lp1993
g1981
asg149
g1
(g183
g3
NtRp1994
(dp1995
g40
Nsg188
g336
sg206
(dp1996
sg208
Nsg209
(dp1997
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1998
(dp1999
g15
(lp2000
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2001
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2002
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2003
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2004
asbsg28
g1
(g29
g3
NtRp2005
(dp2006
g32
(I00
I00
tp2007
sg34
S'float64'
p2008
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2009
(dp2010
g15
(lp2011
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2012
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2013
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2014
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2015
asbsg147
(lp2016
g941
asg149
g1
(g183
g3
NtRp2017
(dp2018
g40
Nsg188
g295
sg206
(dp2019
sg208
Nsg209
(dp2020
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2021
(dp2022
g15
(lp2023
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2024
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2025
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2026
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2027
asbsg28
g1
(g29
g3
NtRp2028
(dp2029
g32
(I00
I00
tp2030
sg34
S'float64'
p2031
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2032
(dp2033
g10
g1
(g95
g3
NtRp2034
(dp2035
g98
(lp2036
g1
(g7
g3
NtRp2037
(dp2038
g10
g1
(g95
g3
NtRp2039
(dp2040
g98
(lp2041
g1
(g226
g3
NtRp2042
(dp2043
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp2044
(I1
(tg37
(S'f4'
I0
I1
tRp2045
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?'
tbsg12
(itheano.gof.utils
scratchpad
p2046
(dp2047
g235
Nsbsg28
g1
(g29
g3
NtRp2048
(dp2049
g32
(tsg34
S'float32'
p2050
sg36
g2045
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p2051
(dp2052
g15
(lp2053
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2054
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2055
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp2056
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2057
asbsg147
(lp2058
g2037
asg149
g1
(g373
g3
NtRp2059
(dp2060
g376
(lp2061
sg378
(lp2062
sg380
(lp2063
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp2064
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2065
(dp2066
bsg28
g1
(g29
g3
NtRp2067
(dp2068
g32
(I01
I01
tp2069
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2070
(dp2071
g10
g1
(g95
g3
NtRp2072
(dp2073
g98
(lp2074
g986
asg12
(itheano.gof.utils
scratchpad
p2075
(dp2076
g15
(lp2077
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2078
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2079
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2080
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2081
asbsg147
(lp2082
g2070
asg149
g1
(g183
g3
NtRp2083
(dp2084
g40
Nsg188
g336
sg206
(dp2085
sg208
Nsg209
(dp2086
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2087
(dp2088
g15
(lp2089
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2090
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2091
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2092
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2093
asbsg28
g1
(g29
g3
NtRp2094
(dp2095
g32
(I00
I00
tp2096
sg34
S'float64'
p2097
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2098
(dp2099
g15
(lp2100
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2101
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2102
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2103
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2104
asbsg147
(lp2105
g2032
asg149
g1
(g183
g3
NtRp2106
(dp2107
g40
Nsg188
g1275
sg206
(dp2108
sg208
Nsg209
(dp2109
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2110
(dp2111
g15
(lp2112
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2113
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2114
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2115
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2116
asbsg28
g1
(g29
g3
NtRp2117
(dp2118
g32
(I00
I00
tp2119
sg34
S'float64'
p2120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2121
(dp2122
g15
(lp2123
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2124
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2125
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2126
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2127
asbsg147
(lp2128
g936
asg149
g1
(g183
g3
NtRp2129
(dp2130
g40
Nsg188
g295
sg206
(dp2131
sg208
Nsg209
(dp2132
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2133
(dp2134
g15
(lp2135
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2136
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2137
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2138
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2139
asbsg28
g1
(g29
g3
NtRp2140
(dp2141
g32
(I00
I00
tp2142
sg34
S'float64'
p2143
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2144
(dp2145
g10
g1
(g95
g3
NtRp2146
(dp2147
g98
(lp2148
g1091
asg12
(itheano.gof.utils
scratchpad
p2149
(dp2150
g15
(lp2151
(g903
I4577
g904
S'xgrad = dot(gz, y.T)'
tp2152
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp2153
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp2154
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2155
asbsg147
(lp2156
g2144
asg149
g1
(g373
g3
NtRp2157
(dp2158
g376
(lp2159
sg378
(lp2160
I1
aI0
asg380
(lp2161
sg382
g390
sg383
I00
sg384
(I1
I0
tp2162
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2163
(dp2164
bsg28
g1
(g29
g3
NtRp2165
(dp2166
g32
(I00
I00
tp2167
sg34
g357
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T.T'
p2168
sbasg12
(itheano.gof.utils
scratchpad
p2169
(dp2170
g15
(lp2171
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2172
a(g903
I4577
g904
S'xgrad = dot(gz, y.T)'
tp2173
a(g537
I4732
g538
S'return _dot(a, b)'
tp2174
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2175
asbsg147
(lp2176
g931
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2177
(dp2178
bsg28
g1
(g29
g3
NtRp2179
(dp2180
g32
(I00
I00
tp2181
sg34
S'float64'
p2182
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2183
(dp2184
g10
g1
(g95
g3
NtRp2185
(dp2186
g98
(lp2187
g1001
asg12
(itheano.gof.utils
scratchpad
p2188
(dp2189
g15
(lp2190
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2191
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2192
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2193
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2194
asbsg147
(lp2195
g2183
asg149
g1
(g183
g3
NtRp2196
(dp2197
g40
Nsg188
g336
sg206
(dp2198
sg208
Nsg209
(dp2199
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2200
(dp2201
g15
(lp2202
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2203
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2204
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2205
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2206
asbsg28
g1
(g29
g3
NtRp2207
(dp2208
g32
(I00
I00
tp2209
sg34
S'float64'
p2210
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2211
(dp2212
g15
(lp2213
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2214
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2215
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2216
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2217
asbsg147
(lp2218
g926
asg149
g1
(g183
g3
NtRp2219
(dp2220
g40
Nsg188
g295
sg206
(dp2221
sg208
Nsg209
(dp2222
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2223
(dp2224
g15
(lp2225
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2226
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2227
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2228
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2229
asbsg28
g1
(g29
g3
NtRp2230
(dp2231
g32
(I00
I00
tp2232
sg34
S'float64'
p2233
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2234
(dp2235
g10
g1
(g95
g3
NtRp2236
(dp2237
g98
(lp2238
g1
(g7
g3
NtRp2239
(dp2240
g10
g1
(g95
g3
NtRp2241
(dp2242
g98
(lp2243
g2042
asg12
(itheano.gof.utils
scratchpad
p2244
(dp2245
g15
(lp2246
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2247
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2248
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp2249
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2250
asbsg147
(lp2251
g2239
asg149
g1
(g373
g3
NtRp2252
(dp2253
g376
(lp2254
sg378
(lp2255
sg380
(lp2256
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp2257
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2258
(dp2259
bsg28
g1
(g29
g3
NtRp2260
(dp2261
g32
(I01
I01
tp2262
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2263
(dp2264
g10
g1
(g95
g3
NtRp2265
(dp2266
g98
(lp2267
g1001
asg12
(itheano.gof.utils
scratchpad
p2268
(dp2269
g15
(lp2270
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2271
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2272
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2273
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2274
asbsg147
(lp2275
g2263
asg149
g1
(g183
g3
NtRp2276
(dp2277
g40
Nsg188
g336
sg206
(dp2278
sg208
Nsg209
(dp2279
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2280
(dp2281
g15
(lp2282
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2283
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2284
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2285
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2286
asbsg28
g1
(g29
g3
NtRp2287
(dp2288
g32
(I00
I00
tp2289
sg34
S'float64'
p2290
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2291
(dp2292
g15
(lp2293
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2294
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2295
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2296
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2297
asbsg147
(lp2298
g2234
asg149
g1
(g183
g3
NtRp2299
(dp2300
g40
Nsg188
g1275
sg206
(dp2301
sg208
Nsg209
(dp2302
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2303
(dp2304
g15
(lp2305
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2306
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2307
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2308
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2309
asbsg28
g1
(g29
g3
NtRp2310
(dp2311
g32
(I00
I00
tp2312
sg34
S'float64'
p2313
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2314
(dp2315
g15
(lp2316
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2317
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2318
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2319
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2320
asbsg147
(lp2321
g921
asg149
g1
(g183
g3
NtRp2322
(dp2323
g40
Nsg188
g295
sg206
(dp2324
sg208
Nsg209
(dp2325
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2326
(dp2327
g15
(lp2328
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2329
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2330
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2331
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2332
asbsg28
g1
(g29
g3
NtRp2333
(dp2334
g32
(I00
I00
tp2335
sg34
S'float64'
p2336
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2337
(dp2338
g15
(lp2339
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2340
a(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp2341
a(g537
I4732
g538
S'return _dot(a, b)'
tp2342
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2343
asbsg147
(lp2344
g880
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2345
(dp2346
bsg28
g1
(g29
g3
NtRp2347
(dp2348
g32
(I00
I00
tp2349
sg34
S'float64'
p2350
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2351
(dp2352
g10
g1
(g95
g3
NtRp2353
(dp2354
g98
(lp2355
g1
(g7
g3
NtRp2356
(dp2357
g10
g1
(g95
g3
NtRp2358
(dp2359
g98
(lp2360
g1
(g7
g3
NtRp2361
(dp2362
g10
g1
(g95
g3
NtRp2363
(dp2364
g98
(lp2365
g1
(g7
g3
NtRp2366
(dp2367
g10
g1
(g95
g3
NtRp2368
(dp2369
g98
(lp2370
g996
asg12
(itheano.gof.utils
scratchpad
p2371
(dp2372
g15
(lp2373
(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp2374
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp2375
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp2376
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2377
asbsg147
(lp2378
g2366
asg149
g1
(g373
g3
NtRp2379
(dp2380
g376
(lp2381
sg378
(lp2382
I1
aI0
asg380
(lp2383
sg382
g1089
sg383
I00
sg384
(I1
I0
tp2384
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2385
(dp2386
bsg28
g1
(g29
g3
NtRp2387
(dp2388
g32
(I00
I00
tp2389
sg34
g1090
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag936
asg12
(itheano.gof.utils
scratchpad
p2390
(dp2391
g15
(lp2392
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2393
a(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp2394
a(g537
I4732
g538
S'return _dot(a, b)'
tp2395
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2396
asbsg147
(lp2397
g2361
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2398
(dp2399
bsg28
g1
(g29
g3
NtRp2400
(dp2401
g32
(I00
I00
tp2402
sg34
S'float64'
p2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2404
(dp2405
g15
(lp2406
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2407
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2408
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp2410
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2411
asbsg147
(lp2412
g2356
asg149
g1
(g183
g3
NtRp2413
(dp2414
g40
Nsg188
g1
(ctheano.scalar.basic
Identity
p2415
g3
NtRp2416
(dp2417
g192
g1473
sg153
g154
sg40
S'identity'
p2418
sbsg206
(dp2419
sg208
Nsg209
(dp2420
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2421
(dp2422
g15
(lp2423
(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp2424
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2425
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2426
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2427
asbsg28
g1
(g29
g3
NtRp2428
(dp2429
g32
(I00
I00
tp2430
sg34
g2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2431
(dp2432
g15
(lp2433
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2434
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2435
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp2436
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2437
asbsg147
(lp2438
g2351
asg149
g1
(g373
g3
NtRp2439
(dp2440
g376
(lp2441
sg378
(lp2442
I1
aI0
asg380
(lp2443
sg382
g2402
sg383
I00
sg384
(I1
I0
tp2444
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2445
(dp2446
bsg28
g1
(g29
g3
NtRp2447
(dp2448
g32
(I00
I00
tp2449
sg34
g2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2450
(dp2451
g15
(lp2452
(g1726
I1090
g1727
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2453
a(g1965
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2454
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp2455
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2456
asbsg147
(lp2457
g875
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2458
(dp2459
g15
(lp2460
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp2461
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2462
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2463
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2464
asbsg28
g1
(g29
g3
NtRp2465
(dp2466
g32
(I00
I00
tp2467
sg34
S'float64'
p2468
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2469
(dp2470
g15
(lp2471
(g417
I85
g418
S'updates=self.get_updates(),'
tp2472
a(g1161
I252
g1162
S'(self.weights, self.weights - self.learning_rate*weight_gradient),'
tp2473
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp2474
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2475
asbsg147
(lp2476
g836
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2477
(dp2478
g15
(lp2479
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp2480
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2481
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2482
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2483
asbsg28
g1
(g29
g3
NtRp2484
(dp2485
g32
(I00
I00
tp2486
sg34
S'float64'
p2487
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2488
(dp2489
g15
(lp2490
(g417
I85
g418
S'updates=self.get_updates(),'
tp2491
a(g1161
I252
g1162
S'(self.weights, self.weights - self.learning_rate*weight_gradient),'
tp2492
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p2493
I136
S'__sub__'
p2494
S'return theano.tensor.basic.sub(self, other)'
tp2495
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2496
asbsg147
(lp2497
g831
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2498
(dp2499
g15
(lp2500
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp2501
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2502
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2503
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2504
asbsg28
g1
(g29
g3
NtRp2505
(dp2506
g32
(I00
I00
tp2507
sg34
S'float64'
p2508
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g350
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g348
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp2509
(dp2510
g40
S'b'
sg272
g1
(g7
g3
NtRp2511
(dp2512
g10
g1
(g95
g3
NtRp2513
(dp2514
g98
(lp2515
g43
ag1
(g7
g3
NtRp2516
(dp2517
g10
g1
(g95
g3
NtRp2518
(dp2519
g98
(lp2520
g1
(g7
g3
NtRp2521
(dp2522
g10
g1
(g95
g3
NtRp2523
(dp2524
g98
(lp2525
g1
(g226
g3
NtRp2526
(dp2527
g11
Nsg12
(itheano.gof.utils
scratchpad
p2528
(dp2529
g235
Nsbsg28
g1
(g29
g3
NtRp2530
(dp2531
g32
(tsg34
S'float64'
p2532
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp2533
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p2534
(dp2535
g15
(lp2536
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp2537
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2538
a(g219
I533
g161
S'inplace=False)(input))'
tp2539
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2540
asbsg147
(lp2541
g2521
asg149
g1
(g373
g3
NtRp2542
(dp2543
g376
(lp2544
sg378
(lp2545
sg380
(lp2546
I0
asg382
(tsg383
I00
sg384
(S'x'
tp2547
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2548
(dp2549
bsg28
g1
(g29
g3
NtRp2550
(dp2551
g32
(I01
tp2552
sg34
g2532
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2553
(dp2554
g10
g1
(g95
g3
NtRp2555
(dp2556
g98
(lp2557
g1
(g7
g3
NtRp2558
(dp2559
g10
g1
(g95
g3
NtRp2560
(dp2561
g98
(lp2562
g1
(g7
g3
NtRp2563
(dp2564
g10
g1
(g95
g3
NtRp2565
(dp2566
g98
(lp2567
g1
(g7
g3
NtRp2568
(dp2569
g10
g1
(g95
g3
NtRp2570
(dp2571
g98
(lp2572
g1
(g7
g3
NtRp2573
(dp2574
g10
g1
(g95
g3
NtRp2575
(dp2576
g98
(lp2577
g1
(g7
g3
NtRp2578
(dp2579
g10
g1
(g95
g3
NtRp2580
(dp2581
g98
(lp2582
g1
(g7
g3
NtRp2583
(dp2584
g10
g1
(g95
g3
NtRp2585
(dp2586
g98
(lp2587
g1
(g7
g3
NtRp2588
(dp2589
g10
g1
(g95
g3
NtRp2590
(dp2591
g98
(lp2592
g1
(g7
g3
NtRp2593
(dp2594
g10
g1
(g95
g3
NtRp2595
(dp2596
g98
(lp2597
g1
(g7
g3
NtRp2598
(dp2599
g10
g1
(g95
g3
NtRp2600
(dp2601
g98
(lp2602
g1
(g7
g3
NtRp2603
(dp2604
g10
g1
(g95
g3
NtRp2605
(dp2606
g98
(lp2607
g1
(g7
g3
NtRp2608
(dp2609
g10
g1
(g95
g3
NtRp2610
(dp2611
g98
(lp2612
g1
(g7
g3
NtRp2613
(dp2614
g10
g1
(g95
g3
NtRp2615
(dp2616
g98
(lp2617
g966
ag1
(g7
g3
NtRp2618
(dp2619
g10
g1
(g95
g3
NtRp2620
(dp2621
g98
(lp2622
g1
(g7
g3
NtRp2623
(dp2624
g10
g1
(g95
g3
NtRp2625
(dp2626
g98
(lp2627
g1
(g7
g3
NtRp2628
(dp2629
g10
g1
(g95
g3
NtRp2630
(dp2631
g98
(lp2632
g1420
ag1
(g7
g3
NtRp2633
(dp2634
g10
g1
(g95
g3
NtRp2635
(dp2636
g98
(lp2637
g1
(g7
g3
NtRp2638
(dp2639
g10
g1
(g95
g3
NtRp2640
(dp2641
g98
(lp2642
g1
(g7
g3
NtRp2643
(dp2644
g10
g1
(g95
g3
NtRp2645
(dp2646
g98
(lp2647
g1506
ag1651
asg12
(itheano.gof.utils
scratchpad
p2648
(dp2649
g15
(lp2650
(g1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp2651
a(g1664
I1124
g1665
S'rval = tensor.ones_like(x)'
tp2652
a(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp2653
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2654
asbsg147
(lp2655
g2643
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2656
(dp2657
g15
(lp2658
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp2659
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2660
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2661
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2662
asbsg28
g1
(g29
g3
NtRp2663
(dp2664
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1537
asg12
(itheano.gof.utils
scratchpad
p2665
(dp2666
g15
(lp2667
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2668
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2669
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2670
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2671
asbsg147
(lp2672
g2638
asg149
g1
(g183
g3
NtRp2673
(dp2674
g40
Nsg188
g1632
sg206
(dp2675
sg208
Nsg209
(dp2676
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2677
(dp2678
g15
(lp2679
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2680
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2681
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2682
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2683
asbsg28
g1
(g29
g3
NtRp2684
(dp2685
g32
(tsg34
S'float64'
p2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2687
(dp2688
g15
(lp2689
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2690
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2691
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2692
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2693
asbsg147
(lp2694
g2633
asg149
g1
(g373
g3
NtRp2695
(dp2696
g376
(lp2697
sg378
(lp2698
sg380
(lp2699
I0
asg382
(tsg383
I00
sg384
(S'x'
tp2700
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2701
(dp2702
bsg28
g1
(g29
g3
NtRp2703
(dp2704
g32
(I01
tp2705
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2706
(dp2707
g15
(lp2708
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2709
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2710
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2711
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2712
asbsg147
(lp2713
g2628
asg149
g1
(g183
g3
NtRp2714
(dp2715
g40
Nsg188
g1675
sg206
(dp2716
sg208
Nsg209
(dp2717
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2718
(dp2719
g15
(lp2720
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2721
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2722
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2723
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2724
asbsg28
g1
(g29
g3
NtRp2725
(dp2726
g32
(I00
tp2727
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2728
(dp2729
g15
(lp2730
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2731
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2732
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2733
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2734
asbsg147
(lp2735
g2623
asg149
g1
(g183
g3
NtRp2736
(dp2737
g40
Nsg188
g1471
sg206
(dp2738
sg208
Nsg209
(dp2739
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2740
(dp2741
g15
(lp2742
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2743
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2744
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2745
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2746
asbsg28
g1
(g29
g3
NtRp2747
(dp2748
g32
(I00
tp2749
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2750
(dp2751
g15
(lp2752
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2753
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2754
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2755
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2756
asbsg147
(lp2757
g2618
asg149
g1
(g373
g3
NtRp2758
(dp2759
g376
(lp2760
sg378
(lp2761
I0
asg380
(lp2762
I1
asg382
g2749
sg383
I00
sg384
(I0
S'x'
tp2763
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2764
(dp2765
bsg28
g1
(g29
g3
NtRp2766
(dp2767
g32
(I00
I01
tp2768
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2769
(dp2770
g15
(lp2771
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2772
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2773
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2774
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2775
asbsg147
(lp2776
g2613
asg149
g1
(g183
g3
NtRp2777
(dp2778
g40
Nsg188
g1675
sg206
(dp2779
sg208
Nsg209
(dp2780
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2781
(dp2782
g15
(lp2783
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2784
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2785
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2786
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2787
asbsg28
g1
(g29
g3
NtRp2788
(dp2789
g32
(I00
I00
tp2790
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p2791
(dp2792
g15
(lp2793
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2794
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2795
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2796
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2797
asbsg147
(lp2798
g2608
asg149
g1
(g183
g3
NtRp2799
(dp2800
g40
Nsg188
g295
sg206
(dp2801
sg208
Nsg209
(dp2802
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2803
(dp2804
g15
(lp2805
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2806
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2807
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2808
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2809
asbsg28
g1
(g29
g3
NtRp2810
(dp2811
g32
(I00
I00
tp2812
sg34
S'float64'
p2813
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag981
asg12
(itheano.gof.utils
scratchpad
p2814
(dp2815
g15
(lp2816
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2817
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2818
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2819
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2820
asbsg147
(lp2821
g2603
asg149
g1
(g183
g3
NtRp2822
(dp2823
g40
Nsg188
g1632
sg206
(dp2824
sg208
Nsg209
(dp2825
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2826
(dp2827
g15
(lp2828
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2829
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2830
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2831
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2832
asbsg28
g1
(g29
g3
NtRp2833
(dp2834
g32
(I00
I00
tp2835
sg34
S'float64'
p2836
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2837
(dp2838
g10
g1
(g95
g3
NtRp2839
(dp2840
g98
(lp2841
g1
(g7
g3
NtRp2842
(dp2843
g10
g1
(g95
g3
NtRp2844
(dp2845
g98
(lp2846
g1
(g7
g3
NtRp2847
(dp2848
g10
g1
(g95
g3
NtRp2849
(dp2850
g98
(lp2851
g2613
ag1233
asg12
(itheano.gof.utils
scratchpad
p2852
(dp2853
g15
(lp2854
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2855
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2856
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2857
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2858
asbsg147
(lp2859
g2847
asg149
g1
(g183
g3
NtRp2860
(dp2861
g40
Nsg188
g295
sg206
(dp2862
sg208
Nsg209
(dp2863
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2864
(dp2865
g15
(lp2866
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2867
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2868
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2869
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2870
asbsg28
g1
(g29
g3
NtRp2871
(dp2872
g32
(I00
I00
tp2873
sg34
S'float64'
p2874
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1300
asg12
(itheano.gof.utils
scratchpad
p2875
(dp2876
g15
(lp2877
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2878
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2879
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2880
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2881
asbsg147
(lp2882
g2842
asg149
g1
(g183
g3
NtRp2883
(dp2884
g40
Nsg188
g1632
sg206
(dp2885
sg208
Nsg209
(dp2886
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2887
(dp2888
g15
(lp2889
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2890
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2891
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2892
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2893
asbsg28
g1
(g29
g3
NtRp2894
(dp2895
g32
(I00
I00
tp2896
sg34
S'float64'
p2897
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2898
(dp2899
g15
(lp2900
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2901
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2902
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2903
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2904
asbsg147
(lp2905
g2837
asg149
g1
(g183
g3
NtRp2906
(dp2907
g40
Nsg188
g1471
sg206
(dp2908
sg208
Nsg209
(dp2909
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2910
(dp2911
g15
(lp2912
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2913
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2914
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2915
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2916
asbsg28
g1
(g29
g3
NtRp2917
(dp2918
g32
(I00
I00
tp2919
sg34
g2897
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2920
(dp2921
g15
(lp2922
(g1726
I1090
g1727
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2923
a(g1965
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2924
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp2925
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2926
asbsg147
(lp2927
g2598
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2928
(dp2929
g15
(lp2930
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp2931
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2932
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2933
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2934
asbsg28
g1
(g29
g3
NtRp2935
(dp2936
g32
(I00
I00
tp2937
sg34
S'float64'
p2938
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2939
(dp2940
g10
g1
(g95
g3
NtRp2941
(dp2942
g98
(lp2943
g986
asg12
(itheano.gof.utils
scratchpad
p2944
(dp2945
g15
(lp2946
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2947
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2948
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2949
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2950
asbsg147
(lp2951
g2939
asg149
g1
(g183
g3
NtRp2952
(dp2953
g40
Nsg188
g336
sg206
(dp2954
sg208
Nsg209
(dp2955
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2956
(dp2957
g15
(lp2958
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2959
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2960
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2961
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2962
asbsg28
g1
(g29
g3
NtRp2963
(dp2964
g32
(I00
I00
tp2965
sg34
S'float64'
p2966
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2967
(dp2968
g15
(lp2969
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2970
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2971
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2972
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2973
asbsg147
(lp2974
g2593
asg149
g1
(g183
g3
NtRp2975
(dp2976
g40
Nsg188
g295
sg206
(dp2977
sg208
Nsg209
(dp2978
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2979
(dp2980
g15
(lp2981
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2982
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2983
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2984
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2985
asbsg28
g1
(g29
g3
NtRp2986
(dp2987
g32
(I00
I00
tp2988
sg34
S'float64'
p2989
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2990
(dp2991
g10
g1
(g95
g3
NtRp2992
(dp2993
g98
(lp2994
g1
(g7
g3
NtRp2995
(dp2996
g10
g1
(g95
g3
NtRp2997
(dp2998
g98
(lp2999
g2042
asg12
(itheano.gof.utils
scratchpad
p3000
(dp3001
g15
(lp3002
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3003
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3004
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3005
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3006
asbsg147
(lp3007
g2995
asg149
g1
(g373
g3
NtRp3008
(dp3009
g376
(lp3010
sg378
(lp3011
sg380
(lp3012
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp3013
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3014
(dp3015
bsg28
g1
(g29
g3
NtRp3016
(dp3017
g32
(I01
I01
tp3018
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3019
(dp3020
g10
g1
(g95
g3
NtRp3021
(dp3022
g98
(lp3023
g986
asg12
(itheano.gof.utils
scratchpad
p3024
(dp3025
g15
(lp3026
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3027
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3028
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3029
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3030
asbsg147
(lp3031
g3019
asg149
g1
(g183
g3
NtRp3032
(dp3033
g40
Nsg188
g336
sg206
(dp3034
sg208
Nsg209
(dp3035
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3036
(dp3037
g15
(lp3038
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3039
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3040
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3041
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3042
asbsg28
g1
(g29
g3
NtRp3043
(dp3044
g32
(I00
I00
tp3045
sg34
S'float64'
p3046
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3047
(dp3048
g15
(lp3049
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3050
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3051
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3052
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3053
asbsg147
(lp3054
g2990
asg149
g1
(g183
g3
NtRp3055
(dp3056
g40
Nsg188
g1275
sg206
(dp3057
sg208
Nsg209
(dp3058
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3059
(dp3060
g15
(lp3061
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3062
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3063
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3064
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3065
asbsg28
g1
(g29
g3
NtRp3066
(dp3067
g32
(I00
I00
tp3068
sg34
S'float64'
p3069
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3070
(dp3071
g15
(lp3072
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3073
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3074
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3075
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3076
asbsg147
(lp3077
g2588
asg149
g1
(g183
g3
NtRp3078
(dp3079
g40
Nsg188
g295
sg206
(dp3080
sg208
Nsg209
(dp3081
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3082
(dp3083
g15
(lp3084
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3085
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3086
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3087
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3088
asbsg28
g1
(g29
g3
NtRp3089
(dp3090
g32
(I00
I00
tp3091
sg34
S'float64'
p3092
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3093
(dp3094
g10
g1
(g95
g3
NtRp3095
(dp3096
g98
(lp3097
g1091
asg12
(itheano.gof.utils
scratchpad
p3098
(dp3099
g15
(lp3100
(g903
I4577
g904
S'xgrad = dot(gz, y.T)'
tp3101
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp3102
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp3103
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3104
asbsg147
(lp3105
g3093
asg149
g1
(g373
g3
NtRp3106
(dp3107
g376
(lp3108
sg378
(lp3109
I1
aI0
asg380
(lp3110
sg382
g390
sg383
I00
sg384
(I1
I0
tp3111
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3112
(dp3113
bsg28
g1
(g29
g3
NtRp3114
(dp3115
g32
(I00
I00
tp3116
sg34
g357
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T.T'
p3117
sbasg12
(itheano.gof.utils
scratchpad
p3118
(dp3119
g15
(lp3120
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3121
a(g903
I4577
g904
S'xgrad = dot(gz, y.T)'
tp3122
a(g537
I4732
g538
S'return _dot(a, b)'
tp3123
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3124
asbsg147
(lp3125
g2583
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3126
(dp3127
bsg28
g1
(g29
g3
NtRp3128
(dp3129
g32
(I00
I00
tp3130
sg34
S'float64'
p3131
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3132
(dp3133
g10
g1
(g95
g3
NtRp3134
(dp3135
g98
(lp3136
g1001
asg12
(itheano.gof.utils
scratchpad
p3137
(dp3138
g15
(lp3139
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3140
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3141
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3142
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3143
asbsg147
(lp3144
g3132
asg149
g1
(g183
g3
NtRp3145
(dp3146
g40
Nsg188
g336
sg206
(dp3147
sg208
Nsg209
(dp3148
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3149
(dp3150
g15
(lp3151
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3152
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3153
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3154
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3155
asbsg28
g1
(g29
g3
NtRp3156
(dp3157
g32
(I00
I00
tp3158
sg34
S'float64'
p3159
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3160
(dp3161
g15
(lp3162
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3163
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3164
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3165
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3166
asbsg147
(lp3167
g2578
asg149
g1
(g183
g3
NtRp3168
(dp3169
g40
Nsg188
g295
sg206
(dp3170
sg208
Nsg209
(dp3171
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3172
(dp3173
g15
(lp3174
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3175
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3176
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3177
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3178
asbsg28
g1
(g29
g3
NtRp3179
(dp3180
g32
(I00
I00
tp3181
sg34
S'float64'
p3182
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3183
(dp3184
g10
g1
(g95
g3
NtRp3185
(dp3186
g98
(lp3187
g1
(g7
g3
NtRp3188
(dp3189
g10
g1
(g95
g3
NtRp3190
(dp3191
g98
(lp3192
g2042
asg12
(itheano.gof.utils
scratchpad
p3193
(dp3194
g15
(lp3195
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3196
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3197
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3198
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3199
asbsg147
(lp3200
g3188
asg149
g1
(g373
g3
NtRp3201
(dp3202
g376
(lp3203
sg378
(lp3204
sg380
(lp3205
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp3206
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3207
(dp3208
bsg28
g1
(g29
g3
NtRp3209
(dp3210
g32
(I01
I01
tp3211
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3212
(dp3213
g10
g1
(g95
g3
NtRp3214
(dp3215
g98
(lp3216
g1001
asg12
(itheano.gof.utils
scratchpad
p3217
(dp3218
g15
(lp3219
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3220
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3221
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3222
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3223
asbsg147
(lp3224
g3212
asg149
g1
(g183
g3
NtRp3225
(dp3226
g40
Nsg188
g336
sg206
(dp3227
sg208
Nsg209
(dp3228
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3229
(dp3230
g15
(lp3231
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3232
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3233
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3234
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3235
asbsg28
g1
(g29
g3
NtRp3236
(dp3237
g32
(I00
I00
tp3238
sg34
S'float64'
p3239
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3240
(dp3241
g15
(lp3242
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3243
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3244
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3245
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3246
asbsg147
(lp3247
g3183
asg149
g1
(g183
g3
NtRp3248
(dp3249
g40
Nsg188
g1275
sg206
(dp3250
sg208
Nsg209
(dp3251
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3252
(dp3253
g15
(lp3254
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3255
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3256
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3257
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3258
asbsg28
g1
(g29
g3
NtRp3259
(dp3260
g32
(I00
I00
tp3261
sg34
S'float64'
p3262
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3263
(dp3264
g15
(lp3265
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3266
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3267
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3268
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3269
asbsg147
(lp3270
g2573
asg149
g1
(g183
g3
NtRp3271
(dp3272
g40
Nsg188
g295
sg206
(dp3273
sg208
Nsg209
(dp3274
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3275
(dp3276
g15
(lp3277
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3278
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3279
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3280
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3281
asbsg28
g1
(g29
g3
NtRp3282
(dp3283
g32
(I00
I00
tp3284
sg34
S'float64'
p3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3286
(dp3287
g15
(lp3288
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3289
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3290
a(g1699
I700
g904
S'sr = Sum(axis=to_sum)(rval[i])'
tp3291
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3292
asbsg147
(lp3293
g2568
asg149
g1
(g1440
g3
NtRp3294
(dp3295
g1443
g3285
sg34
g3285
sg153
g154
sg188
g588
sg1444
(I0
tp3296
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3297
(dp3298
g15
(lp3299
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3300
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp3301
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp3302
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3303
asbsg28
g1
(g29
g3
NtRp3304
(dp3305
g32
(I00
tp3306
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3307
(dp3308
g15
(lp3309
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3310
a(g1699
I701
g904
S'sr = sr.dimshuffle(shuffle)'
tp3311
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p3312
I324
S'dimshuffle'
p3313
S'return op(self)'
tp3314
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3315
asbsg147
(lp3316
g2563
asg149
g1
(g373
g3
NtRp3317
(dp3318
g376
(lp3319
sg378
(lp3320
I0
asg380
(lp3321
I0
asg382
(I00
tp3322
sg383
I00
sg384
(S'x'
I0
tp3323
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3324
(dp3325
bsg28
g1
(g29
g3
NtRp3326
(dp3327
g32
(I01
I00
tp3328
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3329
(dp3330
g15
(lp3331
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3332
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3333
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp3334
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3335
asbsg147
(lp3336
g2558
asg149
g1
(g183
g3
NtRp3337
(dp3338
g40
Nsg188
g2416
sg206
(dp3339
sg208
Nsg209
(dp3340
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3341
(dp3342
g15
(lp3343
(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp3344
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3345
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3346
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3347
asbsg28
g1
(g29
g3
NtRp3348
(dp3349
g32
(I01
I00
tp3350
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3351
(dp3352
g15
(lp3353
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3354
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3355
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp3356
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3357
asbsg147
(lp3358
g2553
asg149
g1
(g373
g3
NtRp3359
(dp3360
g376
(lp3361
I0
asg378
(lp3362
I1
asg380
(lp3363
sg382
g3328
sg383
I00
sg384
(I1
tp3364
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3365
(dp3366
bsg28
g1
(g29
g3
NtRp3367
(dp3368
g32
(I00
tp3369
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3370
(dp3371
g15
(lp3372
(g417
I85
g418
S'updates=self.get_updates(),'
tp3373
a(g1161
I253
g1162
S'(self.bias, self.bias - self.learning_rate*bias_gradient),'
tp3374
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp3375
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3376
asbsg147
(lp3377
g2516
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3378
(dp3379
g15
(lp3380
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp3381
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3382
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3383
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3384
asbsg28
g1
(g29
g3
NtRp3385
(dp3386
g32
(I00
tp3387
sg34
S'float64'
p3388
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3389
(dp3390
g15
(lp3391
(g417
I85
g418
S'updates=self.get_updates(),'
tp3392
a(g1161
I253
g1162
S'(self.bias, self.bias - self.learning_rate*bias_gradient),'
tp3393
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp3394
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3395
asbsg147
(lp3396
g2511
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3397
(dp3398
g15
(lp3399
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp3400
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3401
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3402
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3403
asbsg28
g1
(g29
g3
NtRp3404
(dp3405
g32
(I00
tp3406
sg34
S'float64'
p3407
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g47
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g43
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp3408
(dp3409
g40
g68
sg272
g1
(g7
g3
NtRp3410
(dp3411
g10
g1
(g95
g3
NtRp3412
(dp3413
g98
(lp3414
g64
ag1
(g7
g3
NtRp3415
(dp3416
g10
g1
(g95
g3
NtRp3417
(dp3418
g98
(lp3419
g1
(g7
g3
NtRp3420
(dp3421
g10
g1
(g95
g3
NtRp3422
(dp3423
g98
(lp3424
g1
(g226
g3
NtRp3425
(dp3426
g11
Nsg12
(itheano.gof.utils
scratchpad
p3427
(dp3428
g235
Nsbsg28
g1
(g29
g3
NtRp3429
(dp3430
g32
(tsg34
S'float64'
p3431
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp3432
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p3433
(dp3434
g15
(lp3435
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp3436
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3437
a(g219
I533
g161
S'inplace=False)(input))'
tp3438
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3439
asbsg147
(lp3440
g3420
asg149
g1
(g373
g3
NtRp3441
(dp3442
g376
(lp3443
sg378
(lp3444
sg380
(lp3445
I0
asg382
(tsg383
I00
sg384
(S'x'
tp3446
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3447
(dp3448
bsg28
g1
(g29
g3
NtRp3449
(dp3450
g32
(I01
tp3451
sg34
g3431
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3452
(dp3453
g10
g1
(g95
g3
NtRp3454
(dp3455
g98
(lp3456
g1
(g7
g3
NtRp3457
(dp3458
g10
g1
(g95
g3
NtRp3459
(dp3460
g98
(lp3461
g1
(g7
g3
NtRp3462
(dp3463
g10
g1
(g95
g3
NtRp3464
(dp3465
g98
(lp3466
g1
(g7
g3
NtRp3467
(dp3468
g10
g1
(g95
g3
NtRp3469
(dp3470
g98
(lp3471
g1
(g7
g3
NtRp3472
(dp3473
g10
g1
(g95
g3
NtRp3474
(dp3475
g98
(lp3476
g1
(g7
g3
NtRp3477
(dp3478
g10
g1
(g95
g3
NtRp3479
(dp3480
g98
(lp3481
g1
(g7
g3
NtRp3482
(dp3483
g10
g1
(g95
g3
NtRp3484
(dp3485
g98
(lp3486
g1
(g7
g3
NtRp3487
(dp3488
g10
g1
(g95
g3
NtRp3489
(dp3490
g98
(lp3491
g1
(g7
g3
NtRp3492
(dp3493
g10
g1
(g95
g3
NtRp3494
(dp3495
g98
(lp3496
g1
(g7
g3
NtRp3497
(dp3498
g10
g1
(g95
g3
NtRp3499
(dp3500
g98
(lp3501
g966
ag1
(g7
g3
NtRp3502
(dp3503
g10
g1
(g95
g3
NtRp3504
(dp3505
g98
(lp3506
g1
(g7
g3
NtRp3507
(dp3508
g10
g1
(g95
g3
NtRp3509
(dp3510
g98
(lp3511
g1
(g7
g3
NtRp3512
(dp3513
g10
g1
(g95
g3
NtRp3514
(dp3515
g98
(lp3516
g1420
ag1
(g7
g3
NtRp3517
(dp3518
g10
g1
(g95
g3
NtRp3519
(dp3520
g98
(lp3521
g1
(g7
g3
NtRp3522
(dp3523
g10
g1
(g95
g3
NtRp3524
(dp3525
g98
(lp3526
g1
(g7
g3
NtRp3527
(dp3528
g10
g1
(g95
g3
NtRp3529
(dp3530
g98
(lp3531
g1506
ag1651
asg12
(itheano.gof.utils
scratchpad
p3532
(dp3533
g15
(lp3534
(g1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp3535
a(g1664
I1124
g1665
S'rval = tensor.ones_like(x)'
tp3536
a(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp3537
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3538
asbsg147
(lp3539
g3527
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3540
(dp3541
g15
(lp3542
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp3543
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3544
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3545
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3546
asbsg28
g1
(g29
g3
NtRp3547
(dp3548
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1537
asg12
(itheano.gof.utils
scratchpad
p3549
(dp3550
g15
(lp3551
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3552
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3553
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3554
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3555
asbsg147
(lp3556
g3522
asg149
g1
(g183
g3
NtRp3557
(dp3558
g40
Nsg188
g1632
sg206
(dp3559
sg208
Nsg209
(dp3560
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3561
(dp3562
g15
(lp3563
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3564
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3565
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3566
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3567
asbsg28
g1
(g29
g3
NtRp3568
(dp3569
g32
(tsg34
S'float64'
p3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3571
(dp3572
g15
(lp3573
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3574
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3575
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3576
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3577
asbsg147
(lp3578
g3517
asg149
g1
(g373
g3
NtRp3579
(dp3580
g376
(lp3581
sg378
(lp3582
sg380
(lp3583
I0
asg382
(tsg383
I00
sg384
(S'x'
tp3584
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3585
(dp3586
bsg28
g1
(g29
g3
NtRp3587
(dp3588
g32
(I01
tp3589
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3590
(dp3591
g15
(lp3592
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3593
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3594
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3595
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3596
asbsg147
(lp3597
g3512
asg149
g1
(g183
g3
NtRp3598
(dp3599
g40
Nsg188
g1675
sg206
(dp3600
sg208
Nsg209
(dp3601
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3602
(dp3603
g15
(lp3604
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3605
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3606
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3607
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3608
asbsg28
g1
(g29
g3
NtRp3609
(dp3610
g32
(I00
tp3611
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3612
(dp3613
g15
(lp3614
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3615
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3616
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3617
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3618
asbsg147
(lp3619
g3507
asg149
g1
(g183
g3
NtRp3620
(dp3621
g40
Nsg188
g1471
sg206
(dp3622
sg208
Nsg209
(dp3623
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3624
(dp3625
g15
(lp3626
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3627
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3628
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3629
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3630
asbsg28
g1
(g29
g3
NtRp3631
(dp3632
g32
(I00
tp3633
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3634
(dp3635
g15
(lp3636
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3637
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3638
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3639
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3640
asbsg147
(lp3641
g3502
asg149
g1
(g373
g3
NtRp3642
(dp3643
g376
(lp3644
sg378
(lp3645
I0
asg380
(lp3646
I1
asg382
g3633
sg383
I00
sg384
(I0
S'x'
tp3647
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3648
(dp3649
bsg28
g1
(g29
g3
NtRp3650
(dp3651
g32
(I00
I01
tp3652
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3653
(dp3654
g15
(lp3655
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3656
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3657
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3658
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3659
asbsg147
(lp3660
g3497
asg149
g1
(g183
g3
NtRp3661
(dp3662
g40
Nsg188
g1675
sg206
(dp3663
sg208
Nsg209
(dp3664
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3665
(dp3666
g15
(lp3667
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3668
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3669
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3670
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3671
asbsg28
g1
(g29
g3
NtRp3672
(dp3673
g32
(I00
I00
tp3674
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p3675
(dp3676
g15
(lp3677
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3678
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3679
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3680
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3681
asbsg147
(lp3682
g3492
asg149
g1
(g183
g3
NtRp3683
(dp3684
g40
Nsg188
g295
sg206
(dp3685
sg208
Nsg209
(dp3686
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3687
(dp3688
g15
(lp3689
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3690
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3691
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3692
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3693
asbsg28
g1
(g29
g3
NtRp3694
(dp3695
g32
(I00
I00
tp3696
sg34
S'float64'
p3697
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag981
asg12
(itheano.gof.utils
scratchpad
p3698
(dp3699
g15
(lp3700
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3701
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3702
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3703
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3704
asbsg147
(lp3705
g3487
asg149
g1
(g183
g3
NtRp3706
(dp3707
g40
Nsg188
g1632
sg206
(dp3708
sg208
Nsg209
(dp3709
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3710
(dp3711
g15
(lp3712
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3713
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3714
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3715
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3716
asbsg28
g1
(g29
g3
NtRp3717
(dp3718
g32
(I00
I00
tp3719
sg34
S'float64'
p3720
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3721
(dp3722
g10
g1
(g95
g3
NtRp3723
(dp3724
g98
(lp3725
g1
(g7
g3
NtRp3726
(dp3727
g10
g1
(g95
g3
NtRp3728
(dp3729
g98
(lp3730
g1
(g7
g3
NtRp3731
(dp3732
g10
g1
(g95
g3
NtRp3733
(dp3734
g98
(lp3735
g3497
ag1233
asg12
(itheano.gof.utils
scratchpad
p3736
(dp3737
g15
(lp3738
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3739
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3740
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3741
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3742
asbsg147
(lp3743
g3731
asg149
g1
(g183
g3
NtRp3744
(dp3745
g40
Nsg188
g295
sg206
(dp3746
sg208
Nsg209
(dp3747
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3748
(dp3749
g15
(lp3750
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3751
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3752
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3753
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3754
asbsg28
g1
(g29
g3
NtRp3755
(dp3756
g32
(I00
I00
tp3757
sg34
S'float64'
p3758
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1300
asg12
(itheano.gof.utils
scratchpad
p3759
(dp3760
g15
(lp3761
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3762
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3763
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3764
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3765
asbsg147
(lp3766
g3726
asg149
g1
(g183
g3
NtRp3767
(dp3768
g40
Nsg188
g1632
sg206
(dp3769
sg208
Nsg209
(dp3770
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3771
(dp3772
g15
(lp3773
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3774
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3775
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3776
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3777
asbsg28
g1
(g29
g3
NtRp3778
(dp3779
g32
(I00
I00
tp3780
sg34
S'float64'
p3781
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3782
(dp3783
g15
(lp3784
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3785
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3786
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3787
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3788
asbsg147
(lp3789
g3721
asg149
g1
(g183
g3
NtRp3790
(dp3791
g40
Nsg188
g1471
sg206
(dp3792
sg208
Nsg209
(dp3793
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3794
(dp3795
g15
(lp3796
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3797
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3798
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3799
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3800
asbsg28
g1
(g29
g3
NtRp3801
(dp3802
g32
(I00
I00
tp3803
sg34
g3781
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3804
(dp3805
g15
(lp3806
(g1726
I1090
g1727
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp3807
a(g1965
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp3808
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp3809
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3810
asbsg147
(lp3811
g3482
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3812
(dp3813
g15
(lp3814
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp3815
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3816
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3817
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3818
asbsg28
g1
(g29
g3
NtRp3819
(dp3820
g32
(I00
I00
tp3821
sg34
S'float64'
p3822
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3823
(dp3824
g10
g1
(g95
g3
NtRp3825
(dp3826
g98
(lp3827
g986
asg12
(itheano.gof.utils
scratchpad
p3828
(dp3829
g15
(lp3830
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3831
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3832
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3833
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3834
asbsg147
(lp3835
g3823
asg149
g1
(g183
g3
NtRp3836
(dp3837
g40
Nsg188
g336
sg206
(dp3838
sg208
Nsg209
(dp3839
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3840
(dp3841
g15
(lp3842
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3843
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3844
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3845
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3846
asbsg28
g1
(g29
g3
NtRp3847
(dp3848
g32
(I00
I00
tp3849
sg34
S'float64'
p3850
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3851
(dp3852
g15
(lp3853
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3854
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3855
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3856
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3857
asbsg147
(lp3858
g3477
asg149
g1
(g183
g3
NtRp3859
(dp3860
g40
Nsg188
g295
sg206
(dp3861
sg208
Nsg209
(dp3862
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3863
(dp3864
g15
(lp3865
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3866
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3867
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3868
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3869
asbsg28
g1
(g29
g3
NtRp3870
(dp3871
g32
(I00
I00
tp3872
sg34
S'float64'
p3873
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3874
(dp3875
g10
g1
(g95
g3
NtRp3876
(dp3877
g98
(lp3878
g1
(g7
g3
NtRp3879
(dp3880
g10
g1
(g95
g3
NtRp3881
(dp3882
g98
(lp3883
g2042
asg12
(itheano.gof.utils
scratchpad
p3884
(dp3885
g15
(lp3886
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3887
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3888
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3889
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3890
asbsg147
(lp3891
g3879
asg149
g1
(g373
g3
NtRp3892
(dp3893
g376
(lp3894
sg378
(lp3895
sg380
(lp3896
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp3897
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3898
(dp3899
bsg28
g1
(g29
g3
NtRp3900
(dp3901
g32
(I01
I01
tp3902
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3903
(dp3904
g10
g1
(g95
g3
NtRp3905
(dp3906
g98
(lp3907
g986
asg12
(itheano.gof.utils
scratchpad
p3908
(dp3909
g15
(lp3910
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3911
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3912
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3913
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3914
asbsg147
(lp3915
g3903
asg149
g1
(g183
g3
NtRp3916
(dp3917
g40
Nsg188
g336
sg206
(dp3918
sg208
Nsg209
(dp3919
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3920
(dp3921
g15
(lp3922
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3923
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3924
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3925
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3926
asbsg28
g1
(g29
g3
NtRp3927
(dp3928
g32
(I00
I00
tp3929
sg34
S'float64'
p3930
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3931
(dp3932
g15
(lp3933
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3934
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3935
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3936
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3937
asbsg147
(lp3938
g3874
asg149
g1
(g183
g3
NtRp3939
(dp3940
g40
Nsg188
g1275
sg206
(dp3941
sg208
Nsg209
(dp3942
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3943
(dp3944
g15
(lp3945
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3946
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3947
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3948
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3949
asbsg28
g1
(g29
g3
NtRp3950
(dp3951
g32
(I00
I00
tp3952
sg34
S'float64'
p3953
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3954
(dp3955
g15
(lp3956
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3957
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3958
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3959
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3960
asbsg147
(lp3961
g3472
asg149
g1
(g183
g3
NtRp3962
(dp3963
g40
Nsg188
g295
sg206
(dp3964
sg208
Nsg209
(dp3965
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3966
(dp3967
g15
(lp3968
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3969
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3970
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3971
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3972
asbsg28
g1
(g29
g3
NtRp3973
(dp3974
g32
(I00
I00
tp3975
sg34
S'float64'
p3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3977
(dp3978
g15
(lp3979
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3980
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3981
a(g1699
I700
g904
S'sr = Sum(axis=to_sum)(rval[i])'
tp3982
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3983
asbsg147
(lp3984
g3467
asg149
g1
(g1440
g3
NtRp3985
(dp3986
g1443
g3976
sg34
g3976
sg153
g154
sg188
g588
sg1444
(I0
tp3987
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3988
(dp3989
g15
(lp3990
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3991
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp3992
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp3993
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3994
asbsg28
g1
(g29
g3
NtRp3995
(dp3996
g32
(I00
tp3997
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3998
(dp3999
g15
(lp4000
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4001
a(g1699
I701
g904
S'sr = sr.dimshuffle(shuffle)'
tp4002
a(g3312
I324
g3313
S'return op(self)'
tp4003
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4004
asbsg147
(lp4005
g3462
asg149
g1
(g373
g3
NtRp4006
(dp4007
g376
(lp4008
sg378
(lp4009
I0
asg380
(lp4010
I0
asg382
(I00
tp4011
sg383
I00
sg384
(S'x'
I0
tp4012
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4013
(dp4014
bsg28
g1
(g29
g3
NtRp4015
(dp4016
g32
(I01
I00
tp4017
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4018
(dp4019
g15
(lp4020
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4021
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4022
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp4023
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4024
asbsg147
(lp4025
g3457
asg149
g1
(g183
g3
NtRp4026
(dp4027
g40
Nsg188
g2416
sg206
(dp4028
sg208
Nsg209
(dp4029
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4030
(dp4031
g15
(lp4032
(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp4033
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4034
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4035
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4036
asbsg28
g1
(g29
g3
NtRp4037
(dp4038
g32
(I01
I00
tp4039
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4040
(dp4041
g15
(lp4042
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4043
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4044
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp4045
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4046
asbsg147
(lp4047
g3452
asg149
g1
(g373
g3
NtRp4048
(dp4049
g376
(lp4050
I0
asg378
(lp4051
I1
asg380
(lp4052
sg382
g4017
sg383
I00
sg384
(I1
tp4053
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4054
(dp4055
bsg28
g1
(g29
g3
NtRp4056
(dp4057
g32
(I00
tp4058
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4059
(dp4060
g15
(lp4061
(g417
I85
g418
S'updates=self.get_updates(),'
tp4062
a(g1161
I255
g1162
S'self.learning_rate*reverse_bias_gradient),'
tp4063
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4064
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4065
asbsg147
(lp4066
g3415
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4067
(dp4068
g15
(lp4069
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4070
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4071
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4072
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4073
asbsg28
g1
(g29
g3
NtRp4074
(dp4075
g32
(I00
tp4076
sg34
S'float64'
p4077
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4078
(dp4079
g15
(lp4080
(g417
I85
g418
S'updates=self.get_updates(),'
tp4081
a(g1161
I255
g1162
S'self.learning_rate*reverse_bias_gradient),'
tp4082
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4083
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4084
asbsg147
(lp4085
g3410
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4086
(dp4087
g15
(lp4088
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4089
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4090
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4091
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4092
asbsg28
g1
(g29
g3
NtRp4093
(dp4094
g32
(I00
tp4095
sg34
S'float64'
p4096
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g66
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g64
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp4097
(dp4098
g40
g470
sg272
g1
(g7
g3
NtRp4099
(dp4100
g10
g1
(g95
g3
NtRp4101
(dp4102
g98
(lp4103
g479
ag1
(g7
g3
NtRp4104
(dp4105
g10
g1
(g95
g3
NtRp4106
(dp4107
g98
(lp4108
g1
(g7
g3
NtRp4109
(dp4110
g10
g1
(g95
g3
NtRp4111
(dp4112
g98
(lp4113
g1
(g226
g3
NtRp4114
(dp4115
g11
Nsg12
(itheano.gof.utils
scratchpad
p4116
(dp4117
g235
Nsbsg28
g1
(g29
g3
NtRp4118
(dp4119
g32
(tsg34
S'float64'
p4120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp4121
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p4122
(dp4123
g15
(lp4124
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4125
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4126
a(g219
I533
g161
S'inplace=False)(input))'
tp4127
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4128
asbsg147
(lp4129
g4109
asg149
g1
(g373
g3
NtRp4130
(dp4131
g376
(lp4132
sg378
(lp4133
sg380
(lp4134
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp4135
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4136
(dp4137
bsg28
g1
(g29
g3
NtRp4138
(dp4139
g32
(I01
I01
tp4140
sg34
g4120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4141
(dp4142
g10
g1
(g95
g3
NtRp4143
(dp4144
g98
(lp4145
g1
(g7
g3
NtRp4146
(dp4147
g10
g1
(g95
g3
NtRp4148
(dp4149
g98
(lp4150
g1
(g7
g3
NtRp4151
(dp4152
g10
g1
(g95
g3
NtRp4153
(dp4154
g98
(lp4155
g1
(g7
g3
NtRp4156
(dp4157
g10
g1
(g95
g3
NtRp4158
(dp4159
g98
(lp4160
g1
(g7
g3
NtRp4161
(dp4162
g10
g1
(g95
g3
NtRp4163
(dp4164
g98
(lp4165
g890
ag348
asg12
(itheano.gof.utils
scratchpad
p4166
(dp4167
g15
(lp4168
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/mdp_da.py'
p4169
I47
S'get_symbolic_expected_actual_rewards'
p4170
S'theano.tensor.dot(self.get_hidden_output(),'
tp4171
a(g534
I170
g535
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp4172
a(g537
I4732
g538
S'return _dot(a, b)'
tp4173
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4174
asbsg147
(lp4175
g4161
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4176
(dp4177
bsg28
g1
(g29
g3
NtRp4178
(dp4179
g32
(I00
I00
tp4180
sg34
S'float64'
p4181
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4182
(dp4183
g10
g1
(g95
g3
NtRp4184
(dp4185
g98
(lp4186
g43
asg12
(itheano.gof.utils
scratchpad
p4187
(dp4188
g15
(lp4189
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4190
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4191
a(g219
I533
g161
S'inplace=False)(input))'
tp4192
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4193
asbsg147
(lp4194
g4182
asg149
g1
(g373
g3
NtRp4195
(dp4196
g376
(lp4197
sg378
(lp4198
I0
asg380
(lp4199
I0
asg382
g58
sg383
I00
sg384
(S'x'
I0
tp4200
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4201
(dp4202
bsg28
g1
(g29
g3
NtRp4203
(dp4204
g32
(I01
I00
tp4205
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4206
(dp4207
g15
(lp4208
(g4169
I47
g4170
S'theano.tensor.dot(self.get_hidden_output(),'
tp4209
a(g534
I171
g535
S'self.bias)'
tp4210
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4211
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4212
asbsg147
(lp4213
g4156
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4214
(dp4215
g15
(lp4216
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4217
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4218
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4219
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4220
asbsg28
g1
(g29
g3
NtRp4221
(dp4222
g32
(I00
I00
tp4223
sg34
S'float64'
p4224
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4225
(dp4226
g15
(lp4227
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/mdp_da.py'
p4228
I58
S'get_lr_cost'
p4229
S'expected_reward = self.get_symbolic_expected_actual_rewards()['
tp4230
a(g4169
I47
g4170
S'theano.tensor.dot(self.get_hidden_output(),'
tp4231
a(g534
I171
g535
S'self.bias)'
tp4232
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4233
asbsg147
(lp4234
g4151
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4235
(dp4236
g15
(lp4237
(g534
I171
g535
S'self.bias)'
tp4238
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4239
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4240
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4241
asbsg28
g1
(g29
g3
NtRp4242
(dp4243
g32
(I00
I00
tp4244
sg34
S'float64'
p4245
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4246
(dp4247
g15
(lp4248
(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp4249
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp4250
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp4251
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4252
asbsg147
(lp4253
g4146
asg149
g1
(g373
g3
NtRp4254
(dp4255
g376
(lp4256
sg378
(lp4257
I1
aI0
asg380
(lp4258
sg382
g4244
sg383
I00
sg384
(I1
I0
tp4259
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4260
(dp4261
bsg28
g1
(g29
g3
NtRp4262
(dp4263
g32
(I00
I00
tp4264
sg34
g4245
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4265
(dp4266
g10
g1
(g95
g3
NtRp4267
(dp4268
g98
(lp4269
g1
(g7
g3
NtRp4270
(dp4271
g10
g1
(g95
g3
NtRp4272
(dp4273
g98
(lp4274
g1
(g7
g3
NtRp4275
(dp4276
g10
g1
(g95
g3
NtRp4277
(dp4278
g98
(lp4279
g1
(g7
g3
NtRp4280
(dp4281
g10
g1
(g95
g3
NtRp4282
(dp4283
g98
(lp4284
g1
(g7
g3
NtRp4285
(dp4286
g10
g1
(g95
g3
NtRp4287
(dp4288
g98
(lp4289
g1
(g7
g3
NtRp4290
(dp4291
g10
g1
(g95
g3
NtRp4292
(dp4293
g98
(lp4294
g4151
ag479
asg12
(itheano.gof.utils
scratchpad
p4295
(dp4296
g15
(lp4297
(g4228
I58
g4229
S'expected_reward = self.get_symbolic_expected_actual_rewards()['
tp4298
a(g4169
I48
g4170
S'self.label_weights) + self.label_bias)'
tp4299
a(g537
I4732
g538
S'return _dot(a, b)'
tp4300
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4301
asbsg147
(lp4302
g4290
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4303
(dp4304
bsg28
g1
(g29
g3
NtRp4305
(dp4306
g32
(I00
I00
tp4307
sg34
S'float64'
p4308
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4309
(dp4310
g10
g1
(g95
g3
NtRp4311
(dp4312
g98
(lp4313
g318
asg12
(itheano.gof.utils
scratchpad
p4314
(dp4315
g15
(lp4316
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4317
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4318
a(g219
I533
g161
S'inplace=False)(input))'
tp4319
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4320
asbsg147
(lp4321
g4309
asg149
g1
(g373
g3
NtRp4322
(dp4323
g376
(lp4324
sg378
(lp4325
I0
asg380
(lp4326
I0
asg382
g327
sg383
I00
sg384
(S'x'
I0
tp4327
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4328
(dp4329
bsg28
g1
(g29
g3
NtRp4330
(dp4331
g32
(I01
I00
tp4332
sg34
g328
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4333
(dp4334
g15
(lp4335
(g4228
I58
g4229
S'expected_reward = self.get_symbolic_expected_actual_rewards()['
tp4336
a(g4169
I48
g4170
S'self.label_weights) + self.label_bias)'
tp4337
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4338
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4339
asbsg147
(lp4340
g4285
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4341
(dp4342
g15
(lp4343
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4344
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4345
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4346
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4347
asbsg28
g1
(g29
g3
NtRp4348
(dp4349
g32
(I00
I00
tp4350
sg34
S'float64'
p4351
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4352
(dp4353
g15
(lp4354
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4355
a(g4228
I58
g4229
S'expected_reward = self.get_symbolic_expected_actual_rewards()['
tp4356
a(g4169
I48
g4170
S'self.label_weights) + self.label_bias)'
tp4357
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4358
asbsg147
(lp4359
g4280
asg149
g692
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4360
(dp4361
g15
(lp4362
(g4169
I48
g4170
S'self.label_weights) + self.label_bias)'
tp4363
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4364
a(g699
I359
g161
S'return Apply(self, [x], [x.type()])'
tp4365
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4366
asbsg28
g4348
sg40
Nsbag1
(g7
g3
NtRp4367
(dp4368
g10
g1
(g95
g3
NtRp4369
(dp4370
g98
(lp4371
g1
(g226
g3
NtRp4372
(dp4373
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp4374
(I1
(tg38
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg12
(itheano.gof.utils
scratchpad
p4375
(dp4376
g235
Nsbsg28
g1
(g29
g3
NtRp4377
(dp4378
g32
(tsg34
S'float64'
p4379
sg36
g38
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p4380
(dp4381
g15
(lp4382
(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p4383
I2079
S'zeros_like'
p4384
S'return fill(model, constant(0.0, dtype=dtype))'
tp4385
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4386
a(g219
I533
g161
S'inplace=False)(input))'
tp4387
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4388
asbsg147
(lp4389
g4367
asg149
g1
(g373
g3
NtRp4390
(dp4391
g376
(lp4392
sg378
(lp4393
sg380
(lp4394
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp4395
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4396
(dp4397
bsg28
g1
(g29
g3
NtRp4398
(dp4399
g32
(I01
I01
tp4400
sg34
g4379
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4401
(dp4402
g15
(lp4403
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4404
a(S'/Library/Python/2.7/site-packages/theano/tensor/subtensor.py'
p4405
I1824
g904
S'return [advanced_inc_subtensor(theano.tensor.zeros_like(x), gz,'
tp4406
a(g4383
I2079
g4384
S'return fill(model, constant(0.0, dtype=dtype))'
tp4407
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4408
asbsg147
(lp4409
g4275
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4410
(dp4411
g15
(lp4412
(g4383
I2079
g4384
S'return fill(model, constant(0.0, dtype=dtype))'
tp4413
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4414
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4415
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4416
asbsg28
g1
(g29
g3
NtRp4417
(dp4418
g32
(I00
I00
tp4419
sg34
g4379
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4420
(dp4421
g10
g1
(g95
g3
NtRp4422
(dp4423
g98
(lp4424
g1
(g7
g3
NtRp4425
(dp4426
g10
g1
(g95
g3
NtRp4427
(dp4428
g98
(lp4429
g1
(g7
g3
NtRp4430
(dp4431
g10
g1
(g95
g3
NtRp4432
(dp4433
g98
(lp4434
g1
(g7
g3
NtRp4435
(dp4436
g10
g1
(g95
g3
NtRp4437
(dp4438
g98
(lp4439
g1
(g7
g3
NtRp4440
(dp4441
g10
g1
(g95
g3
NtRp4442
(dp4443
g98
(lp4444
g1
(g7
g3
NtRp4445
(dp4446
g10
g1
(g95
g3
NtRp4447
(dp4448
g98
(lp4449
g784
ag1
(g7
g3
NtRp4450
(dp4451
g10
g1
(g95
g3
NtRp4452
(dp4453
g98
(lp4454
g4280
ag1
(g7
g3
NtRp4455
(dp4456
g10
g1
(g95
g3
NtRp4457
(dp4458
g98
(lp4459
g1
(g226
g3
NtRp4460
(dp4461
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp4462
(I1
(tg232
I00
S'\x00'
tbsg12
(itheano.gof.utils
scratchpad
p4463
(dp4464
g235
Nsbsg28
g1
(g29
g3
NtRp4465
(dp4466
g32
(tsg34
S'int8'
p4467
sg36
g232
sg39
I00
sg40
Nsbsbag1
(g7
g3
NtRp4468
(dp4469
g10
g1
(g95
g3
NtRp4470
(dp4471
g98
(lp4472
g1
(g7
g3
NtRp4473
(dp4474
g10
g1
(g95
g3
NtRp4475
(dp4476
g98
(lp4477
g769
asg12
(itheano.gof.utils
scratchpad
p4478
(dp4479
g15
(lp4480
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4481
a(g4228
I59
g4229
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4482
a(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp4483
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4484
asbsg147
(lp4485
g4473
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4486
(dp4487
g15
(lp4488
(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp4489
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4490
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp4491
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4492
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4493
(dp4494
g15
(lp4495
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4496
a(g4228
I59
g4229
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4497
a(g1604
I407
g1605
S'lambda entry: isinstance(entry, Variable)))'
tp4498
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4499
asbsg147
(lp4500
g4468
asg149
g1
(g1609
g3
NtRp4501
(dp4502
g1612
(g1613
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp4503
tp4504
sg1616
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4505
(dp4506
bsg28
g1
(g29
g3
NtRp4507
(dp4508
g32
(tsg34
g167
sg36
g168
sg39
I00
sg40
Nsbsg40
Nsbag227
asg12
(itheano.gof.utils
scratchpad
p4509
(dp4510
g15
(lp4511
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4512
a(g4228
I59
g4229
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4513
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p4514
I4272
S'arange'
p4515
S'return _arange[dtype](start, stop, step)'
tp4516
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4517
asbsg147
(lp4518
g4455
asg149
g1
(ctheano.tensor.basic
ARange
p4519
g3
NtRp4520
(dp4521
g34
S'int64'
p4522
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4523
(dp4524
bsg28
g1
(g29
g3
NtRp4525
(dp4526
g32
(I00
tp4527
sg34
g4522
sg36
g168
sg39
I00
sg40
Nsbsg40
Nsbag769
asg12
(itheano.gof.utils
scratchpad
p4528
(dp4529
g15
(lp4530
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4531
a(g4228
I60
g4229
S'self.action_vector]'
tp4532
a(g1604
I381
g1605
S'return theano.tensor.subtensor.AdvancedSubtensor()(self, *args)'
tp4533
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4534
asbsg147
(lp4535
g4450
asg149
g1
(ctheano.tensor.subtensor
AdvancedSubtensor
p4536
g3
NtRp4537
(dp4538
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4539
(dp4540
bsg28
g1
(g29
g3
NtRp4541
(dp4542
g32
(I00
tp4543
sg34
g4351
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4544
(dp4545
g15
(lp4546
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4547
a(g4228
I63
g4229
S'abs(actual_reward - expected_reward))'
tp4548
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4549
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4550
asbsg147
(lp4551
g4445
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4552
(dp4553
g15
(lp4554
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4555
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4556
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4557
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4558
asbsg28
g1
(g29
g3
NtRp4559
(dp4560
g32
(I00
tp4561
sg34
S'float64'
p4562
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4563
(dp4564
g15
(lp4565
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4566
a(g4228
I63
g4229
S'abs(actual_reward - expected_reward))'
tp4567
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p4568
I24
S'__abs__'
p4569
S'return theano.tensor.basic.abs_(self)'
tp4570
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4571
asbsg147
(lp4572
g4440
asg149
g1
(g183
g3
NtRp4573
(dp4574
g186
g293
sg188
g1
(ctheano.scalar.basic
Abs
p4575
g3
NtRp4576
(dp4577
g192
g1473
sg153
g154
sg40
Nsbsg40
S'Elemwise{abs_,no_inplace}'
p4578
sg153
g154
sg206
(dp4579
sg208
(S'abs'
p4580
I1
I1
tp4581
sg209
(dp4582
sg304
S"|`a`|\n\n    TensorVariable overloads the `TensorVariable.__abs__` operator so that\n    this function is called when you type abs(a).\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p4583
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4584
(dp4585
g15
(lp4586
(g4568
I24
g4569
S'return theano.tensor.basic.abs_(self)'
tp4587
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4588
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4589
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4590
asbsg28
g1
(g29
g3
NtRp4591
(dp4592
g32
(I00
tp4593
sg34
g4562
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4594
(dp4595
g10
g1
(g95
g3
NtRp4596
(dp4597
g98
(lp4598
g1
(g7
g3
NtRp4599
(dp4600
g10
g1
(g95
g3
NtRp4601
(dp4602
g98
(lp4603
g1
(g7
g3
NtRp4604
(dp4605
g10
g1
(g95
g3
NtRp4606
(dp4607
g98
(lp4608
g1
(g7
g3
NtRp4609
(dp4610
g10
g1
(g95
g3
NtRp4611
(dp4612
g98
(lp4613
g1
(g7
g3
NtRp4614
(dp4615
g10
g1
(g95
g3
NtRp4616
(dp4617
g98
(lp4618
g4440
asg12
(itheano.gof.utils
scratchpad
p4619
(dp4620
g15
(lp4621
(g4228
I63
g4229
S'abs(actual_reward - expected_reward))'
tp4622
a(g1520
I2802
g1521
S'acc_dtype=acc_dtype)'
tp4623
a(g1435
I2670
g1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp4624
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4625
asbsg147
(lp4626
g4614
asg149
g1
(g1440
g3
NtRp4627
(dp4628
g1443
g4562
sg34
g4562
sg153
g154
sg188
g588
sg1444
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4629
(dp4630
g15
(lp4631
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4632
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp4633
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp4634
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4635
asbsg28
g1
(g29
g3
NtRp4636
(dp4637
g32
(tsg34
g4562
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4638
(dp4639
g10
g1
(g95
g3
NtRp4640
(dp4641
g98
(lp4642
g1
(g7
g3
NtRp4643
(dp4644
g10
g1
(g95
g3
NtRp4645
(dp4646
g98
(lp4647
g1
(g7
g3
NtRp4648
(dp4649
g10
g1
(g95
g3
NtRp4650
(dp4651
g98
(lp4652
g4440
asg12
(itheano.gof.utils
scratchpad
p4653
(dp4654
g15
(lp4655
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4656
a(g4228
I63
g4229
S'abs(actual_reward - expected_reward))'
tp4657
a(g1520
I2803
g1521
S'shp = shape(input)'
tp4658
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4659
asbsg147
(lp4660
g4648
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4661
(dp4662
g15
(lp4663
(g1520
I2803
g1521
S'shp = shape(input)'
tp4664
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4665
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp4666
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4667
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4668
(dp4669
g15
(lp4670
(g4228
I63
g4229
S'abs(actual_reward - expected_reward))'
tp4671
a(g1520
I2811
g1521
S"shp = cast(shp, 'float64')"
tp4672
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp4673
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4674
asbsg147
(lp4675
g4643
asg149
g1575
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4676
(dp4677
g15
(lp4678
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp4679
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4680
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4681
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4682
asbsg28
g1
(g29
g3
NtRp4683
(dp4684
g32
(I00
tp4685
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4686
(dp4687
g15
(lp4688
(g4228
I63
g4229
S'abs(actual_reward - expected_reward))'
tp4689
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp4690
a(g1604
I407
g1605
S'lambda entry: isinstance(entry, Variable)))'
tp4691
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4692
asbsg147
(lp4693
g4638
asg149
g1
(g1609
g3
NtRp4694
(dp4695
g1612
(g1613
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp4696
tp4697
sg1616
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4698
(dp4699
bsg28
g1
(g29
g3
NtRp4700
(dp4701
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4702
(dp4703
g15
(lp4704
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4705
a(g4228
I63
g4229
S'abs(actual_reward - expected_reward))'
tp4706
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp4707
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4708
asbsg147
(lp4709
g4609
asg149
g1629
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4710
(dp4711
g15
(lp4712
(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp4713
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4714
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4715
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4716
asbsg28
g1
(g29
g3
NtRp4717
(dp4718
g32
(tsg34
S'float64'
p4719
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1651
asg12
(itheano.gof.utils
scratchpad
p4720
(dp4721
g15
(lp4722
(g1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp4723
a(g1664
I1124
g1665
S'rval = tensor.ones_like(x)'
tp4724
a(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp4725
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4726
asbsg147
(lp4727
g4604
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4728
(dp4729
g15
(lp4730
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp4731
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4732
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4733
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4734
asbsg28
g1
(g29
g3
NtRp4735
(dp4736
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4638
asg12
(itheano.gof.utils
scratchpad
p4737
(dp4738
g15
(lp4739
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp4740
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4741
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4742
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4743
asbsg147
(lp4744
g4599
asg149
g1
(g183
g3
NtRp4745
(dp4746
g40
Nsg188
g1632
sg206
(dp4747
sg208
Nsg209
(dp4748
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4749
(dp4750
g15
(lp4751
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4752
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4753
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4754
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4755
asbsg28
g1
(g29
g3
NtRp4756
(dp4757
g32
(tsg34
S'float64'
p4758
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4759
(dp4760
g15
(lp4761
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4762
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4763
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4764
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4765
asbsg147
(lp4766
g4594
asg149
g1
(g373
g3
NtRp4767
(dp4768
g376
(lp4769
sg378
(lp4770
sg380
(lp4771
I0
asg382
(tsg383
I00
sg384
(S'x'
tp4772
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4773
(dp4774
bsg28
g1
(g29
g3
NtRp4775
(dp4776
g32
(I01
tp4777
sg34
g4758
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4778
(dp4779
g15
(lp4780
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4781
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4782
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4783
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4784
asbsg147
(lp4785
g4435
asg149
g1
(g183
g3
NtRp4786
(dp4787
g40
Nsg188
g1675
sg206
(dp4788
sg208
Nsg209
(dp4789
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4790
(dp4791
g15
(lp4792
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4793
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4794
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4795
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4796
asbsg28
g1
(g29
g3
NtRp4797
(dp4798
g32
(I00
tp4799
sg34
g4758
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4445
asg12
(itheano.gof.utils
scratchpad
p4800
(dp4801
g15
(lp4802
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4803
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4804
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4805
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4806
asbsg147
(lp4807
g4430
asg149
g1
(g183
g3
NtRp4808
(dp4809
g40
Nsg188
g295
sg206
(dp4810
sg208
Nsg209
(dp4811
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4812
(dp4813
g15
(lp4814
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4815
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4816
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4817
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4818
asbsg28
g1
(g29
g3
NtRp4819
(dp4820
g32
(I00
tp4821
sg34
S'float64'
p4822
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4823
(dp4824
g10
g1
(g95
g3
NtRp4825
(dp4826
g98
(lp4827
g4445
asg12
(itheano.gof.utils
scratchpad
p4828
(dp4829
g15
(lp4830
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4831
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4832
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4833
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4834
asbsg147
(lp4835
g4823
asg149
g1
(g183
g3
NtRp4836
(dp4837
g40
Nsg188
g4576
sg206
(dp4838
sg208
Nsg209
(dp4839
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4840
(dp4841
g15
(lp4842
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4843
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4844
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4845
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4846
asbsg28
g1
(g29
g3
NtRp4847
(dp4848
g32
(I00
tp4849
sg34
g4562
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4850
(dp4851
g15
(lp4852
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp4853
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4854
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4855
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4856
asbsg147
(lp4857
g4425
asg149
g1
(g183
g3
NtRp4858
(dp4859
g40
Nsg188
g1632
sg206
(dp4860
sg208
Nsg209
(dp4861
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4862
(dp4863
g15
(lp4864
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4865
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4866
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4867
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4868
asbsg28
g1
(g29
g3
NtRp4869
(dp4870
g32
(I00
tp4871
sg34
S'float64'
p4872
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4873
(dp4874
g15
(lp4875
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp4876
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4877
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4878
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4879
asbsg147
(lp4880
g4420
asg149
g1
(g183
g3
NtRp4881
(dp4882
g40
Nsg188
g1471
sg206
(dp4883
sg208
Nsg209
(dp4884
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4885
(dp4886
g15
(lp4887
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4888
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4889
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4890
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4891
asbsg28
g1
(g29
g3
NtRp4892
(dp4893
g32
(I00
tp4894
sg34
g4872
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4455
ag769
asg12
(itheano.gof.utils
scratchpad
p4895
(dp4896
g15
(lp4897
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4898
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4899
a(g4405
I1825
g904
S'*rest)] + \\'
tp4900
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4901
asbsg147
(lp4902
g4270
asg149
g1
(ctheano.tensor.subtensor
AdvancedIncSubtensor
p4903
g3
NtRp4904
(dp4905
S'allow_legacy_perform'
p4906
I01
sg153
g154
sS'set_instead_of_inc'
p4907
I00
sg383
I00
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4908
(dp4909
bsg28
g1
(g29
g3
NtRp4910
(dp4911
g32
(I00
I00
tp4912
sg34
g4379
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4913
(dp4914
g10
g1
(g95
g3
NtRp4915
(dp4916
g98
(lp4917
g4285
asg12
(itheano.gof.utils
scratchpad
p4918
(dp4919
g15
(lp4920
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4921
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4922
a(S'/Library/Python/2.7/site-packages/theano/tensor/nnet/nnet.py'
p4923
I370
g904
S'sm = softmax(x)'
tp4924
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4925
asbsg147
(lp4926
g4913
asg149
g692
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4927
(dp4928
g15
(lp4929
(g4923
I370
g904
S'sm = softmax(x)'
tp4930
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4931
a(g699
I359
g161
S'return Apply(self, [x], [x.type()])'
tp4932
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4933
asbsg28
g4348
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4934
(dp4935
g15
(lp4936
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4937
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4938
a(g4923
I371
g904
S'return [softmax_grad(g_sm, sm)]'
tp4939
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4940
asbsg147
(lp4941
g4265
asg149
g1
(ctheano.tensor.nnet.nnet
SoftmaxGrad
p4942
g3
NtRp4943
(dp4944
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4945
(dp4946
bsg28
g4348
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4947
(dp4948
g15
(lp4949
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4950
a(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp4951
a(g537
I4732
g538
S'return _dot(a, b)'
tp4952
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4953
asbsg147
(lp4954
g4141
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4955
(dp4956
bsg28
g1
(g29
g3
NtRp4957
(dp4958
g32
(I00
I00
tp4959
sg34
S'float64'
p4960
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4961
(dp4962
g15
(lp4963
(g417
I85
g418
S'updates=self.get_updates(),'
tp4964
a(g1161
I257
g1162
S'self.learning_rate*lr_weight_gradient),'
tp4965
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4966
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4967
asbsg147
(lp4968
g4104
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4969
(dp4970
g15
(lp4971
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4972
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4973
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4974
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4975
asbsg28
g1
(g29
g3
NtRp4976
(dp4977
g32
(I00
I00
tp4978
sg34
S'float64'
p4979
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4980
(dp4981
g15
(lp4982
(g417
I85
g418
S'updates=self.get_updates(),'
tp4983
a(g1161
I257
g1162
S'self.learning_rate*lr_weight_gradient),'
tp4984
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4985
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4986
asbsg147
(lp4987
g4099
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4988
(dp4989
g15
(lp4990
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4991
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4992
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4993
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4994
asbsg28
g1
(g29
g3
NtRp4995
(dp4996
g32
(I00
I00
tp4997
sg34
S'float64'
p4998
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g471
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g479
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp4999
(dp5000
g40
g322
sg272
g1
(g7
g3
NtRp5001
(dp5002
g10
g1
(g95
g3
NtRp5003
(dp5004
g98
(lp5005
g318
ag1
(g7
g3
NtRp5006
(dp5007
g10
g1
(g95
g3
NtRp5008
(dp5009
g98
(lp5010
g1
(g7
g3
NtRp5011
(dp5012
g10
g1
(g95
g3
NtRp5013
(dp5014
g98
(lp5015
g1
(g226
g3
NtRp5016
(dp5017
g11
Nsg12
(itheano.gof.utils
scratchpad
p5018
(dp5019
g235
Nsbsg28
g1
(g29
g3
NtRp5020
(dp5021
g32
(tsg34
S'float64'
p5022
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp5023
(I1
(tg38
I00
S'{\x14\xaeG\xe1z\x84?'
tbsbasg12
(itheano.gof.utils
scratchpad
p5024
(dp5025
g15
(lp5026
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp5027
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5028
a(g219
I533
g161
S'inplace=False)(input))'
tp5029
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5030
asbsg147
(lp5031
g5011
asg149
g1
(g373
g3
NtRp5032
(dp5033
g376
(lp5034
sg378
(lp5035
sg380
(lp5036
I0
asg382
(tsg383
I00
sg384
(S'x'
tp5037
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5038
(dp5039
bsg28
g1
(g29
g3
NtRp5040
(dp5041
g32
(I01
tp5042
sg34
g5022
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5043
(dp5044
g10
g1
(g95
g3
NtRp5045
(dp5046
g98
(lp5047
g1
(g7
g3
NtRp5048
(dp5049
g10
g1
(g95
g3
NtRp5050
(dp5051
g98
(lp5052
g1
(g7
g3
NtRp5053
(dp5054
g10
g1
(g95
g3
NtRp5055
(dp5056
g98
(lp5057
g1
(g7
g3
NtRp5058
(dp5059
g10
g1
(g95
g3
NtRp5060
(dp5061
g98
(lp5062
g1
(g7
g3
NtRp5063
(dp5064
g10
g1
(g95
g3
NtRp5065
(dp5066
g98
(lp5067
g1
(g7
g3
NtRp5068
(dp5069
g10
g1
(g95
g3
NtRp5070
(dp5071
g98
(lp5072
g1
(g7
g3
NtRp5073
(dp5074
g10
g1
(g95
g3
NtRp5075
(dp5076
g98
(lp5077
g4280
ag1
(g7
g3
NtRp5078
(dp5079
g10
g1
(g95
g3
NtRp5080
(dp5081
g98
(lp5082
g4372
asg12
(itheano.gof.utils
scratchpad
p5083
(dp5084
g15
(lp5085
(g4383
I2079
g4384
S'return fill(model, constant(0.0, dtype=dtype))'
tp5086
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5087
a(g219
I533
g161
S'inplace=False)(input))'
tp5088
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5089
asbsg147
(lp5090
g5078
asg149
g1
(g373
g3
NtRp5091
(dp5092
g376
(lp5093
sg378
(lp5094
sg380
(lp5095
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp5096
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5097
(dp5098
bsg28
g1
(g29
g3
NtRp5099
(dp5100
g32
(I01
I01
tp5101
sg34
g4379
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5102
(dp5103
g15
(lp5104
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5105
a(g4405
I1824
g904
S'return [advanced_inc_subtensor(theano.tensor.zeros_like(x), gz,'
tp5106
a(g4383
I2079
g4384
S'return fill(model, constant(0.0, dtype=dtype))'
tp5107
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5108
asbsg147
(lp5109
g5073
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5110
(dp5111
g15
(lp5112
(g4383
I2079
g4384
S'return fill(model, constant(0.0, dtype=dtype))'
tp5113
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5114
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5115
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5116
asbsg28
g1
(g29
g3
NtRp5117
(dp5118
g32
(I00
I00
tp5119
sg34
g4379
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5120
(dp5121
g10
g1
(g95
g3
NtRp5122
(dp5123
g98
(lp5124
g1
(g7
g3
NtRp5125
(dp5126
g10
g1
(g95
g3
NtRp5127
(dp5128
g98
(lp5129
g1
(g7
g3
NtRp5130
(dp5131
g10
g1
(g95
g3
NtRp5132
(dp5133
g98
(lp5134
g1
(g7
g3
NtRp5135
(dp5136
g10
g1
(g95
g3
NtRp5137
(dp5138
g98
(lp5139
g4440
ag1
(g7
g3
NtRp5140
(dp5141
g10
g1
(g95
g3
NtRp5142
(dp5143
g98
(lp5144
g1
(g7
g3
NtRp5145
(dp5146
g10
g1
(g95
g3
NtRp5147
(dp5148
g98
(lp5149
g1
(g7
g3
NtRp5150
(dp5151
g10
g1
(g95
g3
NtRp5152
(dp5153
g98
(lp5154
g4609
ag1651
asg12
(itheano.gof.utils
scratchpad
p5155
(dp5156
g15
(lp5157
(g1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp5158
a(g1664
I1124
g1665
S'rval = tensor.ones_like(x)'
tp5159
a(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp5160
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5161
asbsg147
(lp5162
g5150
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5163
(dp5164
g15
(lp5165
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp5166
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5167
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5168
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5169
asbsg28
g1
(g29
g3
NtRp5170
(dp5171
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4638
asg12
(itheano.gof.utils
scratchpad
p5172
(dp5173
g15
(lp5174
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp5175
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5176
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5177
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5178
asbsg147
(lp5179
g5145
asg149
g1
(g183
g3
NtRp5180
(dp5181
g40
Nsg188
g1632
sg206
(dp5182
sg208
Nsg209
(dp5183
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5184
(dp5185
g15
(lp5186
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5187
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5188
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5189
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5190
asbsg28
g1
(g29
g3
NtRp5191
(dp5192
g32
(tsg34
S'float64'
p5193
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5194
(dp5195
g15
(lp5196
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5197
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5198
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5199
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5200
asbsg147
(lp5201
g5140
asg149
g1
(g373
g3
NtRp5202
(dp5203
g376
(lp5204
sg378
(lp5205
sg380
(lp5206
I0
asg382
(tsg383
I00
sg384
(S'x'
tp5207
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5208
(dp5209
bsg28
g1
(g29
g3
NtRp5210
(dp5211
g32
(I01
tp5212
sg34
g5193
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5213
(dp5214
g15
(lp5215
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5216
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5217
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5218
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5219
asbsg147
(lp5220
g5135
asg149
g1
(g183
g3
NtRp5221
(dp5222
g40
Nsg188
g1675
sg206
(dp5223
sg208
Nsg209
(dp5224
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5225
(dp5226
g15
(lp5227
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5228
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5229
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5230
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5231
asbsg28
g1
(g29
g3
NtRp5232
(dp5233
g32
(I00
tp5234
sg34
g5193
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4445
asg12
(itheano.gof.utils
scratchpad
p5235
(dp5236
g15
(lp5237
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5238
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5239
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5240
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5241
asbsg147
(lp5242
g5130
asg149
g1
(g183
g3
NtRp5243
(dp5244
g40
Nsg188
g295
sg206
(dp5245
sg208
Nsg209
(dp5246
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5247
(dp5248
g15
(lp5249
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5250
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5251
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5252
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5253
asbsg28
g1
(g29
g3
NtRp5254
(dp5255
g32
(I00
tp5256
sg34
S'float64'
p5257
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5258
(dp5259
g10
g1
(g95
g3
NtRp5260
(dp5261
g98
(lp5262
g4445
asg12
(itheano.gof.utils
scratchpad
p5263
(dp5264
g15
(lp5265
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5266
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5267
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5268
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5269
asbsg147
(lp5270
g5258
asg149
g1
(g183
g3
NtRp5271
(dp5272
g40
Nsg188
g4576
sg206
(dp5273
sg208
Nsg209
(dp5274
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5275
(dp5276
g15
(lp5277
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5278
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5279
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5280
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5281
asbsg28
g1
(g29
g3
NtRp5282
(dp5283
g32
(I00
tp5284
sg34
g4562
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5285
(dp5286
g15
(lp5287
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp5288
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5289
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5290
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5291
asbsg147
(lp5292
g5125
asg149
g1
(g183
g3
NtRp5293
(dp5294
g40
Nsg188
g1632
sg206
(dp5295
sg208
Nsg209
(dp5296
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5297
(dp5298
g15
(lp5299
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5300
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5301
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5302
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5303
asbsg28
g1
(g29
g3
NtRp5304
(dp5305
g32
(I00
tp5306
sg34
S'float64'
p5307
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5308
(dp5309
g15
(lp5310
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp5311
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5312
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5313
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5314
asbsg147
(lp5315
g5120
asg149
g1
(g183
g3
NtRp5316
(dp5317
g40
Nsg188
g1471
sg206
(dp5318
sg208
Nsg209
(dp5319
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5320
(dp5321
g15
(lp5322
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5323
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5324
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5325
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5326
asbsg28
g1
(g29
g3
NtRp5327
(dp5328
g32
(I00
tp5329
sg34
g5307
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4455
ag769
asg12
(itheano.gof.utils
scratchpad
p5330
(dp5331
g15
(lp5332
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5333
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5334
a(g4405
I1825
g904
S'*rest)] + \\'
tp5335
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5336
asbsg147
(lp5337
g5068
asg149
g1
(g4903
g3
NtRp5338
(dp5339
g4906
I01
sg153
g154
sg4907
I00
sg383
I00
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5340
(dp5341
bsg28
g1
(g29
g3
NtRp5342
(dp5343
g32
(I00
I00
tp5344
sg34
g4379
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5345
(dp5346
g10
g1
(g95
g3
NtRp5347
(dp5348
g98
(lp5349
g4285
asg12
(itheano.gof.utils
scratchpad
p5350
(dp5351
g15
(lp5352
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5353
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5354
a(g4923
I370
g904
S'sm = softmax(x)'
tp5355
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5356
asbsg147
(lp5357
g5345
asg149
g692
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5358
(dp5359
g15
(lp5360
(g4923
I370
g904
S'sm = softmax(x)'
tp5361
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5362
a(g699
I359
g161
S'return Apply(self, [x], [x.type()])'
tp5363
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5364
asbsg28
g4348
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5365
(dp5366
g15
(lp5367
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5368
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5369
a(g4923
I371
g904
S'return [softmax_grad(g_sm, sm)]'
tp5370
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5371
asbsg147
(lp5372
g5063
asg149
g4943
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5373
(dp5374
bsg28
g4348
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5375
(dp5376
g15
(lp5377
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5378
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5379
a(g1699
I700
g904
S'sr = Sum(axis=to_sum)(rval[i])'
tp5380
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5381
asbsg147
(lp5382
g5058
asg149
g1
(g1440
g3
NtRp5383
(dp5384
g1443
g4351
sg34
g4351
sg153
g154
sg188
g588
sg1444
(I0
tp5385
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5386
(dp5387
g15
(lp5388
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5389
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5390
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp5391
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5392
asbsg28
g1
(g29
g3
NtRp5393
(dp5394
g32
(I00
tp5395
sg34
g4351
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5396
(dp5397
g15
(lp5398
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5399
a(g1699
I701
g904
S'sr = sr.dimshuffle(shuffle)'
tp5400
a(g3312
I324
g3313
S'return op(self)'
tp5401
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5402
asbsg147
(lp5403
g5053
asg149
g1
(g373
g3
NtRp5404
(dp5405
g376
(lp5406
sg378
(lp5407
I0
asg380
(lp5408
I0
asg382
(I00
tp5409
sg383
I00
sg384
(S'x'
I0
tp5410
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5411
(dp5412
bsg28
g1
(g29
g3
NtRp5413
(dp5414
g32
(I01
I00
tp5415
sg34
g4351
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5416
(dp5417
g15
(lp5418
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5419
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5420
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp5421
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5422
asbsg147
(lp5423
g5048
asg149
g1
(g183
g3
NtRp5424
(dp5425
g40
Nsg188
g2416
sg206
(dp5426
sg208
Nsg209
(dp5427
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5428
(dp5429
g15
(lp5430
(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp5431
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5432
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5433
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5434
asbsg28
g1
(g29
g3
NtRp5435
(dp5436
g32
(I01
I00
tp5437
sg34
g4351
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5438
(dp5439
g15
(lp5440
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5441
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5442
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp5443
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5444
asbsg147
(lp5445
g5043
asg149
g1
(g373
g3
NtRp5446
(dp5447
g376
(lp5448
I0
asg378
(lp5449
I1
asg380
(lp5450
sg382
g5415
sg383
I00
sg384
(I1
tp5451
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5452
(dp5453
bsg28
g1
(g29
g3
NtRp5454
(dp5455
g32
(I00
tp5456
sg34
g4351
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5457
(dp5458
g15
(lp5459
(g417
I85
g418
S'updates=self.get_updates(),'
tp5460
a(g1161
I259
g1162
S'self.learning_rate*lr_bias_gradient)]'
tp5461
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp5462
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5463
asbsg147
(lp5464
g5006
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5465
(dp5466
g15
(lp5467
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp5468
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5469
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5470
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5471
asbsg28
g1
(g29
g3
NtRp5472
(dp5473
g32
(I00
tp5474
sg34
S'float64'
p5475
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5476
(dp5477
g15
(lp5478
(g417
I85
g418
S'updates=self.get_updates(),'
tp5479
a(g1161
I259
g1162
S'self.learning_rate*lr_bias_gradient)]'
tp5480
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp5481
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5482
asbsg147
(lp5483
g5001
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5484
(dp5485
g15
(lp5486
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp5487
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5488
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5489
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5490
asbsg28
g1
(g29
g3
NtRp5491
(dp5492
g32
(I00
tp5493
sg34
S'float64'
p5494
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g320
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g318
sg427
I01
sg60
Nsbasg147
g1
(g485
g3
NtRp5495
(dp5496
g410
g1
(g7
g3
NtRp5497
(dp5498
g10
g1
(g95
g3
NtRp5499
(dp5500
g98
(lp5501
g1
(g7
g3
NtRp5502
(dp5503
g10
g1
(g95
g3
NtRp5504
(dp5505
g98
(lp5506
g1
(g7
g3
NtRp5507
(dp5508
g10
g1
(g95
g3
NtRp5509
(dp5510
g98
(lp5511
g1
(g7
g3
NtRp5512
(dp5513
g10
g1
(g95
g3
NtRp5514
(dp5515
g98
(lp5516
g1
(g7
g3
NtRp5517
(dp5518
g10
g1
(g95
g3
NtRp5519
(dp5520
g98
(lp5521
g1
(g7
g3
NtRp5522
(dp5523
g10
g1
(g95
g3
NtRp5524
(dp5525
g98
(lp5526
g411
ag1
(g7
g3
NtRp5527
(dp5528
g10
g1
(g95
g3
NtRp5529
(dp5530
g98
(lp5531
g1
(g7
g3
NtRp5532
(dp5533
g10
g1
(g95
g3
NtRp5534
(dp5535
g98
(lp5536
g1
(g7
g3
NtRp5537
(dp5538
g10
g1
(g95
g3
NtRp5539
(dp5540
g98
(lp5541
g1
(g7
g3
NtRp5542
(dp5543
g10
g1
(g95
g3
NtRp5544
(dp5545
g98
(lp5546
g1
(g7
g3
NtRp5547
(dp5548
g10
g1
(g95
g3
NtRp5549
(dp5550
g98
(lp5551
g1
(g7
g3
NtRp5552
(dp5553
g10
g1
(g95
g3
NtRp5554
(dp5555
g98
(lp5556
g1
(g7
g3
NtRp5557
(dp5558
g10
g1
(g95
g3
NtRp5559
(dp5560
g98
(lp5561
g890
ag348
asg12
(itheano.gof.utils
scratchpad
p5562
(dp5563
g15
(lp5564
(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5565
a(g534
I170
g535
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp5566
a(g537
I4732
g538
S'return _dot(a, b)'
tp5567
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5568
asbsg147
(lp5569
g5557
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5570
(dp5571
bsg28
g1
(g29
g3
NtRp5572
(dp5573
g32
(I00
I00
tp5574
sg34
S'float64'
p5575
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5576
(dp5577
g10
g1
(g95
g3
NtRp5578
(dp5579
g98
(lp5580
g43
asg12
(itheano.gof.utils
scratchpad
p5581
(dp5582
g15
(lp5583
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5584
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5585
a(g219
I533
g161
S'inplace=False)(input))'
tp5586
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5587
asbsg147
(lp5588
g5576
asg149
g1
(g373
g3
NtRp5589
(dp5590
g376
(lp5591
sg378
(lp5592
I0
asg380
(lp5593
I0
asg382
g58
sg383
I00
sg384
(S'x'
I0
tp5594
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5595
(dp5596
bsg28
g1
(g29
g3
NtRp5597
(dp5598
g32
(I01
I00
tp5599
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5600
(dp5601
g15
(lp5602
(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5603
a(g534
I171
g535
S'self.bias)'
tp5604
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5605
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5606
asbsg147
(lp5607
g5552
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5608
(dp5609
g15
(lp5610
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5611
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5612
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5613
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5614
asbsg28
g1
(g29
g3
NtRp5615
(dp5616
g32
(I00
I00
tp5617
sg34
S'float64'
p5618
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5619
(dp5620
g15
(lp5621
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp5622
a(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5623
a(g534
I171
g535
S'self.bias)'
tp5624
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5625
asbsg147
(lp5626
g5547
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5627
(dp5628
g15
(lp5629
(g534
I171
g535
S'self.bias)'
tp5630
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5631
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5632
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5633
asbsg28
g1
(g29
g3
NtRp5634
(dp5635
g32
(I00
I00
tp5636
sg34
S'float64'
p5637
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1091
asg12
(itheano.gof.utils
scratchpad
p5638
(dp5639
g15
(lp5640
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp5641
a(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5642
a(g537
I4732
g538
S'return _dot(a, b)'
tp5643
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5644
asbsg147
(lp5645
g5542
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5646
(dp5647
bsg28
g1
(g29
g3
NtRp5648
(dp5649
g32
(I00
I00
tp5650
sg34
S'float64'
p5651
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5652
(dp5653
g10
g1
(g95
g3
NtRp5654
(dp5655
g98
(lp5656
g64
asg12
(itheano.gof.utils
scratchpad
p5657
(dp5658
g15
(lp5659
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5660
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5661
a(g219
I533
g161
S'inplace=False)(input))'
tp5662
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5663
asbsg147
(lp5664
g5652
asg149
g1
(g373
g3
NtRp5665
(dp5666
g376
(lp5667
sg378
(lp5668
I0
asg380
(lp5669
I0
asg382
g73
sg383
I00
sg384
(S'x'
I0
tp5670
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5671
(dp5672
bsg28
g1
(g29
g3
NtRp5673
(dp5674
g32
(I01
I00
tp5675
sg34
g74
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5676
(dp5677
g15
(lp5678
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp5679
a(g1014
I180
g1015
S'self.reverse_bias)'
tp5680
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5681
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5682
asbsg147
(lp5683
g5537
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5684
(dp5685
g15
(lp5686
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5687
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5688
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5689
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5690
asbsg28
g1
(g29
g3
NtRp5691
(dp5692
g32
(I00
I00
tp5693
sg34
S'float64'
p5694
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5695
(dp5696
g15
(lp5697
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5698
a(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp5699
a(g1014
I180
g1015
S'self.reverse_bias)'
tp5700
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5701
asbsg147
(lp5702
g5532
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5703
(dp5704
g15
(lp5705
(g1014
I180
g1015
S'self.reverse_bias)'
tp5706
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5707
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5708
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5709
asbsg28
g1
(g29
g3
NtRp5710
(dp5711
g32
(I00
I00
tp5712
sg34
S'float64'
p5713
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5714
(dp5715
g15
(lp5716
(g20
I76
g18
S'self.initialise_theano_functions()'
tp5717
a(g417
I84
g418
S'outputs=self.get_cost(),'
tp5718
a(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5719
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5720
asbsg147
(lp5721
g5527
asg149
g1187
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5722
(dp5723
g15
(lp5724
(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5725
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5726
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5727
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5728
asbsg28
g1
(g29
g3
NtRp5729
(dp5730
g32
(I00
I00
tp5731
sg34
S'float64'
p5732
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5733
(dp5734
g15
(lp5735
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5736
a(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5737
a(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp5738
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5739
asbsg147
(lp5740
g5522
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5741
(dp5742
g15
(lp5743
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp5744
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5745
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5746
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5747
asbsg28
g1
(g29
g3
NtRp5748
(dp5749
g32
(I00
I00
tp5750
sg34
S'float64'
p5751
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5752
(dp5753
g10
g1
(g95
g3
NtRp5754
(dp5755
g98
(lp5756
g1
(g7
g3
NtRp5757
(dp5758
g10
g1
(g95
g3
NtRp5759
(dp5760
g98
(lp5761
g1
(g7
g3
NtRp5762
(dp5763
g10
g1
(g95
g3
NtRp5764
(dp5765
g98
(lp5766
g227
asg12
(itheano.gof.utils
scratchpad
p5767
(dp5768
g15
(lp5769
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5770
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5771
a(g219
I533
g161
S'inplace=False)(input))'
tp5772
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5773
asbsg147
(lp5774
g5762
asg149
g1
(g373
g3
NtRp5775
(dp5776
g376
(lp5777
sg378
(lp5778
sg380
(lp5779
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp5780
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5781
(dp5782
bsg28
g1
(g29
g3
NtRp5783
(dp5784
g32
(I01
I01
tp5785
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p5786
(dp5787
g15
(lp5788
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5789
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5790
a(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5791
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5792
asbsg147
(lp5793
g5757
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5794
(dp5795
g15
(lp5796
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5797
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5798
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5799
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5800
asbsg28
g1
(g29
g3
NtRp5801
(dp5802
g32
(I00
I00
tp5803
sg34
S'float64'
p5804
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5805
(dp5806
g10
g1
(g95
g3
NtRp5807
(dp5808
g98
(lp5809
g1
(g7
g3
NtRp5810
(dp5811
g10
g1
(g95
g3
NtRp5812
(dp5813
g98
(lp5814
g1
(g7
g3
NtRp5815
(dp5816
g10
g1
(g95
g3
NtRp5817
(dp5818
g98
(lp5819
g227
asg12
(itheano.gof.utils
scratchpad
p5820
(dp5821
g15
(lp5822
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5823
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5824
a(g219
I533
g161
S'inplace=False)(input))'
tp5825
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5826
asbsg147
(lp5827
g5815
asg149
g1
(g373
g3
NtRp5828
(dp5829
g376
(lp5830
sg378
(lp5831
sg380
(lp5832
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp5833
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5834
(dp5835
bsg28
g1
(g29
g3
NtRp5836
(dp5837
g32
(I01
I01
tp5838
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag5532
asg12
(itheano.gof.utils
scratchpad
p5839
(dp5840
g15
(lp5841
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5842
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5843
a(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5844
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5845
asbsg147
(lp5846
g5810
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5847
(dp5848
g15
(lp5849
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5850
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5851
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5852
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5853
asbsg28
g1
(g29
g3
NtRp5854
(dp5855
g32
(I00
I00
tp5856
sg34
S'float64'
p5857
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5858
(dp5859
g15
(lp5860
(g20
I76
g18
S'self.initialise_theano_functions()'
tp5861
a(g417
I84
g418
S'outputs=self.get_cost(),'
tp5862
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5863
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5864
asbsg147
(lp5865
g5805
asg149
g1187
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5866
(dp5867
g15
(lp5868
(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5869
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5870
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5871
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5872
asbsg28
g1
(g29
g3
NtRp5873
(dp5874
g32
(I00
I00
tp5875
sg34
S'float64'
p5876
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5877
(dp5878
g15
(lp5879
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5880
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5881
a(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp5882
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5883
asbsg147
(lp5884
g5752
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5885
(dp5886
g15
(lp5887
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp5888
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5889
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5890
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5891
asbsg28
g1
(g29
g3
NtRp5892
(dp5893
g32
(I00
I00
tp5894
sg34
S'float64'
p5895
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5896
(dp5897
g15
(lp5898
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5899
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5900
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5901
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5902
asbsg147
(lp5903
g5517
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5904
(dp5905
g15
(lp5906
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5907
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5908
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5909
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5910
asbsg28
g1
(g29
g3
NtRp5911
(dp5912
g32
(I00
I00
tp5913
sg34
S'float64'
p5914
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5915
(dp5916
g15
(lp5917
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5918
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5919
a(g1435
I2670
g1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp5920
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5921
asbsg147
(lp5922
g5512
asg149
g1
(g1440
g3
NtRp5923
(dp5924
g1443
g5914
sg34
g5914
sg153
g154
sg188
g588
sg1444
(I1
tp5925
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5926
(dp5927
g15
(lp5928
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5929
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5930
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp5931
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5932
asbsg28
g1
(g29
g3
NtRp5933
(dp5934
g32
(I00
tp5935
sg34
g5914
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5936
(dp5937
g15
(lp5938
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5939
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5940
a(g1463
I27
g1464
S'return theano.tensor.basic.neg(self)'
tp5941
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5942
asbsg147
(lp5943
g5507
asg149
g1468
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5944
(dp5945
g15
(lp5946
(g1463
I27
g1464
S'return theano.tensor.basic.neg(self)'
tp5947
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5948
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5949
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5950
asbsg28
g1
(g29
g3
NtRp5951
(dp5952
g32
(I00
tp5953
sg34
g5914
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5954
(dp5955
g15
(lp5956
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp5957
a(g1520
I2802
g1521
S'acc_dtype=acc_dtype)'
tp5958
a(g1435
I2670
g1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp5959
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5960
asbsg147
(lp5961
g5502
asg149
g1
(g1440
g3
NtRp5962
(dp5963
g1443
g5914
sg34
g5914
sg153
g154
sg188
g588
sg1444
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5964
(dp5965
g15
(lp5966
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5967
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5968
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp5969
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5970
asbsg28
g1
(g29
g3
NtRp5971
(dp5972
g32
(tsg34
g5914
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5973
(dp5974
g10
g1
(g95
g3
NtRp5975
(dp5976
g98
(lp5977
g1
(g7
g3
NtRp5978
(dp5979
g10
g1
(g95
g3
NtRp5980
(dp5981
g98
(lp5982
g1
(g7
g3
NtRp5983
(dp5984
g10
g1
(g95
g3
NtRp5985
(dp5986
g98
(lp5987
g5507
asg12
(itheano.gof.utils
scratchpad
p5988
(dp5989
g15
(lp5990
(g417
I84
g418
S'outputs=self.get_cost(),'
tp5991
a(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp5992
a(g1520
I2803
g1521
S'shp = shape(input)'
tp5993
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5994
asbsg147
(lp5995
g5983
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5996
(dp5997
g15
(lp5998
(g1520
I2803
g1521
S'shp = shape(input)'
tp5999
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp6000
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp6001
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6002
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6003
(dp6004
g15
(lp6005
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6006
a(g1520
I2811
g1521
S"shp = cast(shp, 'float64')"
tp6007
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp6008
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6009
asbsg147
(lp6010
g5978
asg149
g1575
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6011
(dp6012
g15
(lp6013
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp6014
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp6015
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp6016
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6017
asbsg28
g1
(g29
g3
NtRp6018
(dp6019
g32
(I00
tp6020
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6021
(dp6022
g15
(lp6023
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6024
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp6025
a(g1604
I407
g1605
S'lambda entry: isinstance(entry, Variable)))'
tp6026
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6027
asbsg147
(lp6028
g5973
asg149
g1
(g1609
g3
NtRp6029
(dp6030
g1612
(g1613
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp6031
tp6032
sg1616
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6033
(dp6034
bsg28
g1
(g29
g3
NtRp6035
(dp6036
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6037
(dp6038
g15
(lp6039
(g417
I84
g418
S'outputs=self.get_cost(),'
tp6040
a(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6041
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp6042
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6043
asbsg147
(lp6044
g5497
asg149
g1629
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6045
(dp6046
g15
(lp6047
(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp6048
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp6049
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp6050
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6051
asbsg28
g1
(g29
g3
NtRp6052
(dp6053
g32
(tsg34
S'float64'
p6054
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg407
I00
sbsg702
g704
stRp6055
(lp6056
g1
(g46
g3
NtRp6057
(dp6058
g726
I1
sg40
g405
sg727
I01
sg49
(lp6059
Nasg408
I00
sg54
I00
sg55
I00
sg28
g424
sg60
I01
sbag1
(g46
g3
NtRp6060
(dp6061
g726
I1
sg40
g768
sg727
I01
sg49
(lp6062
Nasg408
I00
sg54
I00
sg55
I00
sg28
g778
sg60
I01
sbag1
(g46
g3
NtRp6063
(dp6064
g726
I1
sg40
g783
sg727
I01
sg49
(lp6065
Nasg408
I00
sg54
I00
sg55
I00
sg28
g30
sg60
I01
sbag1
(g46
g3
NtRp6066
(dp6067
g726
I0
sg40
Nsg727
I00
sg49
g108
sg408
I01
sg54
I00
sg55
I00
sg28
g115
sg60
Nsbag1
(g46
g3
NtRp6068
(dp6069
g726
I0
sg40
S'W'
sg727
I00
sg49
g352
sg408
I01
sg54
I00
sg55
I00
sg28
g354
sg60
Nsbag1
(g46
g3
NtRp6070
(dp6071
g726
I0
sg40
S'b'
sg727
I00
sg49
g50
sg408
I01
sg54
I00
sg55
I00
sg28
g56
sg60
Nsbag1
(g46
g3
NtRp6072
(dp6073
g726
I0
sg40
g68
sg727
I00
sg49
g69
sg408
I01
sg54
I00
sg55
I00
sg28
g71
sg60
Nsbag1
(g46
g3
NtRp6074
(dp6075
g726
I0
sg40
g470
sg727
I00
sg49
g473
sg408
I01
sg54
I00
sg55
I00
sg28
g475
sg60
Nsbag1
(g46
g3
NtRp6076
(dp6077
g726
I0
sg40
g322
sg727
I00
sg49
g323
sg408
I01
sg54
I00
sg55
I00
sg28
g325
sg60
Nsba(lp6078
NaNaNag110
ag353
ag53
ag70
ag474
ag324
atRp6079
sS'action_vector'
p6080
g1
(g7
g3
NtRp6081
(dp6082
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p6083
(dp6084
g15
(lp6085
(S'denoising_autoencoder_cart_pole.py'
p6086
I16
S'<module>'
p6087
S'agent = mdp_da.MDP_DA(input_dimension, hidden_dimension, output_dimension, gamma=0.1, learning_rate=0.01)'
tp6088
a(g17
I30
g18
S'self.action_vector = theano.tensor.ivector("av")'
tp6089
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6090
asbsg28
g778
sg40
g768
sbsS'gamma'
p6091
F0.10000000000000001
sb.