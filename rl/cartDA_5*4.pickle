ccopy_reg
_reconstructor
p1
(c__main__
Cart_Pole_DA
p2
c__builtin__
object
p3
NtRp4
(dp5
S'symbolic_output'
p6
g1
(ctheano.tensor.var
TensorVariable
p7
g3
NtRp8
(dp9
S'owner'
p10
NsS'index'
p11
NsS'tag'
p12
(itheano.gof.utils
scratchpad
p13
(dp14
S'trace'
p15
(lp16
(S'denoising_autoencoder_cart_pole.py'
p17
I32
S'__init__'
p18
S'super(Cart_Pole_DA, self).__init__(*args, **kwargs)'
tp19
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p20
I58
g18
S'self.initialise_symbolic_output()'
tp21
a(S'denoising_autoencoder_cart_pole.py'
p22
I60
S'initialise_symbolic_output'
p23
S'self.symbolic_output = theano.tensor.dvector("y")'
tp24
a(S'/Library/Python/2.7/site-packages/theano/gof/type.py'
p25
I317
S'__call__'
p26
S'return utils.add_tag_trace(self.make_variable(name))'
tp27
asbsS'type'
p28
g1
(ctheano.tensor.type
TensorType
p29
g3
NtRp30
(dp31
S'broadcastable'
p32
(I00
tp33
sS'dtype'
p34
S'float64'
p35
sS'numpy_dtype'
p36
cnumpy
dtype
p37
(S'f8'
I0
I1
tRp38
(I3
S'<'
NNNI-1
I-1
I0
tbsS'sparse_grad'
p39
I00
sS'name'
p40
Nsbsg40
S'y'
sbsS'bias'
p41
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p42
g3
NtRp43
(dp44
g11
NsS'container'
p45
g1
(ctheano.gof.link
Container
p46
g3
NtRp47
(dp48
g40
S'b'
sS'storage'
p49
(lp50
cnumpy.core.multiarray
_reconstruct
p51
(cnumpy
ndarray
p52
(I0
tS'b'
tRp53
(I1
(I429
tg38
I00
S'\xee\xc7\x90\xb2\xb3u\xd5\xbf+B\xc3\x94\x05\xc4\xd7\xbf\xae\x84\xc1\x8b}\x86\xd9\xbf\xa2$\xc0-%\x1b\xd9\xbf\x9a?1r\xb9\xf8\xd6\xbf\xa9\xee\xdd\xe4(\xb9\xd5\xbf\x9d\xa7\xcau\xd8\xb3\xda\xbf\xfe_W\xae\xa2&\xda\xbf L\x1c=\x12\xdc\xd2\xbfP\xb1\x86VWz\xd5\xbfL\xban\x93\x00\xfd\xd6\xbf\x97nH\xe4#\xb4\xdb\xbf\xcd\x90\xf1\x1e\xf8\xe1\xd6\xbf\x89\xbb \xe7\xd0\x9f\xd8\xbf\xb6\xaa\xec4\x98X\xd8\xbf\xbc3\xe6Hq\x90\xd8\xbf\x870\x81\xff\xdd\xfc\xda\xbf\xd6\xa4\xc2\x98j\x8f\xd8\xbf\xb9\t\xc0\xfb\x7fK\xd8\xbfv\x90\xa9\x8e1q\xdb\xbf^lc\xf2\x89q\xd6\xbf\xf1\xf7\x97\xab\xb8\xf4\xd8\xbf#/\xdf?-\xca\xdb\xbf\xcd\x99\xf0\x85\x076\xdb\xbf\x80\x1b\xd3\xb5\xfc\xdb\xd8\xbfp_\xdax\xb6\xd2\xd6\xbf\x18\xcer\xf1\x87\x06\xd7\xbf8.*"\x11\x1a\xd7\xbfQ|\r"\xf0*\xda\xbfk#1u\xe1p\xd6\xbf\x13\x16%Eta\xda\xbf\xc7f\x92\xedJ$\xd8\xbf1\xcd\x03H\xbe\xe9\xda\xbf\xd1\xbc0\xeb\xf0\xfa\xda\xbfu\xd2]C\xef\xb6\xd7\xbf\xda\xad\x88\xc6\xf2\xe4\xd6\xbf\xc9\x10\xaarC\xab\xdc\xbf\xfa\x92\xc7\xa3\x8a\xf9\xd9\xbf\xca\x88\x7f\t#\xcc\xd5\xbf3\x9e\xb8n\xf3\xa7\xd9\xbf\xd0\xabt\xc4\xbf\xd1\xd7\xbf\x14\x88Z\xa2v\x95\xd8\xbfT\xb3\x87DA\x1e\xd8\xbf{\x9a[(x\xfd\xd9\xbf\x0c\xd1\xf6\xe8\xe5\xed\xd5\xbf\x7f%\xc7u\xd9j\xd9\xbfO\xed\x85\xbe\x9f\x10\xd9\xbfC4\x9b\x82\xe0\x82\xdb\xbfH\xe0m\xf5q\xd0\xd6\xbf\xf8b\xa6\x02\xf0\xdb\xd7\xbfz\xbd8\x16\x8c\x83\xd9\xbf\xf1"\x1e\xdfh\x87\xd8\xbf\x1b\n\x1f^\xd3M\xda\xbf\x8a!\x8c\x0f&@\xd8\xbf\xd23\xdc\xe8\xc0\x82\xd4\xbfn\xb7\x83\x7fp\xa3\xd5\xbf\xb5\x9f+\xe7^\x13\xd8\xbf\x8cv%\xf0\x84\x9e\xd6\xbfT*\xb3\xa9VS\xda\xbf\\\xc6br\x99o\xd5\xbf/U\x03\x99\x7fc\xd7\xbf\x13G\x1dSA\xec\xd6\xbf\xe0\xf0\x94\xb9\xbc\xf1\xdc\xbf\xe1\xf4\x82r\x1a \xd9\xbf\xf2<Q>Ji\xda\xbf[S\x06\x97\xe9\xf7\xd7\xbf\xad<\xf2r\xcf\xf1\xd4\xbf4\xa0oa\xdd\xc0\xd8\xbfai\x91\x9e\xbf?\xd8\xbf\xb4<\x02\'B\x82\xda\xbf\xbeOn/\xb6\xd5\xd6\xbf\xdc\xb4=\x84\x92\x93\xd7\xbf\x89\xb9\x1c\xde\xa8\xb8\xda\xbf\xa0i\xbd\xda\x85\xe9\xd6\xbf\xe0e[G\xd9K\xd9\xbfh\x95\xaa\x9fm+\xd7\xbf\x19x\x1b\x14\x8dL\xd7\xbf)>\xfb\xed\xf1>\xd6\xbf\xa3G\xb9\xcb8\x1c\xd6\xbf\x9ev\xd3v\xb1\x93\xd7\xbf\xbd#/&\xa4\xcc\xd8\xbfh\x82\x9e$\x04\xb3\xd7\xbfd\x91q\x977\xb6\xd7\xbf\x9e4\x83\xf8S\xe2\xd6\xbf\x8f\xd8\xa9\xc2\xd8S\xd5\xbf[0\x12\xcd\x19\x9d\xdb\xbfJ=B\xcd\xfe\x8b\xd0\xbf\x04\t\x8bd\xffr\xd7\xbf*\xa2V\xa3\xec\x0f\xd9\xbf\x86\x12+?\xba?\xd6\xbfg\x1d\xefI\x1a\xdc\xd7\xbf\x1e~\xe4\xcc\xe7\xfa\xd7\xbf \xe0\xa9}\x02V\xd7\xbf\x1fy\xeb\x9aq\xd2\xd6\xbf\xb9[ZT\xdd\xfd\xd8\xbfO\xff6f\x86\x82\xd6\xbf\xd9\xb6\xdf\xda3\xe3\xd8\xbf\xf4\xbb\xd3;\xed\x04\xd9\xbf\x0e\x9a\x8aC\xd2@\xd7\xbf\xcb\x10\xafLf8\xd9\xbf\xa7/\xadv\xd5L\xda\xbf\x83\x0b%\xc5\xbe\x8a\xd8\xbf\xa7\xba\xab\xc0\x86\x03\xd9\xbf\x82L\xde\x8f\x02\xea\xd8\xbfiq\xc3\xcf! \xcd\xbf|\x1a\x91\x81H\xb1\xd8\xbf\x8b{\xb9#7\xc3\xd6\xbf\x93E\x12\x94-\x17\xe1\xbf\x93t\x15\xe4\x97\xb9\xd7\xbf\xfb\x02d\x05\xb1]\xd7\xbf\xed"\x05\x81\xa2&\xd6\xbfn<,s\x9b\xeb\xd6\xbf{\xbb\xad\xa6\xf3\xf7\xd7\xbfx\xb7\xee\xa5\xa6\xab\xd8\xbf8^\x12A\xc5~\xd8\xbf\x8b\xb6\xdd\xc4\x9bT\xd9\xbf+\x8c{%\xdd\xa7\xd9\xbf"\xba\x95\xd1\x16\x02\xdd\xbfi\x19\x87\xc1Ll\xd5\xbfs\x88\xc5\x7f\xf7\x11\xda\xbf\x82\x0c\xf2\xc3\xf7S\xd6\xbf\xdc\xd5\x165\x0eu\xd8\xbf\xa6O(\xd0Rs\xd7\xbfB\x0bs\x9c\xc8*\xd6\xbfF\xed\xa1D\xe0\x90\xdc\xbfP+;\xb6M@\xda\xbf=\xcfZ\\\x9ee\xd8\xbf\xd8?6\xb3\t|\xd5\xbf\x8f\xc2a\xdb\xc7\xd6\xd6\xbf{O\xbc\xf1fz\xd9\xbfY\xbc&A\xd0\x10\xd8\xbf\xe4\xa38c\xe2\xfd\xd3\xbf\xda\xe1\x9d9\xb6\x8a\xd7\xbfS\x97\x04\xae\n\x0e\xd8\xbf\xba\x1a\xc3\xb3S\x92\xe3\xbf\x8d_\xb4@\x01A\xd7\xbfQ|\xed\xb2F\x8e\xd9\xbf\x98n\x02\x80\xe9\xe3\xda\xbfS\xc5\xc5?f\xf0\xd9\xbf\x1a\x97\xc3\xc3\x1fk\xd8\xbf74\xfd\xb5\xe7z\xd9\xbf\xfe\xda\xd9\x0f\xb3k\xd9\xbf\xaf\xean\xedD\x14\xd6\xbf\xf5\xf8X\xfa\xf1q\xdb\xbf\xd0\xe2\xea\xd8b/\xd5\xbf\x83@t\x01s\xbf\xda\xbf\x91\xcf\x9c\xa5L\x87\xd7\xbf\xa4\xbc\x910H\x96\xd5\xbf\xe91\xb2\x9ekK\xd6\xbf3\xaf*r\x8cp\xd7\xbf\xaf/sT\xdex\xd6\xbf\xc2g\xd2\xaa\xa2o\xda\xbf\xd1\x00<\x90\x8d\xe4\xd6\xbf\xb2\xdd\xbc\xebr\x9f\xd7\xbf\x1d]\xbeQ6\xd4\xd5\xbf\xa2\x9e\xb4\xa2S=\xdc\xbf\x1br\x1c\x85\xbft\xd9\xbf\x00P!\xd8\xcff\xdc\xbfQ\xedN\x010c\xd8\xbf\xf0\x0f$\xdb\xb3k\xda\xbf\x84;OMDL\xe1\xbfcJ\x0c\x9fKR\xdb\xbfh\x05\xcd&\xb3\xae\xd5\xbf\x04\xfc;\xb3\x1b\x96\xd8\xbf\x7f\xf5q\xea\xa8\xb6\xd7\xbf\xfc+Y\xbdY\xb3\xdc\xbf\xcd\xdeN\xdc\xeb\xa9\xd7\xbf\xcd\x08!\x18\xec\xf0\xd7\xbf\x8d\x9e\xce\xd1\x0e\xda\xdc\xbfg\xc3&\x86\x01\x83\xda\xbf\xa7\x89\x17\x16\x91\xb0\xe3\xbf\xf9ufb\xa0\xf9\xd6\xbf\xfa\xf1\x149\xa8g\xd9\xbf\xbc\x8c\xc2\xd3\x8e\x92\xd2\xbf\xfdZ`g\xb1\x9e\xd8\xbf\xb5\x9f:\x94\xaa\x7f\xd7\xbf\xa3\x14\xc5Z\xe3\xcc\xd9\xbf\xb4>yPd\xf1\xd8\xbf\xf1f\x08Y\xac\xe7\xd7\xbf\xc2\x8a\xdc\x95L\xf8\xd9\xbf\x84\xeb\xe4\xf0\x82\x8f\xd8\xbf\xc8k\x86n\x94\x90\xd9\xbfD\x92,\t\xff,\xda\xbf>\x11=\x82\xefF\xdb\xbf\x97(\xbd\xa5\xc30\xd6\xbf\xd7\xa1\xb3\xb9\xf4?\xd6\xbf\xf2dE8\xdc\xd9\xd8\xbf\x82\xc1S%|\xbe\xd8\xbf\xe3lM\xe7m\xc9\xd5\xbf\xa8\xf3\xd5Po\xe9\xd8\xbf\xbfk?_\x8d\xde\xda\xbfE\x8d\xfd\x87\xb9O\xd8\xbf9\xf0I\xc9\xd3\xf8\xd4\xbf\xbf-1\xd4\x16\x02\xd8\xbf\x91\xaaQ \x04\x86\xd7\xbf\xab$,f\xfbN\xd7\xbf\xc5#\xba\xf4\x19J\xdb\xbf4\xa1\xb7\x86\xef\xcc\xd7\xbf\x85|\x84\xb2\xb8^\xd7\xbfD\x0b\xc6>.\x03\xd9\xbf\xc9I\x80\x07\xd3M\xdf\xbf[\xdf\x82\x11\xaf\xe0\xd7\xbfq\xeb\x06Ws\xc9\xd8\xbf\xff\xdcf\xf1}/\xda\xbf"\xf8\x16/\x97\x04\xd5\xbf\xa2\xc4\xea\xdfKa\xd8\xbf 3Z\xbc\x0c\xe3\xd9\xbf\x8f\xed\x96\xcf\xf6/\xde\xbf&\xa8[\xcd\x12\x04\xd7\xbf\x9cky\x82D\xc9\xd6\xbf\xa6\xdc\xe2\xf3\xfc\xc8\xd9\xbfQ\xb1\xe3\xa1"\xe6\xd4\xbf\xe0q}0\x95\x1d\xda\xbf,\xb7\xd8K\xf1\x15\xd8\xbf\x86|GE\xd2%\xd8\xbfF\xba\xd5\xa2\x86\xe9\xd8\xbf\xca\xa7(\x11\xa3]\xdb\xbf\x15\xed\x82\xf6cS\xd6\xbfq\xe9\xef\xfd:\x0f\xd8\xbf?1\xb4\x8dQF\xda\xbf\x87\xdcd\xf9\xbb3\xd9\xbf\xe0\xc7Yl\xf4(\xdb\xbfx\xfc\r\x9c\x1a\xcd\xe4\xbf\xa2|XM\xca\xb7\xda\xbf\x00\xcb1\xc0w\xe6\xd8\xbfH}\xe1\x0b\xc0\xae\xd7\xbf\x076\x1d\xdcle\xd4\xbfz?\xdf\xb8d\x11\xd8\xbf\t\xf9\xb3\xef\xf7/\xd5\xbfaX\xd1&9\x10\xd8\xbf\xdbH/\xdc\x8b\x10\xda\xbf;}$\xde\xd9\xb7\xd7\xbf\xbc\xd0e8I\xf4\xd4\xbfk\xa7\x94\xd8\x9fj\xd7\xbfo\xdd\xa3\x16\x95\n\xd8\xbf\x84\x1d#\xae\x12y\xd8\xbf1\x01\xa9\xa1\xbe\xcf\xd9\xbfS\x90(x@D\xd7\xbfJ\xc4\x06\x8a\xaf\xf7\xd5\xbf\xeca\x9c(by\xd5\xbf=\x90>G\xe0Y\xd7\xbfa\xa0O\xb2\x95\x88\xd5\xbf\xecj\xe2\x1a\x98\xcc\xdb\xbf\xe0\'\x86lWv\xda\xbf\xeb\x8bn@\xdd3\xd4\xbf\x84\xbc\xbe\xdfP\x17\xd7\xbf\x0eH\xa8\x8b\x9f\xee\xd8\xbf\xba\xa4\xcdJ\xbb\xd6\xd8\xbf\xc0G\x1d\xd1\xeaI\xd7\xbf:\xf0\x85Dm\xcb\xd7\xbf\x9d\xa7bX\xeb\xf7\xd6\xbf\x11\xdb\x06\xa2[\xa7\xda\xbf\xbd2,\xef\x81f\xd5\xbf<\xf1\xe3\xd2\x15\xa5\xd6\xbf\xdc\xfd\xaf\x13\x9a\xe3\xd7\xbf\xfc\x87\x15\xa2\xeb\xb0\xd5\xbf\xd3\xa4_\x9b\xa5\x15\xdc\xbf`\x07"&\xc7\xbc\xd9\xbf\xe6Q\x8d\x8d\xe4\x8b\xe1\xbfE\x8dJ3"$\xd6\xbf\x18\xb3\xadr\xa9\xfd\xd7\xbf\xcc\xce\xe0\xb0]\x1f\xd9\xbf\xbc\x82\x94\x08\xba^\xd6\xbfU4}\xbb\x99\x11\xd7\xbf#\xae\xe6\xdb\xf9!\xd8\xbf\xa6\xde\xb0\x88~i\xd7\xbf\x1a$\x03#\xc5\x9a\xd8\xbfO>\xaf\\{=\xda\xbff\xc9\x10\xddfs\xd6\xbf\xf9e\xae\x9d\x8e\x98\xd7\xbf\xc1\xb4\x0e\xb4\x95m\xd7\xbf\xfd\xfcjX\xa1\x9d\xd4\xbf\x12\xab~\x1f\xed\xb3\xda\xbf\x8e2\x02\xe8\xb6\x80\xd9\xbf\xa9\xca\xa7\xa87\x92\xdb\xbfzN\x92\xd8\xee\xd8\xd8\xbf\x83\x18\x86\xdeP\xa2\xd5\xbf\xc1\xb2\xe8\xd5\xbd\xc3\xd7\xbf\x02\x18\xf4?Tx\xd6\xbf]\x1f\xa95\xd9u\xd7\xbf\xec*\xb5\xd4|8\xd5\xbf\x83\x88\xa5\xbb\xb44\xd8\xbf[\t\xd20Fz\xda\xbfv\xe9n\x0f\xbc\xdc\xd4\xbf2\xc6O\xc9\xa6\x9c\xda\xbf#\xcb\xf5\x0f]\xa8\xd4\xbfH7\x82\xb7y\x81\xd7\xbf\x94\x0en\xe0<H\xd6\xbfg\xa6\x16k\xd4\x9b\xd7\xbfL\x02\x00\xe0C\xf0\xd6\xbfT\xd3T\xee/\x04\xd4\xbf\x83S;\xb3-\xf7\xd4\xbf\xd4Hx}\x17\xfd\xda\xbf\x07\x9f\xd2!Z\n\xdc\xbf\x17\x94\xe6zB1\xd8\xbfFI\xf3\xd8D\xd6\xd8\xbf;\xd8\xb2\t\xa4\xc5\xd6\xbf\x8e\xfc\xfff\x8f|\xd7\xbfG\x91\xa2\xe3\xd4\xee\xda\xbfhv=\x0c\xeaL\xda\xbf\xa5\x8b\xcc\x0b\xd6\x9b\xd9\xbf\x17\xe0\xb5L\xd73\xe1\xbf\xb1\x91#YW\x13\xdb\xbf\xf1\xa4\x06\xaa\x8d)\xd3\xbf\xc5-\x05T\x82\xa2\xd9\xbfW\xba\xd4\x88\x1f\x08\xda\xbf\xc8\x85a\xf0\xe0\xb6\xd6\xbf\xaa\x84tS\xb4Q\xd9\xbf\x1e)\xb7\x96\x87P\xd6\xbfx\x82\x13C\x120\xd8\xbf/\xc4\x16F\xb5@\xd7\xbf Vj\nVK\xd8\xbfP\xb9YU\'\x81\xda\xbf=\xf7\xd0K\x85\xe4\xd5\xbf\x14b\x17\x88V\x85\xd8\xbf\xd28\xe1\xb5\xaf\xf6\xd9\xbf3p\xd6\xfaA\xb8\xd4\xbf\xf9\x06MIRw\xd7\xbf\xafK\'\xf9g\xdb\xd9\xbf \xe7\xa5\x95k\x84\xd5\xbf+qw\xcd\x0c\x9a\xd9\xbf\xda\x02\xd3\x91\xd7\x05\xd7\xbfy6\xfc9^\xa5\xd6\xbfD\xb3\xcdk\xb54\xda\xbf\xc8\xd5\xd2=\x17\xcb\xd3\xbf\xb5teJE\xe2\xd7\xbf\xa8\xb1\xa3\xe2\xe4\x16\xda\xbfn\n\x07B\x8f\xb0\xd8\xbf\x9c\x92\x99\xb53\xea\xd7\xbfW\xbe\xc7\x1cc{\xcc\xbf`6\xe4)W\xad\xd5\xbfi\x8f\xe4\xae\x01\xfe\xd6\xbf\xbb\xdf\xac:\xeb\xf3\xd8\xbf=\xaa;\xb5\xb1\xd5\xd7\xbf\xd6\x85%\x14T\x1c\xd8\xbf*\x86\xbcu[\xc7\xd4\xbfrA\xbb\xb1\x9a\xb9\xd6\xbf\xa7\x10\xf0\xd9A\x96\xd8\xbfZ~\xdd\xff}\x0c\xd9\xbfO\x08\x1d\xd4\x83\xc2\xdb\xbf.Lg\x10\xa3K\xda\xbf\xd7\xf3\xda\x99\xc0^\xd9\xbfI\xe9 w\xcd5\xd7\xbf\xfe\x83\xb6\x03h\xeb\xd2\xbfr\xcc\xd2\xf8\x86P\xd6\xbfK\xd6tzp\x89\xd6\xbf\x98}\x8a)%\x1a\xd5\xbfZw"\xd2\xe46\xd7\xbf\xec\xc2\xd7tsw\xda\xbf\xbd\xec\x81m<L\xd6\xbf-\xc3\xd1\xb6\t\xaa\xda\xbf\xc7\xa6\xbd\xd7>\xb1\xd9\xbf\x89\xa7\x84\xe1(m\xda\xbf\x81\xc79\xb6\xc1;\xdb\xbf\xa1\xff\xa1l\xa8\xb3\xd4\xbf\x80\x10\x0b\x07|\xc0\xd6\xbfh\x11r\xfb\xa1q\xd7\xbf\x94\x85\xb8U5\xdc\xd9\xbf\x19\xcb\xfe\x08\x02\xd7\xd7\xbf\xa4\xb0c\xbc\x18n\xd7\xbf\xf7U\x1b\xb3k\xec\xd8\xbf\xf2Y\x92\xb5\x01\xd7\xdc\xbf\xa7\xc1\xa8"\xb2\x9c\xdc\xbf2\x0b\xee\xc4\xfc\xef\xd8\xbfY\xb3E]~i\xda\xbf\x89U\xcf\xdc\xad\x1c\xd9\xbf\xef\tLLM2\xda\xbf\xac&^\x9a\xd4\x9c\xd7\xbf\xdf,m\xfa\x10\xd8\xdb\xbf\xe8\xe2a\x93\xbb \xd8\xbfcK\xd3y\xf9\xa5\xd8\xbfX\xd7Gf\x00\xd6\xda\xbf-\x94\xd5\x8c\x13\'\xd8\xbf\xfa\x0e\xed\xd4P\x82\xdb\xbf\x1d\xc0q\x15\x9e\x82\xd5\xbf]\xb3\xe7|z\xc2\xd8\xbf}u\x06\xbe\xe9\xd2\xd7\xbf\xcc\x14\xe0\xbc5c\xd7\xbf\xab\xf3\xcf\x87\x10\xd0\xd7\xbfSF\xbbA\xd9\xef\xdd\xbf\xd7\xf58\x80\xf8\x85\xd6\xbf\xb1\x90Wk \x19\xda\xbf\xcf\x9b\xc2\xdcY\xd1\xd8\xbf\xb9\xb9\x80z\x0c\xed\xd2\xbf\xa8\xe5\xcb\xb4\xb5\xa8\xd8\xbf;\x84\xb3\x169\xbb\xd8\xbf\xcb7\xa6t\x01\x15\xd8\xbf\xfe\x12\xc8\xfd)\xf8\xd7\xbfr\xba\xecw\x19\x01\xdd\xbf&\xf3p\x95\xb6;\xd9\xbf\x0e\xfd\xee6\xae{\xd6\xbf\xe4q\xa9\xe0\xb1R\xd7\xbfV\x1c\xde\xa9\x00h\xd9\xbf\xed\xd8*\x08{\xfd\xd9\xbf\xb7\x82>N\xdf\xf4\xd6\xbf\xcdZY\xefL\x8b\xd6\xbf|q\x85\xcaM\xff\xdb\xbf\xfd\x9crT\xd7\x12\xe0\xbfI\xacx\x88b^\xd8\xbfk\xc6\xdd\x0e\xedA\xda\xbfv\x81h\x14\x9b\x0f\xd8\xbf\xadB\xb8\xad\xda{\xd7\xbfz[\xb2)d\xa6\xd8\xbf\xb6RV\x85\\\x94\xd6\xbf\xa1\xec\xa6\xb1\t\xb0\xd7\xbf\xbe@\x12\x98\xe8`\xd6\xbf\x8a\xc7\x88fI+\xd9\xbfR\x84\x1c%d\xe3\xd8\xbf\xf39h\xc5n\xcc\xda\xbf\n=\nf\x10\xdf\xd8\xbf\xe7\x81\x05bj\x9d\xd8\xbf\xb0\xcd \xca\x85\xd8\xda\xbf\xf0\xb9\x19\x93\xae-\xd8\xbf{\x13\x1a6\xc2\xe8\xd8\xbf\xfb\xc3\x1f\r\x9d\x82\xd5\xbf\xcep\']Hx\xd8\xbf\\\xcb\xb7\xdb\x9f\xee\xd6\xbfG\xa8"\x19i\xc6\xd7\xbf\xc5\xaf:\xf1%y\xdd\xbf\x0f\x1e]\xc4\xc0\x83\xd6\xbfG\x17F\x1dp\x02\xda\xbf\xa5\xbelU\xce\xc4\xd5\xbf\xcf\xc9K\x03v\xa6\xd5\xbfR\x1c\xc6\x14\xb4e\xd9\xbf.2\x8c\x1b\x91d\xd9\xbf\xb2yh\xcc\xc1`\xda\xbf\xc4\x86\t0v\xfa\xd7\xbf\xb3\xa8\xc8|q\x8c\xdb\xbf\x95\xc8\xa8b>\x87\xd6\xbf'
tbasS'strict'
p54
I00
sS'readonly'
p55
I00
sg28
g1
(g29
g3
NtRp56
(dp57
g32
(I00
tp58
sg34
S'float64'
p59
sg36
g38
sg39
I00
sg40
NsbsS'allow_downcast'
p60
Nsbsg40
S'b'
sg12
(itheano.gof.utils
scratchpad
p61
(dp62
bsg10
Nsg28
g56
sbsS'reverse_bias'
p63
g1
(g42
g3
NtRp64
(dp65
g11
Nsg45
g1
(g46
g3
NtRp66
(dp67
g40
S"b'"
p68
sg49
(lp69
g51
(g52
(I0
tS'b'
tRp70
(I1
(I20
tg38
I00
S'\xb07}\xd4\xf2T\xbc\xbf:\x0f\xea\x91G&\xba\xbf\xa5\x00/=\xf6\xe9C?\x9b\xcf+\xd2$z\xbf\xbfg\xfe\xcc\x872\xff\xbf\xbf#!\xbb#\x16M\xc1\xbf\x19\xa6M^\xac\xc7\xb2\xbfe~1!(v\xcd?\x1c@$\x922\xd1\xbf\xbf\xbb\x1c\xb1GTE\xc1\xbf\xc71b\x95\xe7\xf5\xc5?\nd\x1e:u\xef\xcc?\x8c\x04\xa9u\xf7\xd2\xcc?\x7fC\xa4\xa0O@\xa6?\x00\xc47\xe8\xf2\x83@\xbf\xadr\x12\x87`\x8d\xa3?\xf4\xb9\x87\xe1\x07$\xd8?\xef0\xf3\xa7\xfaL\xe6?\x9fe\xf2X\x1f\xcc\xd1?\xa1)\x19&\xce\x94\x93\xbf'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp71
(dp72
g32
(I00
tp73
sg34
S'float64'
p74
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
g68
sg12
(itheano.gof.utils
scratchpad
p75
(dp76
bsg10
Nsg28
g71
sbsS'symbolic_input'
p77
g1
(g7
g3
NtRp78
(dp79
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p80
(dp81
g15
(lp82
(g17
I32
g18
S'super(Cart_Pole_DA, self).__init__(*args, **kwargs)'
tp83
a(g20
I54
g18
S'self.initialise_symbolic_input()'
tp84
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p85
I155
S'initialise_symbolic_input'
p86
S'self.symbolic_input = theano.tensor.dmatrix("x")'
tp87
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp88
asbsg28
g1
(g29
g3
NtRp89
(dp90
g32
(I00
I00
tp91
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
S'x'
sbsS'symbolic_corrupted_input'
p92
g1
(g7
g3
NtRp93
(dp94
g10
g1
(ctheano.gof.graph
Apply
p95
g3
NtRp96
(dp97
S'inputs'
p98
(lp99
g1
(g7
g3
NtRp100
(dp101
g11
I1
sg40
NsS'rng'
p102
g1
(ctheano.tensor.shared_randomstreams
RandomStateSharedVariable
p103
g3
NtRp104
(dp105
g11
Nsg45
g1
(g46
g3
NtRp106
(dp107
g40
Nsg49
(lp108
cnumpy.random
__RandomState_ctor
p109
(tRp110
(S'MT19937'
p111
g51
(g52
(I0
tS'b'
tRp112
(I1
(I624
tg37
(S'u4'
I0
I1
tRp113
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\xdd%\xce`\xdc\xdf\xad\x92\x03#\xdb\x9c\xad\x01\xd5\xfe\x7f\x89\xc80$Vv\x0b\xa1\xd8H/\xff\x02|~d\xd0\xcf\xd2\x1f\x93ea\xa5\x8d\xd1\xecm\xd37\xba\xfb\x10\xb1\x98\xfc\xa9\x05{\x99\x88\x85\x9b\xbb\xc9\xa6Du\xef=\xf9|\xd1\x91\xed\xe9\xcedc\xff\xd3\xe6\xfd)\xdc\xd0\xae\x13\xa1\'\x02>/7\xe9}W]h\xf1]z<\xf1\xa6\xf4\xa35b\xe9v\x02-\xb5\xa7\x81Z\xac\x03[r\xf9\x1b\x8e\x83\x0f\x85\x80S\xbb.\xaa\xee^\xc3\xcaz\xc3y\xa9\xe3\x922\xbax[\x02\xb7-=\x89\x87\xdd0L\xec/\xac\x01V\xf0:"z\x9f\xc4\xdd\xae\xde\x91\xb6Mo\x08D\x19l 4\xf5*\xcc\xd8s\x16\x02\x15NJ\x8f\xa3[)\xc0\x08? \xe5e\x17ij\xfbx\xbe\xa4.\x18<\xd6\x0e0\xfb\x19[c7+a\xe8\x075\xd6\xf4\xfd@\x8a\xa6f\xb4w\xbf\xf6P%\xeaS\xf3\x18\x99q,t\x0c\x94\x11\xbf\xad\xd2\x1d\x83\xf0m\x8e\xc1\x8a9\xb2T\xd3\xa0\xcf\xd7\xb1\xba\xb4\xedU\x9c\xad\xf5\xec\xa0IGrW\xb4\x0f\xc7\xadd\x00\x17\xb1\x96\x08\xf8\xa1b\x05o\x8e\x85m\xda\x97\xf6\x94FF\x17\t{h\xefu\x0c\x1e\xd0+\x18\xa1\xc3\x01\xdf\xce\xb9\xb5\x15\xe9\\\xe8\x8f\x91\xb0\x9e\x192z \x0b\xf2C\xd7\x94\x0e-\xda\xed|\x8a\x1b0{\xbc\xf6\x92\x8c"a\xc9\x8c\xdcn\xcd\x9d\xba\x037\r\x18\xc4W\xe0+I\xf6\x96u=\'\x91B\xa7\xb0/T\xa2\xb9qX]\xaa\xb5!"\x0b\x12Y\xd2\xca\xd3{F\xfd\x93\x8a\xdb\x99\xb0\x15=\xfer\xdd\xd5k.2n>_Fb"\x02\xa1\x125\xbe)\x92\xad\x95zi\x1f\x92\x18\xde\xc4\x03K\xfe\xdd\x14:>\x8e\x12"\xfa7\xfe\xb3C\xad\xf2\xec\'X\x81\xf9.\xa1\xfaM\xa8k\xe1Pc\xa1\xc5\xf6\xc4\xbay\x008\x84|\xbd\xbb\x10\xaf"\xb4\x12\xf5G\x08\x90\x7f\xcf1v\xcc\x80\xbf\x85\xb7\xc2\xa9I\xaf\x1a\xfaT\x83\xcf\x94\x87\xbe\xaa\xed0\x90#H]\xaa\x9dqh\x89W\x90\xdcp\x87\x9a\xe9\xed\x8f\xefQL5tJ\x95\xb2\x80\xea\x1f\xfd\x87\xc2\x9f\x18\xd7\xd2\xc8\xc0;\xf2\xe90\xb02\xd8`\xe4\x9e\xff\xd6\xa07\x16\xfa\xd3s\'\xe0\xee\xaf\x87Z\xbb\xa8\x11\xf7y\xfb\xd0\xe4\x97y\xa5A\x8b\x82R\x94\xbd5\xf6\xd69\'\x14\xfeW\xd6+lq,\xcd\xef\xbc\x04\xafRlT[[\xd8D\xa3\x8b%}b\xdb\x86.\xf7W\xe7%:\xad@\xf1\xa5\t\xca\xc6j\x17\x93Q\xeai]\xc2u\x9b\x91\x11\x87\xc3s+\xc4\xad\xbe%L\xaa\xf7z\xff9n\x98\xb8\'\xf7\xa3\xb1\xa7\x97<?\xcb\xefV=\x12y\xaf\x91\x8f|\xc5\xed\xd4`\xa3omE\x13\xff\xa1|\x1e\xe3\xc3\xa3;\xac\x906\x0f\xba\xadM_\x1d\x0b}\xe7\xa1"\xb3\xe9\x81\x9d\x18\x0e!_\x19\xf4Yl\xcc\x001\xe3K\xadW0\x12\xab\x0c\xe8\xfe-\xbd\xb6\x1e\xf3f,\xbe\xdfTu\xe5\x1f\xd5\x0b\xb0\xe5e\xc2\x10\x032\x94\xa6\xbb\xe3\x861O<:\x00\xc3\x16\x95\xc0%!\xb5\x9f=\xa0uK\x05\xa7\xe1v\x11w\x9bS\xfb\xc2ZbZ\xd5e\x8cJU:\xac\xd6\xa2\xcd\xdd\x14\xa0}\x7f\xa8t\xe3\x8c\x82\xbc0\xc4E\xdf\xa5\x90[E\xb5p\xb3j\xad1\xa2N5\xeat\xb2:\x06~\x00\xb5\xc1j<)\xea\xa0#frq\x9d<\x16\xa53/[\xcb\x14\xc7\x8d\x02|\xf0\x8eU\x03\x8a\xe5w\x1f\xb2\xc9\xe8\xd0`\n\xce\x90/\x81\xe1\xc0(\xd6\xcapSkr|j\xaa\x12(k1p)&9\xee\x01\x8a\'\xb2\x13\\\xf0\x06\xd5\xb04\xd0\xf7T\xb9vX\'\xf5\x91\x0e\xfc\x9a\x97\'o\n\x0b(\x88\xa7T+\xee\x0f\xb2\xcb\xe4\x86\x03\xf2A-\xa9\x0e\x01]\xe8\x07\xdd\x83\xbc\xed\x82M\xf3\xfe9)\x98mjROv\x95-\xe2j\xba\xcc\x08\xf9\xea\xe02`\xb9\xb5\xda\x10\x9b\x17\xce\xf5\x86K\xd7\xa2\xd0\xc2\xeb2I\xe7\xc3\xfc\x1b?\x8c\xc9L\x16\x0f\xccj\x12\x88\xb3\xe6qC\xdf@\x0b\x8eX\xab\xd5\x92\xfc\xcf\x14\xb4$)x\x06Cz\xc5p74F\xdc\xdc\xd84\xd8!O\xe62L\x12\xc2D&\xda}\xb6\x9a\xec\xb3V.;/\x83E+\xf6\xb6\xde3pf |\t\xef\x82hp\xda0vg\xf3S\x88\xe1!\r\x14\x14\x1bZ\xde\x89\xd6@\x90\x08\xbf\xad[G\xea\x83\x81\xc8\xb7\x0eH:\x14\r\x8cq\xe3\xc8\xa6\x06\xe4\xc3cC\x0f\x17Zs\x9e\xcf\x0e\x11\x9c\xcb\xbe\xfalK\xa5~\xb2\x19}\'\x13-ivm8\x97\x1a<\xdej7\xdd\x8bO%F2N\xab\xd94\xa2S\xb2\x8f\x90~\xfa\xf6\xb6\xa5<\x95\x13\xf2\x99\x12\x16\xb8F\xb8{\xe5\x98\xae4t\xf3\x81\xfb\x04I\x14\xa5\xce\xaf\xde\n\xe2\xe1\\\xf6A\xa0\xf7u\xbc\xa6P\xd2\xf9\x93^\xfe9M\x1a\xa1=\xd6\x97\xa5\r\x1aQCV\xb9\x8d\xee}r\x16\x0c\x8b\xc8\x91\xc6\xb1}\xa5\n\xe5\x9f\xb8\xd2\x19/\xae\xa0\xd4\xc0\x10\xa4\n\xab}\xf5\xca\xe5\xa2\xda\xba\x88\x87\xa3\x93\x89\xf5\x9b\xa4\xb1\xafV\x196\x1e\xc7x7\x90W!\x00\xcf\xf2\x95\xdb\ty\xe9gevi\x15W\xf5<\xbf\x0c\xad\x1b\x1an\x84g\x15\xf8\xeci|\x92eS\xf5\xe8\xe1\xc3\x16\xd1`\xdb2$\xea\xf4\xadUB\x93Es\xf9\x80J=\xd5\x7f3\x16\xa0\x13|^\x9e\x96iZ#0\x03"\x16\xb6\xc3\x82e3\x90\xd3o\x02\x8bVQomI\x95\x86\xaeVn*\xd8\xc6\xba\xf7v\x06 \xf7l\x85\xa9\n\xd4\xacw\xec\xf6^\xb6\x97\xea\x8c\xf2\x10r_\x05\x8d\x803\xf6\xaa\xa4\xe3\'\xf2s\x1d\xf8T\x07E\x9e\x89\xb6\xa1\xfc\xbd\x9b5\x13\xd1\xa8&=\\\x9e_\xb8\xddbo\xbc\x7f\xcf\xcdz\xbe\x07\xfck9<\xd1\xa2\xec\xd0y\xb1\xd8>\x98\x802\\\xbbP\xb4cd\x80\x9a\x9c\xfa\xf77\x0c\t\xa2-Ohq|k\x91\xabn\x9b\x13PG\xf5M\x8b5I\x87t\x08\x98 \xa7\x89h\xde\x04\x94}\x9a\xab\xa0\x7f\xf2\xc6\xf9\xe64\xb8\x887\xfb\xe3+/\xa8K\x87\xaeR#\x91\x94,\xece43\xb0\xe9:rCn\xe6\x8fK\x1f\x8ct\x8eZ\xba\xab\x02i\x0e\xf6\xa5\xd7\xb0D\xffzO\xc6\xdd\xb3\xc3\x8c%;\xd6\x96\xa9\xf7\x0e!/\xc6K\x07\x03\xfd9eI=\xc8Ak\x19xf$\x8f\xdf\x86(\xcerp!O\xdd\xc7\xd4~\x8f\x98\x9d<4\xd6\x17I\x0c\xdd\xe2\xa0\xd92\xbc\x0b\x03\xb0\xb5\xa4!\xc6\x82S\xde\xd6P\xf2\xdf\xa6\xf6\xc3zE\xe2p{d\xf58\xda<\xb2>\xda\x97\xd1\x9fBeVO\x19\x0f\x10\xf75\xf5\xf0\x96\xae\x93\xcb\x89GB\xd4\xbeh\xf9\xba\xa4\xc1\xe4\x0f\x8e\x18\xb0k\xfcH\x1a\x07\x05\x1eA\xf0j\x96\xa0c\x11\xea\x17\xd3`\x7f\xa3\xba\xd6\x0c\x84U>\xa2Q%\xf0\xf5]C=\xc9P\x18\xd6m\xe4\x00\xa4lj\xe3l\x0f\xa6\x11\x8eU\xd2\xf39o\xfeG/\xef\xea\x86\xf5^:\xf5\x1aR\xd9!\xea\x88\x14\x07m\x05X\n\xbd8\xea\xe7\xe8\x8bY\rK\x94\x00\x97*\x00\xabT\x18\xe9\x14V#\x11\x9a\xfb\xddDt\xf6\xffX\x01+\xc1\xea7\xe6u_\x0f\x0c2\x14u\xac\x16\x8bso\n\x16F\xd7\xad\xc7Y\rla\xbe\x94\x11\x8dy\xe6\xc3=\xcf\xea\xf0\x14\xeb\x9d\xbb\xf0eF\xb8\x88y\xcc7~H&i\x9e\x0b\x93d\xe9\xa6P\xf8\xd6\x8b\x0e\x82\xf3\x11S\xf8\xaa\xcd(\xe0\xa76_\x04\xc15>\xbb\xa1\xf5?\xfaj\xd6\xf3a\xca?\xc1\xff1\x9f\x9ak\x95\x82ld0\xec\x032\xb8\x9f\xf3 \xcf\xac\xe9qx\x97/\xf4\r-\x17w\x07\\\t\xfcs\xd6G\xbe\x8f\x1d\xbf\x18\xd1h:?\xec\xe7\x0c\x9cSc\xf0\xf2\x88\xef\xbe\xf5\xb2%\x1a\x1cP\xebvqD\xf7\n\xaf\xd1\xfe\x8e]v/\xee\x85\xdc\xb5i)\x1f\x86\x11\xdf\x9d\xd5\xefZ\xa8\xc7\x9a(\xb0b\xe0g\x1f\xec?v\x9a\x1a\x0bB\xc7\xae\xa3\xffb\xa0\x8f\xd5I\xe3\x845\xab;\xf7\x83\x18\xc9\xa4 }\xc8\xd7\xf9\xfd\xd4\xdf&p\xb50\xcf\\\xf2k\xf8\x81\xe72\xfbr\xb4\x8b\x15%\x02\xac\x9a\x98\xbc;a\xef@\xed\xaa\xce\x1e\x9ar\\Bf\x87\xeco\x13\xc3J\x99-KP\xe8\xdf\x12\xd9\xf2\xfa\x1d\x1d\x96\xe5a1\x9a^\xc3\xfa\x81\xa1\xf4dFn2\x08\xa2\x97<|\xe9i\xc1{\x93\x93\xf5E\x19\xe9>\x14\xf9\xad\xf6M"nw\xcc\xbe[\xd8\x92wN\xd9\xf4\x0b\x08v/\xc1,\xcc\x97\x12:\xf4\x10\x88\xd7-O\x9d\xfe\xd7V\xed\xd3j\x89\xb9%\xde\xa1\x07\xf5\xe8\x8c\\\x1f\x13:#H7#!}\xe1_\x00\x8a\xf5\x14\x92\xaf.\x94\x006\xf3a\x06b2\\K\x0c\xe3\xeaU\x15\t\x83\xd4(\xfd\xbbj\x88\r\x99e\xbb\xe1\x0eK\xf3\x0bX\x0f\xaa*Q\x1aB\xfd\xf3\xb0c\xf8\xce\xbb\xdb\xe7q\x00j\xf2\x12\xdcn \x9b\xf3}\xe9\x97\xe6w\x95\xbc\xf1\xb9\xea\xf5{\x1e\xbca\xf6\xc5\xcd+m\xe2J\xcf\x89K\x1b7\x8ebh\xfeV\xe0:C3i\x97A\x158\xc7x\x7fIG\x0f\x0c\xf7S\xe7\xd5$|\x813\xab\x95\x18hh\xb1&\xc5j\xd4\xe8\x03\x9c~/\xed\x91\xeb\x85\xe4\x80N\xcd\xc2\x9c8\x14p\xfd]\x8a\x8e\xbf\x8cB\x17\xdf$+4u\xa9\xc8,\x1a\xb0\x98\xf2X\xf5M\x8f\x85\xe7\x04R^\x96\xca[5Q\x17_\x1f\xc2\xa6`\xbe,<[\xaf\xf5\xf1 \xa08\xc7\xc3\xc8Q\xc3\xdd\xdb\x91Bij\xf4\x99m\xb2\xff\x18\xe6\x83\x91\x95\xd1\x10a\xc9Y\x88\x9d&\xd6\xda\xd0\x8az\xfc\xb6\xe9\x95\xcd\xe1\x0b^u\x9e\xb7\xde\xee}\x020\xb4\xb4w\xd3<\xae\xd2\xfe\x937\xd4\x86\x8d\x0b(\x12\x03\xefp\x1f\xd5\x9e\x10\xe5\xd1\xd1\x95\x0ep}\x8f\x83O\x80RH*!\xb1|\xc2=\x81\n\xb5\xaa\xb0\xd7\x1e\xd6M\xa6w)@\n7W/[\x02K\xa3\xf5u^\x89\x99R\xec\x17\x85{t\x8e!\x1e\x88\x9c\xb5\xdd\x0f\x93\xf5\xf5(I\xc4K&'
tbI560
I0
F0
tbasg54
I00
sg55
I00
sg28
g1
(ctheano.tensor.raw_random
RandomStateType
p114
g3
NtRp115
sg60
Nsbsg40
Nsg12
(itheano.gof.utils
scratchpad
p116
(dp117
bsg10
NsS'default_update'
p118
g1
(ctheano.gof.graph
Variable
p119
g3
NtRp120
(dp121
g10
g1
(g95
g3
NtRp122
(dp123
g98
(lp124
g104
ag1
(g7
g3
NtRp125
(dp126
g10
g1
(g95
g3
NtRp127
(dp128
g98
(lp129
g1
(g7
g3
NtRp130
(dp131
g10
g1
(g95
g3
NtRp132
(dp133
g98
(lp134
g78
asg12
(itheano.gof.utils
scratchpad
p135
(dp136
g15
(lp137
(g20
I74
g18
S'self.initialise_corrupted_input()'
tp138
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p139
I80
S'initialise_corrupted_input'
p140
S'size=self.symbolic_input.shape,'
tp141
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p142
I255
S'<lambda>'
p143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp144
a(S'/Library/Python/2.7/site-packages/theano/gof/op.py'
p145
I401
g26
S'self.add_tag_trace(node)'
tp146
asbsS'outputs'
p147
(lp148
g130
asS'op'
p149
g1
(ctheano.tensor.basic
Shape
p150
g3
NtRp151
(dp152
S'_op_use_c_code'
p153
S'g++'
p154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p155
(dp156
g15
(lp157
(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp158
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp159
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p160
I1140
S'make_node'
p161
S'return Apply(self, [x], [lvector()])'
tp162
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp163
asbsg28
g1
(g29
g3
NtRp164
(dp165
g32
(I00
tp166
sg34
S'int64'
p167
sg36
g37
(S'i8'
I0
I1
tRp168
(I3
S'<'
NNNI-1
I-1
I0
tbsg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p169
(dp170
g15
(lp171
(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p172
I499
S'binomial'
p173
S'ndim, size, bcast = _infer_ndim_bcast(ndim, size, n, p)'
tp174
a(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p175
I386
S'_infer_ndim_bcast'
p176
S"return ndim, tensor.cast(v_shape, 'int32'), tuple(bcast)"
tp177
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p178
I1110
S'cast'
p179
S'return _cast_mapping[dtype](x)'
tp180
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp181
asbsg147
(lp182
g125
asg149
g1
(ctheano.tensor.elemwise
Elemwise
p183
g3
NtRp184
(dp185
S'__module__'
p186
S'tensor.basic'
p187
sg40
NsS'scalar_op'
p188
g1
(ctheano.scalar.basic
Cast
p189
g3
NtRp190
(dp191
S'output_types_preference'
p192
g1
(ctheano.scalar.basic
specific_out
p193
g3
NtRp194
(dp195
S'spec'
p196
(g1
(ctheano.scalar.basic
Scalar
p197
g3
NtRp198
(dp199
g34
S'int32'
p200
sbtp201
sbsg153
g154
sS'o_type'
p202
g198
sg40
S'convert_to_int32'
p203
sS'ctor'
p204
cnumpy
int32
p205
sbsS'destroy_map'
p206
(dp207
sS'nfunc_spec'
p208
NsS'inplace_pattern'
p209
(dp210
sS'__oplist_tags'
p211
(lp212
S'casting'
p213
asg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p214
(dp215
g15
(lp216
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp217
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp218
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp220
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp221
asbsg28
g1
(g29
g3
NtRp222
(dp223
g32
(I00
tp224
sg34
g200
sg36
g37
(S'i4'
I0
I1
tRp225
(I3
S'<'
NNNI-1
I-1
I0
tbsg39
I00
sg40
Nsbsg40
Nsbag1
(ctheano.tensor.var
TensorConstant
p226
g3
NtRp227
(dp228
g11
Nsg40
NsS'cached'
p229
I01
sS'data'
p230
g51
(g52
(I0
tS'b'
tRp231
(I1
(tg37
(S'i1'
I0
I1
tRp232
(I3
S'|'
NNNI-1
I-1
I0
tbI00
S'\x01'
tbsg12
(itheano.gof.utils
scratchpad
p233
(dp234
S'unique_value'
p235
Nsbsg28
g1
(g29
g3
NtRp236
(dp237
g32
(tsg34
S'int8'
p238
sg36
g232
sg39
I00
sg40
Nsbsbag1
(g226
g3
NtRp239
(dp240
g11
Nsg12
(itheano.gof.utils
scratchpad
p241
(dp242
g235
Nsbsg28
g1
(g29
g3
NtRp243
(dp244
g32
(tsg34
S'float64'
p245
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp246
(I1
(tg38
I00
S'ffffff\xe6?'
tbsbasg12
(itheano.gof.utils
scratchpad
p247
(dp248
g15
(lp249
(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p250
I848
g173
S'return self.gen(binomial, size, n, p, ndim=ndim, dtype=dtype)'
tp251
a(S'/Library/Python/2.7/site-packages/theano/tensor/shared_randomstreams.py'
p252
I135
S'gen'
p253
S'new_r, out = op(random_state_variable, *args, **kwargs)'
tp254
a(g172
I509
g173
S'return op(random_state, size, n, p)'
tp255
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp256
asbsg147
(lp257
g120
ag100
asg149
g1
(ctheano.tensor.raw_random
RandomFunction
p258
g3
NtRp259
(lp260
g173
ag1
(g29
g3
NtRp261
(dp262
g32
(I00
I00
tp263
sg34
g35
sg36
g38
sg39
I00
sg40
NsbaI00
aI0
absbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p264
(dp265
g15
(lp266
(g172
I509
g173
S'return op(random_state, size, n, p)'
tp267
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp268
a(S'/Library/Python/2.7/site-packages/theano/tensor/raw_random.py'
p269
I198
g161
S'[r.type(), self.outtype()])'
tp270
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp271
asbsg28
g115
sg40
Nsbsg28
g115
sbsS'update'
p272
(g104
g120
tp273
sg12
(itheano.gof.utils
scratchpad
p274
(dp275
g15
(lp276
(g172
I509
g173
S'return op(random_state, size, n, p)'
tp277
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp278
a(g269
I198
g161
S'[r.type(), self.outtype()])'
tp279
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp280
asbsg10
g122
sg28
g261
sbag78
asg12
(itheano.gof.utils
scratchpad
p281
(dp282
g15
(lp283
(g20
I74
g18
S'self.initialise_corrupted_input()'
tp284
a(g139
I83
g140
S'dtype=theano.config.floatX) * self.symbolic_input'
tp285
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p286
I144
S'__mul__'
p287
S'return theano.tensor.mul(self, other)'
tp288
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp289
asbsg147
(lp290
g93
asg149
g1
(g183
g3
NtRp291
(dp292
g186
S'tensor'
p293
sg188
g1
(ctheano.scalar.basic
Mul
p294
g3
NtRp295
(dp296
g192
ctheano.scalar.basic
upcast_out
p297
sg153
g154
sg40
S'mul'
p298
sbsg40
S'Elemwise{mul,no_inplace}'
p299
sg153
g154
sg206
(dp300
sg208
(S'multiply'
p301
I2
I1
tp302
sg209
(dp303
sS'__doc__'
p304
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p305
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p306
(dp307
g15
(lp308
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp309
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp310
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp311
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp312
asbsg28
g1
(g29
g3
NtRp313
(dp314
g32
(I00
I00
tp315
sg34
S'float64'
p316
sg36
g38
sg39
I00
sg40
Nsbsg40
NsbsS'label_bias'
p317
g1
(g42
g3
NtRp318
(dp319
g11
Nsg45
g1
(g46
g3
NtRp320
(dp321
g40
S'lb'
p322
sg49
(lp323
g51
(g52
(I0
tS'b'
tRp324
(I1
(I3
tg38
I00
S'\xd3\xfa\x0f$\x02=m?\x89\x1ca\x8eJ\xda\x93?\xe9\x1b\xe3\xd2\xea\x81\x97\xbf'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp325
(dp326
g32
(I00
tp327
sg34
S'float64'
p328
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
g322
sg12
(itheano.gof.utils
scratchpad
p329
(dp330
bsg10
Nsg28
g325
sbsS'activation'
p331
g1
(g183
g3
NtRp332
(dp333
g40
S'sigmoid'
p334
sg188
g1
(ctheano.tensor.nnet.sigm
ScalarSigmoid
p335
g3
NtRp336
(dp337
g192
ctheano.scalar.basic
upgrade_to_float
p338
sg153
g154
sg40
S'scalar_sigmoid'
p339
sbsg206
(dp340
sg208
Nsg209
(dp341
sg153
g154
sbsS'reverse_weights'
p342
g1
(g7
g3
NtRp343
(dp344
g10
g1
(g95
g3
NtRp345
(dp346
g98
(lp347
g1
(g42
g3
NtRp348
(dp349
g11
Nsg45
g1
(g46
g3
NtRp350
(dp351
g40
S'W'
sg49
(lp352
g51
(g52
(I0
tS'b'
tRp353
(I1
(I20
I429
tg38
I00
S'+E\xc0\x02\xb5{\xd4\xbf\xffD7\x9ec\xc9\xce\xbf\xa0\xd7\x15\xf7\x9c\xab\xc3?\n3oD>I\xd5\xbf\xbe\xe7\x13\xc3*\xb7\xdf\xbf\x1e{3\x03v\xd7\xda\xbf}\x13\x97\xd9]\x1e\xad\xbf\x9f\xcb\xbc\xe7\x8e\x00\xbb\xbf\x81\x05=\x81\x0f\xff\xa3\xbfK^\xb5K\xf7g\xd0?\xec\xe4qL\xbb\xc7\xc9?\xfc\x0f\xdfr\xd8Q\xde\xbf\xf1\xe7\xa07\xee^\xd1?\xf3$\xa0BB\xac\xa7\xbf\x10v\x17\x9f\x99\x96\xd7?\xbc\x80j\x9e%5\xc1\xbf4\xb8\xe2(w;\xd1\xbfp3\xcc\xc2x1\x94?i-c\n\x91r\xc0\xbf\xdez\x0cp\x814\xd2\xbf\x1c\x97R\xfe\xc8O\x90?"b\xb0z\xca\x91\xda\xbf\x8f\x88\xc5\xcf\xf0\xe4\xbe\xbf\x867\xb4\xd9\xb3\xf5\xcb?\xc7\xe6\x17\xce\xa4\xe4\xb2\xbf\x1e\x00Qi\xa7 \xb8\xbf\x18\xca\xb8Q\xb8\x9a\xde\xbf\xcfv\xc2\xbeU,\xd3\xbfcb1\x01pI\xd7\xbf\xc3+\x05\x17\xe6\x1d\xd2\xbf\x7f\xaca\x15\xa6\x7f\xd8?\xb0\\i\xd3j\xca\xd3\xbf\x0fS\xafI|\x8c\xd9\xbfU;\x03vP\x95\xd6\xbf\x1d4/OS^\xd1\xbfO\xf6!\x08G,\xcd\xbf\x9cw#mz\x1e\xdd\xbf\x84s/\xc7{>\xd9\xbf\x82\xec\x9e\xe1S\x0b\xcd\xbf\x08\xb2\x9f\x05}\xbb\xd8?\xf6\xd4\xefk_#\xce?\xf0\xde\xdf\x8bh\xb3\xce?\x07|2K\xe7\xe3\x87\xbf\x16\x82\x00\xfc\x84l\xc7\xbf\xce[\x02\xcc\xa8\x06\xc7\xbf\xb3\xd5Q\xf7\x7f\x18\xbd\xbf\x8e\xee\xef\xee\x9b\xc3\xd4?\xb8\x07\x01X\xc1\x96\xd5?\x1fV\\\xe9G\x1d\xdb\xbf\xa97KW\xee\xf3\xc8\xbf&\x10\x8f\x06\xeb\xca\xd9\xbf\xd2{\x8f\\!q\xb7\xbfbjIYz\xd1\xd8?\xadx\x11;c"\xbe\xbf\xed\x90-\xe3?\xaf\xab\xbfr\xe3\x99\xf1\x12\x98\xc9?g\xc0\xb2hL{\xe0\xbf\xa9W\xb6\x13\xd0U\xe0\xbf\x13u\xeaw\xfc\xb1\xd7?\x85\xae 0]*\xd7\xbf\x1a|\xea\xb2-\x98\xd9\xbf\x0f\xe6i\x00\x94\xf9\xd6\xbf\xe99\xb4\xce/\xf8\xd1\xbf\x06\xa8\xe9\x94\x9a\x0f\xd9\xbf+\x010C@\x04\xda?\x9c5\x82)Z\x89\xc6?\xfc\xc7#\xf2\xd7z\x91?\xadv+^\xbdG\xd8\xbf\xa0:\xdf\xf7\xbd*\xd2?\xd3\x9d\x1b\x12a"\xd7?T\xf6m\xc8+\xde\xd8\xbf\x88\x80\xc3\xabO*\xba?\t\xd4;\x81\x07n\xc7\xbf\xaf\x86\x15c\xf7:\x9b?=\xc8v\x954\xdc\xb6?\xa7\xea>\xfau\xd2\xd0\xbf\x11\x12\xa8\x04\xa2\xb2\xcf\xbf\xd8\xfa\t\xf8\xca\xfa\xa1?3\xdak\xdcv]\xdb\xbf\x07\xde\xe6\xf2\x83\x97\xd7?\xa0\xd7{\x06\xc6G\xcf\xbf\xd1\xaf\xd3R?\xa2\xd1\xbf\x10^}\xfa\xdb\xff\xc6?\xe8\xd0\xd0\xa0\xfd\xcc\xc2?\x95z\x81XG\xa2\xc6\xbf\x9e\xa8\x0c\x07\xfa)\xcf\xbf\x7fS\x83Hp;\xb3?\xf7I,\x94\t4\xd5\xbfi_\xd9\x1au\xb1\xdd\xbf\x0f:\x08\xf0?\xff\xc0\xbfB\x0e\xa2\x17\x89\xab\xa3?\x1d\xbd\xbezK\x0f\xcc\xbf\x82\xcf\xc6A\xdd\x9e\xbd?\xbfh<\xd5{\x05\xc6?\x06\ty ]<\xc6\xbf)\xff\xd6\n\x9b\xd2\xca\xbf\x85\x8a\x0ei<o\xd6\xbf\xe0L3\x93m\xde\xd3?\xf3\x8ai1i\xdb\xd0\xbf\xae\\\x02/\xb8c\xbd\xbfE\x03q\xeb\xa7%\xd3?\xf9\xd3\xf4\xbe\xed\xa6\xde\xbf\xa8\x84\x8ct^\xc9\xd8\xbf\'koQ:\x8b\xbe?\xbd\xa6\x9d\xec\r\x0f\xdf\xbf\xa3\x98\xa9\xca"4\xd8\xbf\x0c;\x97\x1d\xc6\xf4\xa5?\xc7\xd2%[w\x07\xc1?\x84\n\x85a\nn\x9b?\t\x96\t+\xde\x8e\xd1\xbf1\x80\xb823\xba\xc0?N\xdfY\x9eO\xe4\xd2?\xe2\xd7A\x18\xa4$\xdf\xbf%\x9fg\x0f\xe2\x89\x8b?O\\,\xc5\xb8d\xd1?f\xb9\xd6\xa0\x88r\xd1?=\xc8wS\xf2\xca\xd4?d\xdc\xef\xce;\xa8\xca\xbf\xb1\xabb\x95\xdc\x03\xd4\xbf\x88\'0\x9d:p\xd1?\x91\x07\xa7\xdb\xaf\xe5\xdc\xbf\xd4\x85\x9bl\xcf_\xab\xbf`\xe2W\xa2SZ\xd0?\x10\xa1\x1b\x02\x85\x7f\xd4\xbf\xeco\xb4\',\xfe\xcb\xbf#v{\xd8\x87\xb4J?\xca\x80L\xc9\xe47\x93\xbf\xaa\xba\xe3\xd5\xe2\xfd\xd9\xbfY[\xc1\x9d\x19\x0b\xd1?M\x97\xd5\xb6\x8fw\xbe\xbfc(\xc8aX\x99\xce?i\x81\xec[Y\xef\xd2\xbfO\xa9\xda\x9d6W\xa6\xbf\x95\xba~\x7f\xab\xa2\xca?13\x1f\xcd\x14\xef\xd0?\n\r\xf7\xe4\xb0\xba\xbd?\x90\x92!\xc2\x7f\x0b\xd4\xbf!\xb8l\xdb\xf9a\xb1?\x83\x9b\xd7\x82d\x19\xcf\xbf\xe3\x1a\xc1\x1fvV\xdf\xbfD\x13x`Z\x15\xd4\xbf\xb7\x19\x11m\xa2\xd0\xd8?V\xdfh\x9ar%\xce?\xceM$\xbb>\xd3\xc9?S\xda\xc9r\xf3\xfc\xd8\xbf\xaf(\xabN\xfa\xa3\xd3?\x17\xed\x01?\xcc_\xb4\xbfXj\xcbM0\xc3\xd0\xbf\xeb\xb9F8\xd5\xcf\xce?.\xec\xc5\xe2\xd7(\xd2?\x0b$Z\xbc\xe4\x0f\xb3?\xd6\x93C\x1c\xaby\xb0\xbf9/z\xac\x95)\xb8\xbfC|U\x80\xdd\xe4\xd9\xbf\xde.\x9fL J\xc3?n\xe1\xc6\xddC\xcc\xcb?\x06\x87\xdb:s\xa0\xd6\xbfS\xb7\x91Kz`\xd9?B+\x80\x81\x87_s?\x00\x80N|19\xb4\xbf\xe8\xb0E$A\xd3\xd8?\x1ff\xbf\x86\x9eg\xd5\xbf\x0eO$\xf6z\xec\xc2\xbf\x93$\x99\xd4qy\xd8?\xbc\x1a\xabv}H\xd7\xbf\'\xab\xdd\xb1\x98\x98\xd4\xbfo\x93x\x04\xfa\xdd\xc5\xbfN\xc7\xa3\xba(\xa7\xd4?*D\xf5N)\xb5\xd8?\xc0\\\xd1\xcd\xeae\xd0?3\x0b\xef\xfe1k\xcf?\xe8\xb7\xe2\xa0]\xe5\xd0\xbf\xcd(J\xed\x92\x8f\xcf?\x83S\xdf\xdc\xd1\x81\xd4\xbf\xa3\xdd.\xcb\xe2\xcf\xd8?\x0f\x0c\xb1\x12<\x83\xae?\xbaV\x9a\'%\xc8\xc5?\x1c\xc0\xcf\xe4Y\xe3\xcc?\xdf\xbcyp\xb9\xc7\xc9\xbfR\x18\xb9\x9bu\xb2\xde\xbf K\xd0D\xe8\xa9u?\xbb\xf9\xd5+\xa4\xc1\xd1?\x15\x9a\xf7\x9bLU\xd2?\x90~,Ote\xbc\xbf\xb0)n\x08^R\xc0?@7\x83S\xdb\x96\xdd\xbfF\x1e\nejS\xbb\xbf\xe8\xb3 -\x04C\xdf\xbfB4V\xc1\x89\xbf\xc5\xbf5\xd06\x18Q\xee\xb1?\x93r\x19\xebI\xe1\xd0\xbfp\x07R;\x00&\x97\xbf\xa3c\xb6\xad2\xe3\xdb\xbf\xd1@q\xdd\xbb=\xd1?\x8cY\xc6h\x14%\xcf?\xb0\xbe\x10\xa6\xc9L\xd6?\xf7\x91mP\xce;\xc3?d\'\x94q\xd0\x8a\xba\xbf\xfau\xe4`\x8e\x13\xb6\xbf\x150\x85\x10\xb4-\xd1\xbf\xeb\xae\xb6\xd6<\x1b\xba?\x99\xc0\xa2\x03\x13{\xd3\xbfe}@\xff\x89f\xc8?3\xcc\x0c7Wr\xd6\xbf\xf7\xca)Y-\xdf\xd5\xbf\xce\xdb=\x06wg\xda?\x8f\xdb\xdb\xb7\x8e\xa0\xc7?\x9d\xc1\x08.5\x0e\xc2?\xa6\xae\x1d\xe6f\xd5\xc6\xbfmx\xec\xfdp\x1d\xa4?kb&\x08\xf4\xe4\xae?O2\xc5\xb7\xb4\xbc\xbe\xbf\x0e\x85\x1a\xb2G\xc8\xd3\xbf\x00+o\xa7\'\x01\xd9\xbfy\xff\xdd\x1c\xff\xa8\xd0?%V\n\x8e~\xb6\xc5\xbfx\xd1\x8b\xdf&\xfe\xb1\xbf\xff\xb7\xe2x\x11\x8e\xcb\xbfJ\xac\xe0\x1a\xd0\xa3\xb3?O\xa8\'\xa4~\xf6\xd0\xbf\x92\xf3y,\x0f7\xbd\xbf[\x10T\x17g\x11\xc7\xbfMC^"\xc1\x8d\xc0\xbf-l:\xd7\xdf7\xd2?p\xf9\xfe\xdd\x95W\xdb\xbf\xbe\x9d\xec\xee\xb9#\xb0?Kc>\xaa\x80w\xd2\xbf\x8d\xf3M\xca\xf5[\xd9\xbfVN\xad\x0f\xf3\x01\x7f\xbf\x1c\xf8\xa9j\xab\xb8\xd5\xbfK\xb4Q\xaa\x82\xd1\xd6?\xcb\xc2\x1e\x1d0x\xdd\xbfq\xcc<\xd3\x99\x8b\xbe?\x16)`g\xfd\xdd\xd2\xbf\n!\xdc?\n\xfc\xd5\xbf\x1d\x11V\xdc\x94\x9e\xbd\xbf0\x91\xbf5]\x10\xd4?^\x17`\xb32\xf5\xdf\xbf|\xc2x\xbbW.\xac\xbf\x1e\xac\xa9>\x1do\xca\xbf\x7f\xbaM\x9c\x97\xa9\xd1?\xb9\t\xa0\n\x9f\xf7\xbd?\x1cj\xd5RX\x1b\xd1\xbf\xcb\xc4\xb6\x99\xe2A\x96?\x91Vv\xf3\x8c\xc2\xd0\xbfi\xbdW?\xdd\xf2\xc5?\xa5\x8e\xef\xbb\xa0\xd0c\xbf\xe9\xc15Y{\xcd\xc0?G\xd1\xc1\x8cg\xd4\xb3\xbf\xdc^\xc5\xde\xf4^\xcf?w\xf5\xe0\x11i\xdc\xd3\xbf}\xa6<=:_\xd2?\x85\x9ci\xc4d\x97\x92\xbf\r\xfe\xd3\xffsj\xc6?P\xda\xe9A4\x8c\xc4?%\xc0\\\x89F\xf0\xd6\xbf\xdc\x8a7\x84H\xf0\x92\xbfEv\x15\xf9\x05`\xd7\xbf\r\xb6\x07\xec\xe6\x06\xd3?\xa8\xb5\xd6\x0c\xff\x9c\xa0\xbf\x83]8\x80\xbaN\xc8\xbf\xed\xdf=\x84\xb4\xcb\xde\xbf\x95\xed\xaa2\xae\xe4\xcd\xbf\xa6\x8b\x9e\x9d\xdeN\xd2\xbf\x9d\x12\x1f\xff\xed\xe7\xd2?\x1d\x10\xdd\xba\tI\xd1?\x04\xa4>\x8a]X\xc5?M\xc4z\xec\xf9\x00\xa8?\xbd\xa9\xf8%\xaby\xdd\xbf\xa4B\x19\xa1\x8b\xa3\xbc\xbfe\x11]l\xa2G\xbc?[\xc4\xd2\xd3<\x1d\xc9?\x9c\xfa\x9d0\xbc\xac\xc9\xbf\xd8%}^\xc5\xed\xc5?\x8b\x11\xfd\'\x92\x99\xbf?\xab/2\xcc\x1f\x8b\xce\xbf\xb1F\\r\x86\x08\xdc\xbf\xcf)\xf1\x9c\xd3]\xdd\xbf\x1cKN\x15\xb4\xa9\xb6?\x9f*U\xe3\\\xb8\xa4\xbf\xa3\xd1\x88\xd0\xbe\x03\x91\xbf\x81\xf7\xfd7+\x96\xd5\xbf\x97w\x9eE\xdax\xd8\xbf\x87m \xb3\xe1\xae\xdf\xbf\xa3\xab`\xea\xd5\xc8\xdc\xbf\xcb\x94(\xfcD0\xc1\xbf\x82\xca\x01\x06M\x84\xd0\xbf\x16\rUd\x0e0\xb7?\r\xd8\x1a\x07\xe8\xda\xb9?\xd8w\xdc\x83Q\t\xbb?\xeb\x93\xc3\x8d"\xc4\xda\xbf\x9b\xab)\xf9\xcfX\xc5\xbf&\x9f\xdf2\xe7U\xca?h\xa6\xb5t\xe6\xf4\xd7\xbf\x1b\xc3B$\xa9I\xe0\xbfD\x81\x1b-k2\xc4?\x02L\x9abi\xe8\xd0\xbfy\x8f4I\xd3\xc2\xd7?\xca\xf5 \xab>t\xc3?xR\x8bBs\xc7\x82\xbf\x1b1\xfc\xcb\xb2\x18\xd9?\xab\xc7J\xc6\xd9a\xcd\xbfNm\x87 \xf8\x8a\xd7?\x93%P%\xa9\x95\xd5\xbfZ\x82#O\x9b6\xcd\xbf.\xc5\x089o\x18\xb1\xbf\x12\x9b7\xe9\x8c\xa7\xd4\xbfV\xcb\n*\x8e}\xd7?\x15\xf2\xd6\x8b\xb5/\xd9\xbfm\x82\xa9Z\xe2\xb3\xd1\xbf\xf4\xee!\xb5+\xe1\xcd\xbf\x12\x93\xff\xc00\x10\xbf\xbf\x18\x97W!\x0c\xca\xcf?b\x81\x10x \x93\xaf\xbfG4\xf2\xcd\x18\xad\xd8\xbf!g]\xfcL\x18\xd8\xbf\x8a\xad\x96t\xfe\xc1\xc6?\x0fQ\xd4\x9a./\xd9\xbfl\x02\xd1\xff\x89\xf0\xc4?s6\xa6\x05y1\xbb\xbf:\xf0\xdbg\xb61\xd9?\xe8\x7f\xe0!V\x93\xc8?G\x92#\xd1\xa4S\xd0?\xd2\x12\xb2\x1d\\\xdd\xdd\xbf\x99\x11\xa6\xeaa\xa2\xbf?\xd5\xbeS\xa1\xbap\xa4?o\x99\xfa\x88\x9a\xf9\x9a?\xb7\x9327\x87\xf1\xd2\xbfIS\x99*_\'\xd1\xbf\xd6\x13\xa0\xb3+\xfc\xd8?\x8e\x08\xceZ\xb9\xac\xd2?\x92\x89j\xf9\xd8\xcc\xa4?\xcaGE\xe0\xfe\xc4\xd7?\xde~\xb2\xda\xe0#\x93\xbf\xb2\x1a\xa4j\xf2E\xc9?\x92c\xaew\x89q\xd5?\x0c\x0cP?\xea|\x94\xbf\x95\xae\xec\xc4\x05\xc8\xca?\xa8\xc2&\xd2\xfb\xfb\xb9?\x17\x166\xd5y\\\xd6?\x80\x13\xb7\x8ew\xe2\xc7\xbf\xcaM}r\x9c`\xd7?P\xa5\xc9\xe1\xb8A\xae\xbf_`O\xb4O\xef\xd3\xbf-&4\x12I\xd2\xd1\xbfxa\xe1\xd2\xb05\xd3\xbf\xbc\x8c\xf6\xe7\xf6a#?\x8b\xed\xa6\x87\x05\xa7\xd6\xbfl\x11h\xbd-Z\xca\xbf\xd5\xc2\x8c\x1c\xc8\x90\xd8\xbf,\x93\x7f\x17E@\xd3?29\xa5\xe19\xc0\xc4\xbf\x03\xe6\xcc*;\xac\xd8?~\x05T9\xc1\xb8\xbe?\xb6\xf3\x18\xc3\xe7\xb3\xca\xbf\xd5P\xc1\x8e\x86\xbd:?\x04\xc6x/\xe6\x80\xd8?@\xc7T\xc1<.\xde\xbf\xb2].\xc6\x15c\xc7\xbf\x80\x17B\xe3\xec\x9f\xc3\xbf\x03(s\x9e%\x03\xc5\xbf\x83\xe2U\x0f\xa7\xab\xd4\xbf\xd5\xf6\xbf\x88W\xd4\xb7?\x88\x89\r\xaf\x1d\xc5\xd4?\xa3\xe14L\xe64\xcd\xbf\xa0\xd4~Oj\xab\xc0?\x1a\xa9\xfeS\x9a\xb3\xce\xbf\xca\xda\x92) m\xd7\xbf\xe9?\xcb\x7f@\x92\x9e?\x8e\x13\xc3-4o\xb2?\xc5\xadS\xda\xebP\xc3?\xa8ix4\x96y\xd1?\xf3\xf7*\xb0\xe0\x17\xcb?\xd8o\x0f\xd8+\xc2\xbf?\n\xbbZ?\xc9\xf5\x9f?\xcb\xfceJ\xf2\x81\xd7?\xe0Y-Zw\xb5\xc1?\xf5\xfda\xa3N\xa5\xd0?\xf3 \xf3\x023\x11\xdd\xbf\xad\xd6\xb3\x07-\xf5\xd7?\xaal\xf2j-\t\xd7\xbfASR:DR\xd5?\x0b,\x7f\x9eR\x87\xa6\xbfet`\x8cKM\xca\xbfU\x06\xdcU\xdej\xb0?9\xd70\x86\xef\xa9\xa5\xbf\xc4\xb6\xca\xe6\xcf\xbd\xc7\xbf\xeb-\xaeMG\x8c\xcd?\x9b\xeayB\xc5\xef\x96?<,\xb8\x18\x9a\xb6\x9c\xbfnZ\x81\x8e9\xd9\xc9?=\x93\x18\x96\xd6\x05\xc1\xbf\x11\x19\xf5\xa0\xf3\x04\xd3?\xbc\xa1\x16-\xfa\xe6\xd7\xbf6\xca\xef\x85GM\xdc\xbf\xd3c\x18\x1f\xb2$\xd0\xbfX~\x08g\xfai\xb9?\xdc\xd9\x05\x80\xe8\x15\xc5?\x97_\x98\xeb\xd3\xcf\xd7\xbf_\x99\xaex7\x9e\xd9\xbf\x8b\x07\x95G=\xc9\xcd?\xec\xe6\x15\xc7Q\xa3\xd8\xbfH\xb2]E\xab\xc5\x9a?&g\x85\x0b\xab_\xd4\xbfJ\x01xU\xd1\x9a\x82\xbf^\xb1\xb6\x91\xbb\xe9\xd2\xbf\xe6\xf6\x82\x85\xcdR\x97\xbf{,\x86M\x8d\xfe\x90\xbf\xef\xcc\xfe1\xeb\xbf\xd7\xbf\xa0\xa7\xed{\xf6`\xd2?\xa68Zdaf\xb0\xbf\x98R\x07\xd7\xf6-\xc0?\xc1i\xcdAS\x1f\xcf?\xa4\x1e\x7f4\x0et\xdc\xbf\xd6\x8b\x10\xefwA\xe0\xbf\xc5\xe2\xae\xea\xc1h\xb2?\xf0\xcaR\x99H\xd1\xd2\xbf\xda\x9c\x92\xb6\x8fF\xc8?\xb4B\x89\x0f\xdf\x92\xd6\xbf\x9e\x11q;D?\xd7\xbf\r\xac\xd1R\x14(\xbd?5\xe5l\xca\xdc\x93\xdf\xbf\x9d\xb9\xca6\xfd\x11\xc0\xbf\xe2\x11MgD\xf0\xc9?\x89\xc4\x05y\x80\xb3\xbc\xbf\xa4M#3<\xf8\xd8\xbf\x19\xec\xda\xa3\x1b\x19\xbc?;\xa5\xb88\\W\xb7?\xd6L\xea"FC\xd1?\xc2\xbdh\xee\t\xc2\xd5?e>\xbb*\x84\xb6\xc2\xbf\xaa`\xd2\xe7\xd8|\xc2\xbf\x1e\xbe\xea\ng;\xaf?.\xcd(\x0ci\xf8g\xbf1\xf0\x9fge\xe5\xde\xbf\x0c\xd5\xb4\\F(\xbc?\xe9\xcff\xcf\xe0d\xda\xbf-\xfd\x10\xdb={\xd7\xbf\x8a\xff\xbfA\xb8o\xd8\xbf\xdf+\xf5\x01\xc6\x9d\xc7?=>\xa3]\xd4\xfb\xd8?$\x10\x93\xb8\x17X\xbf\xbf\xc7\xc6+\\z\xab\xcf?\xf5\xf3\x05rv\xb2\xde\xbf\xd9<\xc3\xe8`2\xcd?\x18\xbc\xb2\xeeb\x03\xd6?\xb4)T9\x92q\x8d?\xe7\xd9BR]\x86\xc7\xbf\xc4\x9e\x90\xf4s\x8c\xd7?\xa0NI\x8d\x0cA\xc3?\xab\xffU\x9c?2\xc8?\x8e\x8do?rz\xd5?j\x9b\x9fe\x95\xf5\xd6?<"\xd7;\x8aa\xc5?\xde\xcd\xa8\x18\xf3=\xc0\xbf\xe4\xf0M\xbfZ\xd6\xc7\xbf.\x19Rrj\xfd\xd4?#D\x16\xfa\xe7D\xda\xbf\x8a\xe0\x9b[\xacg\xda\xbf\x1f\x91Q\xd5\xd8\x82\xd9\xbf\xaa\x86\xfa\x0b\x82\xfe\xd0?\xdat\x0c\x93\x87\xb3\xbc\xbfQ3y\xde;\xde\xda\xbfz\xd5{\x81\xc7\xca\xbf\xbf(\xc7\x13\']P\xd5?r\xbd\xea\x9b\xbb8\xc5?+Q\xec!\x83[\xa8\xbf\xa1\x890\xf7/\x85\xd2?d\x9b\xd6\x01x\x99\xd8?Wyy:\xb1v\xd6?t\xd0\xdd\xc3\x85e\xd3\xbf[\xf5\x9e\x05\xaa\xe6\xcb\xbfs5,\xef\x04\xc8\xd6\xbf4X\x11\xc5\x88\xd5\xbb?fQ\xa8f{\xb5\xd6\xbf\xb2\xcd1F>h\xb2\xbf\xae\x9d\x0c\n{P\xc0?p[\xf2+\xaa/\xd6\xbf8*C\xe0\xd1#\x93\xbf-\x88\xcfr\xf5\xff\xc3?\xef$~\x84\x14g\xd7\xbf\xd1[\x7f\xa4\xcd\x0f\xcf?\x87Q\xd1\x1aq9\xde\xbf\xaf4M\x13\xd4\xd7\xb0\xbf\x14\x12\xaa\xe2\xd4\x96\xdd\xbf\xb8)\xa2N;5\xd8\xbf\xcd\x80\xe1\nb\xe9\x90\xbf\\"p\xd6\xefv\xca\xbfj,\xa4\xec\t\xff\xda\xbf\xc6\x9c\xac\xe9\xa8\x9c\xbb?<X\x9b\xd0\xa2\x10\xcd?7\xd2\x84\xf6LX\xd0\xbfJ66>\xcc\x9d\x93?\xdf\x1e\xd3\xb3Z\xe4\xd2\xbfef\x10)\xee\x1c\xd0\xbfS\xb8\xa8V~\x9b\xdc\xbf\x8b,ygH\xed\xc7?\x1e\xf0\x1c\\\x1c\xde\xc3\xbf\x16\xff^\xcb\x0fX\xd4\xbf\x82\xc1\x14\xab\xdc\x06\xd2?y)\xad?C\x1c\xc9\xbf\xed\xb0\xcba .\x82\xbf\n\x10\x91X\xdb\xa8\xd4?\x98\xf8\xe4\x12\tF\xd2?\xa1\x03\xfa\x07x\x08\xe0\xbfk\x0b\xc1\xc2dW\xd6?\xcf\x11J3\xd3\x8d{\xbf\x95\x80\x99v\xcc\x9a\xc4\xbf\xb4C\x83\x93\'W\xdc\xbf\x97w\xbaTe\x05\xbe?\x11\xaak=~\xc0\xd9\xbf5\\\n\x1d\x14M\xd5\xbf\xb7>#8!\xc0\xdc\xbf\x18\xff\xe5\x1e\xe1\xfe\xd9\xbf^!\x16\xa2\xd9[\xd0?$\xa6\x02OO\xd3\xc0?\x163\xb9\xfcU\x01\xc3?\xb0\x90\x1f\xff\xc5\xc1\xd3?\xb0\xc8#)?|\xd4\xbfn\xc6zEj\x84\xce\xbf\x88\xdc\xc5\xce\xc8 \xd0?\xa3\x81\x86\x13\xbf\xa2\xcd?P\x81\xf3:\x88\xcc\xd5\xbf\xc8)}{\x03\xb2\xda\xbf\x9a%\xf8\xcb\xf7,\xb4?T_V\x15\x7f\x18\xde\xbf\xbb\xec%\xb7M\xaa\xd7\xbf\x00\x8a4\xaf\x99\x99\xb6?*(<\xe1\x93\x9a\xa5?J\x1a6\x02_T\xd5?\x90"W%\x04U\xd4\xbfY\x98\xfe\x9fo\xb6\xb7?4\xc78\x84\xdc[\xd8?\x17|\x1c\xd0\x04l\xa9\xbf\xe3}-\xb8\xfbT\xdb\xbf]\xfd\xed\xef\xc5\xc2\x8c\xbf)\x1e\x0b\x12ev\xd0\xbf\xf8m*\t\x89\x0b\xc6?\x0485\xbd\xb1\x80\xda\xbf\xc2c\x8b\xa7\\\xf2\xb1\xbf\xb3&]~\xf3\xed\x8b?\xb9\xd6qZ\xd8\x1a\xbf?\'\xbcH\xa5\xb9\x1a\xc7\xbf\x8d\x17\xb14\x9f\xe3\x8e\xbf<\xfeu\xb2\xe7DI\xbf\x08\x83\x89X\xec\xd6\xd4\xbf>i\xdc\x81?\x80\xb9?:j\xb9\xde0b\xd2\xbf>\xc3\x070ff\xd8\xbf\xccE%C\xc4\xcb\xac?\x8f\x9cv \x89\xa1\xbc\xbfj.\x9c\x1b+!\xcd?9\xa4D\xfeg\x99[?)\x08\xda\x84\xcf\xfe\xaf\xbf\xdf\xc9\xd5d!M\xd8?\xbcj\x91\xb1g\xbc\xa5\xbf\x18\x9d%\xc7\xbd\xdd\xde\xbf9<\x03#4M\xc0?\xbe\x19\x85\x99?\xa5\xb2?\xc3\xf5%\x16\x87\xdb\xce\xbf\xe4K\xcb\x7f\x82\x17\xd6\xbf\xc2\n\xc4\xd7\xed\xd8\xb3\xbf5\t\x13\xe23Y\xb1\xbfUY\xb7\xf0!\xa5\xcd?G\xe5l\xb97\x98\xba\xbf\xc9\x9fw\xbc\xadf\xca?\xc5\xd6\x18\xd5_\xeb\xd9?\x0f\x81\x18W\xd33\xd6\xbf\xfb\xfa8W\xda1\xde\xbf\xc7\xd3\xe1\xad?7\xc9?{\x8c\x97\x03\x0e\xa3\xb8\xbf\xcaY\x83\xe4\x1c\xfb\xbf?m\xd7\xde0\x00\xf9\xa7?\xc9)\xf7\xfa\x9f\xa7\xd3\xbf\xdd\xdf\xb5\xb7\x1cT\xc8\xbf"\xf2\xea;\x8d\xe2\xcd\xbf\x9e\xaa\xd9\x96\xa7\xbf\xd1?}\xa7\x98T\xe2\xaa\xc3?\xac\x9a0\x0b\x8f\xc8\xd5\xbf\xc1\xbbJ\xe5lv\xc2?\x19\xa1\x98\xc6\xbd]\xd7?\x9c \x8dx\x9f\r\xb1\xbf\xa0^x\xdfW\x17\xa2\xbf\xa9S:E\xbbK\xe0\xbf\xd1Ck\x0f\xcd\xda\xda\xbf\x85\xf0\xaa\x1d\xaal\xc0?\x81\x12Z\xbd\xa00\xd6\xbf~%M|xL\xcf\xbf\x9cD\x93\xa1\xd1\xa9\xd7?\xa0\xc6\xf2\xa9\xa7\xca\xd8\xbf0\xec\xad\xecU\xe7\x9b?%\x1f#>\xf3\xc3\xce\xbf\xb1`\x05\xd6\xac\x93\xd2?\xfdY=\xae\xf7I\x92?\x02`\xef\xfd\xe9W\xd0?\xc7\xe0\x10\xf7\xd0\xf1\xd7\xbf\x8fG8\xc5\x81\x08\xc7\xbf\x987\x04\xb4\xc7\xfc\xd9?\xae\xf4M\x96,\xd5\xc3?(\xa9c\x9cw\x7f\xc5\xbf\x8d\xc1\xb9\x9c@p\xd6\xbf"[\xce\x96$\x1b\xd1\xbf\rC\xdb:\xde\xb7\xda\xbf\xf0\x05]Zm\xc6\xd3\xbf\xda\x85D6m\xf0\xdc\xbf\xa1hJ>N\xeb\xd8\xbf5\x0b\x9e\xb3\xb1\x9c\xd2\xbf\xdd\x06;}\xc9\x99\xbd\xbf!\x08\xad{8\xd7\xcd\xbf\xb3Du\x12\xa6\xff\xdb\xbf\xe7\\\xf3\n\xb3\xc2\xbb?\x94\xde\x9ah\xd6J\xd0\xbf\x95\x0e-Px\x9c\xa9\xbfp\xea<;\xbf\xe0\xb5?\xa5F8L\x9e>\xc3\xbf\xb9}\xf6P\x9a/\xb6\xbfg\xfbr*\r\xb3\xc0?\x9b{\x9cI\n\x0b\xdf\xbfks\xdeg4\x05\xc1\xbf\x9d\xc9\xf6\xcd\tW\xba?5w\xb1(e\xeb\xac\xbfc\xdb\x19\xc3a\xb1\xbd?P\xea\xc6\x17&\x15\xdb\xbf\xd1\xe0|\xa3t\x95\xda\xbf+\x8e*r@O\xc5\xbf^\x8e\x0f\xa8Dn\xc7?\x8f\xf3\xcf\x9a\xeb]\xd8?\x0cTje\xe1a\xa7?\xbccH\xfd\xc3\xdc\xdd\xbf\xb7l:\xb2\xd5r\xcc\xbfei`\xc9ca\xc5?\xef\xd2\xa4#\x91l\xde\xbf\xc6Xhg0\'\xdc\xbf\x14\x02:\x1e\xe4\xb3\xcc?=\x8e\x86.f\xfd\xde\xbf\xedY\x1c5lo\xbd?\x00{y\xb1\x89{\xb4\xbf\xaes\xd9}\xb1q\xb3?\x9f\xa6\xc5\x00\xd7\xe6\xc6\xbf\x10\xa3\'\x85\xcf\x8a\xb8?+\xb2\xd2\xaf\x06\xa4}?ua\xee\x92H:\xcd\xbf\x96\x06**:\xc1\xd3?j.\x7f\x86\xe6\xf4\xc9?&x\x99\xcf\x97\xba\x8b\xbfiM\x1a\x0ez\xb2\xab?tzy\xd8;\x1a\xde\xbf\xa5\x9d\xa2\x80\xfc\x93\xd3\xbf\xef\xc7R\x97\xdaj\xd1?\x1d\xebz\xc7\x9dT\xde\xbf\x16\xa0\x9d\xbez-\xd2\xbf\xf4\xe4D\xea\x8aQ\xc2?\x0c\x8e\xab\x9f\xc6\x05\xd8?\x08\xb7\xca1\xafR\xc3\xbf\x9dw\x0f=\x01F\xb2?:\xa6*\x9f\x03\xb5\xd3\xbf[\xad\x1eqO2\xce?\xcc\xec\x17\x02\x91\xd7\xda\xbf\x8d\xc6\x81FI>\xdf\xbf\n\xfdO\x972\x85\xde\xbf\x7f\xa9\xc9\xaf\x8d\xc9\xd2?\xe2\x92*\x03\xe3e\xd2\xbf\x9b\x0ct\xe4S\x16\xd9\xbf\n\x1f/\xe9\x9a\xd3\xb1\xbfd?\xc8\x94\xe55\xd3\xbf\xc5\xcdcz\x95 \xd0\xbf\xfc\nuW\xb2\xb8\xd9\xbf\xacW\xc1\x86\x82_\xb5\xbftMd\x80*D\xda\xbf\x16\x90\xb7s\xa9\x13\xbe?Q\xfc\xd8\xfb\xe2\x94\xd6\xbf1\x80\x16\x9e\xb9f\x82\xbfB\xb0\x14qT\xcb\xa7\xbfz\xaf1\xd7\xe4\x99\xd8\xbf\x16[\x94\x0fp\x19\xd7\xbf\x14f{C\x9a\xac\xb8\xbf\xb7\xa6\xc1\xff\xd9\xc5\xce\xbf\xaeGo\x8b\xaa\xa1\xd5\xbf\xba\x11\x85\xa5]{\xbc?\xc3\xc6Eij\xc6\xc1\xbfTn\x9cxJ\xc1\xcc?\xa2\xe1\xa2-mf\xcd?W]\xa0\r/\xf0\xc2?\xf4|\xc6Z\xed\xd7\xc5\xbf\xa4\xabT\xd4\xd4\xf8\xa4?\xe6\xdb\xb0\xba#H\xc0\xbf\t\xa9\xc7^\xc5x\xd9?+\x0bT\x86\xf7\r\xac\xbf\xcd\xb1\xee[\xc0R\xd1\xbf-_\x8d;\x7f\xef\xb2\xbf\x06\xd0x\x12\xaa\x08\xc7?\x85rzP\xf4\x93\xc5\xbf\x9b\xa0\xf7\xde\xf1\xa1\xc0?5}\xeb\x12\x9dd\xda?\xdd\xa9Y\xe3IB\xd0?\x90\xa9aL#\xf5\xc0?\xf1a\xa6y\xf5#\xc4\xbf\xfa\xcb\xd5\x0e\x02\xd7\xdb\xbf3\xb04\xf0\xfe\x99\xc2\xbfn+\xb4|\x1bZ\xd0\xbf[\x85\xb9(8\x92\xb5\xbfnv\x84\xdd\xde\xce\xd9?te1\xc2\xf7\xba\x8e?>\x8fA-\x95]\xa7\xbf?\xecb\x0bJ\x90\xbc?=?\x17\x19\xd9|\xdc\xbf\x9f\xd2\x9cR]\x00\xd7\xbf\xa0@\x99\x05\xb6\xee|\xbf\xf0\x7f3\x84.\xe3\xdb\xbf\xa3\xba\t\x98\xf7\x1f\xd1?\x05k_n\x98`\xd5?p\xd8mjE_\xd6?\x17\xd9\x8b\xfe4\'\xca\xbf|\x93\xae\xa5:y\xcd?b\xe7\x01\xa5\x8bo\xd1?\x12\xc0\x99\xcd\x870\xca?\xd7$&\xff\x93\xe6\xc9?\n\xbaad\xf0\x90\xdc\xbf\xf9;.\x0e\x1a\x06\xc5?w\xe7o\x1e\xbbd\xcd\xbfo\xd9\xcb\x8a\x17\xbb\xd4\xbf\xc9x\x9c\x1e\xfbc\xc5?\xb5?\x88]\x0f\xfc\x87\xbf WU\xed\x0c\xda\xc7\xbf\xdd\x18\xd4\xe8Y&\xa0?\xfc\x07u\xd9\xadM\xd5?\xd7\xba\x97\xc9\x10\xda\xc3?\xa0\xda\x9c#i\x14\xbf\xbf\x1d\x91\xc2n\xb5\xdf\xca?\r\xc8\xbf{~\x8d\xc3\xbf\x92\xdf\x1f\x1a\xe7\x94\xb6\xbf,\xbft\x97y\x7f\xda\xbf\x9b\xe9\xb4Z\xdb\xa1\xc6\xbf\xbb\x80*\t\x92u\xb5?\xcf\xd0du\x1b\xd2\xd6?\xdds\xbf(\xb1+v\xbfy~\xea\xda10\xb1\xbf\xf99\xa46\xa2\xbf\xb6\xbf\xf6\xd7\xea\xe4\x990\xd7?m\xd11\xa6\x80\xb2\xd1?\x9f\x9b`U\xb7\xbb\xd3\xbfyY\xae~\xce\xd1\xd6?\xb5#\x0b\x98FT\xd3\xbf\x05/\xe8\x98\xfd\xa3\xca\xbf\x02\xc5\xe7\xc8?\xdd\x94?\xb1\xeb\x8b3\x81\xd7\xc8?O&o\xd2%\x8c\xd4\xbf\xaa\xac:!\xfa\x19\xc0\xbf\x17\xd4\x1b\x13\xd8\xfc\x8b\xbf\x02\xccH\x9d\xad\xf4\xc1?\xc5pN\xaf5\x15\xcc?#ul\xa2m\xd4\xdf\xbf\xb1Kv\xfb\x95@\xdc\xbf\xf5\xa9y\xbf\xa0\x9f\xc0\xbf\x11\xd7~\xa2t\xcd\xc0\xbf\x83\xbc\xad\xec\xbd#\xa5?,\xc0\xc1\x1dwq\xb7\xbf\xab&\xccY\xd5\x9e\xd6?&\xa4o\xbb\xe0\xa1\xd2?\x01\x7f\x9c8<]\xdf\xbf\xf5\x8c\xbbKM\x80\xcd\xbf/\xc5\n\xbc\xda\xd8|?\xab\xd6\xd3:\xd0\xa6\xc0\xbf\xe6\xf1\x12\xa2\xf6 \xb2\xbfi\xb1\x848\xd9+\xb8?\x16#6@\xe0\x04\xc6?;6#\x196!\xcb\xbf\x14\x15F/\x90\xeb\xbc\xbfL\xe6\x1c\xf4\x02#\xc5?8\x1c*\xf1JD\xc9\xbf\xd8O\x00nw\x02\xba\xbfc\x8d8\xb20\x98\xdc\xbfME\x85gP\xa6\xbf?\x031\'\x06~\x1b\xd5\xbf^\xe3\x82\xb2\xf9\\\xd0?t\xcfP"#\xdc\xd2\xbfR{\xc1$-\x0b\xda?\xc7"*W\xe6\xfe\xd0\xbf\n\xe6l\x1e\xdf\xbd\x95\xbf\xb6\xedz\xc9k\xb2\xcb\xbf\xa5t\xda\x1d\xbf0\xca?\xdd\x93\xd9j\xe8-\xdc\xbf\x1f\xf7\xab\x98/B\xb0\xbf\x8d\xfb\xc0"!\xac\xdd\xbf=7ZD\xa7\x9a\xaa?Q{\x85\xd1\xb6\xaa\xc2\xbf\xe6\x93\x83\xc4q\x01\xb5\xbf\xd1.\xb4<\x88W\xd3?92k\xf4\xe1\x9e\xac\xbfT\xf7:\x01\xa2\r\xdc\xbf\xb2K\xa7\xe7\x07\x19\xc8?J\x0f2c^\xe6\xb4?\x87\x8e\x90$.\\\xd5?\x15\xbe\xd0\x182~\xc7\xbf\r\xf1\xdc\x0c\xfe\'\xc6?\t\xc9eR\xfa\x8d\xcc\xbf*\x0b\xda\x8a,v\xdc\xbf\xd6w\xa0 \xe2\xd9\xd5?]-\x82\x82\x928\xb4\xbf\x05\xdbW,Q\x1a\xbf\xbf\x0epf\xf8\nQ\xc8?~*6\x1f\xe8\xeb\x9e?\xe3I\xb7\xab\xcb\xe8\xc2?s\xbf\xb1kd\xd8\xd8?I\xec0DD1\xbe?v+\xf3\x11}B\xc0?\xa3i\xc6\'K\xef\xad?\xa9}\xfdx\xe7\xec\xdd\xbf\xb6tE\x8a\xf0R\xd7?N\rA\xe9\x1cw\xc3\xbfb\xa8\xaf`\xc0W\x90\xbfT\x14\x85Cp\x1c\xab?\xc4q\xd9\xbe\x96\xbb\xd4\xbf\xc8s\xac>\x0e\xf4\xd7\xbf\x8bV\\\xc1Z\xd2\xd4\xbf\x08\xa0\xd7\xf3=1\xc4?\xf7\x03V\xfc\xa9O\xc5\xbf\x86\xb3z\xcfE\xd3\xd8\xbfZ\x87|\x80\xba\xcb\xc6\xbf\x87\xc6G\x16\x0f2\xdc\xbf\x02\xdf\x93=\xa5J\xd2?G\x987dHi\xc1\xbfH\xca\\\x81\xe6q\xc3?OQ\x18ic\xda\xc6?l\'\xfe\x8b\xdeN\xc2\xbf\xc5\xe0\x18\xbc]\xec\xd3\xbf\xb7\x87\xf9\xbc0\xf9\xd5\xbf\xefd\xde\xce\xd2\xee\xc9?"o(=\x9bw\xcc?}\x17\x8e\xa1\x08\x92\xd0?\xcbm\x93\xc6LF\xd6?y\x0bV\xdb\x11U\xd3?v!\xbc\x9a\x06a\xd8?\x9fV^\xd6\xd8\xfb\xd1\xbfN\xb9\xfb\x80\x87\x8f\xcc?\n\x95\xf25>4\xdb\xbfy\x94\x86\x07TP\xd7?:x\x7f\xd3\x98\xad\xd7\xbfr\x04J\xdb\xa11\xbf\xbfdz\xae\xfd\xdd\xbd\xd1\xbf2\xb0k\xd2\xb6\\\xd2?\x9a2#\x7f\xec\x18\xba\xbf\xc8\xf4\x82\xb52\\\xd0\xbf\xd2\xf1\xcc\x18\x15\t\xae?\xf8\x80\xb8\x16\x80|\xd0?c\x1a\xc2\x17\xde>\xda?h/.X\xac$\xc0?X\xe0\xbc*33\xd4?\xe9\xa4\xa9\xf5\xc5\x99\xdd\xbf\x0b\xaa\xec>\x95\x85\xbd?\t\xaa\xf1\xeb\x03\x1f\x94?\xee\x8c\xdb\x8e\xdeL\xe0\xbf\xac#\x94N\xaa\xba\xa9\xbf\xba*\xb8}/\xc9\xd9\xbf\x0b?qR\x9e\x08\xae\xbfJ${,\\\xa6\xdc\xbf\xfd{)\x1b0"\xde\xbf\xf7y\x1c\xda\x94\xa8\xc9\xbf\x8d\xeb\xe3\xfb\xbe\x9e\xd7\xbf\xd0\x1esQ\xe3|2\xbf\xc5\xcc\x87n\x9e6\x92\xbf\xe7f\xff\x8a\x94\xb3\xd8?\t~\x0f\x06k\xbc\xd8\xbfV9\xd7m\xcc\x08\xc8\xbf\xac,\xd5g+\xeb\xe4?\xf0\x8d\xdc\x90\n\x17\xda?\xe3\xf5H\xff\xb2\xd6\xe6\xbf6\x82UB\xa0\xaa\xe2\xbf\xa5\xbe\xbbX\xf5u\xb4?6\xc3\x13\xe6m\x88\xe0?\xc7=\xabk\xf0p\x8b\xbfe\x11\x8f\x89\xc9\x86\xb8\xbf\xcc\xf7\x8c6a\x0f\xde\xbf\xb3\x0e3\xdb\xd6\x8c\xe1\xbf\xf3?\xe9M\xe4\x97\xae\xbf\xe1\xc3\x8c\xeb\x02=\xe2\xbf\xe6E#\xee\xef\x16\xd2\xbfy\xe0\xff\xb0:\x8b\xe1?\xf6\xdeb\x14\xbb\xb5\xc3\xbf?\xb2\xa8D\xd0P~?S\x8a\xae\xa1\xd0\x92\xb3?\xd3\xc4lR\xba\x85\xd9?t:?E\x9fx\xc5?\x03<\x06_A.\xaa\xbfM\xe1(\x96\x12:\xdf\xbf7\x9c\x0b\xa0\x02\x11\xbd\xbfs\xfd\xf9~\xad\xf6\xdc?\xd3\xa0\x19\xcd\x1e\x8d\xd5\xbf\x19X\xbf\nE\xee\x9d\xbf\x04N*\xfb\x90\x9a\xd9?\xbd\xd4-\x12&B\xcb\xbf\xda\t\xf5+CN\xe0?\x14\xa1\xc8\x89\x88\xba\xd7?g5\xd7MN\x13\xe2?B\xd9Ez\xef\xd2\xe3?\x98\xfd\xa2/B_\xbb\xbf\xe9\x8b\x15X\x02\xca\xd0?\xd7B\xf0/$\xe1\x97?Y\x99\x96;\x16\xdb\xb2?\x1c|\xb6\xb4\x82<\xcc\xbf\xa4Y\xa7NZ3\xd6\xbf\xda0\x94\xde\xd3\xff\xdd?\xa8\xf19\xe2V\xc5\xd9\xbf\xa2\x0b\xf9\xf4\x9e\x95\x8d?\xd2\xbf\x17\x90\x02\r\xdc\xbf\x15\x87#\xd4Z\x98\xda?\x81\xc7\x05\xb4\xcd\xa4\xb1\xbf\xe4\\\xe5,_\x90\x98\xbf5x8\xf3\x15I\xd3?\x99\xd0&}N\xc2\xca?x"\x16I\x11\x7f\xb6\xbf5\xfd\x1a\x8fSS\xe0\xbf\xeb3\xdd\xe9\x92\x90\xce\xbf<nX\x1a\x86\x00\xe5\xbf\xda)\xc6E\t\xf1\xb7?R\x10\xa4@\xb30\xda\xbf\xf3K\x9a\xe9\xe8V\xb1?\xaa\xcc\xcc \xda\xfe\xb8?\x02\x0fv\x0c\xf0\xb5\xd7\xbf\xa0\x99\xae\xd7\xea\xfa\xa7\xbf\x14\xe6\x12\xeb;\xf7p\xbf\x05T\xf7ygs\xd4\xbf}\xc4\x9eO\xc6M\xd1\xbf\x1d\xbf\x9b?\xe62\xc4?I\x87\x90$+\xb7\xd6?p\xd0J\xbd\xcb\xa1\x81?\x06\x17,\xc4\xa6\xf4\xd6\xbf\xb9o8i\x94,\xc1\xbf\xc0\x01\xe8!q\xb1\xc6\xbf\x19\x1b8\x82\xad\xbe\xd3?\xc2(3OD\xab\xdc\xbf\xa6\xd7\xab:\xdf\t\xd8\xbf\x83\xd6k\xe6//\xdf?\xa7`\xaa\xc3,p\xb2\xbf\x08\x9a1r\xc8U\xd6\xbf\xc9L\xb5#Jj\xa5\xbfn\x1e\xfbX/)\xb1\xbf\xa0#KI\xd6\xdc\xb4?\x15P\xa6\x89\xb4\x0e\xd3?rC\x02\x80&$\xa1?]W\xf6h\x1f\xb6\xbf?\x8d\x91\x1a!\x85\t\xdd\xbf\xcc\xbb\x0e\x18gl\xce\xbfO\xdb\xeb\xc8\xed\xb5\xa5?z/\xf7\x18c\xee\xc5\xbfK^\xdd\xacj\xa6\xd9?\r\x1aP0\x84\n\xc6\xbf\x16\x9c6I}\xb4\xd5\xbf\xee\x1e\xc4\x03*\x8f\xc2\xbf\xa2\xe4\x8f\xba|\xd7\xc7\xbf\x03\x1f\xfaL\xc5\x90\x91?;\x96\x0c\xca\x99\x90\xcc?\xdd\x8b\xa6\xe5\x99=\xb0?k\xc8\x13\x9a\x93@\xd3\xbf5\xb9\x18\x9f\xec?\xc3\xbf\xf9\x82Z\xfb\xf4\xbb\xbb\xbfY\x84W\xfa\x1e\xea\xd2?\xa9nQM\x0cA\xa4?\xa3^\x1b\xf9PZ\xcf?\xfb\x84e\xb92\x06\xd2\xbf&\x91h\x8an`\xc9?\xdb\xdd\x97\xa1\xd0A\xcb?\x1c\x06sj\x88]\xdd?\xec\xf3"\xeb\x9f\x15\xcd?\xcc\x84=\x13\x9a\xae\xc5\xbf:\xbc\xedh\xcc$\xc2\xbf\xbc\xb70r\x8e\x11\xd1\xbfZ\xb9<Q\xdd\x0e\xb6\xbfH\xc7\xe9`%\xab\xca\xbf\xff%\x88\xba\xef2\xda\xbf\xa9\x91\xf3\x12\rY\xcb\xbf/\xeebWPZ\xd9\xbf\x1b\xfa"\x15\xcc\xd8\xd8?\x04\xdd\xed\xe6\xae\x8a\x96\xbf!\xd2\\t\x9a\xdb\xd3?\xd3\xf6\xc0(\x17@\xe0?\x0e6R \xcb{\xd4\xbf\xc9/n3\x11\x08\xca?J\x8f~P\x81k\xd1\xbf\x1c*\xa9\xfeq\x0f\xd3\xbfL\xd1Xh<j\xcd\xbfO\x08\xf8\x19\xeb6\xbf?\x87\x07\x9f\x953t\xce?\xc2\xad\x93R\x04d\xc0\xbfT\xe6\x9c\xce\xec.\xc8?\xdf\xc6\x10\xdc\xee\xa3\xa2?\x82\xedu}\xb1\x1f\xd8\xbf\xb6h"\xcf\xe1\xd1\xd0?!O\'\x853D\xd2\xbf\xcc\xa2\xd1;\xb4\xcf\xc1\xbf,u\x1bQ\x95\xd2\xd1\xbf\x9a\xe8\x84\x02Hl\xc4\xbf{\xd1\x0f\x90-K\xd6\xbf_\xcb\xb0\n\xb0\x16\xc9\xbf\x1f\\6P\xde|\xc9?\x8b\xaaF\x19w\x0b\xd0\xbf\x9b\x86\xac W\xa7\xc9?`#\x90\x114\x97\xd5?\xf1\x04Z,>\xe4\xc1?\xdf\xd1~\x8fai\xc3?<\xbf\x01\x01\xe9\x1f\xc4?\xb2y\x93=\xa1\x0e\xad?\xe1\xca`\xf1\x19\x14\xc2?\x95Wh]k%\xb9?\x8d\x1a\xf9\xc6\x1eB\xce?\xea\xc6\xcfah\x7f\xcf?\x1e\xc3\x8f\x9cJ\xa4\xe0\xbf\xad\xeb\xf9\xa9\xf5\xed\xd1\xbfV\x8a\x86\x84u<\xe6\xbf\x1d\xe7\xda_:;\xd3?\x86\xff\xd7\x0f\xd5x\xdf\xbf\xb8\x08\xc9\xca\x9bh\xad\xbf\x8c\xfe\xfd\xfe?\x9e\xc4\xbf2\xab\xdf\xd4\x0c1\xe3?\x9b\xb6\x9e\xda\nE\xd3?J\xdd\xf8\xea\xdaY\xd8?j\x98\xc6\x80\x9c\xac\xce\xbf_\x1ezE\x05\xbb\xd5\xbf\x86\xd3q4\xe6\xda\xb5\xbf\xdd\xff\xc4j\x05\xef\xd0?f^h\xfabZ\xe0?\t\x8d\xc4\'\x12\xda\xa4?w\xddS\x16\xd2\x8f\xbb\xbf\xe6\x87(\x0eb\xf4\xe2?_)\xe8\xf1e\x81\xcc\xbf\xb4\xd5\\\x0ed:\x9a\xbf\x87\xd1~\xca\x1ej\xd5??\xb4%c&-\xd8\xbf\xb0\x1d/\xdd\xe5\r\xd2\xbf\xeb\xeb\xf8\xf5\xa9m\xc0?\x17\x9a\x00\xc0\xb5\xbc\xd0?\xa5\xba\xbb#\xfa\x9e\xc4\xbf\xb2\x99\x0eI\xd4\xf9\xc9\xbf\x8f\\A\xa9\x964\xd2\xbfZM+\xa3Qz\xab\xbf\x98\xef\xd2Z\xcd\xbf\xb8\xbf\xf0\xd8\x83B\x02\x84\xd4?2& .\xcd\x06\xc6\xbf>6\xb6}=\xf6\xc4\xbf\x84\xd8\xf9\xe9wK\xcc\xbf\x00W\xd5\xe7"r\xe0?E\xa0-R\xf9\x01\x90?\x9f\x03\xf5\x9b \xdd\xd6\xbf#\xe4\xbc\xaf\x10\x92\xc2\xbfn\xba;\xeeH\xf0\xd2\xbf\xd4\xb6\x1a$\xeeS\xd2?\xc50\x8f\x8c\xaa@\xdc\xbf\xbe\xdf\xb0\x92\xa4e\x8f\xbf\xd8\xadMAF\x89\xd5?\xc1\x92)7\xf4\xe9\xa1\xbf\xd6\x19P\xd6\xfa\xbd\xbb\xbfQ\xdf\x13\x89\x96\xea\xcf\xbf\xe0\xdf \x05\xc1N\xda?\xf8\xa6\r\xea#`\xdd\xbf\x81\xf5F\x07\x93\xd6\xa3? \xb2CS\xc2\x89\xe3\xbf\xdc\xa2X\xb5G\x19\xe1\xbf\xb3\xa6J\\~\xec\xc9?\r\x06k1\xc9\x15\xc5\xbf\xc9b\x9e&c \xda?\xae\xb3* \x9e&\xd6?.\xfe\xdf\x8dy\x1b\x81\xbf}\xe6\x98\xbf\xf5\xcf\xbc?\xa7\x02\xf4\x15\xd7\x16\xd1\xbf\x10\xfa\xed\xecn<\xde?\x00\x19_;\xb7\n\x8f\xbf\xdc\x1d\xfa1F\x16\xb7\xbf\x7fBn\xc6\xe3\x05\xd2?\x05\x91p\xcc\xee\xc7\xcf\xbf\x15*\x13\xfe;r\xba?\xe6y5\xc0Sc\xa7\xbfB\xc9\xa2\x1a`.\xd6\xbfK?my\x92\x14\xd9\xbf\x11K\xeb\x06J1\xd7\xbf\x08\xd49\x06\xc81\xc6?\x9e\xdaT\xacG(\xc8\xbf\xf8a\xc2\'9\x89\x85?\x82\xf5z\xd5\xdfm\xbd?\x02o\r\xdc\xda\xac\xba?\xdaR\x9d\x99\xa3\xe5\xd9?\xc2S\x02\xeab?\xd8\xbfDz\x94\xe86\x95\xb6?Y\xd3\x93Ut#\xbf\xbf\xf70Y\x9bB\xec\xd1\xbfq\xb5\xd2G\xbdP\xde\xbf]^\x1b\xf3\x7fn\xd2\xbfe\x8b\xc6\r\x87\xe1\xc7\xbf\x05\xa8\xa0\xf4n\xe8\x93\xbf\x9f\xb1j\xd4\x93a\xd3?q\x18.\xd1\xdc\xb9\xca?t6h\xcd5\xe3\xd9\xbf\xfc\xe6\xe8\xad\x12.\xdd\xbf\x1e<\xcd\xbf)\xe4\xb1\xbfV\x1b\xac\xe5\xc7\xa0\xde\xbf\x00\xb8\xdb^\x12E\xb2\xbf\xb4R\x80\xed\x89\t\xd1\xbfO\x16\x9cs\t\x92\xe0\xbf)\xd5\xb8}\xce\x92\xd8?\xe0\xa5\xa2\xa8\xa4\xcfe?\x04*\t\'\xde\xa5\xd1?\x1b\xa7\xa1\xfeO:\xc1? \x8e1/\xb5<\x81\xbf\x08\xa9\t\x94\xcf\xca\xe5\xbf,\xca\xc5\xbai\xcb\xce?\xb7B\xef\xfafg\xb4?V\x020P\xbc5\xd5?_\'D\x80"\\\xc0\xbf\xfa4\xc3\x03\xc2\x02\xd6?\x8a\xb1\xc7\xd5M\xd3\xdb?4\x0eH`\xce\xc7\xb4\xbf/_\xc0?\xfbt\xd9\xbfGc\x16x\x82\x1d\xe2?,A\xdd\x15o\xb5\xa6?\xcf:\xef\t{\xf2\xcd?\x0c\x96y\x04\x97\xa6\xc8?\xd1\x8d\xcbj\xd0\xa2\xd3\xbfL\xc4\x87W8!\xc1\xbf\xc6W\t\xb2\x968\xd2?C\x8a0Qyj\xd4\xbf\x89\xd6\xba\xe5\xfa\xce\xdc\xbf&p\xa3\xe3\x04\xc5\x95?\xfd\xe0I2\x0c\x81\xa7?\xa4\x8a"\x1a\x84\xcf\xde\xbf\xd6\x87d$\x07\t\xe0\xbf\x8fT*\x15ys\xbd?M>E!\xb4\xaa\xb6?\xeeZ\xa1\xf9\xe3\xda\xc7\xbf\xfc8\x86L\'j\xd5\xbf\x15\xed\xed\x19pk\xc9\xbf\x06\xe8\x8b`O\x08\xe3\xbf\xe0\xa9\x9a>\xdf_\xca?\xea\xf9\\E\xccZ\xd0\xbf\\X\xc9\xdeN=\xc3?f\x95\xa9\x9cl\'\xd4?A3\x1a7\xb4@\xdb?\xbb\x84\xa1\xd6\xa7.\xc0\xbf\xb6\x96$p|\x04\xaa\xbf\xcf*;\x8b~,\x8e?\xe2aT$\x82\xa6\xdc?\xeb\x12\x8c_\xa3Z\x9b\xbf\xdd\xb3A\xceCj\xc3\xbfGiH\x12\xa4\x88\xba?\xac$\x8dm\xd8\xc4\xe0?\nk\x86\xea&\x11\xe1\xbf\x1c\xe4\x11\xcb\xaa\xef\xbb\xbf}\xf5\x92S/\xe0\xd3\xbf\xe6gt\x0f\xa5\x1a\xdd\xbf\xbd;\x87\xeb\xc4\x0b\xda\xbf\xbf{W\x19=\x00\xe3\xbfU\xc4]\x89\xca\xc0\xe1\xbf\xdei"\xdf\x81Z\xb4\xbf\xcf\x0b_\x94\xad\xf5\xdc\xbf"~P8N\xe1\xc4?\xfc\x86U\xcbzS\xc1\xbf\xfen\x87\xf0\xa6\xf7\xc6\xbf\xdc\x98\xd4\xff\x9f\x82t\xbf\xe2\x02\xa3\xb0\x93\xc6\xb4?Q\xd3\xd7_\x18\x89\xc1\xbf\x01\x9fZ\xa1h\x1b\xe0\xbf\xf3\xbc\x07\xff\xa6\x05\xb5\xbf\x9a\xc9`l\xe6S\xd2?\x9f\xa1\xc8\x13\x80\x9b\xb4?K\xfe\n.#*\xcb?\x0f\x0b-\xc9\x00\xef\xcf?\x9cx\xb1\xb9\xe5a\xda?\xd8l9\xef\x9bs\xd4\xbf\xa3\xea\x8bu\x8d&\xa9\xbf$sx\x06r\x86\xd0\xbf\x15\xd5xE\xe3h\xb7\xbf\x83\xcf\xcc\xaeg\x93\xcf\xbf\xcb\x8ef\x81\xd1b\xd9\xbf)\x16\xfaa`^\xb1\xbf\xd8\xff[\x00\xb4l\x9d\xbfnJ&\xa4\x89\x0b\xcc?\xc8\xb2r\xf5\xda\\\xe5\xbfXV3WK\xfe\xcb\xbf\xa0\xd6\x9e\x06\x93\x0b\xdc\xbf\x81Nn\x95\xf97\xe2\xbfD\x8fa\xc7\xb7\xec\xd5\xbf(\xa5S\xc1\x07\xd4\x93\xbfi\xbc\x1c$E\xb7\xca?|\xd7\xb2\xb4\x84\xb0\xe0?\x90}p\x12\x8c_\xa4?z\xebd\x84\x9e\'\xd3\xbff_\xb2\x8dg(\xb3?\x98b5\xder\xa6\x9b\xbf~Bl\xc2n6\xc2\xbf\xd3:\x0b\xb7l\x8d\xd3\xbf\xf5\xd7-*]S\xa7?|\xe3\x883G\x1a\x82\xbf\x93\xee&\x0c\xda\xae\xc9?\x0b\xc1\xd9,\x7f\xa6\xb3\xbf&\xac{\xc6=\x96\xb7\xbf:\x07\xe51e\x19\xda\xbf\xdd\x18,\x9eq\xaf\xa7?a\xcf\x9e\x9ah\xe0\xd8\xbff\xb8\xe5\xd3\x1fM\xd4\xbfq\x11a4\xae\xae\xb1?\xb1\x04\x8c\x9aie\xe0?\x06\xb1}\xbd\xae\xb0\x87?1n\xec\xd2\x8c\x9b\xd3\xbf\xa2`W-\x93 \xe5\xbfE:\x17\xcf\x03T\xc1?\xa8\xee\xd6ZuB\xc3\xbf\xd3\x81\xb7\xfc\x02\xa0\xdc?\xfcmFR\xc8\x1a\xb5?\xf3\xef{rx\xa2\xdc?\x97\xd4\xa1\x8c\xdfx\xc6\xbf\x88\xf2\x83\xc7\xe9(\xdb?5\x1f\x85O\x1b\x0c\xc7?\xa23\xd9\x13\xa7B\xce\xbfp\xdd\xfb\xd7tJ\xe3?\xd7cQ%g&\xc8?O\xb88\x86*\x85\xc0\xbfq\xfd\x8ep\x1c\xbd\xb7\xbfq"\xf2.\xd6H\xc6\xbf\x98(\x8d!A\x99\xc7\xbf\x9a\x87\xc3\xe3;6\xce\xbf\xa5r\xa8\x02\xe8\xf3\xcb?\xb9\xcf\x0b\x02\x13\x99\xdb?%(\xd8xe<\xd0\xbf$x\xc8\xa4\xdc\xe2\xd1?SKwr2\x9a\xd2?\xbb<\xe6\rC\xf4\xb9\xbfU \xd9\xc4\xc6\xd4\xd2?\xb19\x02\xb7\x1f:\xbf\xbfw!T\xc4\xb9+\xd9?\x03`\xc5a\xb1I\x9e?\xa9%\xd8\xb2Q\x8a\xd1\xbf%2\xda\x90\xfbt\x90\xbfXd\xb9KJ\xa7\xc4\xbf\xf0\x94\xb1\xd4\'\xcd\xde?\x82\xae\xe1\xa6\xbc.\xd4\xbfA\x13\xe7\xa9\x13\x8c\xb8?\x97\x1b\xf1P\x95\xcc\xc7\xbf\xc6\xd3"L\xa3o\xd8\xbf\xbb\xd4\xcf\xde~f\xc8?G\xeb\xb9\xf9\n5\xbe?$Vn\x8eb\xae\xdf\xbf\x84V\xff\x96\xf0&\xc8?\xc8.nV\xb5\xfb\xc8\xbfnk?-g\xa6\xe0\xbfM\xe6\xa4\xcdF\r\x9e?\x81\xf7D\xa3\x87\xa3\xb4?6;/z\x13\xfc\xe1\xbf\x88o\xc1\xda\xfe\x06\xa1\xbf\xdc\x04\x97\xd8\xb3\x90\xe1?-\x0e2\x15L\x0f\xbb?\x97\x85Qth\x15\xd8\xbfc\xdex"\xce\x9b\xd6\xbf\xc5\xe4WA=\xf4\xd3?."$2(6\xc5\xbf\x98\x89\xf9\xc7\xce\xde\x97?l\xae\xd7\xf5\xd5\xc0\xde\xbf\xe9\x95\xd2\xd3g\xa7\xe1?\x05\x8a\x1eF\xdc\x95\xd7?L\xe3+\xe1\xe6y\xc8?\x8c\xa7\x80\x8f\xbd\x11\x92\xbfrQ\xbb\xbdh\xdd\xcc?9\x94\x1a\x18\xac\xe2\xcc?\x87\xfb\x04i\x17\x96\xb1\xbf6\xbcK\xc8\x1d\x86\xa9\xbf%\xb7f\xcb\xee\x98\xd8\xbf\x97\x9dO\xba\xf6\xc2\xb6\xbf\xd21/m\x088\xb7\xbf\x98v<L\x0e\x1e\xc8\xbfG-\xb7%\xd0\x8e\xda?\x01\x97\xc2\x1f\xdc\t\xb9\xbf\xa8\x80\xd4\xa4\x16j\xd8?\x0bK\x00\x9d~$\xd7\xbfg?\r6\xfei\xd1\xbfFe&\xc9f\x82\xc2?\xd2&46_\xaa\xd6?\t\xab\xaa\r\x80\xf7\xb0\xbf\x00\xd4Q\x88\xe0\xbb\xd4\xbfDZ\x08k)l\xd1\xbf\x9d\xf4g\xbb\x103\xe0?\xad6W\xac\xf7\xd7\xb3?\xb6\xf3o\x8b2\x07\xde?\xbfr\x98\xa7\xadX\xe0\xbf\x1f\xe5\xf5\xcdb\x9b\xce?\xeb_8\xb9\xbb\xba\xb7\xbf\x99\xb8\tu\xcb\xb8\xcf\xbf\xe1\xc2.)+\x9e\xe2?\x1d\x9f\xc6?\x92\x01\xc1?\xed\xb7\xf0\xe3\xdc`\xb2\xbf \xf0\xd4R\xdd\x1f\xa9?\x12]\xdc\x0e\x8c\xd3\xc2\xbft\x9a>\x0e\x1c\x91\xc1?\xec\xff\x86\xb3\x19T\xb1\xbf\x96\xf3\xe8y\xfbP\xa6\xbf"\x00`3\x8e\xf8\xbf\xbf6h7\xfa{\xd8\x91?}\xf0\x1a}:\xd9\xb0?\x07,\xfd\x0eu\xa5\xcc?\xef\x00Q$`\x03}?\x86=\x1f\x99y\x99\xb7?=\xe2m\xb1 \xea\xdf\xbf\x92D|@\xb8;\xc6\xbf\x90\x1b\x081\x90t\xde\xbf\xfc\x85\x80\x82\xe3md\xbf>\xa6\x0fG6a\xb5?\x9f\xa3tD\x99Z\xdb\xbfwJ\xdcQE\xc2\xde\xbfm\xbf\x9f\x0f\xce\xc9\xdb\xbfZ\x8b\xa8$\x17\x9f\xd6?r@\x10\xa9cX\xcd\xbf\x95l\xac\xdcH\xe8\xd0?GD\x9e2\x9f\xbe\xd3?}\x98\x95\xa3\xf7]\xa7\xbf\xdf\xd5X\xee\x95\x8b\xbf\xbf2\xf0,^\x1b\xec\xc2\xbf g\'T1\x8e\xcd\xbf\xbc\xa2J\x85\xeaP\xd5\xbf\xc5\x1e\xae\xc0\x97\xa3\xca\xbf?\x13\xe1\x9dI\xb5\xae?\x00\xbe,\xc1\xf0\x1d\xde\xbf\xffN\xa9\xc4\xdb\xbc\xb4?\x02\xc9\xbb&\xc4\xf4\xad?\x81\x14?\xd5\x01\xe1\xd9?-\xbe%-$\xc4\xc4\xbf/b\x17\x1b\xbc`\xcc\xbf\xea)\xc1\x16t\xf3\xb7?\xfb\x17\xb1;!O\xc7?\xa5\x87\x9cPH1\xd6?\xec\xa9\xc28,\x17\xdd\xbf\x8b\xa5\xff23\xef\xd5\xbf\x84\x81\x82\xe8\xe1\xa2\xdf\xbf\x1f]\xb1->\xf5\xd4\xbf\x97\xb0t"\xe0\xe5\xc2\xbfh\xef\x80\x91\x92T\xb7\xbf^}\xc9\x89\xd0\xf5\xbe?Nm\x91\xd0\x00\xeb\x84?\x00\xb9\xf3\x1e\xd5+\xa0\xbfn[\x11o\xb2F\xd3\xbf\x11\xca3\xc6\xa9\xb8\xc1\xbf\xf8%?m\xd8\x05\xc2?\xef\xe8w\t\xf8\xee\xbf\xbf\x03\xbf\xa7u\x0f\xdf\xdf\xbf8\x01\x97\xed\x98\xca\xbd?_\x9f\xd38^\x01\xa2\xbf\xb7\xf7\x1a\xb6L\x1c\xcb\xbfo-\x02{Fn\xc6\xbf6\x93f\xa3\x0c\xea\xc7?~x\xbf4\x18W\xd3\xbf#\x87\x13\xa75 \xb1?iG\x99\xe3\xc9\x02\xe1\xbf\xed\x18ZD\x7f\xf7\xd5\xbf\xf3Q+"\x10\xa4\xd6\xbf"\xc8\x80Z\x9f\x00\xd0?\xda\xf3)b\xcc\x0c\xce\xbf\xbc\x86\xd9\xb3r\x9b\xd8?l\x1a\x7f\xee\xeb\xf0\x95?\x15\x83\x92\xa0\n\x05\xd1?\x9bR\xf6(G\xfc\xdc\xbf\x1b\x1f(\xc5\xe4\xec\xa7\xbf\x91C\x90id\xf4\xd3\xbf\xd9F\xba\x88\x9f\xbd\x9d?\xd3\x8aC\x8f\x9f\xa1\xcd\xbfA\xfdi\xfa\x84\x8c\xcf?\x96\xdd\x14VI\xf4\xa8?\x9ak\xe1\x11a3\xb2\xbf\xc7\x05\x95O\x1b\xeb\xc1\xbf\x85\x89^\xdc\xc9\xdf\xcc?\xce\x9f\xf1\x93\xfb&\xb8?\xee\x90\xb3\x80{\xb1\xb3?\xadLa\x80\xe2\x9c\xb8\xbf\x16<G\xaf\x1f8\xcb?\xd4\x18\xdeL\x00\x19q?\x80_\x18\xc6c(\xb4?\xf8\xb8\xf4\xb6\x8f\xd2\xbf\xbf\x9dj\xd1/\x05\xc6\xa2\xbf\xe6\xb1\xb9\x96\x0b\xda\xb0?]Cj#N\xc1\xdc\xbf\x9c\xc2\xa0\x9fO4\xc3\xbf\xa8x\x08\x10\x1b]\xd9?\x00\xb5\xec\x89O4\xd5?\x87\xfd\xfe\xc7as\xd8?\x8a9!\x94\n\xd6\xa9\xbf\xc2`\x1ce\xc0\xd2\xde\xbf&\xca"n\xc13\xd4\xbf\x19i\x9c\x82\xb3\xee\xd8?\x84\xae|\xaa\xecg\xb9?j(Q\xce\x83\xc7\xca?\x8e9-\xfd@\xb6\xa5\xbf\xc2S\x1f8\x1cM\xd8\xbf\x1c\x00\xf51\xcaP\xd7\xbf\x83\xc8\xd5N\xb3\n\xa3?}3]\x01\t9\xd4?)4\x07\xb3-J\xd3\xbf4\x8d\xd1\xbe7\xd4\x94\xbf\xa7\x833<\xad\xc2\xcb?\x9b\xb3P*\xdc\xa4\xd4?1\xcc\xbd\x16f\x8a\xde\xbf\xe1\xf7EE\xb1\x90\xd9?\xe3E\x1a\x8e\x88c\xd1\xbf\x04\xd9l\x8e6\xfd\xc0?<\xa2\xcf}V\xc0\xd6?\x97Y\xb5\xbd\xb6\xf6\xb2\xbf\xc9\x98\x8em\x95\xca\xd4? \x95\xbc\x98\\/\xcc\xbflc\xe4Lf\xac\xd5\xbf\xb0M3O\x0e\xdb\xbf?p\xbc\xf6\xdc\x91\x18\xd0\xbf\xaa\x8e\x1c\xa2f\x87\xd7?\r/\x03\xb1\xbfW\xc5\xbf46b-@\xdd\xdc\xbf\ty.\x9dV~\xcf\xbf\x9aW,\xdd\x18\x8d\xc7\xbf/\xbelP\xed\xe7\xd6\xbf\xa8\xb9?T\xd6V\xd8\xbf4\xdc\xa5\x13|\xb3\xd3?\n:\xc5\x96\'\x14\xd8?\x8c\xcb\x05\xa6\xa6\xa0\xc1?\xf4\xdf\x1e]V*\xd0\xbf[\x1e\x90\xfa\xaa5\xd5\xbf\x9d\x9a*\xe5:\'\xd0\xbf\x1f\x04\xb0\xab\x9e\xed\xd6?\xc1i\xb1\xd4\xe2\x16\xdb\xbfv\xbb\xc8\xf8\x99\x04\xb9?\x89#\x9eM=\xb6\xd3?B\x0e\x81\x9b\xea\x90\xd6?\xfa\xca\x92\x9e^SM?w\x15Ax\xfb\xf6\x9b\xbfV\x0c;\xc1\xf1\xd5\xc4??\x96i0\xa9\xb7\xd6\xbf\x98\xce9U\x9dh\xd2?@\xed\x8a|]\x9f\xc4\xbf\xd8\x0f\xba\x0e\x17\xa4\xd6?\xd3q1\x7f\xeb\x84\xd1\xbf\xc8@\xcc<\xa0\x9c\xd7?o:\xb9y4\xc8\xe0\xbf\xda}\xb9y\xcf\x8a\xdd\xbf\xc0S\xf7\xcd\xb2\xb7\xda\xbf\xc9A\x07\x9f9\xc3\xd0\xbf7\xd79\x84\xb7\xb3\xd2?\xdf+\x99\x03qQ\xdb\xbf6\xd9\xe4\x11\xdaN\xd6\xbf\xf9\xc1Y!N\xb5\xc3?\x8b\x19\x8a\x81\x9f\x8a\xc7\xbf\x83d\xa8\xc9\xc9\x9f\xa4?o\xf0\x96\'\xbdA\xd7?\x0e\xd1\x07\x14L\x93\xd2\xbf\xe1T3\xbeqq\xd7\xbf(\xe9\x9dZ\x10\xd2\xce\xbfV\x9a\xbf-g\x87\xdf\xbf\xce\xfcl\xe6\xb9\xde\xba?\x15|H\xdf\x94\xbc\xbd?\xcbu\x88<\x80\x9c\xc7?q]q\x0e\xf18\xdc\xbf\x99\x8e(\xb10\xc4\xd0\xbf\xcc?\x82`\x8a\xd8\xd4?/\xd4\xe1Za\x04\xc2?k\x18\xfe4\x05X\xbf\xbf0\xd8\xa9\xef\x1bg\xae\xbf\xac~W\xec?\x0f\xd4?\\\xbf\xeb\x1a\x88\xed\xd3?v\xfb\r\x10Z:\xd1\xbf\x9f\xaa6\x80x\x94\xc0?zm\x8dn\xfe"\xd4?\xf4{j\xbdr(\xd1?\xec\xa7tu\xff\xc4\xd5?`\x981\xf3\xee\x13\xde\xbf\x9dbFx\xe4\xe4\xcd?\xc7\xae\xe1\xed\xa8\n\xce\xbf\x81\x91\xcaj\x80Y\xc1?v\x1c\x99\xb6\x01)\xcf\xbf#\tK\x0b\xf8\xef\xd8?#$\xed%\xef\xb0u\xbf\x80TF\xea_\xc1\xc6\xbfL7#J\x83@\xda\xbf\xb3\x86\xe5t\xda\xfb\xd6\xbf\xa7u\x04\xcc<\x83\xd8\xbf\x0c\xf6\x1f\xaa\x1a\xf9\xd8?l\x8f\xc1<-\n\xab?*J\xfc\x98\x90\xd6\xd5\xbf\xc0\x15U\xdaw5\xc4\xbf\xb1\xd6\xb5\xb86\x92\xd6?|9\xc6e\x03\x9c\xc2\xbfWE\xb2\xbf\xb38\xdc\xbf\x8crll\xbd\xc0\xb8\xbf6\xd4\xd0\xd8^=\xdb\xbf^n"6\xa3\xa0\xda\xbfs\xc9\xee\xf8\x97#\xa4?\xb44\t~\xa4\x18\xda?\xd3\x1b\xae\x84\xb1\x0c\xba?\xf0\r"\x95\xaa\x81\xb0\xbf\x12\xd7\xb9.\x10\xdd\xd7?*\x85i;\x8f\xcf\xbf?6UV|aU\xd9\xbf\x1bf$\xce\x02\xae\xd4?L\x07W2\x1dD\xc5?\xac\xc38j\xb32\xbf?\xff\x01b\x803\x92\xdc\xbfn\\\xde\xff\xc3\xc1\xd9?~G\xc9mh\xc7\xc9?\xf7_N\x961\x90\xd1\xbf\xcbq\xc5e\xa2\x0e\xad\xbf\xc1\xb1.\xe7Q\xd9\xd0\xbfJ\x8e5\xed\x00)\x9b?\x15F\x1b\xf86\xc5\xb2\xbf\x94c\xe5KzJ\x94\xbf\xa9v\xcd\xf9\xbf\x13\xd8\xbf2-zM\xfa\xbb\xa6?\x01\xdfhm\x08\xc3\xd7\xbfv\xac|\xdf\x18V\xd3\xbf-\xef}9^r\xc5?E\xf4Z,\x0b\xbe\xd5?p(\x97\xa7\xe6\xa0\xd3?\x16\x1a\xa6\x9eV\xcb\xd3\xbf\x13\x9d\x9c\x10\xad\xf4\xd7\xbfKU\xdf\x01Iq\xa6?\xf3\xb1\x05C\x11\xc8\xd7\xbf\xc1\xcbN\xbe\x81y\x85?\xfc\xc6\xef\xaa\x1c\x83\xc5\xbf\xdb\x0e\xfc\x00\xb8\xb8\xd1\xbfO$\xe20Z\xcb\xc9\xbf\x18\xfe\x80\x89\xd0j\xde\xbf\x9fT\xde\xa8\xb8\xa6\xac\xbf\x06\xf3\xad]p\\\xd3\xbf\x99\x9f\xcb(\xed\'\xa1?\x93\t\xcfT\xeb\xb1\xd2\xbf\x13z\xf1OG\xd4\xd0?\x87\x10\xf0A\xd80\xd7\xbf\xbf\x07\xa1\x17_c\xc3?Q\x84\xe0\x99\xb3?\xbc\xbf~Q\xd6L\x8e)\xd7?\xe9#W\x08\x80)\xce\xbf-\xa0\xbc\xaaN\xd8\xba\xbf\x88VK\x8f\x16A\xc4?\x1f\xc9L\x8a\xc7\x05\xda\xbf\x85\xa5\xb4k\x10w\xd9?\xf5\xdf\xf9U$\xaa\xa9?rZM\x82\xd4\x88\xd1?V\xb5\xff\xcf\r\xc6\xc9?\x16\xcaF\x9b\x8f\x1b\xc8?\x07"\xc0\x8d"\xd6\xab\xbf\xac\xee\xa4\x12Kx\xcc?\xc7 \x13=j\x01\xc0?\x8b$\xde\xa4\xe9\xa2\xd3\xbf\x0b\xe5q:\xe5\xc5\xc6?\x0e`\x14\x0e\xff\xe4\xda\xbfa^,\xc3\xc9k\xb5\xbfq\xc7\xf4\xe5\xc3\xc2\xcf?\xa6\x08@a\x1d\xd0\xbf?5s\x11W\x8d\xef\xd6?5\x97&\xf7\x95I{\xbf\x1f\xf4\xf3\x1cs\xbc\xc1\xbf6\xa7\x1b;\x14\'\xc2?P\x89*\x96\x92U\xd3\xbf\xba\xa8\xb6 s\xc2\xcd?S5<+\xf4\xb3\xce?\x97\xa8\x88 \xee\x07\xbb?\xbf\xce\x0f\xedq\xbf\xc3\xbf%B2\xde\x07\xfa\x8c\xbf?\xd7\xbdvZV\xd9\xbf\xb1^0B\xf7_\xd0\xbfB\x93\xc1\xd6#\xd2\xc7\xbf$\xd3k\xe8\xc4W\xdd\xbfR~196\x8a\xbb\xbf\x84\xd5\xe3`w(\xcf?:\xa3\xb8\xa32\xaa\xdf\xbf\x10\x0f\xb1\xfcf\xeb\xd7?\x1c\xf3\x12\xd8\x90O\xa4?\xe9\n\xc8u\xec8\xcf\xbf\xf6\x91\xe1e\xb4\xe2\xdf\xbf0\xa9\'\x8a \'\xd2\xbf\xcb\xb6\x91\x1b\n\xaf\xda\xbf\xa1\x9d\x02W\xe0.\x82\xbf\x7f\xb6\x83o\x8e\xfa\xb3?1\xdfT<&\xa2\x82?\xa96^\x02\xb21\xc3\xbf\xbf\xab\xc7G\xabi\xc7\xbf\x17?\xae\xcb\xb5\x8b\xc5\xbfb\xe6\xf4\xc3\xfa\x90\xd0\xbf\xafC\xde\xb4\xc6d\x9d?\xbak\xca/w\xc7\xdf\xbfm\xc7"\xb0\xa9\xfc\xc9\xbf\xf9\x9f$\xc1j\x7f\xa4\xbf?\x94W\\K\xfc\xa4\xbf\x8b,\xcc\x1ea)\xa5\xbfy\xd0\xbfG\xf0&\xbd\xbf\x06\x8eR\x16P\x02\x96\xbf\xd1\x08\xa7\xcas6\xc1?\xee\xd0\x0bpw\x1c\xde\xbf\xe8\xd4\xfb\x7f\xa5<\xd2?EB\xae\xf8\x1d~\xde\xbf\x91\x18\xd1\xc3\xb9\x90\xd6?\xf4\xd4\x8eI\xf5/\xc9\xbf\xa6\xfcX\x13\x9d\xfa\xd4?g\x15\t\xfb$^\xda\xbf\xe1\xdd\xb7\xfa`g\xc8?\xad{Do6\xa7\xcd\xbf\xd0K\xf6\xa9\xca-\xc1\xbf\xb9d\xac\x18,Q\xdd\xbf\xdf\xe8j\x15q#\xb7?4E\t\xd2\xa7F\xc6?=\xbb\xc0\xc4\xab#\xd7?g\x00\xec\xf9\xd06\xd8\xbf\xc7\xd7a\xbf,\x8b\xdf\xbf\xdb]^\xc8\xe7\xc1\xd4?\xf4o\xa2ZO\x9a\xc4?\x0e\x135^y\xeb\xcf?\xd0\xee\x988@\x07\xcf?\xe3@\xfb\xb1\xa2\x8a\xd8\xbf\xf4\x04\xf5\x07\x92\xd1\xd8\xbfY*\xb0\xe0Q\xcd\xb9\xbfT\xf4\x9a\x89\x8d\x96\xd5?\xf0\xa8Qqfg\xd4\xbf\xca\xbe\xd5\xa8\x7f\xa6\xd7\xbf\xb9\xa9k\x11\x95\x9c\xd3?\xe1\x16\xcfup\xb4\xd9\xbfb\xf7\xdeD\xa3\x9d\xd0\xbf\xa3~\xe9t\x13y\xd9?\x0e.\x1a\xe7\x1f\xaf\xbd\xbf\xa9\xd2d\x01\x92B\xd5\xbfT\x97\xaa\x80\xf2Z\xd5?\x07\xae\t\xf2\x875\xd0?\x93\xea\xd2\xe8iw\xb1\xbf\x851\x13\x12\xa6\'w\xbf\x86\xe3R\xfd\xb1e\xc4?\xeb\xe1\x84h\xe3)\xdb\xbf\x85\xe2o\xac\xfa\xeb\xd6\xbf\x89w\xa9\xd6\xb7?\xd8\xbf>\xaaxC\xec\xc2\xa6\xbf\x9f(m=\xad\xe3\xb2\xbfj\xc4\xcc\x05G\xce\xa4\xbfnV\xc6\x94,\x83\xd5?A8\xcbw\xf7A\xdc\xbf\x8e6\xc8yw8\xd3\xbf\xa4\xac\x8fb\xb3\xf4\xd9?RB\x96\xfdo\xb0\xdb\xbf[[\x102\xf9\x8f\xdb\xbf\x8f\x84j\xf6\xfe\x91\xa9?r}\x01\xb3!_\xda\xbf\x0c\x98R\xb1\x1f\xd2\xd7\xbfb\x7f\xa4VE\xb2\x92\xbf\xb2\x176\x02:\x08\xe0\xbf*\xd11\x11)>\xdd\xbf\n\xf0c\xc1\x8c\x15\xd6\xbfg4S\x17x\xfc\xd6\xbf6\x97\xe3\xf4\x05V\xd9\xbf\x7f\xbc\xc3\xae/\xef\xd1?:\x1e\xe9\x15g\xa6\xd7\xbf\x8aXe\xc2\xadU\xac?\xcb\xd3\x8f\xa4\x14`\xcf\xbf\x8a:\xd8,\xa0\x9c\xab?K\xc3\xc41\x8c\xe2\x94?e(op\x89\xdf\xd4\xbf\x95\x7f\x18\xef\xcdo\xd4\xbf\xbe\xe8\x80spI\xd5\xbf\xab\xf1`\xfcfX\xa6?\xc4\x08\xa3\xa9\x12\xab\xd5\xbf!\x19_x\x02\xef\xc9?\xafFm]\x90\x10\xcd?~H\xce>\xa5\x11\xcd?_\xd1\xc1\x94u\x8b\xd6\xbf\xd2\x90\xc4\x95$\xb6\xbf\xbf\xbdHH\xce_\xaa\xd0?Z\x89\xfe\xb6\xe6\xce\xd4\xbf\x16\x90D\r\x01\xd4\xba\xbf\xda\xd8z\x17\xe2\n\xb2?:\x92s\xb2R+\xd8?\xa9Vm$\xed\xb3\xdc\xbfv\xaf\x91\xcb\xa9\xad\xd1\xbf\x925O{\xd07\xd2\xbf\xf12\xa9+\x85\xf6\xd5?}\x9cP7"\xf3\xa9\xbfdcg\xc2/s\xd1?\xbdR\x90\xb0\xf0\x11\xbb\xbf\xf8\t\x12\x03\x00}\xb1?v\xf3WQ\xd7X\xd3?x\x04\'\x084\x04\xbe\xbf\xa2\xcf\xa9"\x84\xa0\xca?\xff\x14d\xac\xb9\xd0\xa3?\x89O\xb4_\xe4\xe6\xb7?Ek\xdd8I\x82\x8a?\t\x13M\xe9\xe5y\xcf\xbf"!(j\x1c8\xd2?\xba\xfe\x1f\x85\x13\xef\xc2\xbf\x9b,\x94\xf8\xa1\x92\xd6?T\xd46\xfdJU\xe0\xbf\xd9\x98Q\xdc\xe4\xe7\xc0?i\x17\x9aP\xf2o\xc1?\x0eA\xee\x12\t\xe0e??T\x1f\xbbZ\x1c\xd4\xbf\xd0g@\xa0\xf3\x07\xa2?\xf9\xb2u\x86i\x05\xd2?\xa2\x8axw8\xc9\xda\xbf\x83\x90\xb3x\xa7\xa1\xd4\xbf1r\xb2\xae\xdc\xc6\xd8\xbf?8\x86"\xce\xcd\xd4?+\xe0v\xa8\x88\xe8\xd6\xbf\x87\x9cw\xb7KX\xd2\xbf\xa2H\xce#\xdd\x8f\xc8\xbf\xde\xc4$\x95\xbe\xdf\xcb?\xf2\x8a\xdb\x98\x9d\x1bF?\xe6\x9d!Ub\xfb\xc4\xbf\x84\xc2\xdb]\x06\x08\xce?\x0cW,\xe4\xfe\x83\xbd\xbf\xa7\xfa\xafF\xd6\x1cy?\xf7\xffo\x1bl[\xd3?&\xdc\xe8\xf5\x16\xe9\xd2?\x9e\xd1\xb5M\xdb\xf5\xd5\xbf\xe9\xe1\xcb\xd2\xb1p\xe0\xbf;u\xb3\xb2\xff\x00\xd6\xbf\xa4[!\x8f\xfa\xfe\xd0\xbf\xaf"\xaf\xba\x0c\xcb\xd1?\xc4o#\x05\x12q\xd2?\x12\xfd\xff\xb8D\x01\xc1?\x12\xe2\xebj\xc9E\xac\xbf\n\xce1\x982\xc6\xcd\xbfwj\xb8\'z\x03\xd1?\xfb\xf27$\xc1\xe5\xcf\xbf*\xc9J\xf3\xe0G\xbb?\xcd\xe3\x95/;7\xbe\xbfks\xf7H\xc7\x88\x88?_Vw\x10\x90\xde\x99?\xaf\xe4\xbf\xda\xff\x17\xcd?\n\xdc\xd5~\xb3\xa8\xc7?]\xb7\xa5\\yy\xca?vG\x92\x1f\xeb\r\xcf\xbf\'B\xdf\xbc\x81\x13\xd2\xbf!\x8a9\xbd\xa0\xa2\xc7\xbfN>\x85~\xb9\xc0\xbc?\xfa\xd6\x17\xf8L\xc9\xd5\xbf2\x90$\xcfZ~\xb9\xbf\x8f\xa2\x87\x98\x93\x83\xd6\xbf}l\xf3!\x9b0\xc6\xbf\x0f\xd3\xb9\x10\r\xde\xb4?9#\xdf\xcb\xc6\x05\xd1\xbf\xbb\xc1\xeaB\x91\xfa\xd5\xbf\xef\x19L\x1aN\x99\xdb\xbf\xa2\xf8\xb0%|\xf7\xc8?\xb7$\xdbA\xe0|\xbb\xbf\x9b\xea\xa3\x9dC\xf3\xd7?W\'\xd3\xacp\xf5\xd8\xbf\x12D\xb8\x90\xcf\\\xbb\xbf\tRUDd\xb7\xbb\xbf\x7f+\xca\xe3\\\xae\xdf\xbf\xd6eAy\xb8\x06\x91?\xfd\xe3\x9ey\xb2\xc6\xc7\xbf\xadPpX\xf1f\xd3?M\x91\xf0\xd3`\xa4\xd6\xbf>Z|\xa4\xf6\x05\xcf?\xc8\x85\xf7\xee,\x8a\xd2?"\xc4\xd6%])\xc2?\x11\n\x8e"2\xc9\xdb\xbf\xef\n\xf2%\xbc\xe0s?qY\xe2\x9f\xac>\xab\xbf1U\xb7\xd4\xd4R\xb6?\x13?\xbb\xf6\xa7\x8e\xbc?Z:\x85\xb6q\x12\xd4\xbf\x85\x97\xf1\xcdW\xe0\xd9\xbf\x13f\xbc\x0f1\xfa\xd6\xbf\x07\x94w\x1e\x0e-\xd7\xbf\x9e\x95l[\x1fx\xa5\xbfA\x1db\xdb\xfa \xd8\xbf\x9e\x82\x0e2\xd6\xca\xbb?"\x0f\x90\x94\x95\x9a\xb9\xbf(/\x1f\xc4\x9cp\xe0\xbf\x99:\xb5\xae\x133\x80\xbfL!\xdbt-\r\xd7?\x9c\xa3\x9b\x94\xa4)\xd8?Dz/\x07\x0b\x90\xe0\xbf5\xe3\xf2hC\xee\xcd\xbf\xc2\x16\xe5\xfaS\xa6\xc0\xbf\x96\xc7Q\x04\x1c\x9a\x83\xbfU\xd3\xbd\xe55+\x88\xbfj\xec8\x8c|6\xcc?\xd8L\xf14YH\xd5\xbfG\xc5\x8b\xecm\xfa\xc1?\xd2\x9e\xba\x15\x83\x97\xad\xbfd]\x1e\x01\xc8\xc5\xdc\xbf\xcdV,?\xc1\xec\xc5?\xcfRN\x98\xa4\x8f\xb0\xbf\r\x00\xc5\x83\x12\xde\xdc\xbf\x8a\xbe\x1f\x82\xcb=\xd8?\x0e\x91\xa1\xb9\xd6S\x9d?\x98\xfcU*:\x9e\xc5??\x10\xef\xbb\xf7\x04\xdb\xbf\xfa\x1435\x1a\x9e\xd9\xbfS\x8d\x0415\xfd\x82?\\$\x161\x123\xc2?\x0fj\xf9\xc60\xee\xae?4\x04\xbfpE \xaf?\x17\x81w^\x08]\xd2\xbf\tacM\x01"\xe0\xbf\xa3\xee\xaf\\\x89\x1d\xad?\xfa\x1c\xd2\xa3,}\xd8\xbf\x92\t\x8d\xeb(k\xb5\xbf\x00x\xa1R\xc8\xe2\xc7?\xe1\x975\xeb\xf2\xfb\xbb\xbfSi\xf18\x05\xb0\xcc?X/\xc8S\x9e\x83\xe0\xbf\xa8\xf4f\xe5\x12\xf3\xda\xbf`S\xb3*H\xe6\xb7?\\\xcdx\x11\x1c\x08\xd0?,\xa3\xd6\xc1\',\xcd?\xe0\xc3DL\xe9\xbb\xdc\xbf\x1d"8\'\xf3\xfd\xd7\xbfp\xdf\xf1\xec\x93\xd8\xd6\xbf\xfd\xfcGne\xd6\xb3\xbfq\xd5I"i\xb7\xc4?\x08\x88\x9a)1\xf5\xd0?\x9fHy\x93^\xa3\xe0\xbf\xcb Vk\x9a\xca\xc2?\x7f0\xcd\xf1\xa4\x13\xb9\xbft\xe4`\xccX\x12\xc0?\\\x9f"\x01UU\xa8?N|\x1c~\xaaP\xad\xbf\xe7\xe4\xcc$Y\xe5\xd2\xbf(t\x07\xb2b\xd5\xd3\xbf\xbd\xcf\n$\xca\x11\x91\xbf\xf2]+\xc4\xa0{\xd2\xbf\xfeSyK\xfd#\xde\xbfxZ\x92\x0f\xd2S\xd6?\xb6\xd6\xa3\xbc\xa8 \xd2\xbf\xbcy\x0e\xe8<K\xcc?\xe3\xe6\x13\x9fe2\xcc\xbf\xa58\xa1\xe8dy\xc8?ns\xd9Zb`\xba?/\xae\x14\xf9\xa4{\xa5\xbf\x11\xfa\x0e\x08<\t\xdd\xbf\x07k\xa9\xa2\x92\x95\xc8?\x1b\x85\xe7l\xfd`}?\x1a8!\x93\xa4\xb4\xcc\xbf\xec\x94\xb3\x19\xc8\x8d\x9f\xbf\rts\x95?\x81\xcf\xbfo\xd4\x9d\x94\xba\x12\xcd\xbfS\xd1\n\xb9bq\xda\xbf\x8b\xb6\x9eB\xcc\x96\xb2?\x0c\xf8?\xab\x10\x9c\xb0\xbf\xec\x86\xed\x84\xd8\x8c\xc8?.\xca,\xe4h\xf6\xd4?e\x8a\xa9W\xb8\x9e\xd1?\t\xce\xd3}g\xc5\xd9\xbf\xbb\xfd@H\xf7\r\xac\xbf\x1a\t\x18\xdbW\xb4\xbb?\x94 \xdd\xa9B\xd3\xd2\xbf\xab\xab\xaaK\x8bj\xc3?\xfe\xf3;d\xd3\x12\xca\xbf\xcf\xde\xc0\x05\x9dw\x92\xbf\xbcE\x92\x87\x9d\x07\xb9?\x85\xe2\xb86cb\xb7?\x9e<]\x1f\x1f\x8b\xa4\xbfB\x19\xd6\x80\xca;\xcd?_q95*\xb9\xd8\xbf\xfeJ\xd8~!^\xb7??\xcb:KE\xa4\xc5\xbf\x86\x9e\xcf\xa4\xa9\x05\xbf?\n\xe5\nU\x11>\xd5?L\xafAO\x8cF\xd1?\xe8\x15\xfe^\x1b\x85\x9f?\xa8`\xe7\xd3\xf3{\xd6\xbf\x02\xe5\xe23\xd3\xfd\xa4?\x14\x9b\xb8\xd1\x9b\n\xc4?\xda.\x01\x9d\x15\x15\xcd?\x17^\x8bx\xaf\xd7\xc2\xbfs PwL\x9c\xb8?\x1f\xbb~\xda\x0f\x8f\xd7\xbf]\xa3<Vz\n\xca?\x9c3PlAY\xcf\xbf\xb1\x15\x1e\xa8\xc7\x83\xdb\xbf\x1e{\xf2\x82\x89K\xc0\xbf\xc8>S\xd4<\x15\xe0\xbf&\xc6\xcc\xfe\xee\xb1\xc8?{\x95\xb6n\xa0\xfc\xb4\xbf\xb8t\xeey\x13\x91\xca\xbf\xbc\x18\x83\xf4\x81/\xd1\xbfZ\xf6\x8c{\x9a\x10\xd4?\xf5DH\xbd<\xb4\xb4\xbf\x04\xaa.\x95V\x11\xb2?\xcc\xd7\x0c\xd4\x108\xd2?\xd1\x0eh\xa3\xfe?\xce\xbf9\xeb\xfc2P\x16\xcd?\xab\x92\x0e\x02Te\xd3\xbf3!\xea\xb4N\xf4\xc9\xbf\xcb\xda\n\xeb\x1f\'\x84\xbf4\xf4B\xd5!~\xcc\xbf\xd0\\Y\xbc\x9d\xb7\xc8?\xb7\x8d\xadYf;\xdb\xbf\xe7\xac\x03.\xf3\x0f\xc2\xbfr\xa4\xcb\x92\xe4\x8e\xb4?\xa6\xd3\x90\x81\xcc\xba\xda\xbf\x94\xbd`K\xfa\xe1\xd2\xbf\xa3a\xde\xbfZ,\xc7\xbf\xfe\x80\xc7_V\xc2\xde\xbf\x89\xa4\x05sG\xa2\xd9\xbfnW>\x9f\xf3\xfex?\x1d`V@\xa1\xe6\xdf\xbf\x88\xc5\x8d\xf7@ \xdc\xbf\x95\xf7B\x80\xa7\x91\xbc?\xd2\x0e\r\x11\xfb\x08\xd7?\xe8J}F\xad\xab\xe0\xbf\x18\xd22\xe2ZS\xd3?\xad\x01\x89\xe3\x82\xbc\xd5\xbf\x8e\x97\x01\x0c\xfc9\xd6\xbf\xd4\x92t\x19?\x85\xcd?o\x03\x05\xd3\x17\xd8\xa4?\x82\x00\x1e&\x9b\xc1\xdf\xbf\x113Ja\xceD\xac\xbfE\x1a\xb1\xe5=\xc3\xd6?=tx\xfd4\xe2\xba\xbf\x9a\x99E\xb7n\xe2\xb3\xbf$b\x80\x845\xa8\xc2?3\xe2\xd8\x9c#u\xbc\xbf=\xa8\xde\xf1 -\xa7\xbf\x9a\xc8\xd3\xf6\xfb\xcb\xd1\xbf}\xb0\xad\xf5\xb2\x88\xd6\xbf\x03y\xe85\'\xe0\xdd\xbf\x04\xcfc\x0b\xf5\x83\xb0?\xae\xce}i\xd2\x84\xa4?)V\xe7u`L\x81?\xec\x87l\xe0"%\xb4?\xb8\x88\xc9\x99\x0f\xbb\xb9\xbf\xe9\x0f\xfc\xfa\x8aO\xd0?\x0f,\xf00h\xbe\xcd\xbf\xb4\xedF\x91~[\xd2\xbf\xc1\x81\xc4Q)\x0e\xd1\xbf\xaf\xf0\xc0\xddwp\xdf\xbf\t\x0f\xad\x02\x03\x06\xbf\xbf(\x04+\xdb\xc0h\xca?g\xa5\x83\\\xb5\x19\xdf\xbf}\x18M/\xac\x15\xc5\xbf\xa7\\Y\xc4\xdf\x0b\xd6\xbf!\xf6G)Y\x86\xa4?L\xf5I\x1e[T\xd3\xbf[O\xff\xc9\xb2\xb2\xc3?\x12!\xa0P\xeb\x01\xd8\xbf|\xcc\x9d\xa4\x99`\xd4?\x8c\x1dd\x9f+,\xc7\xbfI\xefH/\x883\xd0?\xcaIZ\x8d\x99\x19\xcc\xbf2\xca\x1br\x16\xa2\xb9\xbf\xfa\xac\xff\xfb\xb7\x90\xd4\xbf&\xb6\xe6!\xff\xa2\xc1?\xe3\xa9\x00\r6\xd0\xbd\xbf\xce\x87\x97\x1f\xb9\xdf\xd0?Z\xd5\xd7\x8c_\x87\xd4?\x08\x9b\xec\'\x9e\t\xc4?\xb9\xc4\xf4\xcb\xc8\xec\xd8?~\xb3\xe6\xae\x00G\xd3?f=\xceZ\xc0,\xd6\xbf\x14\xc9yHy\xf5\xc3\xbf\xcb\xc1\xe6\xc1\x9b\x01\xda?\x7f\xabLq\x898\xd4\xbf7\x95\x92\x01\x1e\xc7\xd9\xbf\xb5-PF\x00\x01\xdc\xbf\xa6\x8a\xcf\xc3R\xdd\xd3\xbf\x84\xff\xc5\xb1\x9e\x95\xbb\xbf\xe1\xf2\xee0F\xf0\xce\xbf\xb8\xd8*_\xbb-\xd4?\xe6[\x1f\xad\xab\x81\xc6?\xae\x02\xca\xe9i\xdb\xc4?\x98\x07\xa4l\xd8(\xc2\xbf\xe4/\xab\x17D\x06\xdd\xbfY\x0e\x91\x88\x9c\xa7\xaa\xbfz\xff\xbbsES\xd6\xbfr\xff\xbbp\xdf\x85\xd1?\x16m\x82\xbfw\xfe\xd1\xbf[|!\xd3h\xbf\xb1?\xa6\x91\xf9\xce5\xdf\xdc\xbfp\xac\'\xc7\x835\x96\xbfG\xd0\xe6\x04\xe4S\x9a?\xe2S\xf7\x9bS\xcd\xad\xbfM\x132\xf5\xe1P\xd1\xbf\x10\x93+\xda\xa1\x0c\xd3?\xf71\x9e\xb2\x00\xea\xd2\xbfT\x85\x85_\xa1\xb9\xce\xbf\xfd\x16s\xe9\x11o\xb2?\xc08s\xe6c\xdc\xc0\xbf\xfe\xec\xe4\x9f\xe5k\xce?&\xf4\x87\xfdn\xd0\xd6?\x901\x90\x0bt\\\xc7?\x11\xce\x85A\xc8E\xdb\xbf\xf6xo\xb6Q\xdf\xd6\xbf\xa0\x9ec\xcb\xf9\x0c\xc0?\xa1\x81X/\xba\xa9\xc6?\xe0\xf4\x87\xa8p;\x80?\x17\nD\xe3\xb9J\xc7\xbf\x88\x87ne\xaa\xd7\xd7?\xba\x0e\'t\x06%\xb3?B\xd6&\xdf\x15q\xd1\xbf$\x82\xf3\xba\xc0,\xd2\xbf\xbb\x94\xe8\x04\x0f\x06\xd5?\x12&c\xe3\xcf\x16\xd4\xbf\x89B6\t\x85U\xce?QWZ\xcc\x153\xbc\xbf\xb2y\'\xa7\x89\xd4\xc7\xbf{r#\xf0NP\xd4?\xf1$\x08\x0bx\x87\xd4?\xad_\x8b\xc4\xba\xb7\xcb?x"\xdbf\xc4\x8d\xd6?\xd4rS\xb6\x1c>\xd8\xbf\x15\xe8\x12\x9a\xc0;\xd8\xbf|\xc5ZC\xa2I\xcf\xbf\xd5O\xf5\xae$\x95\xce\xbfcx\x86\x1a\xab\xc2\xc7?l\xcf\x9a\x8f\xf6e\x92\xbfp\r\xb7\xf7>&\xb2\xbf\x14\xafM\xaf\xb7e\xac?\'\xf1\x1e\x8d\x95\xbb\xce?+\xaf\x81[\x87\xa1\xd7\xbf\x85\xcc/+\xa8\x8a$\xbf:\x87j\xad\xde-\xbb\xbf\x02z\xef\xb3}\'\xc1?.\xea\xa4\xce\x98I\xb5\xbf1\x8dW\xc5W\x1e\xd9?\x12=\x18[\xd5B\xd7?\x10\xbc\x95\x99\xf5&\xa0?\xc8U\x0c\x8b+\xe6\xd8\xbfJ|\xa2\x83\xae\x0f\xb4?\xd65O\x18@k\xd2?\xcb&\x83\xfd4E\xd4\xbf\xeb\xdfe\xca\xee0\xb3?\xf7\x99\x97\x8b\xfbl\xba\xbf\xb8r&\x99\xe8\x87\xd9?F\xc8\x96E\x01\xdd\xc6\xbfE\xfb*]\xdbv\x86?Vu\xe0\xe8m\xa9\xe0\xbf(\\V\x8f\xc4\x86\xd7?\x9cu\xf2jZ\x90\xdb\xbf\xfc\xd2+\xb5\x9e\xb6\xd2?\xcd\xea\xb0\x91\x0f\xec\xa6\xbf\x13\xdc\x9d.\xfb\x97\xd0?\xba\xb6\x10\x1aP\xdf\xda\xbf\xe9\xd4u\xbeZ0\xda\xbfM\x93}f\x97Y\xc5?\xbfK\xd3\xf7\xb0\xf3\xd5\xbf\xce~\x1f5\xc3y\xc5?\xc5e\xdb\xcd\x0cv\xcf?/3\xd1\x85\xdeP\xd3\xbf\x12p*\xd30\xb7\xa7?eL\xdd\xae\xbe\x8e\xda\xbf\x16\xef\xc2"s+\xa6?/\xd4\x7f\xe8Be\xa6\xbfW\xb7\x90\xb3\x9e\xe6\xd4?z\x12\xa1\x96\x8c\x83\xd6\xbf\xfb?\xa8pe\xd6\xd6?"\n\xbf$\x8e8\xc5\xbf\xb1\xd0\xc6\x12\x9fa\xd2?\xbf\xe6\xe1B\x13\x9f\xd7?\x00\xb6lP\x14\x98\x88\xbf_\x07J*\x18\x94\xd5\xbf\xd1\xf8\xdb\xa4^V\xdf\xbf@\xae\x95\xd7\x84\x80\xdd\xbf#-T\x90\xae\xa8\xaa\xbf\x1c6\xd0#n\xa4\xc0?U\xf4;\x83!&\xdf\xbf\x16\x1f\x82P\xd2\x03\xd6?\xb0\xc2\xab\x0e\xfeo\xca\xbf\xd9>=\xfa\xf8\xbd\xc5?\xf7\x85\xd1\xe0\xbf\xa4\xa0? t\xb6\xa9\x98\xaa\xca\xbfP\x82i\x02\x04\x88\xc1\xbf\xe4\x9f\xa8\xdb_\x8f\xde\xbf)mz\x1c\xb5\x81\xd7?]\x97\xb2\x14}\x1c\xc6?s,S\xadGT\xe0\xbf\x0b.{\x83\t\x19\xd7\xbf\xe7[{\x13\x11\x95\x9a?\xa1O\xa9N=Q\xe0\xbf\xa7_\x160<\x1c\xce?\x98\xf2\x82{\xc2w\xc0\xbfV\x19\x02\xce\xa9@\xb7\xbf \xcc\xfdi\xeb\xa4\xa3?m\x9f~\x08\xae \xa0\xbf\xee\x1fT\xc8\x96k\xd3\xbf\x19\xb5\xed\xa4\xd2\x01\xd7\xbf\xaf\n\x9b\x0c)\x8d\xb4\xbf\xd7\xbdre\xe7\x85\xd6?ia\xe1k)\x88\xc6?\xb4\xcd\xfaw"\x9a\xd0?Cr\x1d\xe0\xfd\x0f\xd1\xbf\x93\xae\x81\xdb\xd3\xb4\xd6?\x03,\xe3\xd4\xae\xf5\xc6?F2\x83\xff\xff\x0f\xc7\xbf\xfe\xe5y\xdeU\xa3\xb3?7\x9d\x98\xc3\x1bW\xb3\xbfu\xb7\x1d\x8f\x0b\xe6\xb0?O\x00\xd4\xa7\xd9$\xb0\xbfa\xe3\x1e\x17\xab\x08\xc6\xbfa_mNq\xc8\xd7?>hE\xcb\xd4\xee\xd5?\x1d\xe4#\x04\xf5\x14\xd4\xbf\xc19\x1a*\xcf\x81\xbf?\x91\xbb\xb2\xb5\xef*\xcb?\r\x99\xb7\xc0B\x84\xd0\xbf\xc6t\xd2\'e\x01\xd1\xbf\x9b\xad:1\x0e\x1b\xda\xbfNv+\xb1P\x0f\xd8\xbf\x03\x103\xea\x91+\xbd\xbf4\x07\xa5\xe8\xf8\xc2\xd4?\xc3\\\xe1_&\xb8\xae\xbf\xdf\x81\x11\xc7\xed\xdb\xd8?\xc5\xea\x87>\xab\x10\x82\xbf\xa8\x1d\xdbB<\x92\xd5?8S\xa7\xf9\xcci\xbd\xbf\x81\x85X\xe97\xe6\xcc\xbf\\\x7f\x17\x06\xcdP\xd0\xbf)\x96\x0e\x8d\x1b\xe7\xd4?X\xf2}\xe5\xb7\xf7\xc0?^\xf3\x1a\xe7\xb9\xb0\xd5\xbf\xa5\x80b95\x07\xb8\xbf\x83\xa1\x8e\xcb\x18\xc0\x9a?\x1b_\xb1E\xf3~\xcc?^)F\xe8\x8e.\xda\xbfw\x9a\xca\x8d(O\xc7\xbf\xaf\x81J`\xd0\x13\xc0\xbf\xdd]\x9aG\x8d2\xc7?O\x8dX<>o\xc2\xbfr\xb3,9\xc6\n\xcc\xbf!7\xce\xa9\x9b\x95\xc6?g\xe2\\ >\xfb\xba\xbf\xac\x98\xdb>\xd8N\xb0?\x03\xee4@\x02\x0b\xbc\xbf\xde}\xf2t\xf9\x99\xd0\xbf\x03y\x0e\xb3\xbe\xb6\xd0?\xf0\xd8\xb1\x87\xaf\x19\xd3?\x97?\xcdM\xf9\xe5\xd0\xbfT\xb7\x10\xfa\xc8\x13\xd7?\xd8\xaf\x1d\xb8f\x1f\xbb\xbfOr\x03P}\xa5\xb7?N\x9a\xe3\xf5\x80\x8d\xbb\xbf\xd8I\xcd\xc9&@\xb4\xbf\x17M\x95MW\xf1\xd5\xbf\xa6\xfc66y.\xc8\xbfov\x97e\xbe\xfe\xcf?\xf2\xe2j\'\xd1x\xd0?O\x90\xdeN\xfc\xb2\xbb?)\x9a=?\x83\xb6\xc7\xbf\xfce\x80\x93\xcc0\xe0\xbf\xfd\xc7\x89Mb\xd8\xc7?\x93\xac6\x81\xf4\\\xd1\xbf\xaf\xa7\xb6\x1av7\xa0?\xe8\xa9*\xd8=\xa7\xd2\xbf\x93\xd5^\x0bgm\xe0\xbf\x95\x02)GW\xd6\xac?<\x86\x94\x04\x1fW\xd7?AlT\xa3!\xa8\xd7?%\xc4iW\xda\x16\xcf\xbf\xea\xd0\xa7-\xc8q\xd2?\xb18w\x03"\x13\xd8\xbf\xc6\xe6S\xa6\xd1\x08\xca?\xc9\x07q\xa3\xd7\xb7\xd0\xbfV\x0b\xa4\x94\x849\xe0\xbf\xd1\xeb\x00\\\xbfe\xd5\xbfW\x93\xd3u\xb66\xd2\xbf5NR\xa3\x85a\xd0\xbf\x8a\xd39>8\xc7\xbc?\xd7\xda?\x9b\x88\xd8\xe0\xbf\n\xd9\xd1q\x96`\xa1?\xc3r"M=\xef\xb6\xbf\x7f\x0cqL"G\xdf\xbf\x9a=9\xdbN\x94\xcd\xbf\x13\xcaa\xc8\x1b\xd0\xce\xbf\x8f\xb3\xbbX\xa9\xe1\xe0\xbf\xd6-\xc6\x07em\xcb?(\t/S\xcf\x14\xd6?\x14\xd4\x89\x18\xc7\xf4\xd8?\xe5\xcf\tP\x7f\xa8\xc9?V\x89w3\xf1\x8c\xd6?\x11\xcf\xaf\xb7\x16\xd1\xac\xbf\xac\xab\xce\xcfJ\xe8\xd5? \xde\xc3\xe4_{\xc7\xbf\'\xcf\x0c\x8a\x93n\xc7\xbf\x99BQ\x84\x058\xd2?HU\xb6\xd7\xba\xbc\xd5?g\xe9\xd9\xc1}\t\x94\xbf\xa2\xa9\xd7>\x8c\x1c\xd7\xbf8\xf1T\x8f\x89k\xc6\xbf\x8c\x90S\xa4\x1aY\x90?\xa0\x9e29L^\xbc?4\xee7."V\xc7\xbfZ\x17\xd5\x97\xfeS\xa2\xbf2.N\x15\xe5\xac\xd6\xbf\x15("\xf0\xfa_\xd8?\xc9\xfb\xb8v? \xc0?\x04n\x19\x0f\xcf*\xc9\xbf\x95C"\xcc\xae\x7f\xd4\xbf\x01\x98\xd2\xd1\xb6\xf8\xd7?Tu\xb8\xb1\x7f~\xb1?\x0e\x90\xecm\xecG\xda\xbf\x02NU\x9cg\x95\xc8\xbf\xa5\xda\xc3[\xf6I\xc3\xbf\x1e$\xb7?ix\xdb\xbf\x06\xe6\xfe\x81\xda\x88\xbd\xbf\xdc\xea\x976\x90\x05\xd8\xbf\xc9j\x8fX\xa8\xc5\xba?\x08\xa2\x0e\x83\xbb\x1f\xd4?\xd3C}X6\xd2\xc1?\xe7Y\xaaY\xb4\xbf\xbf?^x\xb8\xfe=3\xd5\xbf\xc6O\xdc~\x8b"R\xbf\xf6\xf0\xc5\x90\xcf\\\xd7?\x99&^\x85\xca\x16\xb3\xbf\xfc\xbb\xb6\xac\xbd\xe5\xd5\xbf\x95\xd1\xbc\xd2\xddW\x8a\xbf)\x1e\x9fO#\x03\xbe\xbf\xe1\xd6M\x8e\x7fy\xc1?\xd0\x11|tk\x95\xd4\xbf\x7f\xa3c\xd3Ao\x86\xbf\xaf\xc3\x08\xfdy\xc1\xc7?.\xffN\x96\xa4\xe8\xc9\xbfH\xc1(\xecg9\xc0?0d\xa5=\xd0\x8c\xcc\xbf\xd3\xd2\x90\xa7.\x07\xd9?\xc3\xd6o\xcc\xedA\xcf?*\xa7\xc6\x94{\xf4\xd7?-\x87\xafO\x17\x13\xdc\xbf\xba\xd6\xa2\xf4\x18\\\xdd\xbf\xfc\x9fM\x0cpI\xdc\xbf\x8e\xab\xfc\xf2Af\xd1?B\xce\xc1\xe4LP\xc3?\xe2G<"\xcbv\xb5?\x04\xb6m\x80 \x1a\xb0\xbf\x17+\xad\xf8\xc3\xbd\xd3?\xe1).\xae7i\xd9\xbf\xb4\xfb\xc0sr\xe5\xce?9\x99:u\xf8\xaf\xc1\xbf\x07\\\x1b\xe8\x87\x0b\xc5?aS\xc0\xea$Q\xd2?.\x10D</b\xce\xbf\xa1\x92\x8a\xba\xb4L\xcf?\xc8\x106K\x04k\xd2?\xf9\xf8\x87\x10\xbd%\xb7?\xbe\x1e!$\xe0\x1b\xd1\xbf\x88Y\xe0\x84dv\xd5?2\xd83#S\x12\xb4?\x00fy{\xe5\xfd\xce\xbf\x04\xd4\xf7\xc9>0\xd0\xbf\xf10\xcc\xd7\x99\xbb\xd9\xbf=la\x8c\xf8\x96\xb4\xbfV\xeevc\xb5\xf4s\xbf\xff\xd8K\xf5\xa4\xf5\xd2\xbf\xf1\xd2\xe9\xc4\xce+\xbf\xbf:\xef^K\x97\xcb\xbb?2\xf6{`\x1b?\xdd\xbf\xb4\xf3Bw\xef\xcd\xdb\xbf\x13\x91y\xb3\xd6\x9c\xc2\xbf4\xc9\xa0\xa1\xc7Q\xd4\xbf\t\xe2\xc5k\x0b\x90\xca?\\\x04Te\x92\x13\x9d\xbf\n\x81\x16\xe8^\\\xc9?\xdd\x00\x1e8\xc9-\xb7?\xaa_16X\x87\xb2?u\x90.\xd9k!\xc5\xbf)\xedq\x08\xf7l\xc2\xbf\x97\x9e=q\xe3\xb6\xd8\xbf\x1a\xc5d>\x1c\xa0\xda\xbf\xf02\xae\x85\xfd\xd0\xe0\xbf\xb5\x81\xa2(f\xdb\xb5?\xb59\x90?\xc9\xfd\xc0?dap\xe3>\x84\xa9\xbfg*M^\xc1\x94\xc0\xbf\xab\x9f0\xf3\xbd\xac\xc7\xbf\x1f\x84\xbd+\xc0\xf5\xd6?\x05\x17;\xf1o\xb8\xa3?\x95\xec\xc0\x85*p\xd3?\xcb\xa2B\x0e\xe5\x04\xad\xbf\xf2.\xc2\xd9g\x11\xc7?m\xc0EC\xeb\x8f\xae\xbf\x0eR\x9dMx\x04\xda\xbfAj\xdeZ\xd6%\xd0?\xc7(\x97\xf1\'\x02\xd2\xbf\xdb\xc4nZ\xfc@\xd3\xbf\xa7\x10$\xac\x0ey\xa0\xbfa1\xe3\x97C\xb6\xa6?\xb6\xfe<n\x16T\xdf\xbf\x15\x9eR\xb7\x90\x86\xc4?\xd6\x1c\xdc|\xe0\xe5\xd6\xbf3\xd9W\xc2\xd5@\xc5\xbf_W\x19\x9d\xf4;\xa7?\x9b\xee\xea\xc7J\xb8\xd2?\xae\xbf\x13.\xa4\x00\xd8\xbf\xdc\xec\xcb\xeak\x95\xb5?\n?8\xb8\x83\x9c\xd9\xbfS\xbfBY\r=\xdb\xbf\xe5\xd4B\xd1\xbb\x1c\xd0\xbf\xf9y)\xf4\xff\xf0\xb2?\xf3o!#J\x15\xa9?\xa5\x8a\x92QR\xc3\xb3\xbf\x95$\x1b\xaa\xdd\x7f\xd2?6+\xfdVg\xd3\xa4?R\x1a\xda\xbf<M\xa2?m3\x9c\xe4Q\x01\xe0\xbf\xc7gG\xa6\xb2\xad\xce?!\xb5\x8b\x0f\x03\x97\xd9?0\xa5G\x9b\xa8\xdb\xc2?Il\xdb\xd9\xe52\xd0?8\xa7\x91\x9dk\x05\xc9?hH)\xcc\xb2@\xd8\xbf|\xa3\xa0\xd5\xb8\xfb\x95?kz\xff\x14\xadu\xcc\xbfi\'\x1b\xbe\xcd:\xb9\xbfGC\xed\xdf\\\xe1\xc4\xbf\x07u\x89I\xc8\xaf\xd2\xbf\x9dT`\x8cA\xe8\xab\xbf\xd8C\xdf\xb7\x9a|\xc3\xbf\x80d\x88W^`\xd9\xbf\xed\xdaCe}\x19\xba?\x15\x85\xebK{Z\xd0?\x80LJ\x98\xe4\x98\xd4?\xa2\xb5j\xb2>o\xc2?<\xb8\x10~\xf9R\xc5?\xb0\xad\x0b\xeb\x1ey\xd7?\xe1\xa1g\xe2\xce\xf6\xe0\xbf\xf4\x99#\xe1yi\xc5\xbf\x08G<q\xcf\xcf\xdc\xbf\x90\xfeLNC^\xc8?\xddI\x89\xdc3W\xd2?\xf3\r\xd9L/(\xb4\xbf\xfb\xfakLUu\xd5?4g\x9d\xa2=\xc2\xd2?w\xd4\xea .\x1b\xc6?\x9aTI\x11\xd9\xf7\xc3\xbfP\xdc\r\x10%\x00\xbb\xbf\n\xe2\xed\x02\xae\xee\xb3\xbfw#\x9fn`\xbb\x8a?>\xb4g\x92\xa9`\xd0?P<g\x05$\x92\xd1?\x90\xe9\xdd\xb4z\x1e\xda\xbf-W5D?=\xd9\xbfq\xa2N\xdch2\xc0\xbfg\xfbH\xdb\xcb\x97\xb6\xbf[\x08N.\xfdu\xde\xbf*s6\xac:]\xc1\xbf,\xd1\x01\xdd\xe9\x13\xa8\xbf\xa0\xd5\xd5\xa8IK\xc4\xbf\x1b\x06\xd9\x0eZJ\xcb?\xd3O\xf1\xe08\x88\xad?W^\xcd\xa01a\xdb\xbf\r\xb7An\x18\x1f\xd5\xbfs\xbbJ\x9fo6\xd9?\x8a\xd0J\x92\x95f\xd7?S\x8f\xecF9\xaa\xbd\xbfp\xce\xeb\x1a\xe0a\xd4\xbf\x81?LE]\x9f\xc5\xbf\x86\x06\x8aK\xabl\xbd\xbf]\xbd\xd4\xf6C\r\xb4?4*\xfb\xb3\xdbv\xd5?\xf4\xfd\x9bmM\xae\xd5\xbfA^\n\xd6\x87|\xc3\xbf\xa0mi\xc2\xc1p\xd5\xbf\xac\x16e\xc9\xd2\x92\xb5\xbf"+\xa6\x98A\x1b\xbe\xbf\xb8E\xd04\xbf\x8d\x94\xbf\xa5G/\xebd-\xcb\xbf\xbf\x19_\xf5{5\xd7\xbf\n\x8c^a/uj?Kn\x95V-}\xdd\xbf\xd7\xa6Bb\xbb~\xd8?\xca\x93\xc1\x18>\xd6\xa5\xbf\xe4\xfa\xc3\xe7b\xb6\xe0\xbf\xb2Et\xea\x86"\xc6\xbfs\x0c\x17.\xaa)\xba\xbf\xb7a\x05/\x16n\xb5?\x82\x83\xb1\xc1\xc0\x99\xd8?\x12\xf0\x00\xdd\x03\xa0\xc0\xbf-\xc7M*\xect\xd4\xbff\r)EF\x12\xd1?\x8ehB\x18\x80\xec\xdb\xbf4\x96\xe8h\xf6\xef\xac?Ziq:\xa4\xef\xd8?\xf8\xa6w\xb8x\r\xc7\xbf\xa2\xccOw\x9c\n\xd2?=RC\xa7Z\xbe\xc6\xbf\xfc\x1d\x1fm\xa6\xd7\xcf?\xebK\xb2*m\x14\xc0?\x9b\xcf\xeb\xc9\x87\x85\xd4\xbf2,k[\x8e\x8e\xd4\xbf\xcb\xe9W_\xe0\xeb\xb4?\xb3w\x136Z\n\xd9\xbf0b\xefB\xd5g\xd5\xbf\xc9\x15\xf5Om7\xd0\xbf\x85\xd2\xc5}\x19[\xe0\xbf\xf4\x93\xd3\x01\xd0\xf5\xc2\xbf\xe6~\xa9\r\xc3D\xb1?\x05+\xce:\x93\xfb\xc2\xbf&\xe0\x19\r\xc07\xd2\xbf\xb1x\xfbmb\x1a\xd9\xbf\xb8M\xc8\x0e\xa4\xfe\xd8?\x87\xa7\xd1\xb9j,\xd2?\xc91s1U\xe6\xd3\xbf\x9b\xd3ND\xc3\x9e\xb2?\x88\x8f\xfc\xc7\xed\xf0\xc8?\x96\xcf\xd0K:\xb7\xce?%\x8d\x95\xf72\xcc\xc2\xbf\xbb2:\x12\x97\xf0\xc5?j\xdf\xeb\xbb\xdb[\xb1\xbf\xa4"+3U\xd3\xc5?\xd5\x99\xcc\xf0\x07\xf8\xa8\xbfm2\xa4T\xda\xd4\xd7\xbf\xdb\x8b\xbd\xf1\xc5\xa0\xd9\xbfL\xe3d\t&R\xd7\xbf\xefV\x08\x89\xff\xfb\xbc?.=\xe6vC\x0b\xc6?\x05\x00\xa4\xddv3\xc3\xbf\x82\xd1\xe6\xf1\x94J\xaf\xbf\xdc\xca\xc3$:\x98\xde\xbf\xa4:\xf4\x1a\xe3\xd1\xca?\xc1\xc4\x11\xb5\x87\xa4\xd6?P\xd9\x9d\xdd\x82\x82\xd7\xbf)\x1e`\r#Z\xc8\xbf\x9d\x17\xbf\xc3\x1a\xab\xb6\xbf\xde\xa7\xe4\xcd\x12=\xd5?Q\x83TqK\x98\xb7?\xb4\xb4\xe6\xf3\xb4/\xd2\xbf\xdd\xc5>\x03\xce~\x91\xbf\xc0\x90ye\xc5\xfd\xcc\xbf[]V\xad\\\xc9\xcd\xbf\x874\xb1\xb0Ic\xd0\xbf\xe1/=\x1a\xab\xaf\xd5\xbf\x94\xc9|\x83-\xbb\xcf?N\x87+m Z\xe0\xbfa\x87cq\xf8\xb1\xb0\xbf#\xaa\xaa\x94\xe5\x8b\xcf?9\x1b2\x00l\x98\xb4?\xd2\x91\xd0\xa4;\x0c\xd4?i\x12\xa4\x11\x80\xb8\xdd\xbf\x99\x93\\\x1c\xbe\xe8\xd3\xbf\'-\xe0.{\xae\x88\xbf`}\xc1\xe7\xf2m\xd8\xbf\xcb\x07Z\x8e\xddJ\xd0\xbf,\x18\xdbC\xf1e\x92\xbf\xe4\x9d\xecdl\x18\xc2\xbf8\x1a\x06\xc2\xf6\xb1\xd7?K\x8cu\xdcz\xea\xbc\xbf\x9c`\x8a[};\xc8\xbf\x8al\x9cju\x19\xd0?\xf1\xe6\x05Wo\x83\xd6?c\x1b\xa8vX\x02\xb3\xbf\x05#\x08\xa3\xde\xb0\xd1?y\xdeK\xf8\x90$\xba\xbf\x9a\xc8.\x0c\xb3l\xc0\xbfUd\xdc\x8f\x1b\xd1\xd1\xbf\x81\x800\xe3\x06\x8d\xd3?$Yv\xbdD\xcf\xba?\x970\x8e\x8a\x85\x1c\xcd?\xcbc$\x95\x03q\xa3?\x13\xaf\xd9\xbar\xb6\xc3?%\xc3$\xeb\xf7\x81\xd3\xbfPNr\xaf\x9c\xdb\xaf\xbf,\x05\xd8\xc1\xa0\x97\xc8\xbf\xc5\x83\x14\xa1\\#\xd7?\xb3\xe4\xa2C\xf1\xb9\xd4\xbf\x0c\xcf\xd4A\xa7\xbb\xd2?\xb6W\x9fu\xfb\xa3\xb4\xbf&\xac\x0e\xbc\xc5\xaf\xb2\xbf\xbb<\xff\xff\xb0@\xc6?\xf3\xeb\x0e\xf9"e\xca?\xa7\x14\xd2\xb9\xbfL\xd4\xbf\x03\x07\x18XO3\xda\xbf!\xa8~\x14;\x90\x8f?\xfa\x9eI\x81b\x91\xd4\xbf\xb9\xac\x9f\xb7\x8a\xb2\xd7?\xe1\x00\x93\x86Z\xe7\x9c?RQ\xfd{C\xf4k?\xab\x06W\x94\xbdL\xd5\xbf\xe7)\xee\x92Z\x01\xb5?\x92\x89\xe2\xa1\xa0&\xce\xbfj\xe9\xa1gp.\xcd\xbfz?\xe0\xfa-\xf3\xd1?\xba\x12\x05P\xea\xe1\xd5\xbf\xf9\x8a>\'\x07\xc7\xd5\xbf\xc8\x0f8i\xf7\xc2\xcb\xbfE\xfd\x1dJ;\x12\xe0\xbf]\x10\xd4_j4\xd2\xbf\xfa\xdb\x1bO4\xc8\xd0\xbf\xf0\xc1\xf7Vq\xc0\xd7?5\xe3t\xa3\x13\xa1\x9b?\xd8\'\xce\xb6\x02x\xb5\xbf_\x90\xc8d\x93\xab\x91\xbf;\x9f\xb4td\xb3\xd3\xbf\xab&>\x8dB\xc1\xc6\xbf\x93\xb2\xe9j\xe1\xf7\xde\xbf\xf9\x14\xdd8u\xd5\xd7\xbf\x00 .\xfb!\xda\xd7\xbf\x19\x90\xad\xefE\xe2\xd1\xbf\xc0\x9b\xdd\xedm\xd7\xd4\xbf\xc4\xccb\xaa\xf8\x8b\xba?\xfa\xf1M/\xbag\xc7?\xa7])\xb5\x13<\xd0?O\x10a\x12XK\xd3?\x11X\xa0\x1f\x85\xe2\xde\xbf<\xa7$\xb3\x82\x1e\xde\xbf\xef$\\\xd1\x8e\xbf\xd9\xbf\t\x1d9\x81.\xc5\xbb\xbf\x08\xe6?\x11\xe59\xd2\xbfz\xfa\xa8g\xfd\xce\xdc\xbf?qP\x91;J\xd6\xbf~S\xa9v\xde\x96\xa6?a\xc7\xc4{\xa3&\xd7?\xb0\xcc]tNv\xb4?\x8dso\xc5\x11\xbd\xc9\xbf\x89\n\xe5\xad\xaa\x8d\xd8?[U`\x80+\xd4\xce?\xa3\x95\x00g\xf9\xb8\xd5?\x0e\x82\xe3cg\xbf\xc4\xbff\x92\xfa\xf5\xd1\x08\x9f?\x86\xf6\xd6\xe8\x8d\xd4\xcd\xbfD\xce\xfc\xab\x83h\xcd?\xec\xb5\x9a\x9da>\xb9?\xe0l\x02|\x14\xe9\x86\xbf\x1e\xea\xb9\n\xbfJ\xcd\xbf\xdfS\xe0\xefbP\xb4?\x07\xf9E\xe5\x947\xd0\xbfNEN\\|\xae\xc0\xbf\x0cS\xb54%9\xad?\x11%\x0b\x91\x15\xd0\xa5\xbf\xf4\xe4\xf2\xf3\x0e\x96\xc4?%@\xd6#\xee\xb6\xde\xbffy1m)\xf2\xd2?\x98\xa2:Q\xdf\xb9\xb2\xbf\xe4\x84\x03\x9f`%\xd3?\x96O\xa5\xf7\x9f\xb4\xd2\xbfVc\xd1\x8a\xae\x85\xc4?\xf6\xbc\xc9`\xae.\x9c\xbf\xbd\xf3\x14b2;\xd3\xbf\x9f\x7f\x97\x88\xa8\xcb\xd7?ToR\xb2\xb4\x93\xca\xbfU\xb6\xe7K\xb8:\xc5\xbf\xd7\xd6\xe7\\\x0b~\xd0?\x838m\xe6\xc9\xdb\xd4?<1\xc4\xbaa%\xb1\xbf\xb5\xdb\xba\x1b\xc0\x02\xe0\xbf}\x06Y4\xa5B\xc7\xbf\x9eG\xbe\xc8+Z\xbf?\'s\x0c\xd3\x1a\x85\xbb\xbf?\x19\xc4q\xb2\x8d\xdf\xbf[_\xce\t\x97*\xd1?\xc5#Ds\xc0\xde\xa9\xbf\x8189\x05&1\xc1?\x86 yJ\xc9\xfa\xc2?\xba\xd6\x9fr\\z\xdc\xbfF\xe1\xb3\x0fz\x96\xe0\xbf\x1f\xe8X>\xe0p\xd6\xbf\xb2\xb2R\xa1\xd8\x14\xb2\xbf\x9e\xe2T\xaa\x86\x01\xd7\xbf\xcb\xa7\x8b\xeaT\x95\xd9?\x08D(\xdb \xd0\xd0?c\xc1e\x13\xbaY\xa6?4l\xc1p}A\xd7\xbfK}j\x9f\xd2\xee\x83?Fn\x8d^e\xba\xd9\xbf\x8e!:\x8dGP\xcb?Z\xcd9L\xd5_\xd1\xbfy\tQ\x99\xd2Y\xe0\xbf!\x98\xc1\xfb\xd2\xac\xc4?\xda\xb4\x00\xec\x05"\xde\xbf\xdd\xf5v\xf5B\xf5\xd0?\xa6\xbd\xf9\xd0\xe2*\xcd?1\xber\xc2C\xaa\xd6\xbf\xf1\xb8_o\x108\xd3\xbf-\x04\xb5\xa2<\xde\xb2?\xe5Xw\x11\xa4\x8c\xd0?\x97\xaf\xc4\xc0\xda\xca\xa1?\x19\x03~\x867i\xb5?\x87b\xdeGu\x11\x9c\xbf#\xb5\x19\tOh\xbf?\xe1\xfb\xd8r\xcc~\xb0?\\\xe7?\xa2\x13\x02\xd0?\x9e\xe9\xee\xab1\x11\xd1\xbfgM\xec\xeb\xdd\xfb\xcb\xbf\x15\xcdQ\xae\xd0c\xbd\xbf\x96\x1c\xadeJ\x8c\xc2?I\'\xb4o\x9c\xa7\xde\xbf\xcf\x1c{\x07\x1d\xc1\xcc?\x92\x16\xd9\xd2\xf3F\xdb\xbf,\xd9\xf6\x00\x9f\x11\xc6?\x1e\xef\x9d\xe3a\x15\xce\xbf\x9f\xf7~\xdfL-\xd5?zp\xa8\xc8\x90\x8c\x90?\x83\xf7\xc1\xcd\xd4\xd8\xb9?\xd2s+}2\x89\xc0?R,\x17\xf71\xf6\xd5\xbf\x9b@F]-[\xa2?\x07\x8d!X\xf7\xd5\xde\xbfF\xd5\x0c\xe5\xbe\xff\xcf?\xc3\x96\xc1"\x81J\xe2\xbf\xa1\t\xdc\x17t~\xcd?\x13\x90\x11\xaa\x0c\xe3\xd1?b\xdbV\xd0i]\xd3\xbf>\x9a1lGk\xc3?\xe1kM9M\xfe\xd3\xbf\xed\x90r\x0b\xfe\x8d\xc1?\xa3\'k\xb1\xc4\xfb\x8b\xbf|6\xc5\x8bF:\xe4?B\xa5\xaf\xecY\x8f\xcf\xbf\x02\xf9\x16\x0c\xb1\x7f\xcc\xbf\xf7q>}\x1e\x84\xda?\x8e\x17\x15\xba=\x15\xa4\xbfw\xfd\x85\xd4}\xb4\xd5\xbf\xf4\xbd\x1d\xae<\xb6\xdd\xbfT^\tY\xd1\xb3\xd0\xbf\xae\\\x18X\x02\xd1v\xbf\x91\x9c\xdc\xf2sV\xc5\xbfSc\xee\x8d0/\xcc\xbf;\'\xb7 \xdap\xce\xbf\x8c\xacQ\xf4\x8f\xe2\xe1?k\xa5\x9e\xfdnb\xd4\xbfnjjk\xa7J\xd8\xbf\x05J\xe7\xaa\xa35\xb0\xbfp\xd7\xd7{\x0by\xd9?(\x1e\x07\xfdD6\xbb\xbf\xfe}\xd5\x16LX\xc7?\xa3\xa1B\x12\x18\x81\xbe\xbf\x9d\xc2j\xc3\x86\x9f\xd6?\xbbw\xe9T\xfbr\xe3\xbfBK\x00K\x13\xab\xd3\xbf_3\x1e{R<\xd0?\x92\x8c\x96\xef\xc3\x9b\xdd?\x02\xfap\xd4\xb5\xb7\xc8\xbfg\x87;\x8d\x8fB\xe0?\x92c\x91\x97s\x8b\xd7?[\x01\x90\x0f\xda\x9e\xbe?=]\x19\xc5\xcd\xad\xc4\xbfl\xc8\xa1(\xf0\x96\xe2?\xa3\xa4\xf4\xb4.\x81\xb1\xbfa\x00E\xe2\xff\x08\xcb\xbf\xefrs\x0c\'H\xc6\xbf\x1fXAb\x18g\xd3\xbf\x05\x7f;\x8b\x9b\x8d\xce?\x07\x941B\xcf\x0f\xd8\xbfb\x19\x01\xf5\xf4\xbe\xe0\xbf\xee\x08\xbaUGw\xd2?<w\xc4\xf6\xa9\xe7\xd5?\xba}/j\xf8\xd8\xe4\xbf1#\x96`LE\xb0\xbf\xed\xd5N\x13`\xe4\xcc\xbf\xc9\xd5\xafX\x7f\xb3\xd6\xbf\x07\xa0\x06e\xd5s\xd7\xbf7\x0121p\x01\xd8?it\xefJ\x13%\x9e?G\x1cys\xcd\xa0\xd7\xbf\x08\x05\x87\x8a\xe3\x0b\xd0?c\xfc\xba\xe6\xe6Y\xdd?\x19Z\x8eL\x8a@\xd2\xbf\x8d\xf9m1$7\xe4\xbf\xd7oo\xa8\xe2\x9e\xd7\xbfD\x93\xc7\xb7\x10"\xb1\xbfT\xf2\xa4j\x8f*\xd3?\xddF\xec\xf0=j\xd8?4\xa9\xfe`\xa9\xb2\xd8?\x04\xbfu\tp\xf3\xe0\xbf\xbe\n\xe1*_\x86\xc5\xbf\xf0N\x9d]\xff@\xd4\xbf<A\xbe\xfb\x8d\xb5\xd4\xbf\xccG\xd9`Z;\xd6\xbf7*\xc2\xf9\x80K\xd5?\xf3\xb6\xc1\x19\xccF\xd7\xbf*z\x03_8-\xd7\xbf!S\xb1\xfbn\xb8\xdd\xbf\x03q\xdf\xb2u\x04\xcb?\xb1\xd58\x8c\x9a\xb6\xd2?\x8ff\x99"\x15\x11\xd5\xbf\xe9&&\xb2ba\xda?/n\xe3\x8e\xd03\xa2?D\xa4{&)\xea\xd6?\x13!\xd0\xe7\xea\xf5\xdb?\x04\xf1#7\xe9\x8d\xc0\xbf0r\xb6\x873d\xe3?\xa3X\x98\xf9\x0c\x1d\xbb?\xdb\xa9\x0e\x93\xe9#\xce?\xac\x11F\xa5\xafY\xd4?\x1c\xfc6\xf7k\xc3\xce\xbf\x14\xeb\xf5\xd9\xc3\xce\xa3\xbf\x1f\xc2\x13$v1\xd5?\xee\xe0\\\x88F\xa4\xe0\xbff\x89CI\xb7\x1a\xdb?\x13\xd8`\xc7\xce\xf0\xca?R\xf3\x11\xc08\xa0\xbb?|\xd9\x9a\x80h1\xe2\xbf\xa40\x91u\x15\x88\xcc?\xf0\x14\xc9k\x1c\xa9\xde?\x7f\x0f/C\xd8\x10\xb6\xbf\xfb\'\x8e\x90y\x91\xc2?\xff"\x13N5\x1c\xdc\xbf\xbb\xd3\xa5Ar\x9e\xd5?\x01\xbbO\xd9EE\xdb?~\xd2\xbd\xfeC\x03\xb1?\xb1\xe3C\xad\xda1\xa9?D\xadb\x8c\x86\xce\x87\xbf\xd3-\r\xa9\xdf\xa2\xd2?\x02\x9d\xc1\xd0\x8b\x80\xe2?\xb6h\x04\xb8}\x9c\xc4?\x94\x91\xb7\x19&\x0b\xd9?i\xddXB\xb0~\xe3\xbf!g\xcd\x86(>\xdb?\xf7\xa4,_\x1c\xd3\xd4?:\xa3Re\x83R\xe2\xbf\xe6\xa3\xb2\xe4\x8dy\xd9?8*\x16\x86e\x1c\xe1\xbf\xfa\xe5\xad\xbff\x98\xce?<\xbe*2C\x03\xc5\xbf\xd6\x173\x15\x9c\x10\xe0\xbf\x8ey\x94\n\xcb\\\xa8?\x885\xc4\xee\x83\x1e\xb7\xbf\xfc\xc5\x84u\x8f\xe2\xa6?\x80\x17\xc6\xb6\x18L\xe5\xbf\xffPA\x16(\xfb\xe1\xbfZ\x84t]\xff@\xd1?n\x8e%v\xcf\xc9\xc0?\x80\x00\xa1y\xb7\xc4\xc6?\'\xa5mT\xf8\r\xd7\xbf\x0e\xfe\xc1\x15\x0b\x9f\xde\xbf\xe5:\xfb\xf0\x91\xa8\xdf\xbf\x07\x9d\xdb\xa4<\xe4\xe2\xbf\r\xb0~\x0fI\xad\xd7\xbf\x18s#{m\x8b\xc6?w_\xe5\x05\xcd\x92\xc3?Y\xa5\x0c\xb0\xcbW\xd0\xbfL\xe1\xde7K\xc8\xb6\xbf\xab*b=\xcc9\xc9?\xc4h\xa7\xee\xc2\x9f\xb6?\x91re1@\xa7\xe0\xbf\x92\x18\x98\xb5\x88;\xd7\xbfO\xa0\xd7\x94\xbf0\xa8?\xb8~\x94\x98\xbfQ\xda?h\xbci\xd0%\x8d\xd7\xbf\x9d\x8d\xb2\xf0\x00\xd6\xdb\xbf\xcdU\xbe<\xdb\x12\xde?\xe1#\x83\xff\xf4\xff\xd3?\x0fj\xebGj\xb1\xdd?K\xce\xdf\x17\xbd.\xd9\xbf\xb3E2\xac\xad}\xc6\xbfJ\xb0%\x03\xc2(\xd4?\xd2U>\x17\xd2\xcd\x9e\xbfD\x10\x06+\x8fN\xce\xbfhs\xdb:6\xa1\xe4\xbf?\x91\xa9\xe0[2\xc2\xbf\x14RW\xfa]{\xc4?\xf0\xd2\xb2\xbe\x05\xa1\xab?"\x8c\xba9\xb0\x84w?\xd1\xae2\xf1uN\xc3?\xd2\x16=E\x92J\xd0?\x99\x0b{\xfb\xb9\xc2\x9d\xbf\xdfV\x19\xcb\xe9\xbb\xe0?\x80\xe9\rrPB\xce?\x12\x8a\x9a"\xf4\xd8\xd3\xbf?\x00\xfa\xfa3P\xbb?\xa0\x9a\t\xbd\xbe\xd0\xca?\x81YU\xd7\xaa\x12\xda?\x12\xf0\xe3\xf0V\x9b\xd3\xbf!\x90\xf9\xd3\xdf\x81\xd6?\x19\xaaa\t\xbd\x9b\xad\xbf\x81\x8b\x96)\x1d3\xd3?r\x918\xae?\xe5\xb7?\xd7\x8b%Eu\xfc\xe0\xbf\xdb\x95dxi\x15\xc1?5\xce\xf4\xf1={\x9e?XIMm\xbfG\xd7?\xb2\x9e\xd4\xca\xf3e\xb1\xbf\x9d\xca\xe8\xcc\t|\xd9?\x0f\xa9N\xf9\x16i\xb6?\xda<?\t\xb5;\xdf\xbf\xb0\xfc+?l\t\xe5\xbf|lm\xd7\x9f\x89\xd4?#~(\x90\xbd\xff\xdb?\xa3\x05?\xe7!W\xc0?\xe0\xe8\xbf;t\xd0\xcf\xbf\x1b\xdd\x12\xff\x85\xd2\xaf?\xe0\x17f/\xfe\x00\xbe\xbf\xbd?I\xb7\x1eH\xc6\xbf\xcf\x8c}\xde\x0f\x9a\xda?\x92\xa4p\x16\xf4\x97\xdd?-\xa4WL\x9cj\xc8?<+\x14\x1e\xe5\xcc\xd9?F\xb1M/q\x82\xe0\xbfi<\x91h\x1cW\xbb\xbf\xd5">a\xf8\xbd\xd4?h\xb9N\xdf\xf1>\xe3?#\xba\xd3\xf7Di\xde\xbf#\xba\x96~#\xe9\xd3\xbf\xe3dT\x14\xea\xe6\xa6?i;\t\xf5\x93\x04\xe3\xbf\xfb\x8b\x13\x96d\x17\xb0\xbf\'J\xfa\xf5\xc6\x03\xa7?aP\x8f\xdb\xe2H\x8e?V\xcb?\\\x9e>\xa3\xbf\x80HTS\xe0\x9f\xa3\xbfv\x97\xd4\x0c\x95\xdc\xdb\xbf\xc1\xf5N\xb8\xbf\xa2\xc0?\x03\x91\x10\xdf>\xa9\xc9?A\xb1\xb7W\x1f\t\xde\xbf\x01n\xf1\x88\x83\xb4\xe2\xbfH\xd0\xca\x9e\x9d`\xe0?\xe1\xe4\xb0\xd9\x00\xb6\xc9\xbf\x01\xcb\xb9\x1a8\xa5\xc8\xbft\x12W\xdf\x9f\xd6\xc6\xbf\x87\x1bk\xa2\x13G\xd9\xbff\x0f\n\rV\xb8\xd2? \x02\xb4x\xfb\x14\xe1?\xb3\x8at<5j\xd2?q\xdf\xa7\x11\xa4\xab\xa1?\x93\x04\x8b\xf3l-\xd9\xbf\xaa\x80A\x9e\xeb\xd3\xcc\xbff\xa0o\x0b\xdf\xae\xd7?H@b\xfb\xd8i\xd9\xbf]\xb2FX\xb2\xcf\xd1\xbf\xbeAc\xbfN\xfd\xe1?\x8a\xd50\x8f\x9c\xcc\xd1\xbf\x91\xb33\rsb\xc5\xbf\xa9\x1b{\x95\x11i\xc0?Z\x96l\xd5\x038\xda\xbf\x8e\xdfR\x03\xa4\xe2\xd8\xbf\xd8\xf9\x94\xac\xb6d\xaa?\xbd\xec\xf8\x03\x0f3\xd5?\xd1,\xceV4\x9c\xe0?\xa7\x9ef\xf9\xb7B\xdf?z\xca[\xce\xef}\xca?X\xf7\xe0 \xa7\xab\xd4\xbf\xcfZ\xb1\'\xbf\x92\xb9?\xbd\x12\x9c\xf3\x87\x7f\xdc\xbf\xc0"\xd2\x9b;\x90\xdd\xbf,3\x03?\x13\x96\xcd\xbf\x8b\xcc>F\xf4\xf3\xcb?\x12\xbc\x0f\x84\x9f\xff\xb6\xbf1\xd4\xab\xcex\xec\xcc?b\x1asn\xb8\x8c\xc7\xbf\xeb\xc6\x96\xf5\xcaM\xce\xbfa\t\xbd\xda\xc0^4\xbf\xebS\x90\xe7\x1b\xbf\xd1?\x8b\x96\xc3x?\x9f\x92?\xe2\xf0y\x18_\x98\xdc\xbfi\xb7X8Z\xb0\xda\xbf\xcfY\xe35\xf6\x96\xc2\xbf\xa5=\xb9\x19\xbd_\xbf\xbf\xb1V\xd4\xf2g"\xd0\xbf\xbf\xf4\x1a]\x9d\xa7\xe1?\x1dV\xcafY\x8a\xdd?R\\\x11\x1a\xd8\x81\xe1?|\x13h\xc5ud\x8f?\xd4\xea}\xaeH\x8e\xdb?NM\x87.\xd4~\xb9?\x83u\xe8l\x04\x0b\xe6\xbfiL\xecS\x11+\xd5?Y3%\xe8)R\xa3?,d\xb8a\xdc\x94\x94\xbf*K\xf8\x05\xe2\x0b\xbb\xbf\xb2\x06Vk\x1d\x1d\xd8\xbf\x8a\xc4\x0ep\xd6\xbc\xd3?:\xe4\xaf\x1a0R\xe2?\x9ei\xfc\xc0\xa0r\xdc\xbf\xaf\xb6ym\x83\x9a\xd2\xbf\x03G\xd2\xf3\xfcU\xdb\xbf\x1b\xdc9\xb9\xff0\xcb?;\xf8y\xc6\xd08\xae\xbf\x9a\x8fD\x11\xb5\x8b\xdf\xbfx\xe7\xb2e\x08\x8d\xe0\xbf\xab\xb2\xf6\xae\x93\xee\xd0\xbfH\xa1\x86t\xde\xb0\xd6?\xdd\xc1\x1c\xe2\xa7\xac\xc7\xbfB\xfe\x89e\xf7O\xc5\xbf\x11\xebg8\x14\xf9\xd1?\xc6\xbf\xca\x1f\xdf.\xdc\xbf\x11\xcd\xb8\x92\xb8\'\xc3\xbf\xd8\xac\xaf]\xb7T\xe5\xbf\xfc\xa3G\x83G@\xd1\xbf\xc50d[\x07\'\xb4?R\xadm\x7f\x83R\xd5\xbf\xcc\x7f\xbe\xde{\xa1\xd5\xbf\x0e\xe1\x19\x19\x83}\xdc?\x01\x9c\x84\xd4)\xa6\xd7?\xa3kr\x9e\x88\x87\xda?7\x15\x02o\x98\x82\xd1\xbf\xd7\xa2\xe5\x82~\xef\xc4?@\x1a\x9c}\xc3\xb6\xda?\x96Q\x11\x9cmh\xe1\xbf\xc0\xac\x14\xdc\xb2G\xdf\xbf|a\xd43o\x12\xd5\xbf\xf6y\xd4\xedv\xbd\xd3?\xa4>\xa3\x98>\x97\xc7\xbf\xc3$\x91\x18\xdf\xa7\xcd\xbf2A\x01^X\xc5\xc3?\xf0\xa2\xa7\\\x83\x95\xe3\xbf\xbd\xe9\xea\xae\xb2\xe7\xdf\xbf\xf3\xfc\x95\xe3\xc1\xd9\xd8?\xb2\xea\xa9\x16\xee\x88\xd4\xbf<\xdfQ\x95\xb4\x8c\xcc\xbf\xc0\x03c;f\xab\xd4?\xe6\xbc\x81\xea\xc8\x08\xe1?c\xb3\xcc\xb0Nd\xdc\xbfR5%\x19&A\xe3\xbf\xa9\x0e\xee\xf2\x88?\xcf?\x89%\x0f\xe9\xde\x05\xce\xbf\x04\x88\xa2\xce\x1b\xb4\xb7\xbf\x08\xb0\xb1\x03\x97\xa4\xe1?\xefy\x1e\xda\x9c+\x92\xbfr\xc3\xd3\x7f\x90K3?\x12\xa3b\x87\rN\xd4?\xe7X\xc4\x08W\xe4\xd7\xbf%\x80\x17t\x9f\xb7\xdf?\xdc\x8fa\'\xd4O\xd3?\x18\xa4\xd3r\xdf\xa5\xc5?\xbcxH\x18\xcf\t\x97?\x114\xf3M\xa2ku\xbfvlz\xd9j\xfb\xdf\xbf\x1f\'\xb1){\xeb\xd3?o|\x108\n\x1e\xdd\xbf\xae>\x17\x80\xd7u\xe1\xbf\xa4\x19*\'\x91x\xa0?\xae\xc3\xb8D\x1a\x9a\xc5\xbf\x12\x01\xe0\xbd!\xd1\xa2?7\xaa\xbf\xde\x98\xb3\xcf?\xc8lI\xf9PT\xe0?#\xae\x90R\x85\x95\xdf\xbf\xa3\xfa_\xbbNK\xd9\xbf\xa3<V$\xeal\xd5\xbf\x864\x95<\xac\xb0\xc1?O\x99=M4\xa9\xbb\xbf\xb3\x1f\x9e\xebC\xd7\xcc\xbfM\x11\xf9\xd07\x8b\xe2?\x8d\t3 \'=\xe1\xbf\xc0\xf9\x95\x18\xee\x8e\xd3\xbfF\xe3\x1f\xb1A\x1d\xd1?\x912^+\x0c\xa4\xd4?0\x86O+`\xdf\xa2\xbf\xb3\xe4\x8a\xb7\x8d\xdd\xdd\xbfq\x9a\xa1\x8dl|\xd8\xbf\xdfdZwC\xbc\xe0\xbf9\xc2hf\x18.\xbf?\xf1\xe72\xf9\x05\xcc\xc5?\x96cYx\xaf<\xa6?a\xa2\xe1\r\xb0\xd8\xdd?\x80\xfc\x9d\x1f\xf3&\xd7?j!\x89\x11&\xec\xcc\xbfM47\x16\xd6]\xdc\xbf\x8a\x83\xd5=T\xcf\xc5\xbf\xa8\x14\xf1\x9e\x89~\xc6\xbf\x8b\x17\xfe\x8c\x11\x95\xd3?\x80!O\x9er\\\xd3\xbf\xbf60A\xe7\xff\xd2\xbf\x0f=\xed\xe4\xeaG\xcd\xbf)\x97\x90Y.\x0e\xdc\xbf\x05#ho\x84\xe1\xb9?\x82\xa5"\xabh\xca\xdb?\x84\xbfn[/\x1e\xce\xbf11\x13,\x88\xe9\xe1\xbf\xb3\xadwy\x14\x12\xdb?\x17\xaf\xb0\xb5A\xd5\xdf?\x04P\xd9\x88]\xcc\xc1\xbfa\xe3r\xcd\x84\x1d\xdb\xbfw\xb2N\x18\x17\x9f\xe1\xbf\x00\x0e~\xcc\xae\x84\xd2\xbfu\x95\xc3""\xf3\xa3\xbf\xf3m\x0e\xa6\xef9\xdc?\x06Q\x0c\x933\x9e\xdd?\xbd\xfas\xeb\xb4\x12\xd9?\xabj}5\xa3\xfc\xa9\xbf\x9aL\xb1b\x99^\xe4\xbf m\r\xeb\xb5\xc0\xd6?Dq.\x1b\xc6q\xd8?\x16\xb6_,\xff\xe5\xdc\xbf\xdc\xb5\x94\xf26\xb8\xc3\xbf\x08\x06\xed\x02\xf8\xb5\xc8\xbf>\xca\xbd\x1f\xa4\x95\xbe?\xa0\xb7R\xd4 y\xc4\xbf\x13W\xc4\x9d\xde\x87\xcc?\x82\xe1\xc1\x1cR.\xd1\xbfn{\\\x9b\xffD\xe1\xbf\x91?\xae\xd3\xb2\xf2\xc4\xbf\xe2\x07"\xd1B;\xd5\xbfQ\x00\x82X%\x8a\xd0?6\tp\xa7\xd1\xa2\xa5?\xfck4\x1aS\n\xd3?P\xd0\x80\x8d\xf4\xe7\xe0?\xd3\xd1\xcf\xc3\x85\x03\x95\xbf\x88b\x046E\xdb\xbf\xbf\x91z\xd2-\x17\xa7\xe3\xbf1\x00f\xfa\xb5X\xc5?\x89c\x0f\x18\xf0\xcb??*\xe7\xa9x\xebB\xc3\xbf59\x19\x83\xda\x03\xdf\xbf\x96\x82\xc3_c\x05\xe4\xbf\t\xfa*-!\x98\xe0\xbf,W\xe2\x07s\xb0\xca\xbf\x18U|q\xb4Q\xa3?e\xfc\x88\xb8\x05\x8d\xc0?4#\x12\xaf\x99\xdf\xa9\xbf\x84\xb7\xea3jP\xa9?\xba\xcai`\xb2\xf1\xb5\xbf\x97\x13\x18gs\xbe\xb1\xbfp\xd0H9\x1cU\xc4\xbf\xd3\x0e6\xe0\n\xae\xde?\xae\xcafQ\x97\x18\xc7\xbf\xe1q\xfd\xa2\r\x01\xe0?\x1b\xd15\xf8\x81\x07\xda\xbf\xc7\xe7|o%<\xcc\xbf\xd6e\xfbez\x07\xc5\xbf\xa6=\xdaP\x8aM\xd5?\xcb\\\x00\xd3\xa5\x01\xa4\xbf\x02\xf1\\@\xf9\xae\xdf?\x13\x85\xa8\x8b[\xb4\xc9\xbf-!oe|\x01\xc6?\xe3\xc7Vb\x01e\xd2?\xdb>\xcf\xe8\xcf\x0f\xb7\xbf\x15\x1b\x81\xff_\x85\xc8\xbf\'\'y\x8e\x8b\xc2\xdc\xbf\x1e\xad\xde0S=\x9c\xbf \x0c\x1a\xd0\xc3#\xc6\xbf\xd0\xe9e\xcc\x80\x8c\xb5?\x13\xb6\xc9\xd5\xfa\x0e\xac?\xb2\xd4\xcc*\xc8\xb2\xb0?\x90.\xdeg[*\xa3\xbfm\xf1\xa8l\x99\xf4\x92?\x9d\x85\xca\x95I\xc0\xc7\xbf\x18\xb4\xefkhP\xb1\xbf (Ir\x8d\xb6\xd6?\xa03\xd4B\xf1\x8a\xbb?Q\x13\xb0\xafBZ\xca\xbf\xdd:\x17VA\xf8\xc0\xbf\xfe_\x9e\xb9^A\x9f\xbf\xe3\x0e8a\x99p\xd7?\xca|\xd5GO\xf5\xa6\xbf\x84(\xcd\xd1\x0c\xa5\xc0\xbf\xd9\x10v\x18x\x14\xd5\xbf\xff&(\xc4\xa27\xd0\xbf\xba\xf7K\xf8u\x08\xbd\xbfz\xf3)\xa8 \xee\xd1\xbffa\xd2\x00}.\xa9\xbf\xc9set\xf4\xc2\xd3?G\x1d*5gT\x8c\xbf\x031\t\xcd\xf2\x1d\x8a\xbf\xe8^\xd0\'\xb1!\xaa\xbf\xe70\xe9\x17\x0cc\xd4?\xee\xe9\xc4z\xd7\x0e\xb1?.B\xae\xc1\xd5\t\xc6?p\xfe\xe1\xc4\x80F\xce\xbf\x83\x1c\xd4A\x0c\x0e\xb4\xbf\x16T{\xdcI \xd4?\x1e\xa2\x07\xff`@\xc4\xbf*\x05\xf6&\xe6\xda\xc6\xbf\xb5= \x8ax@\xb5?\x8c,\xc0U\xc5j\xc9\xbfy\xf4\x08\xbcB\x97\xca?\xe9\xaaD\x11\x93\xc1~?\xbd\\\xbd\x144\xf7\xc0?\x14a\t`\xac\x0f\xd7?Pi\xca-\xd6\xa5\xc5\xbfU\x9b\xc7~3\xc1\x96?\x1a\xc9J\xc4\x18B\xbb?\xc7x\xaaT\x13\x9d\xd0\xbfv\x1e&\xab\\\xdb\xc9\xbf\xb7\xad\x84i\xe1\xbc\xb6\xbf\xdedd^\xc0A\xd1?\x0c]\x19\xf0m,\xc8\xbf\x82-\xa0zA8\xc2?\xef4\xa0\xb4\x17x\xc1\xbf\xfe\xea^\xab\xae\x9f\x9d\xbf\xfck\xc4\xbePm\x91?\x0f\x01\xa3E\x97\t\xc3\xbf\x83f\x850\xec\xcf\x96?\xf8\xf4\x8b1\x8e\xeb\xb8?\x7f\x94E\xe7\xa3\xc8\xb5\xbf\xd9\xb5\x97\x96\t\xaf\xca\xbf\x12\x08~\x86Yj\xca?\xad\xbdU\xf5\x80K\xc7\xbfP\x18\xb4#4[\xbf?\xd9\xe0\xe4%x!\x91?\xfaQz\x18L\xf6\xd0? GZ\xde\xc4\xad\x90?mW\xa7xm\xf1\x9c?,\x10\xb9m\xe0\xf6\xc0?\x96\xa2\xb6\xfd\xa2\x16\xcd\xbf\xa5"E\x84\xa2F\xcb\xbf\xeb>\xb6\xcd\x9c\x95\xc3\xbf\x1dA\xdb\x1fx?\xd3?\x86\x0b1\x90\xe3\xfd\xc7?T\xb4c|\x835\xc5\xbf`\xda\xd0\x8d\x87\x89\xc9\xbf\x1c\xaa>9&\x15\xbf\xbf\x92}\xb1Q\x0eb\xc7\xbf5\xff\x0cO\xffZ\xd1?\x9dv\xa7r\xfe)\xbe\xbfv\xe4\x8b\xdd\xa6\x05\xb9\xbf,q\x8d\xedg\xbd\xd1?\x9f\x05\xba\x8c\x03$h?\xd4\xc5\xdc\xb5\xff*\xd1\xbf\x9b@\'\x14f\xe4\xbd?\x0cC`)\x7f\xbd\xaf?\xd1\x01^\xd6\xeb\xa7\xc2?\x10\x8c\xed\x98\xe8\xa2\xb0?P\x00l\xd1\x0c[\xc0\xbf\xe35d1|\xa4\xbc?\x8b\xc1$\x10\x10M\xcd\xbf\t\x92|Z\xa3R\xbc\xbf0w\xd7\x074\xaa\xc6\xbf\xf1\t\xcf\xac\xc8\x92\xbc\xbf\x00E\xcd_J\xb4\xc8?\xaaJ\x0e_\xe0\r\xc3\xbf\xd0\xf1\xc0x\xc4\x9d\xc6\xbf\x90v\xa9mJ\xe2\xc0\xbf\xaeo(tq\xa1\xbf\xbf\xe7al\xc8\xc9G\xa4\xbf}\x08P\\\x9d4\xbe?\x9cTu\x9a\x0ce\xa3? \x1a\xd4R\xa0\x92d\xbf\x1c\'\x9e5r\x85\xc0\xbf`9rN/u\xba\xbf\x86\x96e\x92QY\xc9?\xc7\xb0\xc6wks\xc1?c\x8e\xe2\x8dn\xdd\x92?\x88\xcde\xa9\x010\xb3\xbf\xcaQ\x18`\x87\x11\xcb?\\\xc4<\x03\xb5\xe2\x98\xbf\x173\xb9{T\xa3\xd4?W\xdb8\x88\xe9\xea\xb2\xbf%\xedQ\x1aG:\xcd\xbfD\x9a\x9b\x7f\x95\x1c\xd3\xbf\xf0\x81\x92\x92\x8d\xf0\x8e\xbfV\xf8\x0bG\x1a\xa0\xbd?\x96OUh\xd1\x83\xcc\xbf\xd2\x9a\xef\x8b\xd3\x02\xd3\xbf\xbf\x95\x9e\xb5\xe3l\xb5\xbf\x9cn\xf3\x8c\xa0F\xd1\xbf\x81\xbc\x89^\x10^\xc7?ey\x1fja\xf0\xa9\xbfI\xfb\xb1\xde\x1b\x8bT\xbfF\xae\xa7Uf\xab\xdc?c\xce\x89\xaez\xaa\xce\xbf\xa3\x8fh\x944\xda\xc5?\xe1\x8c\x8d\xf0v\x0f\xbb\xbf\x85\r\xf0\x08\x94\x10\xc7\xbf\xc8muI!>\xbd?\xfbDd\x06\xcc\xe3\xaf\xbf\x94\xca\x8eA|\xd9\xa6?\xa5\xbc\xa4\xcd@T\xb1\xbf&\x89\xa4\xd9\x9f\x88\xd1?\x80\xf0\x93\xd4AE\xa6?\xaf\xa9M\x1c\x14\x16\xc9\xbf\xd5kIld[\xc5?\x81!2n\xee\xc2\xd1\xbf8\t\xb45a\x9f\xbd\xbf\xabk\xbfE\x02R\xb1\xbf\xcba\x99K\x8bi\xc0\xbf#\xcaQ$Z\xe0\xa2?\xc89\xde\x90y\x0e\xbf?\x90H*E\nf\xbf?\x04\x01\x0f\xc9\xb3m\xc4\xbf\xd0$J\x9bs\xbf\xbb?\xdd\x90\x16\x10\x0c\x19\x97?\xf2\xd4\x1e\xe9\xf6T\xa5?~I%!\x9d\xa7\xbc\xbf\xb0g\xd6\xcc\xb9Y\xbd?6\xb8UP\x0e~\xad\xbf\xdc\xf7\x05\xb5D\xbd\xaf\xbfv\x80N\x1fu6\xb0\xbf\xb56n\x17\xfc\x0e\xc7?\x86$\xbc\xa2\x9e\xce\xc0?\xbf\x04G\xd2\x0e\x04s?\x1d\x9e\xd0,\x1d\x1d\xd1\xbf\xde@{f\xfaR\xd0\xbf\xae0|\xef\xb80\xd0?\xcb\xc1\xe7\xf3nv\xc1\xbf\xd4A\xe5\xe9\xc3\x1d\xd1\xbf\xe5\xb5C\xfe{\xe8\x9e\xbfU\xfadk\x88\xa2\xc9?RT\x10\r\xfa\x08\xdc?j\xe1\xd1\xe1A\x93\xc0?\xfa8\n\x8a\x8b\xe9\xcb\xbf\x13(\xe0\xf0\xe5\xf2\xb8?K+\xb5\x10\xa2o\xc2?\xea<\xd5\x0b\xfbc\xc7?\x97\x1c\xe9\x91\xae\xab\xc8?\xe8J\x06\xf1\x7f\xe6\xac\xbf!>\xbf\xaf\x0ea\xcb\xbf\xd2\x1dmJ\xcd\x9f\xd0?\xbf\x138\xb5\x0f.\xad\xbfM(&\xc3\x84^\x9e?.\xce\xa0\xfcq\xc8\xd2?\x87\x07\x96u+\xd4\xb4\xbf\x03\xce\x06_\xf6x\xe2\xbf:\x84\xe8\xfb\xcb\xe0\xa8?\x01ub\x9cJZ\xc3?\'>>\xa6\xf4_\xa4\xbfC\x98\x12\x1d\\t\xa9\xbfw\x96\x7f\x8e~\xfe\x8d?axSm{\xbd\xba\xbf\xaa\xef\x8a8\x96B\xb4\xbf\xa1\xa3\xf4\x9a_\xa4\xc2?\x83\xd8\xbc\x96\xfao\x9c\xbf\xa0\xc7\xc3\xa8\xe0%\xb0\xbf(\xc2\xee$\xad\x93\xae\xbf`*\xda\xae>\xc3\xc5?\x93\xebK\x1e\xad\x83\xcc?\xfcB\xeet\xc8\x15\xb3\xbf\xe8P\x14;\xbb\xb9\x84?\xcd5\xf2\xffYq\xa1\xbfB\xc1\x88G\x1c\x1f\xb6?\xa5\xbd\xeb/\x0e[\xb4\xbf\x1bs>\xab<f\x9c?0\n\xda<qh\xd0?\xf9\x0fU\xfd\xf6\x8d\xcc\xbfu\x93\xdf\xda\xf6\xd1\xb0\xbf\xccB\x1a:~\xbe\xa1\xbf\x81\x0c8\x04i\xcd\x94?\xaf\xe5w\xddm\xe4\xa6\xbfE\xc9\x84\x1b\x10:r?\xcbt\xdc\xa3\xf8\xb4\xd0\xbf\\\xc8\x95\x95+A\xd7\xbf\xbdK\xf21SE\xcc?\xe2\xf9\x97\x10\xd9\x04\xc8\xbf\x8f\x0euj\x14E\xd0?V7C%\xe4\x98\xd2?\xf3X\xd7\x85\xeej\xbd?\xcb\xc3\xa2\x83\xbf-\xb8?\x1c\xd9\xe5\x18\x90H\xae\xbfB_s=\x19\xcf\xca?\xeb)S\xdfb\x95\xc4?;w\xa3Z\xb8\x8e\xb9?\x8f\xe5\xdb\x99\xf0Z\xb5?oOd\xda\xc8\x8f\xa4?\x93\xc4\x9c\xa1c\x08\xcc?K\xd3\xc2\x06\xd0B\xc8?G\x10\xfcsu\xca\xd1\xbfH]\xec\xb5\xd8\x88\xc7\xbf\xd2\xaf\x95|&\x08\xc9\xbf\xb8\x83\x8d&\xe4\xf7\xb2\xbf\xefd\x05\xd5\xd3\xa5\xba?p\x91\\\xe6\xe5\xd6\xc2\xbf\x07Nu\xb0\xc3\x04\xb0\xbf\xc0\xf3\xa0\x1f$\xacr\xbf\xa9\x01\x8d\xf3\xf6\x00\xc9?\x8e\x83:\x89\xa7\xd5\xbb?\xd5Q\xafLU\x14\xa6?c{$3\xa7K\xc5\xbf\xfc\r\xdc\x18P\xd6\xa8\xbf[\xfa\x07\x85\xb2\n\xcf\xbf\x1f\xcd\xe0\xf7\x8aQ\xc7\xbf\xf8_j~\xf8\xe0\xbc\xbft\xad7\x80*\xef\x95\xbf\x1e\xbd\x96P\xcaj\xc0?j\x1b\x85\xf5\xea\xae\xc0?\xe1\x16\x98\xc85Z\xc6\xbf\x8d\x94\x80\x9fx\xae\xd0\xbf0\xfc\xa4\x913\xff\xb3?\x8b\xf6\xb0\x16s\x9c\xc5\xbf\xa967\xd4\xb3\xf4\xcc\xbfl\x1c\xaa{\xb6\xe6\xbb\xbf\xba\x0e\x94\xdb-Z\xc9\xbfmh\xd7mL\xe7\x83?\xe9y-\xf7\x93\xda\xc1?A\xf3\x15\x87{#\xd3?\xcc\xc2^\xc0\x12\xbb\xd1?\xe6\x07`62\x17\x9d?Qn\\K\x1a\xa1\xc7\xbf\xff\xa6\xa8\xdd\x16\x1b\xbe?\xa2T\x05\xfd\xc1\xc3\xbc?L/\xf8\xa7\xcd\xdf\xb2?\x86\x0b#\xe7L\xfa\xb2\xbf\\\x0b(\xf0\x18\xef\xaf?\x90\x01h\x1d\xbb\x10\xaf\xbf*;\xf5\x96\xf0>\xc9\xbf\xa1\x19=\xa1\xd5\xe0\xaa\xbf\x7f\xaa\xe4\xd3\x95h\xaa?`6F\xe9\xdf\x88\x86?\xe7G\x9fYre\xa7\xbf\x00%c\xc4X\xc4\xb9\xbf\xd3\xbeg\x8c\x9e\x01\xc0\xbf_\xc9*\x19\xe7\xb5\xd5\xbf\x8e\xbc\xf3\x0eR{\xcd?\xcb\x1a\xa98i\xa0\xc1\xbfXP\x00!K\xe0\xc8\xbf}?\x9a$\xaf\x9b\xcd?\xcf\xa8\xcd)N\xd8\xc8\xbf\x84\x83\xca\xff\xfeT\xcd\xbf5Q\xd5B\xd4\xa4\xc0\xbfL\xae\xe7\xc5N\xcf\xc8?A\xe5:g\\\x07\x8c?\xeb\x99z\x9e\xd2e\xae?\x17d\x1f\xb5P]\xd3\xbf\x86\xe5\x96%D\xe9\xa3?\xe9\x8f\x02\xc3o|\xc6\xbf\xed0:\x92\x03K\xbd?\xc9T\x02?w\x16\xa4?_Mj\xa3\xc1Q\xc6?`\x06\x9c\xado\xa1\xc2?W\x18\xb6\x94C!\xc0?\xc5\xf1h\xee\x97\x13\xb3?\x8e\xc8\xe4\x01\xda\xde\xc0\xbfp`j\xd6\xe0\x91\xbf?\x85\x89\x0e~UG\x9b\xbfBM.\x87qr\xb7\xbf\x1a\x869\xb4\xb1\x10\xcf?\xa9\xdb\xf9\xe0C\xd2\xbb?\xdb&$0D\xf6\xd2?\xe70\xcc\x03\xaf\xca\x8f\xbfM=\xc7E\xcd\xe6\xb0\xbf\xf0Z\xb8\x01\xbaz\xc8?\x80\x041\x1e3\x08\xc7\xbf\xbdY2\xee\' \xca\xbf\x1d~\x92\x7f\xeb?\xd2\xbf\xbe\xa7G\xd2T\x94\xcc\xbf\xb1\x15\xc1=\x1e\x8f\xbc\xbf\xa1B7\xbdv\xb4\xbf\xbfG\xb3i\xf5QA\xb8\xbfS\xcb\xd0\x884\x8c\xb1?l)\xda\xb7%\x8f\x94\xbfL\x1aK\x8cK\xa4\xa9?\xd8>\x95.\nm\xc7?u\xa2\xaf28\x86t\xbf^\xc6\\gs_\xc0\xbf\xe7\xcc\x9c\x19z\x94\xd5\xbf\xe3\x88x\xd2\xadY\xcb?7\x7fxJE\xa1\xc8?\xee\x92\x15jE\xb4\xb0?\x93y\x8ca}R\xb0?\x0en\xd1\xaa]\xa9\xb8?1\x1e\x1a\xc0Q{\xbd\xbf\x1b\xa2\xa6\xf5>\xb3\xc7\xbfd\x87==u\xd2\xbf\xbf\xa3K\x08:\x05\xfa\x89\xbf7vFe0-\x9c?Z\x8b\xe8\xca,.\xbf\xbf\xeb\xb0q[6-\xbf\xbf\xe9\xbaU\xb9/\x18\xd3\xbfo\x125\x86\xe6\xcb\xc6?\x9e\x01\x919\x9a)\xce\xbfV\xb8e\xbe\x96#\xc1\xbf\xfe\xb3\xf9\x7f\xdf\x9b\xd0\xbf\xca\xcf\x89h"\xf7\xce\xbf\x03-\xf3;\xd5(\xb5\xbf\xba\xecn\x8e\xbd\x16q?r\xf1\x02\xe5\xb3\xe8\xb5?\xef\xfdA\xb5\x82\xc7\xc0?\xbcn\xc6\x80\xe9\x06\xc7?\xa5E\xec\xab\x16\x11\xce\xbf<\tX\x9fp\xc1\xc0?\xf5\xeb\xaf\xae\xa6X\xc3?\x16\xc5sY\xff\xf3\xa6\xbf\xc4\xf1:\xb2~f\xbd\xbf\x8f\xc8i[:D\xb9?\xe4\x80\x11\xe3\x9a]\x9d\xbf\xdd\x1f"\n\xbeV\xc9\xbf\xdd\xf2\xc7@\xc8l\xb3\xbf\xe8\x19\xfa)\xaaL\xc6?%l\x11\xe4R\xa2\xc4\xbf\x02\xc5\t\x12\xad\xf6\xa9?\xa6\xae\xdc\xe1b\x01\xc0\xbf3\xa8=\x91\x1b\xc1\xbb?P\x13&\nx\xa1\xce\xbf\x9d\xf0%\xa5\xdf\xd9\xd7?j\xfb\xb1\x1b\xa2\x7f\xb5?\x0c\x11\xb3\xaa\xfd\xc4\xc3\xbfwZh\xc7p\x04\xc8\xbf\x8a\xa3\x10\xb9\x86\x8e\xaa\xbf\xae\xfb\xb3\xc9us\xc3\xbf&\xb3y\xde\xbd\xb4\xc4?\xce%\xabr2r\xb7?\x03\xcd\xa1Bo\xcf\xcc?\x13&[\x0by\xe6\xc6\xbfd\xb6\xd2\x03)g\xb8?\x15\x1b|R\xb6`\xb2\xbf\xdd\xdb\xb3H\xb5\xa0\xc2\xbf\xde \x14JS5\xc9?\x7f\x0e\x03\xc9J\'\xc1?\x94\x91\x90\xa6\x82J\x9d?\x8f\xb0\t\xbdrJ\xb8\xbf\xa0\xe3\\W\x17\x87\xc6\xbfd\x9c\xd6\x87xL\xb3\xbf\xa4\x98\x00\xd1v\x88\xae?\xf6\xe2-\xf1\x8b]\xc9?\xb1\xa4\xfe"\xc4\n\xdc?x\xe0\xaa"7S\xd8\xbf\xb2\xda\x07\xd4\x90\xce\xa8\xbf\\tb\xff\xe1\xb4\xb7?\x02Q\x0bC\xfei\xbc?;\xd2l\xc7\xb5\x8e\xb8\xbf|$\x01\xda\xff\xdc\xcf\xbf\xcc\xb6\xf5g\xf0q\xc2?3"\x808&i\xbb?\xe3x\x1d\x7fS\x1d\xad\xbf\xb2e\xdd\xae\xb3k\xaa\xbf\xba\xc7\\\x86\xa3\xaf\xa7??\x91\xfct\xaf\xbb\xc2?\x04B\xc3q4\xde\xc6\xbf\n\x10R\x06\xf2M\xb0\xbf\x9d\xb4S\xafr\xfb\xc6\xbf\xdb*\x86\xdf-\xda\xc6?\x82+\xc4\x8a\x1c\xa2\x9e\xbf\x92\xb5\x92\x99\xd4[\xaf?D(Z\x00z\x88\xc3\xbf\x7fJaF\xb9y\xb3?\x84\x8a*\x15A"\xb8\xbf\xc6a\xc7c\xf8\xa3\xca\xbf\xbd\'\xb5\xf3?"\xc7?*\'\xcc\xec\xbdt\xb0?\xab\x0c\xe9\x16\xda~\xc1\xbf\x15B\xe9\x14`\x16\xa1\xbfpS\x89"Z\x86\xca?\xb1\x1b\xda\xa1\xa9(\xb4?\xa4\xa9\xac\\\xf0\xfc\xc8\xbf\xf3j\x9d\x84\xcd\x19\xcc\xbf\xe36\x85\xef\x86\xb3\xae?\x12d\x1ayet\xd1\xbf\x0e1F\xd7d\xf2\x9d?Y\x00\x82%\xbf"\xbb\xbf\xfb\xdf\xd4\xb2\xad3\xd0?\xeeY\xe7/\xf1y\xcf?\xd1\xbc\x19d5X\xab\xbf\xab\x87\xd0\x89\n\x82\xcc?\x9b2\xbfu\x1ac\xc8?\x0c\xd3\x9b\xbc\x85\xed\xbc?\xb7Q\x9de\x95\x0e\xb1?\x93\xa4\xf1|\x07\x9f\xc1\xbf\xe9 Z\x02\xe7-\xc5\xbf\x86\x12\xfa\x90\xd1@\xac?0\x12\x97\x17\xdf`\xb6\xbf\xfd\xf8<\x8b"\x82\xc7\xbf\xabM\xf9h$\xe5\xce?\x9eDA\x95\xf4\xf2\x9f?\xba\xd4\xb0\xbd\x81\xb0\xc4?\xa5\r\xb5\x94\x93\x9d\xbe\xbf"\xf6\xc7\x1dx\xf9\xc2\xbf\x86\xfe\x87\xb6\xe7C\xc3\xbf\xc8N\xaa\xc1\x84\xdc\xc7?0=3>e\x14\x90\xbf\xe9\x07\xcb\x06L\xab\xca\xbf\x90\n\xdd\xee7\x07\xc6\xbf\xe7\x9d\x9b\xdf\xad\x12\xb0?\x08\xa92\xce\xda\xe4\xbb\xbfM0G\x87\xfbt\xc7?7\xd4\xf8\x94\xf3\x8e\xcd\xbf\x10\x0e\x1c\x1e\\\xf8\xc1?\x02\x90\xaa\x86bE\xb4\xbf2F#\x1f\xa9R\xb3\xbf\x84\xec@\xd8\xa4i\xd0? 7\xad\xb6$\x89\x91?\xcd\x95p,1\xa3\xbd?\xfc\xb5=\x1dRl\xa9?U\xd0/\x82-y\xbc?\xd4\x17\x9c\xb5\xc0\xdc\xa0?\xe9\xf3\x98\xccH\x9c\xd8\xbfK\xf9tl&w\xcb\xbf\x8aD\xeb\xdc\x0fJ\xc7\xbf1\xc06\xbb\xff\xa9\xc9?\x16\x90\xcd\xbe\xf4R\xc8?\xba\x10\xfa\xaa"\x1b\xe0\xbf\x8ev\xb2\x08\x85\xa6\xd3\xbf\x95GS~s\xf8\xd2?,\xf0\x05.\x8d\x05\xde\xbf\xa8P\xf4Q\xae\xa7\xc5\xbf\xc9\xb8)c\x0b\'\xd4?\xe3\x82,4]\xd9\xb3?lq\xb8)\x13J\xd5\xbfa\x07\xda\x06F\x9c\x90?2\x933\xb6\x15\xeb\xd0?\xed\n\x100^\xf5\xa3??9\tm\xa5n\xbe\xbfM{\xc7?\xeb\xde\xd9\xbfp=\xb7\x95$"\xc1\xbf\x8b7\x99\xd3"\xe3\xb6?v\x1dC-\xf1\xe2\xa5\xbf\xd2\xae].c\xad\xd5\xbf\x9a\xb4*\xb1\xf7{\xc2?\xb3~\xea\'D\xe3\xd7?:I\xcdE\xd8$\xdc\xbf\xe7O\x14\xef\xbdj\xcc?G\xcc5\xb8\xe1b\xce?\xbf,\xa3\xeb\xe8<\xd3\xbf\'\xb6\xdaKj\x98\xc0?\xa1\xeaq|pP\x9d?iG=\x9a\x99\xf0\xda?\x7f\xbb\xb4^B\xa2\xd1\xbf\xe5z(\xd2\xd9\x82\xc9?\x86\xd7\xa8\xbf\xf0\xad\xdb\xbf\x83\xebV\xc4\n\xb9\xb0?\xa3/\xd7sAE\xd1?\x87\x9ai\x80\xea\xe9\xdd\xbff\xb7N8)\xb6\xc6\xbf\x14\xf2Q\xdb\x9e"\xc8?\x8c\x9bj\x16\xe2\x9b\xda?6\'f\x08\xfc\x9d\xc9\xbf\x9c\xf3\x85\n#*\xc3?\x80\xba\xf0\xc6>*\xcb\xbf0U\xdc\xbc\x8d\x89\xad?i\xcd,Z\x90?\xd3?\x814jY\xb5\xae\xd1?\xca\x02\x9b\xae\xf3\xa8\xe0\xbf\xf3\xc6\xb0\xc9I\xa0\xa3?\xbb\x9e\\\xfd(\x10\x9a?\x8d\xadF\x16\xb7X\xa6\xbf\xef6*X;\xa6\xc2\xbf)\xe5\xf5h\xc6\xec\xad\xbf;\x9c\xa83\x82\x99{?\x964Y\x0e\xed\xe4\xc0\xbf\xa9\x88AZ\x97\xfa\xb7\xbf)\x9a\x1f!\xfd\xbc\x97\xbf=\x0cp-\x82\xc7\x98\xbf0L\x0e#\xc2\x88\xe1\xbf\xc9\x93\x90\xd0\x85@\xb8?C\'\'\x1cn?\xe0\xbfY\x88\x0b\x8b\xde\xa3\x83?d\\q\x14\xdcX\xda?y\x88\x03 \x90\x0f\xda?\x81\x88kjV\x04\xc0\xbfd\x96\xea\xa7\x97w\xb5\xbf\xaak/\xf7;\xa2\xcd?y\xdbju\x0f\xe4\xa5\xbf\x1a\xa0\xa4"\x9eb\xd4?mL\xd8\xf3\x7f\xeb\xdc\xbfRy\xfb\xed\x9e!\x81?Y\xde\xfa\x84\x1f\xf7\xdd\xbf\r\x9c\xaf\xd9jP\xcb?\x9e\xf1b\xa2\x89\xbf\xa2?c\x8c\x84\xbd\xeaL\x94\xbfX\xeb\x11\xa8\x088\xc6\xbf\xa6[^T}\x1b\xd2\xbf*:\x954\xbf2\xd2\xbf\x96\x81\xebv\x0e\xfc\xb8?\xa4\xa9\x86\x0b!I\xe0\xbf\x955G\x86\x94\xe6\xd3\xbf;\x0c%F\x91\xd1\xd2?\xfe\xc9\x05\x10\xe5~\xbf\xbf\x8a\xf1\x91\xa9\xfa_\xb3\xbf\x81\xfdsO\x86v\xb1?U\xff\xd4\xf5\x99\xf7\xd3?IH\x1c%\x82\xb5\xcc\xbf\x0bP\xfb\xeaSa\xda\xbf\xd0\x0b\x90+v7\xc8\xbfw\xd6X\xfa\xf8\xbb\xba\xbf\x1c\xf9\x0f\xa3\t\x06\xd5\xbf\xc6\x9d\xa6_\x92i\xb5\xbf\x0cA\xca\xab1Q\xd4?\rD8\xd2\xa9\x9a\xcc?b\xf1\xc1\x8aL\xa7\xda\xbfw[R\xc3\xd7$\x9a\xbf\xf9\xcfj[l,\xd6?b\x01\xd7.\x85\xd0\xe0\xbfy"\x01\xee\x15J\xc6?\xd3e\xea\x1fX\x8b\xd7?\xb2\x0fZ\xdb\t\x95\xd0\xbfM\xa2z\xd0\xa4.\xd8\xbfb*\x08h\xee\xb2\x9d\xbf\xf5\xe0\xcf\xdewI\xe0\xbf\xfaV\xa5\xc8\xc0\xb1\xd1\xbfmj\xa31\xc9\x18\xad\xbf\x1bU2\x10\xdf+\xd6?\xa1u\x1b@=B\xad?\x94\x15\x95\x1f\'\x81\xc1\xbf\xab\x9c%\xf2,\x16\xcf\xbf\x82\xc5\xad\xd4\n\x18\xb6\xbf\x1a\xeb@\xc2\x9f\'\xb6?\xeeU\xe5u\xfb\x87\xb0?}\x10x]}\x9b\xe1\xbfzF`O\xc3-\xb2\xbfK\x7fc\x16-"\xb1?n\xb54d\xbd\x90\xd3?\x91\x88\xb1\x94\x90\x15\xd2\xbf\xe0w\xb8\xc0\xa8\xff\xc1\xbfk4\xed\xd8\xb0L\xc0?9\x82F:t\x86\xdb?\x9a"X\x88\xc6n\xcf\xbfr~\x84\xfdX\xac\xd6\xbf\xb1g\xfb\xdb6\xb5w\xbf\xdaF2\xdd\x7f+\xb6?>\x08oFJ\x98\x9f\xbf\r\xe7\xdb\xe0I\xc8\xa6?\xf6\x929\x01z\xb9\xc9\xbf\xb9\x9e\xb4t<\x87\xb6?9\xbcm\x14\xedR\xd1\xbf\x98\xd3"-\x87a\xdf\xbfw\xc9\xb7\xbb\xecy\x89?\x87\xe4\xb6/\x17\xfe\xd3?\x85(\x19\x94-\xbf\xc2?\xad\xef\xbd\xec\xb6\xe6\xc2?\xa1\xc7\x05\x97o\x96\xd1?\xfb\x8e\xd9D$\xd9\xd2?\t\xb3\xa9\x1b\xf3\x07\xd3?j\xe5\x0f\xc8F\xc08\xbf\xf8{\xcc\x89Y\tI\xbfw6\x93\x93\xe6\xac\xa4?\xd6\x851\xd3dg\xc7\xbf\xa5\x02\x016s\x03\xbd\xbf\xbd\xe0\xbf\x02{\xda\x86\xbf\xf2@\x1f\x90\x00\xdb\xd7?\x8a\xfa\x94\xf0\xa5\n\xd8\xbfAz\xfc\xd1\xcb\x17\xd5?p>"~\xdd4\xde\xbf\xbcZ\xdb<\xd8\xb6\xd4?\xc9\x17T@\xc7\xd6\xc3\xbf~\xdd\x00\xdb\xc6\xd5\xb6\xbf\x02\xe0\r\xc6\xad\xf8\xd9?\xaf\xc0\xf9\x9bzD\xda\xbf\xc0r\\\x9b\x1c|\xa1?\xec[\x84C%]\xb1?\x7f\xb9\xa1k\xad%\xc0\xbf\xde\x02\xebO\xba\x02\xcf?"\x03\xf8\x99\xbd\xfd\xde\xbfR\xdb\xff\x8enM\x83\xbf\xb3\xc0\xfe\xe1Mr\xbd?\xe4u\x197\xd9\xdb\xce?\xdeTk\xe5\x81\xfd\xd1\xbf\x86\xd8\xa0\x01M\xa4\xdf\xbf\x9b\xb6\x05S\x84\x07\x82\xbfj"\x9c\xc6R\xf5\xde\xbf\x86\xb4\x14q\xecs\xd5\xbfm\xc8)\xdb\xfa\xa3\xdf\xbf]\x1c;s\x95\x16\xcd?/\x02\xbe\xe7Ni\xe0\xbf7J\\*\xbdS\xda\xbfK\xc2\x13\xeb\x8a\x8d\xde\xbf-\xc2\xacVs\xc1\xcf\xbf\xc4p.:\x0bn\xc8? |\x94\xafMs\xd8?\x0b3n(\xbb\xc4\x9a?\r\t\xeen\x9af\xcb\xbf\xdf\xf8U.\xf1\xa6\x96?\x16\x01M\x8e\x81\xb6\xbf\xbf\x91/\xc2Ft=\xd5?\xff\t)\xe0\x84\x01\xb8\xbf\xc8\xcc\xbd\xc8O\x0e\xd5?\xff\x82\xeaC1I\xd1\xbf>\nZ\x8b\x02\x9d\xc3?\xa9\xd6\x0c\xa1\x88\xcc\xc7?\xee\xbd\xb9~5,\xdf\xbf\xa2\xaa\x1a\xcbTk\xd6\xbfk\x81\x9af\xe2G\xd5\xbf\x1a\xd4_yr \xde\xbfi\x16e;\x0c<\xb7\xbfQ\x94>\x8d\xcc\x80\xce?\nt2\x1al\xf7\xb8?\x8c\xe6\x7f\x0b\xc0V\xc2?\xeaL\xb6*@\x18\xc4\xbf\xf0W\'\xf8s\xc0\xe1\xbf\xfc\x83\x1f~+\x9f\xd8\xbf\xc4\xee\xe0\xbe+\xff\xcf?\xbb\xcfHHnc\x82?\xf8lIy\xcb\xb5\x82?P-\x8bsN.\xa2\xbf\xcc\x7f/\xdbk6x?\x16\xd22\x1e\xd7\xad\xdd\xbfS\x12\x99_#V\xdc\xbf\x99\x8fP]y\xe9\xc0\xbf9\xbd:k\xc7\x16\xdc\xbf\xda\xc8\xf7\xb9\x9c#\xb2\xbf\nU\x13(wd\xd0\xbf\xf5N\x16d]\x84\xd8?\xcd^\xcb\x8b\x12\x10\xe0\xbf\x974\xb2\xfc\x8eJ\xe0\xbf1\xf8f{\x830\xc5\xbf\xad\xd7\xca+\xf9f\xe0\xbf\x89\xd2\nx\xe35\xc6?\xdd\xa1\x90\x1e&\x1a\xac\xbf\x91\xf1Tc\xc5\xc8\xd3?\x92\n\x12\'\xd8\xb9\xd4?\xad\xce\x96OA)\xac\xbf\xa3\x8fy\x90Gz\xd4?s\xac\x17\xd7\xfa\xc5\xa2\xbf\xbb\xa0\x95\x94\x0cV\xc7?\xdcF\xf8\xb9\x9a\x86\xdc\xbf\xe8\x08*u\xc0\x02\xd6\xbfh\xe0L;rJ\xd4?\x8b%"\xd6\xfa\xdb\xde\xbfx\xea\xd03\r\xd4\xa5\xbf3\xd1\x98\xfe\x81\x07\xcf?S\x07>\x10\xbe\xad\xc0?\xbd\x1d\xa1\xf6\xca\x9b\xda?2\xbe<\xd9y\xf6\xc1\xbf\xb0Z\xd4\x04\\\xbf\xbb?f\x9aw\xf1\xed\xcb\xba\xbf(=a*\x89O\xc8\xbf\xdb\xcd0\xe6_\xc3\xbe?\xed\xe2\x17\xf6\x03\xbe\xcf?Rb\x85\xb6y>\xab?~\xf3\xb4V\x8a\xeb\xd1?\xda\x85\xa6\x04\xe2\xdd\xa0\xbfN\xd3H\x14\xbb\xca\xdd\xbf_x\x85\xd7\xed\xb3\xd8\xbfu\x19/\xe0\xf4<\xcd?\xbeR\xa2\xaa\xe6:\xb7\xbf~\x9e\xbe\x93\xe7\x9e\xdd\xbf\xc3\xb4\x18u\xd3\xc7\xaf?F\xbd\xc9\xa6\xf6w\xd0?\xd4:\x11\xf5\x1e\x9b\xa5?\x13\x18\xc2m\x92R\xda\xbf\xa4>\xc9E\x16\xcf\xda\xbf\xdeo\xd9\x0b&\xc3\xd7\xbf\x94\x08\x9e\xd2\x13\xd9\xda?\xa7\xe7\x05]\x92\xa4\xcc?\x9c&-\xd5z\x0b\xd3\xbf\xbf\xc9xr\xea\xa5\xd1?\x95\xa5\xea\xb9 \x1c\xdb\xbf\x14D\xa2\xc2\x03\x80\xb8\xbf\xe8\xaa>=\xe2q\x97?\xf7\xce#\xd8v\xfa\xc5?\t\x8a{\xfct~\xd2\xbf\xbfLY]7\x95\xbc?J~g|\x10d\xd6?\xd4\xb4\xfd%\xb6\xce\xd2\xbf\xb7\xfa\x0b\xb7\xc1\'\xb3?\x9fJ\xcb\x845I\xb6?\xce?\x88\x1e\x98.\xa6?\x99\x1a\xcb\x86\xb65\xdd\xbfag\\O82\xd8\xbf\x81\xab/\x98\xaex\xc7\xbf\xbfn\xbc\xa51\xc2\xb9?\xc9\xd2\x89\xc9\xcaB\xba\xbfC\xa8\xdf\xa1\x9b\xb3\xc0\xbfM"\xac\x01\x93\xdc\xb4?\x84\xe0\xc3\x15\xce\x9d\x92?A\x04e\x04\xaf\xdb\xc2?\xf2\'\x8b\x89\xb1\xe5\xae\xbf\xb3h\xcb\x92\xdf\xb0\xd7\xbfb\xf6\xd6@Z\x05\xc2?:\xbc\xa5\xc3|z\xe1\xbfel5\x1f\xc1G\xd9\xbf!_nt\x1c\x9c\xc9?\'\xed\xcd\x9e%\xf7\xcf\xbfY\x88\xd3ko\xbc\xd7?-\x1b\xbcIN\xe5\xb6\xbf\xa0\x18Q\x15l8\xcb?\xdb\rYA\x10\x88\xc7\xbf\xf6\xe7l!\x87~\xc6\xbfj\xa9FA\xe3\xde\xdd\xbf\x1a\xb5\xb6\xed\xaf\x1b\xc7\xbf\x8c\xc1\xce\x94?.\xc6?\xd6#M\x01y\xeb\xb9\xbf\xcf\xfaR\x0e\x82=\xd0\xbfl\xe5\xc8w\xcb\x15\xd9\xbfW\xf7\xe0u\x0c\xe5\xd5?\xb5\x18\xf4\xb2\xc2\x12\xd5?V\x84\xa2\x98\x8a\xf1\xd5?\xcb\xf3\x9fG\xc7\xe6\xc2?\x16q\xaf\x8c9\x86\xd7\xbf\xa8\xf8\x87\x94\x02\xa8\xb7\xbf\xa2\x83\xb8\xb9fJ\xc7\xbf\xf8\x1f\xfc\x02\x89\x90\xbe\xbf\xaf\'r\x06\xaa\x8a\xca\xbf\x8e\xc5!\xf8\xfb\xda\xa6\xbf?\xe4g+,\xef\xb6\xbf\x08\xfa4$\xa9:\xd4\xbf\xaa\xb9\x88\xfd\xb7\x93\xbb?\x8cxuw\xa6y\xce?\xc2\x9b\xa5\x9a\x7f:\xa2\xbf\xc3\xda\x16\x0e\xef\xd1\xc6?<s\xfa\xe5]\xc9\xdd\xbf3\xdd?\x05\xc6=\xc6?\x16@\xa1\\R\x07\xd8\xbf*\x8e\x85RG\xec\xd6\xbf\xef\x1f\x0c\x1f\xb8\xac\xc7\xbf\xb6\x11$\xdd\xe4\'\xdb\xbf\xc3J\x83\xef\xd7\xe3\xbb\xbf&\xcb\xbc\xa7\xb1\xb1\xce\xbf$\x80\x18\x96\xa6\xf9\xab?i\x03\x8b9U\xdb\xac?!/\x85\xac\x04\x9a\xd6\xbf\x08\x8bb\xfa\xc6\x8c\xd7?h\x84\x1d\xc1>B\xd0?\xe7A=\xe2\xcc\x96\xb4\xbf_KJ\x91\xb2\x94\xdb?|60\xb9\xd0\xd0\xda\xbf\x04\xa6\x16\xb0c\xaf\x9d\xbfm\xfc\xcf\xbf\x02\x03\xc5\xbf .\x1ft\xdc\x17\xe0\xbf\xfb\xd1\x82<D\xf3\xda\xbf\xd4\xf4\x99\x8cEH\xc7\xbf\xf3\xc8R\x8f\x96\x7f\xde\xbf9\xefu\x8aR\x1b\xe2\xbfE\xa7\xc3%\xaco\xd6\xbf\xab\xd3\xee\xd9\xeb\xfd\xd5?\x8c\nnD\xb4\xb0\xba\xbf\x05\xfc\xde\xdf\xf3 \xc8\xbf\xa9\xb8@&\xfa~\xb6?\x86\x92\xd9\xb4^\xad\xce?\xe8\x10\x04\xad\x84B\xe0\xbf\xac$]e\xd9\x84\xce\xbf\xfdG\xc5\x80\x9f\x1a\xcb\xbf\x83Q4c2\x8a\xd8?N\xd8\xb9~|Z\xd3?\xf3\xc9Z\xab\x86K\xc7?\xc6O\'\xbf\x9b\xc6\x8f\xbf\x8f\x90\x93Z\xa0Q\xd3\xbf\x81v6\x0b\xb2\xdf\xd0\xbf\x9d7\x80\xaaR9\xa0\xbf1\x84\xc5\x7f\x08\xb8\xca?\xa4<w\xa6\xe1=\xc7?\xb17N\xf4j\xc5\xdb?\xcd\x0e\xfac\xbcd\xb4?\x04\x89\xfb\xd5f\x18\xd6\xbfrq\xbc\xe5M\xcc\xb1\xbf )6a-\x0e\xca?\r\x02K\xcbi\x96\xdd?\x85\xa1X\xff\xaa\x1e\xdd\xbfcQ\xf2\x0cM\xfc\xb3?5b\xe9\x99\x9f\x08\xd8\xbfgV6_\x13\x11\xd2?\xc7\x89\xa3\xc2\x04\xc0\xc3?\xf0\xa7(%\xe4\t\xc3?j\xc3\x03..\xa2\xdf\xbf\x08\xcf\x05\xda\x0f\xf9\xd5?\x96.\xe3\xc5\xc2\xf7\xde\xbf\xe7y%\xccNy\xd3\xbf\x07+)\x1c\xcd1\xd2\xbf|b\ne\xe6x\xb8?\xf9\x8a?m\x1a\x15\xc5?S\xca\xad\x03\x17i\xb5?o\xa9}\xda\x95\xab\xd3\xbfT\x10\xdd\xfe\xe9\xd7\xb5\xbf\x94"\xa6\x0e\x11\x8e\xd5?U7\x90\x03,\xbc\xd1?\x98\x8e\x05\xc0\xd7\x11\xa9\xbf\xe5\x87r\xf1\x84m\xa9?}H\x8d\x80\x00\r\xd5?\xa6\xbeiw\xa8i\xd2\xbf8\xa8\xd2\x0fh\x9f\xd0\xbf\x8e\xfd\n\xbd\x1c(\xd1?`\x12\x93\x1aLE\xc2\xbfT\x94H\x96x\xbb\xb2?\xb5\xd4\xb4\xe5,\xe9\xc3?2\x1c\x1c\xac\x8fW\xda?\x01\x0b\xf0\xdc\x1b\x0b\xd2\xbf\xe9\xd7C\x11\x81V\xca?\xcf\xd9\xe1{S\xf9\xd4\xbf\x13\x1cH7\x91a\xa3?\x07\xaacAX4\xc0?\xa2N`\x9d\xd7N\xcf\xbf\nU\xc9\x1a\x0e\xd7\xc3\xbfy\nZ\x1d\xcf+\xd5\xbf\xb8Y\xfb\x04\x03\xac\xa0\xbf\xba\xd9\xa4S\x07\xde\xd8\xbf9\xb3J\x8a1\xdc\xac\xbf\x13\xd6\x06Zd\x0e\xd3\xbf\xeal!\xc5\xb2\xec\xc5?\x93Y5lM4\xb2?\xbd\xb8\xa1\xea\xc2\xb6\xd3\xbf\xa1\x19\x1c*H`\xb1\xbf\x1ess\x94\xdd\xd1\xd2?Uw=X\xd47\xcc?2\xf5\xf4\x0en\x8f\xd7\xbf\x93\xea\xbbEk)\xca?\xd0\x8d\x92\xfb\x94\xb5\xd6\xbfE\xd5\xed\xa6P\xc8\xd4\xbf&>\xbd=\x1a\xa8\xda\xbfPq\xe6T\xb5f\xb6?N\xfdym\xee\x15q\xbf\x91\xc3\xa3\xf2u_\xc4?\x93\xa5>t0\x80\xcf\xbf7\xe0%G\xec3\xd6?\xda\x1c\x90\x82\xa2\xa1\xbe\xbf\xb7\x0b\xfe\xb4B\x84\xcd\xbf=\xb9\xda/\x81)\xd6\xbf\x8d\xebn\x03\xe4m\xc5?\xd1B\xac\xbc\x844\xd3?\xbe9\x87`\xb35\xd2\xbf:\xb4D\x15v\xa6\xd0\xbf\r-\x01\x03Hc\xe2\xbfG\xc0l\xbfw\x83\xd3?\x9eo\x8d\xdcE\xf1\xc0?\'\xdb\xbc\tL%\xc5?\x1a\xfcI\xb3\xdf"\xcd\xbfU\'\xb7{7\xc9\xaf\xbf[\x02\x1bR\xc7\xa2\xd7\xbf\xfb\xc9\xf4\xd9\x85\xf4\xb7\xbf\x93\xe5O5<\x9b\xd0\xbf\xb5\xcc\x18\xb1\x9eZ\x91?\xa7\x87\xa0DC\xcb\xd1?\xdd\x17\xd9Pj\xaf\xd1\xbf\xd3$n\xa9\xe8\x82\xcb\xbf\x1c\x04\x83\x8cb:\xd8\xbf\x8b2j\xd8ph\xda\xbf\xcfl\xd7\x08\x11k\xd8?\xeb;\xc6\xd9\x94.\x9f\xbf\xce\xeb\x1e\xc4\xfat\xc8?\ni\xfb\xb7\xb5\x8d\xd6\xbf\x8c\xc5\xf3\xca\xd5\x7f\xd9\xbf\xf1\xebR\xf1o\x7f\xa3?\x93f\xe2,\xa6\x98\xb2\xbf\x0b\xce:Z0u\xc0\xbf\xce_\xfd\x8f\x9c@\x8e\xbf\xd3\xae|\x7f:\x8c\xb2?M \xdb\xf4?n\xe0\xbf\x94/\x1ewZ\xfe\xdc\xbf/\xc6\xcf\t\xec\x98\xd3?\x9e\xeb\x9f\xa0\x98v\xb9?\xc0\x02\x15\xc0\xc8\xfb\xcf\xbf\x02c\xb9\x13_I\xd1\xbf\x05\xca\xe4+\xe9=\x9a\xbf\xd4\xdd\xbc\xa24j\xad\xbf\xf2\x0c\x83}\xbb\xe8\xc0\xbf"\x8b\xb9\x05\xbf\xb9\xc8\xbf\x00\xc2D\x9b;f\x82\xbfS\x0e\xe2\xe4\x92\x9a\xb6\xbf\x03\x81\xbf\xe3\x14\xab\xac\xbf\xe0<\x86\x8e3\x95\xdd\xbf6SS\xb2\xbb9\xcb?\x1djN0"*\xdc\xbf\xf3\t\xd5\x97f\x8b\xd4?\xbf\xe2\x1c\x07\x14\x06\xba?\x88`h\xb6\xb1\x1f\xd2?\xf5\x84\xb3\x9e[\x83\xc1\xbf\xb0nu\x91\xe0\xa3\xca?\x13.\xbc\xb3\x81\x86\xd6\xbf$\xdcd\xb1\x100\xd1\xbf\xffl\x88\xb2\x13\xb0\xcb\xbfQ\x16/\xe5\xfe\xf6\xc3?\xba8\xf8\x9e{\x9a\xd0?\xb2%\x81\x04Ai\x89\xbfB.3\xe4\xbd\x8d\xbe?\xba-\xcf\x7f&\t\xd3\xbfd?\xe9\xf2B\xac\xd3?\xc5\xa3\x02\xda\xec\x12\xb5?\xf2\xf0a\xe7\x88\x8a\xac?\x01,\x06m\x11\xf4\xe0\xbf\xdbk\xeeC\xea\x19\xc7\xbf\xf8I\xd4\xbc\xda\xea\x9b?\x8f\x05\xc3\xd6\x0b\x80\xd1?\x9a\xce\xd4B\x02\xeb\xd4?\xc8\xb4\x80\xe8\xd11\xca\xbf<-\xd0\x18`4\xd1\xbfB\x187}N\xba\xd4?&\xccB9\x12\x92\xc8\xbf\xe0\xbc\xa3(\xf6\xdd\x9f?\x0cG\xf4\xca\x18\xdb\xc6?\x13F\xebY\xbe\x80\xdf\xbfMM+B\xa2\x14\xd2\xbfY\xdf\xd2\x05\x9b\xbc\xc3\xbfQu\xa6vB&\xa9?o\xb8a\x16\xf8 \xc4?\xedWx5\x87\xc3\xaa\xbfN\x98\x8f\x16\xccu\xc5?\xc0\xee\xde\x03|R\xcb?\xcc\xd0\xb6@GA\xd9?\x10\xf40\x969\x1f\x99?\x17\x98\xc2W0l\xd8?\x84\xc6q\xd4\x8b\xd0\xc7\xbf\xae\xbc\x89\x172C\x9f?\xa0\xb8#\xc8Q\'\xc0\xbf\xe7\x7f\xd5\x86\x04\xe8\x95\xbf\xb7\x98(6\x8d\r\xa4?\xe1\xf7\x04Z\x865\xcb\xbf\xc9g\xda\x97_\xd8\xd5?\xff\xe3\x99\xbfC\x15\xce\xbf\xc8O}\xc6/7\xd3?ap\x0eh\x1d\xcf\xd0?\xbd\x1d#\xc0(\x04\xd7\xbf\xcb\\+`:\xbb\xc7?}\x11\xfa\xa3\x1d\xad\xd8?&\xd5\x8f\x8e\x8c1\xc6?\xc1\x99\x13z\x04"\xcb\xbf\xcce\xc9\xc3\xa6\xb2\x91?\x13\x95&.r6\xb0\xbf3\xa0\x814\x82\xf3\xc1\xbf\xdd!\x87\tQ\x9f\xd2\xbf\x82\x11+\xa2\xfb\x92\xd7?\xa0e\x92\xe4\xdf\xd9\xdf\xbf\xa1\x18\x17\x16\xd5A\xc0\xbf\xd8\xce\x94\x0bX.\xcf\xbfb\xca\xf7\xd9{m\xcb\xbf\x1f\x98e\xc7\x8e\xa8\xbe?\xe5\xda\x1b\xb5\x08$\xd8?\x88;\xda\xc1\xf3w\xd5\xbf\xa3\x89\x0b}\x1f\x17\xd3\xbf^\xf0i\xa2\xb8{\xd5?\x8fU:\xb4\xc4\xed\xc1\xbf\x93\xc5\xba\xcf\xacB\xc8\xbf\x8b\x93V1\xac$\xc1\xbf@\x8c\x8cy\x93T\xdb\xbf\xe3\x98\xd6~M\xf0\xd4?"\x99\xf4>\xfe\xe9\xde\xbf\xfc&Up8\xd4\xd7?z\xbd \xbeS\xa1\xd3?\xf2\x88\x86\x83q\xd7\xc5\xbf\xd0q>E1\'\xa2?\x0e\x19\x9d\xa6P\xc0\xd1?\xdcx\xdf\xa8\xfd\xaa\xc7\xbf\xf2\xd9\xad9\tE\xca?D\xb44\x93d\xed\xd0\xbf\t\x80H\xc9\xfb\x8e\xb9\xbfob}t\x00\xde\xd8\xbf\x11pkX2\xdc\xdb\xbf67s\r\xdd\xc6\xe0\xbf\xce\xd6\xa6\x88dE\xc6?\x1b\xe8\xe4?\x94\x96\xb1?zGgn\xc6^\xd4\xbfV[\xae\xc13\xa4\xd7\xbf\x10\x95\x9a\xd4V\xb1\xa7\xbf\x08\xe1\xe7\xdd\xd9a\xc3\xbf\xbbv\xb6\xdd\x1a\x9e\xae?\x12j\xdf\x92\xca\xdd\xb4\xbf;\xcc\x83\xae5O\xd1\xbf \xe9\xabY\x0e^\x8f?\xe9=}}\xe2\x18\xd7?\xffx\x88\xb8\x04\xac\xd3\xbf`U\x90\x99\xec\x9d\xdc\xbfU\x94r;\xda\xfb\xb4?\xb1B\xa9#\'\xcc\xbe\xbfD\xed\x8c\x0b<\x00\xce\xbflAT3\xcf,\xde\xbfZ\xd2il|R\xcd\xbf)\xbe\xdb\xb8i8\xa1?\x9d\x9f\xb01\xf1Q\xd7\xbfz\xaaxE\xe7?\xde\xbfF7\x8fO\xe6g\xc6?\x8dg\x9d4\xf0"\xda\xbf\'\xe2S\xc1\xf3\xf5\xd4?\xaa\xc6\xb9r0\x00\xc5\xbfj\xdc-Kk\xc7\xd3?\xda\xac<\xd3\xa2\xa2\xc3\xbf\xe2\xff?\x99\xa4\xe6\xb6?j\x15\xdf\xf8\x11\x9e\xa0?@|\xa2\xd5\x1aR\xde\xbf\xd2\xcc\n\xca.\x96\xd2?\xea\xd3[\xc6T\xdf\xcb?\x82D0\x17\x82\xa3v?\x03\xbdB\xd5\x03\xaf\x83?^\x8f\xfb\xc5\xf8n\xc5\xbf\x86O\xa9a\x8fid\xbf\xbfL\x81\x02\xb7A\xb8\xbf\x1b\xd7\x0b6uE\xd6?\x1aA\xf2\xee\xfby\x88\xbfn)c!K\xac\xa8?|\xd9\x85\x10\xf2\xe0\xcb?\xa6\x85y\xb7\xc2[\xde\xbf9m6gR\xf7\xd8?\r6;\x90\x9b\xe2\xd9\xbf\xd4\xb7\xfb\xbb\x0c\xd5\xb9\xbf\x1d\x01\xc0\x8e\x08L\xcb\xbf^\'u\x84Bo\xd9?\xe9^\xac\x9dH\x94~\xbfX\xd8\xa5\xdd\t\xf5\xd0?h\x8e\x168\x99\x90\xc9\xbf\x0f#\x11\xcc\r\x90\xd7?\x96\x1c\x0c%\xc3u\xd4?\xc5`\x9axa\xcb\xd5\xbf{Y\xc2\xc6\xb07\xce?\xeeH\xd7\xdb\x99\xf9\xcc\xbf\x99-a\x8e\x18~\xd2\xbf\xb0\x89\x8bm\xea?\xd3?(\x11\xeaN|=\xd6?\xc7RP\x95^\x15\x88?\xf8 \x1fYt\xfe\xc3?\xddB\x0b\x08\xd4\x9e\x9a?\x8aM\xc8\x88pV\x93?\x1a^\xe0o4L\xcd?\x85S7\xbes\x9b\xd3?K\xe5OF\x99h\xd5?b\x0cx@W+\xc0?DCS\n\xf8W\xb2\xbf\xd5|U\x90^\xc1\xd0\xbf\xe1%\x9a\x0e\x05y\xc6?\xf4\xfa=D\x12Z\xde\xbf\x17\x07G\xb4*4\xdc\xbf\x9e\xbf\xcd\xb77\xbb\xdb\xbf\xf9\xcd\xec\x9f3\xbb\xd6\xbf\xacE\xee\xd3\xe34\xd2?JAd\xf4\xf8\xa4\xb1?\xdb\x0c\xbfN\xc0"\xd6?\xd9\xfe\xa6\xbf\xcd\x18\xdd\xbf\xda\x03\x8a\x01\xde)\xae\xbf;E\x17\x1e\xc2\'\xca\xbf[\xea\xb9\xee\xa1\xa2\xb7\xbfD\xa5\x82\x01;\xa3\xc1?\xe5\xcdOE\x1c%\xd5?\xc0dlu\x95i\xd9?\xb0C\x907s\xbb\xd2?\x1dmh\x93x\x92\xd7?J\x930\xa6\xd9\xb8\xd6?Z\xf3t\x8d\xd2\'\xb5\xbf\xeb\x03\x8aZ!\x9d\xa5?V\xfe\x96h\x9d\xfd\xd6?\xbd\x1f\x82\xe9\xc3\xdd\xc6?\xff;\x02\x96\x8b7\xd3\xbf\xe0i\xf9;9\xb2\xc6?Y?I\xf0\xc0B\xc0\xbf_\x95=.\xeb\'\xcc\xbf%\xc0\x96\xc1\x04\xbf\xde\xbf\xd5HF;bJ\x90?\x97p\xeb\xdbB\xcc\xc7?\xc7\t\xd0\x04\x15\xaf\xc1?\x94;\xe5A\xc6\xc3\xc3?p\xc7l\xa5VD\xb8?\x89\x97\x02v0\x8a\xd2?e\xbfN\nH\x97\xc1\xbf\xfd\xa2\xb7\xdd&\xb4\xd6??a\x0c\x0cG\x07\xc6?C\xe4\xfa\x00\x0f\xac\xd0\xbfn`pWS\xca|?e\x872\x8exV\xdf\xbfo\xa0[\x1e\xf1\'\xd8?\xf6\xfb\xb4\x8fF*\xd4?\x80\x83,G\xae\x94\xca\xbf\xff\x9d@\xc9\xf8\x11\xc5\xbfqD\xdfx\x0b\xb8\xd2?\xb9\x8f\x07\x9b\xf8\xea\xc0\xbf\x96u\xfb\xe1Is\xd7\xbf6\xbc\xfb\xcf\x95\x1a\xd3\xbf\x7f\x1e;\x07o\x1b\xd8\xbf[\xf4\xde\xe1*!\xc4?\xf8\xa9\x96\x00\xc1t\xd1?`\xc6\t\x9c\xc4)\xc2?q\x1b\xecn\xb7\xa8\xd1\xbfA\xff\x87\x0e\xd0%\xd1?l\x1d\x86I\\\x12\xd2\xbf.\xba`\xc80\xfb\xce\xbf\xa7\x9fX)Y\xb1s\xbf\x8bF\xebB\xa0\xec\xdb\xbfG\xf4}r@\xdc\xd5\xbf4\xe7\x85}\xbc\xd9\xa4\xbfDv\xce\xd3\x92<\xd8\xbf~\x86\x13\x97-\xd1o\xbf\xc4h\x94_\\\x9a\xdf\xbfd\xc1Yy\x9e\xc6\xd6?\xef\\\x16r#\x89\xd6\xbf\x07P\x8f\xc0p\xd3\xb2?\xd1\xa2\xcc\xb9\x0f\x8e\xc1\xbf(ZT\xe3^\x0c\xd1?@\xa2R\x16\xfd\x07\xab?Q\x90\xfe\xa2H\xbe\xd8\xbf\x9b^\x95eu.\xd6\xbf\xae/~\xb6\x91\xfb\xd7?4V\xd3\x85\xa4\x9d\xd3\xbf\x1e;gB\x96u\xdb\xbf\xf4a\xf8\xf2)\x9c\xdb\xbf\xf2b\x1c\r\xda\xfb\xd8\xbf\xaf}\xac\x84\x84\xdd\xb4\xbfR\xfb<\xb9\x05\xa6\xe0\xbf\x88g\x17hCr\xc8\xbf;\xf3~\xfd\xa56\xb4\xbf\xe4g\x80\xe3\xc5\xad\x9d\xbfp\x19\x8d\xd4\xe0V\xc9?%cO8\xcf\xba\xe0\xbf\x7f\xd7V6a\x91\x90\xbf\x15\x8d\xcc9\xf2\xeb\xc3?\xa3\x98\x99\xfc\xd8?\xd8\xbf\x19\xab\x8c\xbb\xefh\xdc\xbf\xb1\x16:=\xd3\xdb\xc9?/\xed\xae.\xeb%\xd7\xbf\xf5\xbb\xcc\xd9\xb3/\xd8\xbf&\x16\x05:J{\xce\xbf\xd7R\x80JH\xf7\xc2\xbfV\xc0\xdaT\x13.\xb2?B\xd3\x9cEr\xd1\xd0?\xcb\xca\xbf?w\xfa\xb7\xbfL\xc5\xdey\xe4\x1c\xd0?\xd6\xb9\xa7\x8c\xadk\xc8?\x87\xf4\n\xa7\x80\xb6\xb4\xbf(Hz\xeew\xff\xc2?\xe6\xf9&\xd9\xd8\xbc\xcf?\x8f\xe7k\xb0I\xe4\xdc\xbfh(C\xa9\xebk\xd7\xbf\xefVa.\x1eW\xc9?I\xdd\xd6\xcd\xab\xcc\xd5\xbf\xb1\x1a\xa9\xf7\x0f\xe4\xd7\xbf\xcf\xba\x01\x04$\xb4\xc6?\xf6\x04\xd6\xa1U#\xd7\xbf\xaa\x12\xe7\x18sr\xd4\xbfU/%\xd5\x9cB\xba?\n\x14\xad\xc1\x15\xae\xb4\xbf|v"\x83\xf5\xcc\x92\xbf#\t\xe5\x8a\x91@\xd7\xbfm#OZ\x98\x01\xc6?\xcc~\xa6\x86\xee\xbe\xd1\xbf\xc2\x97_\t\xefi\xd2?c\xbe1\x9f\xa3\x00\xd2?\xe1\xf3\xb9\xa5\xe7x\xe0\xbf\xc5\xdb2"T\xb9\xd5\xbf5\xd1\x841x\xb5\xd3?\xc1\xe1\xcc\xaco3\xdb\xbfu\xa4\x8bl]}\xa2\xbf\n\x00rn}\xf7\xdd\xbfNg\x91%lh\xd3?o\xdc\xb9\x80\xc1\xad\xe0\xbf\xc9X?\xfdi\'\xd0?ao\x1c\x10\xce\x83\xb5\xbf\xbfOS-\x9fd\xd6\xbf\x97\xed\x1e\n\xdd|\xb3?\xc25x\x9f\xc5T\xcb?\xd1\xce(\xc6\r,\xcb?\xe7\x95\x80\xdc0\xf3\xd9\xbf\xef\xdaw\xc1\x10Y\xc9?d3:\r7\x98\xd3?\xaca\xa2\x7f\x06\x8c\xc5\xbf"\xa2"?\xc9\x87\xce\xbf\x0f\x8d\x1f\x1a\xecs\xcb\xbf`\x10G\xe7\x87:\xb1?\xdfs..R\x92\xd8\xbf`\x195\xa3@\xaf\xda\xbf\xe0i\xad\xb6\xd4\x0b\xb1\xbf\x00\x99\xc83y8\xd0?\\\xe8D\x92\xffG\xdd\xbfAT\xd9\x9es1\xdc\xbf\xbaX\x1b\xb5B5\xde\xbf\xa3Ey|i~\xd3\xbf\x8d\x06\xcb\x8b8O\xe0\xbf/\xe6<a\xf0*\xcd?xG\xa1\x19\xd0\xe8\xd5?\xb1BI\x1d.\xc1\xc3?\xb3\x17\x16\x8e,\x91\xde\xbf\r}%;[&\xc0?y\xb3\xa05f\x8d\xd8\xbfk\xcewB/\x16\xa4?1\xf6\x0e\xb8t\'\xc3\xbf\xf6\xfd\x90*\xc4\xb6\xd6\xbf.\xb5S\x1c\xc9\x1c\xd2?>v\x9b.\x10\xc1\xd9\xbf\xc2\xa3*\xbdi%\xd1\xbf\x94_.\xb4\xa9\x81\xdc\xbfd\xfc\xf1\xf4\x03?\xc9?\xe4HIGE\x8ez\xbf\xe3,\xbc\xf9\xc3\xd6\xb0\xbf\x19\xfc\x9f\x94\xee\x9a\xd5?\x08\xe8\xccc<?w?B\xd1\xd7\xed5\xd4\xdb\xbf\xbd\x98/\xe4\xde\xd5\xda\xbf\x99\xf76}\x0cR\xd9\xbf\x00+\x17]/\xe8\xd6\xbf\x19\xbe\x82\x0f\xa2\xd6\x86?\x86\xe9\xf5\x99\x0e\xda\xd4\xbfJa%\\@w\xd6\xbfk7\xaa\x8f\xc9w\xd7?v\x82\xa7\x91\x98\xb4\xd4?\x18\xf6\x13\xa32\x92\xba?y\xbbR*\x9c*\xe1\xbf\xb6\xa0\xf0\xec\xde\xd1\xdc\xbf\xe3\xe9\xc7\xf9\x15\x0e\xdf\xbf\xeeq\xcd\xea\xc6\xf9\xc9?\xc99@#\'eh\xbf\xe7)g\x86\xe4\xb0\xb3?_v\x85m\xb6\xe6\xca?\xbd\xb0G|\x05_\xd1?\xe2\x88\xda\xb4\xa1\x99\xb1?\x8aA>S\x15\x8b\xdd\xbf\xf9\xcc\xdf\xcc\xd1\x91\xcd?\xcdk\x04m\x01K\xb5\xbf\x84\x08\x85$+\\\xa0\xbf\xb1U\xac\xa04\xea\xd5?\xfd\x9f\xf7\xeb\xf5\xf2\xb9?Yu\x95\xa7\xda\xb4\xab?\x1a\xbeR\xf14\xf2\xd0\xbfy\x95=\xe7\xbc^\xc4?\x94l\xf4\xa62o\xd1?z\xc5G4\xe9\x1a\xbe\xbfRrT\x02\xe1h\xd8\xbf\x98-nyl\xce\xbd\xbfB6\x8c\x02)S\xb3?\xaag\xee\xf7\xe1\xe9\xdd\xbf\xda\x99\x0b\x01K/\xc4\xbf\x8e\xbfe!\x805\xd8?\x08\xa5\xe7\x0b\x92\x82\xd4?%{=D\xe8F\xab?\x9f\xd81A\xed\x19\xb6\xbf\x05\xfd\xe5\x9a\xceG\xda\xbf\x8d\x0b\x0e\x7f\x13\x9b\xd3\xbf\xdd`n\xe5rM\xdf\xbf\xfd\x14\xac\xe05>\xcb?9y\x19\x11\xc0\x83\xb8?\xbb\x19#K\xf0\x89\xd9?OM\xb3\x90x&\xb5?\xee\xc3\x82\xa1\xdf\x99\xd5?\x13~ua\xbe\x1cp\xbf\x01\x88\xebY\x9d\x83\xd8?\x07\x99\x8c\xbf7%\xd4?X\x9f\x19\x1cL\xd2\xd3\xbf\x1b\x9a*g]l\xae\xbf\xefI\xde\x0f\xdd\x08\xc2?[j\xec\x96Th\xae\xbf9l\xeb\xa0\x008\xdb\xbf\x8ay?\x87\x93c\xb1\xbfK\xc5|\x8b\x033\xe0\xbf\x89w\tiK\xc5\xcd?\xd5\xe1\xdc\xda\xb3\xbb\xd0?\x11Y\xaaF\xb4\xe2\xd8\xbf\x82\xe7\xbc\r5>\xd4\xbf\x14\x17l\x0f\x9cd\xd2\xbf\xac\xedG\x0b?\x93\xd2?\x81\xfc>l&l\xd6\xbf\x0e\xec|-@.\xc8?d6\xb34\xa8\xc0\xd9?y\x97r\xcf\xf3x\x9c\xbf\xa1\xb1\xbbS\x02\x15\xa3?j,\xe9\x8c\x99M\xd7\xbf\x06Ma\x16B\xaa\xd0\xbf\x18<\x814\xd1\x0f\xa2\xbf\xc7\xcf\xbdc\t\x8b\xae\xbf4\x18a\x84E!\xde\xbf{px\xaa\xc9\x92\xda\xbf\x9c=z*F\xa7\xba\xbf1\xca\xe3\xa9\xa9\x90w\xbfc+\xd6\x0bND\xde\xbf\x84\xc4\xf7)\xe4&\xd5\xbf\xb1P\x9c\xbb.W\x9c\xbf\xa5\xd7\xf7d\xb4\t\xd0?\xbf,-[k5o\xbfT\x94\x019Pl\xdc\xbfe(\x0b\xc7I6\xd3\xbf\x8dA\x02\x86P\xb1\xb2?\x8dzKB6\xb0\xab\xbfX\x12\xa6\x80Q\xd5\xd1\xbf\x99\xc35N\xa8#\xb3\xbf\xdd\xc5M(O\xe7\xb0\xbf\xd6\xee_\xa1!@\xcb?z\xbd\xde\'\xa7\x91\xc9?\xe6\x9b<\xde\xbag\xc3\xbf)\x90\xfc\xe4\xae:\xcd?\xe9/\x1b+\xa4^\xc3?\xa4\x1c\x03\x010\x08\xd2\xbfP\xe4\xc3\x1b]\xf1\xc4\xbf\xf9\xea\x8d\xe0\xf5\x07\xb4?\xe7;\x8c\xc5tm\xb3?A\x1d\xa0\xcf\x9e\xc8\xc7?W\xdb{\x02{\x89\xb2?\x18\xa8\xc4b\x08>\xc0\xbf\xc3e\xf1!\x11\x86\xbd\xbf\xdd\xb9\x7fsu(\xc4\xbf\n6\xc4\xc0&\xe4\xcd\xbf\x98\xdb\x95\xce\xc9\x1e\x9a?\x81|^\x7f\\\xfd\xc1?\xcd\x03#f\xa7\xb5\xc4?\x05\x10\x9f>]\x16\xc2?o\xe2\x08^\x16\xd2\xda?\xfb%\xa0\x80r \xb2\xbfsa\xdfU\xda\x86\xc1?\xac\xd9\x9b\xc3\x1a\xf4\xc6\xbf9FMP\xbff\xc2\xbf?\x95Ho)H\xa0\xbf"Zm=\xfbjP\xbf\xdc\xb0+rI\xd2\xb5?Th\xf2\x15\xd2\x02\xc9?\xc7\xd1\x98\xb6\xe7\x04\xca?\n@71\x94O\xa8?*\xd2\xef/YP\xd3?\xe9%`\x1b\xa1\x15\xc9?#\xe6C1\x8cF\xd2? \xdd\x07\xf7\x98\x11\xc3?/\x8bx\x13\x82\xd8\xab?\x1cUnEg\xee\xb7?\xb9\x14\x88\x94fO\x9e\xbf\x9e{\x9b\x08\x16\xcb\xc0?$\x8d\x92\xa9Q\x1e\xc0\xbf"\xda\xb9\xa0B\xfe\xbd\xbft\x15Q\x11\xece\x86\xbf\x95\x12p91E\xaf\xbf,\xd1\xa5?\xe6\x97\xb7\xbf\xe1\xb2\x13\r\x08\x03\xb0\xbf\x18\x82G\x17Y>\xd5?\xca\x13\xe1m\x94]\xa8\xbf\xfa_u\x10\xe2$\xb5?[\x15(\xb7\xe1\xc8\xc7?\x87\x8b[\xe0\xda\x1a\x97?\x14n0X\xa6G\xcc?\x93\xbf\x0cC\xc6\xa8\x8b\xbf\xcd\xb6\xa2\xb9\xd5\xe9\xc7\xbfi0^\xa4\xe9\xe6\xbe\xbfg\xf0\x97\x8b\xc5}_\xbf\x8c\xff\xc5jh\xb5\xc4\xbfq|l\x9d\x86\xff\xbd\xbf\xbe\xc3\xb5\xe4\xf8R\xa2?Z[@\xbd^\x89\xc4\xbf6\xa4y\x87\xd8%\xa9\xbf\xff\x04\xb8\x8e 4\xb0\xbfC\xe8\x87\x1c\xf4\x1e\xb3\xbf\x90\x94\xdf1\xe8\xfe]\xbf\x8b$\xb8<M\x96t\xbf5\xc6V&k\x9b\xb7?\xd7m\xddR\x00&\xc4?\x16+\x93knc\x98\xbf7\xa7\xe4\x8ay\x93\xaf\xbf\x918sz7\xd9\xaf?\xb5\x0e\xfc\x96\xde\x81\xac\xbfB\x97\xd4\x11qp\x9d\xbf\x9d\xcf\x84\x968\xd9\xc4\xbfN\x95LIq+\xc8?\x15b\x03\xb5E\'\xb3?\x9d\xf2\x1a\x0f6\x07\x8e\xbfq<\xbc\x88\xd7W\x9d?\x00\xe7\xecp:$\xb3\xbf\x7fD\xbcJy\x87\x87?\xd2\xc9_\x12\xf6q\xcd?D\xe1h1\xbe\xfc\xc6?\xad&T\xa6\x06\xea\xb6\xbf\xbd\x8bw\x1c\xbd\x9e\xad\xbf\x0b\xb0\x8a\xd3%P\xb0\xbf\xddx\x0cX\xb2"\xc1\xbfu|\x1a*o\x89\xc1?\x1b\xbb1\xb6\x9a2\xbc?\x93\x88+\xd4Yp\xb8\xbf\x9b\x06\x04\xebR\x87\xb9?\xc7\xb3\xa4W\'k\xa0\xbf\x13\xde\t\xe0\xeex\xb4?;:\xac\\\n\xe4\xb0\xbf\xa4\x1asB\xd8\xb2\xaa?Q\xb74\x19\xf0\xc1\xb1\xbf\x19\x18$\xb0\x1c\x14\xbb\xbf\x16\xff\x83_\xb9\x1c\xc3\xbf/8\xa5\x91\x83\x02\x9f?\xa5\xb4\xa3\xa9\n\xe1\xb0\xbf^I\x04_1\xdd\x9b\xbf\xb7g\xf0\xf8a\xd4\xb9?\xf9\xf4\xc1\x88,}\xb3\xbf\xe8i\xb9\xa1G\x8f\xc7\xbf\x80\x83=\xfe2\xb6\xc4?\xf3\xf3\xe7a\xb3$\xd3?\xbf\x84\x19&\x87Z\xc9?=\x1f\x1e\x07\xc7\xbe\xb1?\xed\xb0\xc5Z\x96\x85\xd3\xbf\xf0j\xc8\xba\x8b\x0c\xa9\xbf\xa7\xeck\xf7\xd5\xdf\xc4\xbf+SSP\xf0gT\xbf\xcc\xd2\xc0/0,\xc1\xbf\xad\xedR\xc1e!\x92?\x1a.\x18d\x9fF\xd1?O(\x1fc\xb9\x15\xca?;(%\t\xcd6d?\xdd\x15J\xe8\xcb&\xaa?5+3\xd3\x96\xe6\xb9\xbf\x88\xc7\xd2F\xc4v\x9f\xbf\xb2\x95\xda\x97Y\xc9\xd0?\xdd\x8a6W&d\xc3\xbf\xac\x19H\'\x9f*\xbc\xbf\xf4\xe9\x1e\xc0\xba\x16\xbf\xbf\xce\xb7\x8a"|\xfb\xc2\xbf5\x08mg\xc1\x08\xb2\xbf&\xcc^\xa6\x1c\x03\xbd?\xf4t+\x17e\xc5\x8c?\x7fp\xb34"m\xa6?\xef\xd8]\xb8\xea\\\xc2\xbf\xc5\xc1\r\xa4U\xd1\x92\xbf\x86DTI\xb0Q\xb9?\x89\xac\xa4"&f\xa3?\x9a\xffd\x1e\xb6\xc1\xa5\xbfG\xb4\xa7\x16\x81\x8f\x8a\xbf\xac\x97\x88\x0e?R\xe4\xbf\x1e\xee\xc2\xact\xd6\xc0\xbfxz\x8f<\xbf\xedp\xbf\x07\xe8\xff\\\x19\xbf\xb5\xbf\x8a\xd4o\xa3\xbe\x81\xb0\xbf\xd4>\x86)\x87\x0e\xc4?M\r\xa1C`3\x8c\xbf\xdb\x15\xc7i\x91\x89\xa0?\'i\xf9\x90\xe5x\x9e?\xe5\xef\xed\xf5\xf9s\xbe?^\xee\xaa\xbce\x9a\x7f?\xeeA\xd7"\xe1\xd9\xc0?\xf3\n\xb9\xe8}xs\xbf\x13\xf4;\x05`\x8d\xa1?\xf3!Wk\xf8\xad\xd8\xbf\x0c\x7fB\xf3\xd4|\xac\xbf\x92\xa3\xa7\xe0\xc0\xd6\xc3\xbf{\xc6\xc1\x01\x8f\x85\xa1?%C>\x05\x8c\x96\xb9\xbf\x1f\xca\x1au\xdf\xb5\xc3?1\x8b|\xe23l\x86?\x1c\x96\xb8\xb5\xad\xd6\xd2?\xdb\xbaA\x95h\x14\xca\xbf\x8d\x10\xa1\x95\'r\xd2?\xaf\xdcF\x7f\x9f\xc7\xa1\xbf\xfbqJ)\xf3\xd7\xd0\xbfl$SP\x0c\xe0\xde\xbfR\x90\x01v\xae\x03\xc4\xbf@\x05\xff\x91\xf8\x11\xca?x\xefW\x97}\xbe\x8a\xbf\x98U\xb3\xee\x8cd\xa1?]\xb3\x83E\xc4\x9f\xca?rfH\xd6I-\xc1\xbf1\xbf\x1eh\x19\x1b\xbd?r\xfb!\xdb\xd6F\xca\xbf\x1a\xa8\xed\xe3\x9ep\xc0\xbf`F/*5\xb1\xe1\xbfa5\xd7v}\x83\xb1?\xf4\x91;5q\x18\xad?\x9b\xefk\xe6\xec3\x85?z\xa0z\xf7{j\x9d\xbfl\xc3w\xa2\xf0\xe8\xa9\xbf,\xbf\x93\x07\x00\xd6\x9f?\r\xd5\xe3\xfe\xa8\xd6\x99?\xfeg.\xbc~v\xc0\xbf\xa1\xb52\xb8\xe7\xad\xa3?\x91\x8f\x10\xfd\x8e \xcf\xbf\x80P\xaa\x85JF\xb7?\xc3\xa6r\x7fl\xe2\xce?\xff\xb9\x93:x\xad\xcc\xbfc\x0b?\xab\xb0\xd8\xc2\xbf\xcb{*\xda\xd4\xae\xba\xbf\xc6\x9c\xa0T"\xce\xd3\xbf(\xe5\x04\x9a"\xb6\xa1\xbf\x83\xb9\xbc\x80\x07\x93\xcb\xbf7N\xf3Fe\xb0\xb1?\xff7\xdc\x04\t@\xb7\xbf\xb4D\xee\x13\x90\x7f\xc1?Q.\xeeJd\x07\xab\xbfQ\xbe\xe8\xe2\xd0f\xb5\xbf-g{\xa9\xc3\xe7\xc6?h\x835\x02=o\xc6\xbf\xfd \x1c\x1cI\x04\xc3\xbf\xde\xd0<b&\xa4\xad\xbf\xfd\n\x9d\x9c]\x87\x88\xbf\xa0\xafaEP\xfa\xb1\xbfN;\xc2\xf5\xa1\xf8\xd0\xbf\xa7^3:E\xae\xad?=\xff\x82\x8b\xde\xc3\xa6?\x91\x8fW+\xbb\xf9\xa7\xbf7\xac+\x99\x8e\x0c\xb5?\xbf\x00\xe2q\xf23\xc6\xbf\xceWGAh\xa8\xcb?"V8:L>\xcd\xbf\xc7\x81\x04\xed\xa0@\xab\xbf\xfdV^\n\xe0\x90r\xbf\xff\xad}\x85\x12\x16\xc5\xbf\xe4\xc88\xc1\xc8-\x8c\xbf\xfb\xc5$\x80\xa3\x9a\xc4\xbf\x0e4\x1d\x06\x872\xa1\xbf\xc4\xf5=\xa8T\xcer?-@\xc0x\xc7\x10W?z\xce\x14\xca6n\x9a?\xf1\xac3\x90S\x1c\xcb\xbf;\')*\x03\x81\xba?\x7f\xd4\xf1x\x0bs\xa2?\x86\xb2PP\xe7\xe5\x97\xbf\xe7!rA\xfa\x9b\xb9?\xab\x0bo\xd6\x02\xac\xe8\xbf\x00\xf4gY\xca\xe1\xb9?\xb8\xcf\xbe\xdd\xb8\x1a\xc3?\xe2\xbf\xf5\xc6$\x9f\xc0\xbf\xee\xb1\'XN\xcb\xbf?\x96\xe0\x87\xab\x82C\xc4\xbf\xf19\xf0u\x8dO\xac\xbf\x19]a\xd9\xf0l\xcf\xbf;\xbc4)\xb0\xd2\xaa\xbf:\xb5\x95u\xac\xfd\x94\xbfS$\xa6\xb7Q\xd4\xb4\xbf\xf5\x0c\x82\x08\xa1bq\xbfm\x91_-\xa0\x05\xc8\xbfv8\x0fs\x8c%\xc9\xbf\x1a\xdc\xa6K"\xa8\xc5?\x95 \x1d?6t\xb8\xbfi\x0e\xa4EL\x94\xae\xbf\xa3\x98\x08w3\xcb\xdc?.\xbe\x9b\xa0\xdb\xf3\xb5\xbf\x8b\xda_\rY\x99\x90\xbf\xe8\x8e\x8b;\xb6\x9b\xd3\xbf\x91L\xbeO\x9e]\xca\xbfEAB(\t\xde\xce\xbfl\xd39\xe9Z\x12\xb4\xbf3p\x0en\x0b\x17\x9c?p\x11\x81=\xd9\x81\xc2?%Q3\xba\xa7\x86\xa1?\x89\xa5\xb26\\\x04\xa3?!\xa1\xf73\x17w\xdd?\x9d\x11S\xd1\x9b0\xc4?\x97\xb9\x90\xe5DW\xaf\xbf\xdf~s\xc1k%\xd5?\x9aN\x1b1\x9bD\xca?\xc4t9\x00vf\xc1?\xc6\x0e\xfbd^\xa7\xa8?\n\xcd\x1bq\xa5\xc6\xc3\xbf\xa4S\x94\xc4\xfb\xe1\xd4\xbfD\xd2C\xab\x9d\xef\x7f\xbf\xcdH\xc1k~\x08\xc3\xbf\xb1_z+\xf0\xa6\x99\xbf\x04\x99\x9f\x04\x1bQ\xa2\xbf5\xec\x0c\xd6\xa7\xf7\xc9?"\xf17\xa2"\xcd\xb8\xbf\xd2\x10\xc7\x1a\x0c\xe6\xc8\xbff\xa5\x068U.\xa9\xbf+t\x8f\xeaA\x8f\xd2?a\x13\x8b\xcd\xa0\xc1\xc1\xbf\x07\xa1\x85E\xa43\xb4\xbf\x80\x8f\x90\xc2\xfeN\x91\xbf\xae\xcb\xe0\xfe\xca\xbf\xc2\xbfH\xa4I\x0e\'\x80\xa6\xbf/\x1d\xcd\xe8|M\xd4\xbfK\xcdc\x1dg\x8d\x8a\xbfA\xdcz\x11\xfa?\xba?y4\xff\x1d\xad\xf6\xd5?\xfc\x96ji\x0b\x1b\xbf\xbf2\xcezW&\xe3\xc2?\xacap\xf6\xb1\xc9\xc2\xbf\xc6\x8b\x8dI\xfb\xc0\xd0??{V\x84!;\xc3?\xbf\'}=\x1c\xa3\xd0\xbf\x9f\xc0\xb2d\xb72\x9c\xbf\x90\x0c}Q\x1fP\xd3?\xd8\xf8\xceWCD\xd6\xbf\x9d\x05\xc6\x82\x9bs\xa1\xbfd\xb9@\xc10i\xd8\xbf\xbe\x0b\x9a\\\x93s\xb9\xbfq/\xfa\xa0\xb6\xf9\xb2\xbf"\x02X\xb6\x9e\x03\xb8\xbf\x05\xad\x12\xb43\xe7\xc9\xbfx\x85\x0cM\x99\xd2\xba?I\xd4F\xedts\xd8\xbf\xcd#,85\xa8\xc5?\xa3M+`<\xf2\xb3\xbfZ\x049\xef\xff\xd6\xc3?\xde\xee\x1a\xee\xb7\xa3\xb6\xbfA\xa7\xb5\xc83\x08\xcb\xbf\x9eD\xc1{\x1f-\xca\xbf\x1f.\x1c?\xbf_\xe3\xbf\xa0\xf4!cL6\xd0\xbfq\xd2\x93r\x80\xdb\xb9?\x9f<\xea\x07<\x19\xb5?fi\x00\xdc\x99\xe0\x9b?,\x84\xc6\\\xf4\x84\xa3?\x84\xa9rA\x04\xee\xd2?\xc0\xe2OC\xc5\xda\xb8\xbf\x93\x1e\xbc\x034\x1b\xc5?r\x9f\x8fR\x93\xdd\xbc?\xf0tNs\xcb\x9a\xc3?\xdb\xe8\x89\x82\xf6\xa3\xb9\xbfF\xb2\xdd\xa8\xeb\x98b?\x0c\x95n\xf9UH\xb2?\xe4\x04f\x8c\x15"\xd4?\xd5)wf\xc6\x0c\xc2\xbf\xd3\xf2\\w\xa9\xbd\xc0\xbf\x01u\xda\xf2\x16\xea\xa9\xbf\xe3\xaa\x10\xdc-\xd1\xbf\xbf\xc8N\x1e\x05\xfa\x97\xba\xbf\xd2\x0e\x8d\xce\xa2A\xce\xbf00\xe9\xfc][\x9f\xbf\xddhR\xcdO\x1b\xb9\xbf\xfdl7\xf9@Z\xcc?\x9c\xda\xa7\x9bs"\xa1\xbf\xc8\x00\x1d\x04P\xf9\xbf\xbf\xc4\xdfP\xcf\x12)\xc2\xbf\x18\xba\xad\xff\xcb\xe6\xc6\xbf\xe00\xf3\x93\xb0\x8c\xc0?\xeb\x81&\xef\x87\x0b\xc3?_\x02~\x88\x12\xcc\xbc?\xa4\x8f\xfa[\xb2gw?\xa5\xfah\x96\x15-\xbe?\x9b\x925\xf4\x18\xde\xd2? \x14m9\x83\x18\xb4\xbf\x98\x83*vEN\xbc?\xc1\xae\x9f\xa6\x1c\xde\xaa?\x1e\x1aq\xdd\xd7\xdd\xc2\xbf\xf4hn\x93\xa6\xea\xc6\xbf\x89\xb3`=U\x8c\x98?^\xb2\xd6\x1b8\x84\xae?\xff\x9f\xeedO@\xb4\xbf\x96\x87\x1d\x1bZ\xd2\xc4\xbf\x068\x99G\x86c\xd2\xbf_\xd2q\xdaE\xaf\xb0?"\x17\xd1\x94\x0c\x95u?\x16\x8fc\xb1\xb7\xc9\xcc?i\x8e5:\xa3\xc9\xb9\xbf`s-\xb0\xc2)\xa3?\xe0\xc8\xebf\x05\x16\xa3\xbf\x1c\xf2\xf3\x19\xae\xbc\xda?\xa7\x00 \x18p\xab\xc2? \xd8\'0\xcb\xb6\xc0\xbf\x14\xd1\x01\xee\n\xe8\xd2?[Kd\x9b\xc36\x82?x:\x1e\x9d\xf32\xa2\xbf60\xfe\x90\xdf\xf2\xb5?h\xd9^[\xc5\x93\xa4?TH\xdd\xd1Y\x05\xc1?YIw6\xae\xa2\xc2\xbf1\x87\xb9\xd9\xc8\x01\xaf\xbfe\x83rm\xfaO\xbc\xbf\xd5\x7f\xdeW\xb5\xea\x85\xbf.\xf10\xcb\x95"\xb1?4gW\x90?\xca\xa8?$\x07\xa3\xaenq\x95\xbf\xb6\x18H\xc3\x8fp\xd1?\xe7r\xe9e\x04\x07\xb3?i\xa7o\xdc8\x95\xc3?9[~\xcf\x90q\xc1?\xeb8W\xa642\xc3\xbf\x9e\x9e\xc3\xc9<\x1c\xa9\xbf\x86\x1aY^kt\xab\xbfm\xff\xfaW\x94\xd9\xbe?L\xa6\xcc\xb6\xc8\xab\xc7?#Q\xa3\xec\xe2{\xb0?Q\\G\x05\xa1\x08\xcf?m\x11\t.\xd6\x15\xcf\xbfq\x06\x15\xb1\x1a\xb6\xcd?q\x8d\xb2\xb1\xc0\xb8\xc2\xbf\xd4\x97\xd6\x8f\x0eV\xbb\xbf>`ke\xc0tr\xbf\xef\xf8zw\xc1\xac\xc0\xbf\xfc\x12\x1b\x99\xf0\x19\xa7\xbf\x00\x15F\xe3\xe8\x1e\xb1\xbf!k\xe4jy\xfa\xb6\xbf}\xce\xe7\x13\xdf\x96\xc1\xbf=F\xda}\xd7O\x9c\xbfk\x0fx\x1b\x15\xfa\xcd?G\x90n\xb7N\xd5\xac?2m\x9d\xb0Bl\x8e\xbf\x19\xfd\x99\x87k\x0b\xc2\xbf\x0cR\x05]\x03\x85\xc1?\xeb+|(8>\x84?\xa5\xdb\xc5\xbe\x82\xeb\xa9?l\xd2\xb3\xd5\x15R\xca\xbfB\xb2 !\xac\xd0\xd1?5c\xf7m,\xae\xcb\xbf;\xb0.&\x1a\xd2\xc8?\x86G\xa0R\x06\xb2\xc3\xbf\x80\x18[\xe3\xe8]\x8e?\x90=a\x8f\xd9b\xc2?h\xb8^\xcf\x84\xb0\xaa\xbf\xd9\xf3u\xa1\xd7\xa3\xc3?\xfc\x14\xa5\xc6&o\xbf\xbf_\x8eD8(\x89\xc4\xbf\x19\x835\xcb\xbf\x04\xb0\xbf[\xf0\x92\x11\xb0\xd3\xb6\xbf\x92I7\xd1\xc0\x8f\x9a?H\xb3\xebw\x95\x89\xbe\xbf\xda\x04\n?h\xab\xc0?\xcb\xfbv2\xff\xce\xcc\xbf\xca\x05p&\xb5\xe6\xc6?\xb0\xd5l;a\xee\xa9?_\x0f\x9f\xac\xdd\xf4\xc4?\x04\xad$i\xd3X\xb2\xbf*\xa5\xdd^\x84E\xda?\x84\x03_6l\xc6\xb5\xbf9\xf6\xcf\xc2|C\xdc?`F\x0e\xb525\xc8?\x93\xef%\xf04\xaa\xcc?\xa4\xf2\xa7\xa6DG\xc4\xbf z8oXx\xaf?\x84\'\xcb\xe2\xd8\xdd\x9f?\xb9\xed"Q\xdb\xe2\xc6\xbf\xae\x89\x99k4\xa5\xd4?:y (\xaa\xc6\xa7\xbf\x92\xa5<B\xa0%\xcb\xbfeA\xba\xed\xacX\xbd?8 N3\xab1\xa4?\x98\xb8\x1aq\\\xff\xac\xbf6\xaf\x83\xe5;q\xa6\xbf\xc3\xaf\x9dsA\x9d\xbe\xbfhX((v\xd8\xce?\xef\xf9\x13\xbf\xa89\xc1\xbf\x13\xe9/b\\\xfe\xc5\xbf\'\xfa+oI\xed\xa0\xbf\x1c\xe7W\x9c\xc8\x1d\xab\xbfdB^\x03\x92\xf3\x9a?w\xfa\x1b\xd9\x8a(\x91?2\x8a\xe0-\x96\xa9\x94?X\xac\x92\xbc\xb7h\xb6?\x93?_l\xe5U\xa1\xbf4\xac\xa3\x059\x1c\xbb\xbf\x9c\x91)e\x06\xed\xb3\xbfL\x0f\xcaU\x8e\xbb\xc9\xbf9\x1fr\xa3\xffL\xc6\xbf\x90\x00K\x8bT\xd0\xc1?\xe4\xc4\x15\x97\x8c~\xa7?\xc2\x0bmP\x0e\x8a\xd0?M"\x91\x9c]\x8c\xbb?\xbd\xbcVC\x01\xc9\xd2?\xae\xe0Q\x1f\xcbF\xc2\xbfACC>?Q\xbe?B\x04\x85\xc5[\xf9\xb9?\xf1\x1b\x7f\xb5\xcb\xb8\xb7\xbfR\x95\xdc<`\x9f\x9a?\xa1\x1cA\xa0Z\x1b\x99?\x92\xab~@\xf3e\xb2?\xd5~\xaepk\x87\xcb?\xdc\x9ew\x0b\xc2\x99\xb4?\xf8\x8f\x17\xd26\xac\xaa?K\x11\x1f\x88!\x06\xba?\xe5\xcd\xdePl\xef\xb8\xbfx\x8c\xf6\xa1kT\xca\xbfL\xb3\xb0\xa0K\xc6\xbd\xbf\xb0\xb8\x13\x95\xcc9\xbb?\x8d\xf7\xc5e+\x7f\xa5\xbfu\xe8\x9f%\xfbo\xc4?m\xc3\xf4\xa7\xf4W\xa5\xbffyg\xd9\xad\x1f\xba\xbf\xc2;\x8a\x8d\xab\xf2\x9e?*\x98Tyn\x0c\xcc\xbf\n\xa2O\x7f\xf3\xeb\xc5?\xe6-\xee\x13\xa0B\x92?\xb8tB\xdc\xa9\x93\xd0?\x80\xd8\xc4\xa7\x9a\xeb\xb1\xbf\xaeP\x8ea\xc06\xac\xbfC?,X\xa1\x87\xaf?\xc6[\xf7W\x07\x1d\xaa\xbf\xe9j\x04\xcfA\x18\xc3\xbf\x030r\xdd\xd6\x97\xd1?\xab(SA\xb3\x9e\xd2?\xa2\xa6^\x00\xba"\xce?\xfb\xde\x1c\xa1\xb1\\\xd2?\xc1\xa9\xd5\x00\xfei\xa5\xbf\t\xad\x9an(\x81\xc7?\xf0\xb8\xde\xd6\xac\x05\xa2\xbf?1F\x84\xb8k\x8e?\xd3\x96\x11%\x7f{\xbd?\xa2u%\xf9\xb2\x8d\x91?t\xcdq\xb7\x8b\x88\xc2\xbf\xf0Q\xe2\xea\xfbg\x86?,\xbf\'\x00&\xb0\xbd?6\xd7\xd3\xa2\xe2\xa7\xaa?A\xec\xb3?\xe89\xb3?\xde\xb9\x05\x9a\xce\x06\xb5\xbfwT\xe7\xed\xf9\xd4\xb8?\xd6\xbdc\xd9\xe9s\xa8?S``ji\x8f\xb3?\xb4B\'w\xb4[\xa3\xbfd\xbc\xa2\twN\xd5?\xc6\x02\xd4\xd0\xde+\x92?\xe2\xe0S\xaa\xe9h\xc0?\x10\x05\xa9Cp*\xa9?^\x9f\x92\x9b:\xce\x81\xbf\x12\xe4B\xe2\xd5\x0f\x9d?\x10\x9b\x92g\xa6\xd6\xba?\'\xadFu>#\xc0?\x1a\x18*%\xb4O\xc1?N:\xd0\xc5O"\xc1?h\x9e%\xd0k\\\xbf?4\xd6[_\xabI\xb3?\x816\xb9N&b\xae?\xf5\xa6\x1c\xf5l2\xc6\xbfq\xd5\xedtW\xdb\xd1?\xfe\xbe\x88s\xc7\xca\xae?\xfd\xc3X 3\xef\x8e\xbf8l\x06#oR\xc5?D\xe4;\x936"\xa1?\x90\xb7\xf3\xdd\xdb\xeb\xaf?\xe8\xdf\xd36\x10\xd6\x97\xbf\xed\xa4\xe3\xd2\x19\xfc\xb0\xbf>=\xdd\xba\xb6\xef\xbe\xbf\xb44\xf3!\xe3\xa9\xbc? yF\xe8\x05+\xb3\xbf(\x018\xe5(w\xab?sq\xdb==:\xbe\xbfIMM\xa7\x1b\xcb\xb3\xbf9\x9e\x8e\xa9\x90\x97\xa1?\xbf\x98\x03\xa8\x162\xb1?lW\xd6\xa3\xcf\xc8\xae\xbf\x1a\xea\x03q\x8a`\xb9?d\x15N\xb899\xd6?\x18\xa1 \xef6\x1b}\xbf\x927m\xe4\xac]\xad\xbf\xeb\x90\xf6\xf0\x9a\xa4\xdb\xbf\xf1.\x1fp\xdf\x9b\xbd?/\x85\xe6y\xc6X\x9f\xbf1\x8f\x12\xf1\xd6 \xa7?:\xd2\xd3\xc2y\xf1\xb8\xbf7\xcdc\x01\x07\xc9\x86?\x82J\x925=s\xd2?\x9a_r\x19\x05/\x93\xbfI\xae \xcaT\xdf\xad?\x94\xdehb\xd2\n\xb5\xbf\xa5\xebl\xf2\xd2\xf2\xc4\xbf\xbf~\xa0i\x1dS\xa2\xbf\xe9\xec%\x06D\xba\xc5?,EI0\xc8\xe2\x99\xbfu/\x97s\xc1\xf2\xb3\xbf\xa5\x00MXa\xa7\xbf?:\xd8\x99\xf98\x9d\xce\xbfG\xf4\x16P\x0eE\xd0\xbf|_\xa4$R\x86\xc8?"\\\xb3\x80IP\x89\xbf\xa1\xd5\x99r@\xf8\x9b\xbf\xd0\xd0\x81\xc45t\xb9?\xfb=\x8b\xc9\xf0\xd9\xb7\xbf\x11\xfd\x0e\xbb\xd3\xa1\xa2\xbf\xef@\x95\x03`\xa0\xa3?\x82\x8d\xe9\xaaW0\xa7\xbf\x12\xc4\xd3v\x14\xf9\xb6\xbf1\xe4\xcb\r\xd4;\xe5\xbf1Ie\xd8\xddl\xbb?d\xb8\xbfG\xb8\xa8\xc2\xbf6\xf6\xd2\xe0\x17^\xb5\xbf[\xbd\x1dzO\x1c\xb2\xbf(z\x89/\x8d\xe9\x96\xbfT\x9a\xd6\xc0\x90_\xac?\xbc\xd2\xbc\x17&3\xb7\xbf\x0f\xe4\x7f\x974\x08q\xbf\xdd]\x01\xe4\x9b\x8a\xb2?\x12`\xa1\xcc`\x17\xc2\xbf^\x1d\xd1\x19\x07n\x97\xbfgCOt\x01\x06\xba\xbf5\xa5\xa9\r\xdcX\xb2\xbf\x0f=o0\xa5\xfc\xbb\xbfn|\xae\x88\xc8\xfe\xb1\xbfp8\x0c6\x18\xeb\xac?\xde\x8c\x94\x85\xe6\xa5\xc2?]\xa0W^\t\x1e\xc2?\xb0\x83~\xc4Vc\xa7\xbfLo\x99W\xef\xbc\xb5?\x13d\xe1\x89\xb8\x95\xbc\xbfU{f5>\x9b\xba\xbfxb\x98\x16g\xd5\xb1?\x96\x04\x9b\x7f\xaa\xbf\xc3\xbf\xc3ZA\xf5d\xad\xa1\xbf\xb6\xec\x04ev\x03\xe0\xbf\x8d\x06\x8dzE\xc7\xc4\xbfT\x9e\x19\x89;_\xbd?\xa0V\xb3\xa0\xac\r\xc0\xbf\rc\xdd(\x10\x1b\xa6?\xb96\xd7\xe4\xf3p\xbf\xbf\x9fAc_\x83J\xc3\xbf%\x89hD[s\xc5?\xdd\xcb\xf8\x82\x99\xbb\xc8\xbf\x88\xdbDICf\xb5?\x82\x0c\xb0\xee\xa7\xee\xe8\xbf\xf3+\x86;\xaa\xcf\xb5\xbf\xd9\xa0\x84x\xa4\x11\xa2?Xl\x8037\xb7\xcc?\xd8L\x1b\xe3((\xc2?\x9e\xfa\xf2\x896H\xc3?\xe0\xe4\'\x0c\x05 \xb7\xbf\\g\x0e\xd9\xb6\xa0\x9c\xbf!a\x1c\xab\x1fr\xca\xbfD\xd5-Sr"\xd0?GN\x93%\xbd\xa1\xc3\xbfk\xe2{\x1ay\xe9\xd1?\x8e\xb8\xba\xb5\xc5Y\xad\xbf\x80\xf1\xa5&Gw\xcd\xbfq<,~q\xfe\xa6?\xfc\xd4%\xdfO\xc9\xaf?\xfa*\x96\xda\xdd\xd4\xc9\xbf\xcb\xe1\x16\x81\x19\x17\xc3\xbfV\xad\xf7H\x1cF\xa0\xbf\xc7\xc69\x99SV\xad?\xf3\xb5\x8e\x0f\x1d\xb2\xa8\xbfJ}\xb6?\xe6\xca\xad\xbf\xb2c{\xa8\x96\xad\xb7\xbf@\xd7\xb9n\xb6\x99\xb4\xbfC\xf8C+.\xd6\xac?\xf49\x86A\x0c \xb8?\x084\xfc\xee\xf0<\xbe\xbf\xb2\x87\xadPe\x08\xb6?3p\xe5\xc5\xb3\xb9\x92\xbf\xd2\xcd\xa5\x03\x9c\xfc\xc8\xbf\x8a\xe6\x19y\xac\xff\xd6\xbf KIW[w\xc0?1\x9cf/\xa8\xe5\xc1\xbfhzT\x02\xc1M\xa4\xbf\x9c\xc8\xe7g<\xdf\xb2?\xc8\xf0A\x7f\xb6\xc7\xb8\xbf\x9d\xd7\xef/l\xe0\xca\xbf\x81\x84\x1870\x9b\xcf\xbf\xcd*\x0e\xe51+\x98?\x1aE\xadK\x1d\xc3\x9b\xbf\xff\xda\xfdN\xfeU\xa1?\xe1\xbb\x06\xe1\xa3\xd6\xc3?E>\x85\x9eA\xdf\xb7\xbf\x19\xda\xba\xfdr\xd8\xab?\xfe\xcb\x08\x96v\x83\x95?\x8c\xff\n\x1a\x02\xb1\xa2?\x04\xa8\x1a\xcc\x80\x8a\xc4\xbf\xe2Y\x06\xb7\xb3\xdc\xc2\xbf\x02\xe2\xf3\xc4>\xd5\x85?:\x95j\x00t\xbf\xb2\xbf\xe7\x19\xa9\xc5\xc4\xaf\xa4\xbf\xf6s\x8e\xaa\xf7i\xa6\xbf\x1f\x1a\xd6\xf0\xc5}\xea\xbf\x0e\xd2\xe6\x87l>\xc7?\x08z\xd7|\xf1\xb0\xb3?v&\xd7.\xc9\xe3\xb7?s\x0b\xb8\x10#u\xcc?\xa4\x11,q\xc1\x1d\x90?d\x0c\x91a\\M\x8c?b\xcfa\xcd\x971\xcd\xbfRUb\x87X^\xbd\xbf\xa6d\xeb>\x90t\xb7\xbf\x120\x07\x9e\x87\xf6\xa1?\xb8\xc4\xb8U\x98\x89x\xbfy\xfb?\\$\x92\xa6\xbf\xe6\x08\xdc\x1d7\xea\xb2?\xb6\x0bZ?\x11u\xb1\xbf*\xef:\x87\xab\xf4\x9b?,\xd1(*xT\xaa?!\xfb\xb1`e\xe2\xd2?\xdc\xd7M9\xb4\xe1\xae?z\x87\xc3\xc11\xbd\xc0?\x94\x90\xe6W\xadC\xcf\xbfe\x94\xdc>\x86H\xc4\xbfn\xa0\xcc\x02\xb1f\x94\xbf\x06\xfcJ&\x07\x91\xc2\xbf\xaa\x0fC\xe8u_\xc1\xbfw\xa5\x9c/I\xab\x92\xbf\x05\xd0c=L1\xb3?\x8c\xe1Ns9L\xa2\xbf\x0f\xfc+0vA\xba?=\x7f\xd8\x02\xdea\xb0\xbfq\xe8?\xcf4\xe9\xc1? u$\xf8\xb4\xb1\xcc\xbf\xc1\xd6a\xa2g\x8c\xbf?\x19\x01T(\x85\xb2\xbd\xbf\xc8\xa2\x88\xf3\xc9\x1e\xba\xbf\xb1\xf1\xbe\xb9\xb0=\x87\xbf(\xda\n\xd0[O\xde\xbfk\x9b\x05\xbcB\x9e\xb3\xbf\x9c\x93\xfc\x0c\x1f\xd1\xac\xbf\xb6\x89;\xa3)\x9c\x91?\x02\xc3\xf5\x99\x9d\xcd\xc8?\x0e\xf9&\x12\x0f\x18\xa9?VP7Dz\x93\xb0\xbf\x17Atu8\x19\xbf?\'\x90\xa5b\x07\x8ax\xbf\xb4\x15\x80\x88l-\x9f?\x0bz\xb7\xe4\xa7k\xa5\xbfDt\xa7\x19\x9a#\xa3\xbfw\xdb\xbdmWC\xc6?\x064\xb3%\xdbZ\xc8?\x17\xca\xa3\x81\r\t\xc8\xbf\xcc\xb0\xa5m2\xcc\xcd\xbf\xe9\x10qh\xbd\xcd\x95\xbfi\x035\xc2\xfa\xa3\xbc\xbfu5\x1e\x1d0w\xd1?X\x05\xe6\xe9\x1c\xac\xb8?\xa1\xd0\x8fy\x008\xaa?\xca\xa2\x88\xe1\xa8\xe0\xb2?u\x1c\xc7\xd66\xa7\xc7\xbfpvbn\xe0\xf0\xb7?\xb3\xf8zH\x14\xc3\xba\xbf&\xa8\xe4Q65\xbd?\xfc\xd4\xac\x8c\xde\xb0\xa3\xbf\xe6_d\xb4\xecD\x9f\xbfFU#\x89qc\xb2?r\xd6\x0e8\x02\xc9\xc0\xbf\xcc\x13\xa9\x85-\x12\xa7?\xbe\xe5\x01\xe8\xd7\x06e?\x0c\x19e\xbb\x80|\xc1?\xe1\x8aL\xbd\\\x1e\xb0\xbf\x99E\x81\x95?\xab\xb0?w\xc1g\xdf\xf3\xd4\xd4\xbf\x10\xc3_\xe9kH{\xbf8\x94\xeb\xedT\xc8\xa1\xbf\xc73%\xdev.\xd2?\xd1t\xd4\xe3-P\xa9\xbf\xde\x8e\xa0oH"\xbc\xbf\xb2w\xb1\x02\x04\n\xc4\xbfe~D\xae\\u\xe3\xbf\xc2\xd9\x04\x97\xaaY\xda\xbf#\x855\xc9>\xc6\xb3?\xf9A\x84\x85),\xc6?\xb1\x8bp6\x7fX\xab\xbf\x80\xe0#A\x0ey\xc8\xbf\xd1DT\x05[\xca\xaa?\xf1\x1b\xe7\x07U\xbd\xa3\xbf\x9fS\xed\x7f\x14\x99\xbb?c0\xe2\xb37\x01\xc3?9\xce\xa5\t\x8a\xfe\xbd?Y\x97\xe5\xbfg6\xab?\xbe\x9d\x88\xb9\xc8j\xc4?e\x90\x1c\n\x8c$\x7f\xbf\x89\x8aR\xea\xa4\xdc\xa5\xbf\xb9}\xb4\x9cCc\xc0\xbfc\xcb\x92\xcd\x87\x08\xcc?\x9fS\x01\x13)\x8c\x82\xbf\'M\x91\x91PA\xcb\xbfI\xc6\xfd$\x01\xb8\xb3?1\xf4<D6\xf5\xa7\xbf\x10\xa7\x00SMW\xac?\xc9Swa)`\xb6\xbf\xee]\xd7\xd0\xf5\xba\xb5\xbf{F\x85H\x12Y\xbd?\x93\x82\xb2i\xd0\x98\xc2\xbf\x15Y,j/\x8e\xc8\xbf\xf2\x85E"\xdc\x86\xb8\xbf\x97\xe2\xd7I\x0e\xd3\xc5?\xf1\x97$\xda\xa95\xd3?t\xaa\x0e\x18\x86\xae\xd1?\xa5<2\xc2\x172\xa5\xbf\xef\x8c<\xbb"\xb2\xbf\xbf\xeaw\x0e\xbf\xbb\xa8\xbd?<\xbe1\xb0j\x00\xb4?\x80yy\xb2\xdc\x07\xcd?\xc9\x1f\x186c\xceb?\x99\xf3\xe1d]\xc8\xbd\xbf\x04A\xf8&\x0e\x07\xb1?\xb8k\t\xfe\x92t\xbb\xbf\xb1\xf1\xd6E\x1f\x90\x95\xbf\xfc\xb2C\x175V\xa8\xbfk\xc51\xdb\x14R\xa1\xbf\xa5\xd0f\x17$\x19\x8f?\x13\xc95\xc8\x06\x9c\x9e\xbfFZB\x89\x87?\xc3\xbfM\xa3!\xf4\xa3_}\xbf\xf3\xa2-\x11#h\xaa\xbf{\xb5\xdd\xb5<\xda\x99\xbfb;\xd7J\xb2\x9f\xb0?ft_u\xa3+\xc7?\xf1\xe2-F\x8a+\xa3?c\x19\x8e\xda\xa5\xcd\xbb\xbf?#X\r\xbdm\xa7\xbf\x9aHXNx\x9b\xbf\xbf2\xc8I\xed\x0e\t\xaa?\x86f^\xa0\x90*\xba?\x03:\x9a\x84\xce\xfa\xac?\x88\x9e\x03}\xc0\x95\xc6?\xadR\x1bb\xb7\x81\xb4?g\xc0\xe8\x94\xb1\xbb\x95\xbfD\x16d\xdf\xd1\xb7\xb8\xbf\xcb\x83\xabN\xf5\x06\xcb\xbf\xf2#\xa5\x10F\xbe\xc9\xbf\xdf\xbfNj7\x0e\x9c\xbf\xc22\xe0\xac95\xba?\x00rS-\tK\xa7\xbf1W\xb5p\x82`\xb5\xbf\xf93\x81\x87\xb4\xa6\xa9?\x05\x0b\xfd\x1f\xd6\x1e~?\x16\xcf?\t\xb0\xb5\xb8\xbf9\xa1\x86\xe9c\x88\xc3\xbf\xc4\xa8\xe0\x80\xc9t\xc5?)\xc1\x0c\xcbc*\xbf\xbf\xc7\xb0c\xb1\x8a\xfb\xd5?\xc3&\xbe\xd0|\x04\xbb?Ik,e\xfeL\xd1?5D\xfd\xb3\x8a\xe3\xaf?\x17\xe4\'\xb8\xe1\xb7\xaa?\xff\x06\x1ba\xba\x06\xbb\xbfub\xd6\xa1y\xe6\xaf?\x11\xc0M\xab\x9a\xe4\xc2\xbf\x94\x15\xf2\xb7\x1cP\xb5\xbfXY\xe9U\x01u\xc9?;\xeb\x84\x85._\xa7?\xc4)?\xba\xb1H`?f\xb7\xb6\x14\xf4R\xc4?\x91\x05V\x0c\xa1d\xac?|)\xa6\t9\x9b\xb9\xbf\x01M\xda,\xbe\x14\xb1?7e\xdare\xd8\xb3?\xfdv\xce\xca\xa1I\xc4\xbf\xc5?\xfaT|@\xa6\xbf\xa7d(\x17z\xbf\x90\xbf\x0b7\xf2&\xdd\xec\x81\xbf!\xf4\xb7\xa5\xfb.\xa5?\x01f*\xdb\nq\xb0?\x05\\\xbc\xdd \xeb\xd3\xbf\xf0\x82\xe7^^\xc2\x83\xbf\xa6\x8d\xde\xf5}t\xb6\xbfpT\xabc%t\xac?p\xbd\x8e^^\xf1\x94\xbf\x91\x1c\x07g\x8cu\xaf?\x87\xb2\xb9,k\x1c\xb9?\xfe\xb4\xa2\xab\x06f\xb6?>kf\x00\xd2\xd3d?\xde\xf7K\xb7\xa1\x0e\x85\xbf\x14\xb9\xea!6\xbe\xb8\xbf\x90\x1c9v<!\xc2\xbfU>a\x8f\xf4\x03\x8a\xbf\x1f\xc4g\x0e.N\xa3\xbf\x08q\xf5X\x89y\xc2\xbf\xd6r\x10\x8c\x0c3\xc9?\xe4J1\xe4[q\xb8\xbf{\xc6\x99\xea\xc7\xae\xc0?\xc8\x9agf\xd3\x1e\xb3?\xe0\xe0\x0b[\xf8\xad\xd7?7\xa3\xc7<\x87$\xae\xbf\xa2\xa0~;\xff\x11a?\xcf\xb3u\x84\xa7\xc9\xba?U\xcd\x84z\xb2*\xa2\xbf\xd1\x0b\x02\x14v|\x98\xbfixk\xb9\x85\x91\xb2?\xe5)a\x91\x0ff\xce?%#Z\xb84T\xcc\xbfH\x88f\x1f\x86I\xc7?I\x80Pe\xe5\xc4\x9c\xbf\x18:zbm\x9c\xc3\xbf\x0e?\x07\xc7n\x81\xcb?\xe0;\n\xcb\xe6H\xc2?\xdc\x86\x83\x06\x90\xb3\xa5\xbf\xe5\'\xd9\x18\xa4\x02\xa2?\x98\xfe+\xd4\xb9\xbf\xc2\xbf\xd4^\xb2\x00h\xa3\x90\xbfE\x14\xd9\xd8\xa4\x10\xc3?\xa6\xa0\xc1\xc2\xed\xa6\xd3\xbf\x1d\xde\'sp\x8f\x86?3A(\xcd\x1e=\xcc?\x9d_\x9fS]\xeb\xc5?\n>\xed\x0f\xee\xab\xb2\xbf\xe9 \xab\n\xd1N\xbb\xbf\x1e\xce\xf7X\xe4\x10\xa8\xbf\xd4\x85-\xa8\n\x98\xb7\xbf\xcd+%\xcf\xd9\x08\xb4?\xa3\x86\x10#F\xec\xbd\xbf\xa9\x0cwj \xd2\xc0\xbf\x82\x13\xedezVT\xbf&&\x0c(\xed\x9d\xaa\xbf\'\x85\x10\xa7\x8ei\xb7\xbf$\x85\x08\xb1\x0b\xe2\x9f\xbf\xbe\xc3"\niJ\xb3\xbf\x14\xb4it~H\xd0\xbf]:m\'\x9dJ\xb2\xbf`>\xc3\xefP\xc0\xad\xbf\xdb\x04s\x07I\xed\xd2?\x9d\x8b\x99\x85m+\xa6?\x88\xfe+P\xccV\xb0?\x03\xce\xbe\x04\x14\xe6\xbc?\xca}\xb0\xc9\xaa\xc6\xa0\xbfL\x16\xeb\x8b-\x18\xbc\xbf\xc1\xd4\x06\x9b\x13H\x84\xbf\xb7@\xb4\xeb\x16\x94\x9d\xbfA)\xa5\x89f\xc1\xbf\xbf\t\xa7\xea\xfc.\xa3\xb4?\x81\xac\x00>\xbf\xcb\xd1\xbf\x13\x99\x8a\xc0\xe2\xa3\xd2\xbf\xae\xb1\xe2x\xe7\xc9\xb1\xbf\xf3\xad\xea4\xeb\x93\x85?\xec\xe0!\x8d\x19\xad8?*\xa2Pi\xf5M\xc4\xbf\n\xcf\x8byn\xa2\xba?\x98p\xe0]sp\xb4\xbf\x84\n[s)\xde\xc7\xbf\xc2\xd3\x89 o\xe0\xca?\xad3W\xa6\x88\xbe\x9e\xbfU\x86s\xa5\xfe}\xbd?\x17\xd4\xf2\x8d\x91\x8f\xcc\xbf\x00\x0cJ\xa8\xc0\xb0\xc0\xbf\x9f\x86\xb5E\x11z\xb6\xbf\xab\x1b\xa6\xc8o\xd6\xb4?\xad \xff\xac\x87L}\xbfr\xc9\x18\x01a\x95\xc5\xbf\x87\x101\xea\x16+\xa2?5\xecl\x02\x93\xcb\xd1?\x04\xad\x8d\xae\xdd\xc5\xc3?X\xafs\xf9:\x15\xa4\xbf\x03P\'\x9f\xe5\xd1\xb2?,a}\xc1g\x1a\x97\xbf\x97[qw\xe8\xf1\xb0\xbf\xa7n\xa3>\xfc\xdf\x90\xbfM\xfc\xa3\xd7\xd1\xd8\x98\xbfY\xea\x15\x92\x90\x18\xcd\xbfl\x96\xc1^\xb0\xf6\xc1?P4D\xbe\xbc\xf9\xb2\xbf\x92=\r\xf3\xd8e\xac\xbf\x94L\t\x18\xe4r\xc1?\xb7\xbd\xab\x95\xa7(\xc3\xbf\x8e\xf8X`\x97N\x93\xbfU\x07\xfa*\xe1F\xb2?\n\xc0\xa8\x10\xbb\xd7\xb1\xbf\xa1zj\x04\x0b\x87\xa9\xbf\xda\xfcK\xe4\xcd{\x8b?\xb5\xfe\xe4|\x1fD\xc9?\ru\xe3\xb9\x8bM\x9a\xbf\x9b(\xb0\x14\x1d\xa8\xae?\xfbL\xafZ\xa8\t\xb7\xbf}\xb0q\x9a\x1f\x89\xb5\xbfzG\xe6E\x1e\xdc\xba?\xcb"\xf5yTT\xc3?\xa3\xdd\xe2\xfape\xc7\xbf\xedL\x85b\x80L\xc0?0_\xbd\xd7\x06\xd3\xd0?\xaeg\x01\x96\x93\xe0\xb0?\xb1\x85\xcc\x14D\x1e\xac\xbf\x05\x91\xa7h\xa1\xfel?U\x04\x05=\x07O\xcf?\x14\n|-lc\xba??\xb2m\xcb\xf7&\xbf?\xe5pG\xba\x1b{\xb9\xbf\x04^\x043\xee\x82\xc3?\xbe\x93\xc9\xc0G\x9c\xbf?f0>\xc4\xff\x9b\xaf?\xc0\xf92\xed\r\xb2\xa3?\xa4Dr\xa0\xe0\x11\xbb?d\xe7w\xe64\x86\xc0?\x93x\x87\x05\x7f\xdc\xd0?.~\x9f3\xe1\xc9\xc1?\xad\xc1\xdaBm\x81\xb5?\x9b-\xc1p\r\xb5\xc7\xbf\x1f{\xb3\xb9R^\xb8\xbf\x8a\xc4\xd3q4_\xd2?\x90\x899iGo\xc9?\xf5j\x91\xc2\xb4<\x9e\xbf\xf8\xfaW\x14\xa64\xc3?\xfd\x06X\xd83\x93\xc0\xbf\x00v\xa8\xefS\xfd\xc2\xbf_\x0e4\xf0\xc7\xd7\xd2\xbf\xf8\xa4\x97\x94lj\xb9\xbf\xa3j\x14\tq\xda\xc7?\t\x92\xcd\x04ZJ\xa1?#ZIx\xa4\xad\xb5?z\xdd\xa4\xda~\xec\xb5\xbf6U\t\x81\xd6x\xc4\xbf\x12\xad\xd3\x94\x03\xc6\xad\xbf\x06b\xcbE\xf1\xc8\xc2?\x1f+P\xe1"\x9f\x93?\x827l(\xab\x87q?:\x07a\x1c\x08d\x9f\xbf\xd7\x1c -\xed\xfd\xc2\xbf\xa0\x94\x0b\xf3\xa2-\xaf\xbf\n\xac\xce\xbbH\x9e\xa1\xbf\x88\x0c\xa7)\xb8E\xc3?\xd5\xc5Kq\xf8\xce\xb8?n\xa2\x9eX\x9cz\xd4\xbfWm\xaaV\xae\xa9\xb2\xbf\xbc\xf1\x10\xc2\xc4\x14\xb6\xbfX\x88V"x\t\xc1\xbf#\xf8\xe7\xd2\xde\xf4\xd0?\xac\x92sl#L\xae?\xcd\xaeC\xbcg\xe9\xb9\xbfN\xf3j^C%\xbd\xbf\x94e\xce\x9b\xad\xaf\xbe\xbf`.\xd2\xc9a>\xc3\xbf\xc9\xf6{ B\x1d\xdc\xbf\xb16?\xc6\xdb\xb2\xc2?\x7f\xcd3a\x8aR\xc1\xbf6)\xc6\x0f\xf0!\xc2\xbf\xc4?\x9a\x18&\x14\x9d?\xe9\xe1P\x90\xa2 \xbc\xbf\x83f(\xf6P+\xc5?\xaa{sL8\xb9\xbd\xbfk\xff\xfd\xb3\x0b<\xd0\xbf]\xac\xcd\xebc\xb1\xc6\xbf\x13\x01\xca\xd6&\x05\x9f\xbf\x94^\xa3 \x8c\xfe[?\xa3\xfd\x16\x94\xa0\xe1\xa7\xbf\x7f\x9b\x05\xf9\x93\xab\xb9?\x9fc\xcf\'\xcdx\xd3?\xe2\xd9\x17\x9c\xba\'\xb6\xbf{\\\xbe\x8f\xe8\xbf\xd2?\x86\xaa;<[W\x9e\xbf\'\x1d\xfc\'\xd0\'\xd2?\xd3\xaa\xe3\x06\x8b8\xc0\xbf!\xb0\xcb\xcbHi\x93\xbf=K\x1a\xefn\xdf\xbd\xbf(\x8e_\xbb\xca\xda\xcb?\x0e\xc6V\\\xd5\x95\xae\xbfD\xe3\xe3"\x8d$\xc1\xbf]\x8cn\xfbmA\xc9?\x08\x02\xe0Po.\xd6\xbf{h\x97,\xe8:\xc4?\nYl\xe6\xa4\x0b\xc2?0\xc63\xb1n\xd5\xa4?\x93?\x01\x14\x94\xe0\xb1?\x96\xe2\x03\x13&_\xa4\xbf\xa5_9>P(r\xbf \x8d%3eH\x81\xbf\x1d.\x158\xf0\xa3\xc5?\xb8\x05*MMD\xb6?i\x1f\x0f%\xa0\xbb\xe2\xbf\xbf\xb8\xf1\x19\x1e\x96\xc2\xbf\x8d\xd3\xa2M\x98\x94\x99?p$\x88\x1397\xd2?J2\xbb\x11sL\xbe?\xf3\xa0\xa6\x12\x11c\x9c\xbfL\xda\xcf\xa8\xb1|\xc3\xbf\xdb\xae\xfb2\xe0\xe0\x81?\xf8\x0f\xea\x14\xec\xff\xc0\xbf>\x8d\xf2\x80\\6\xb2\xbf/m\x1cE\xfa;\xb3\xbfj~\x88s\xff\x9b\x94?\xeb\xc8\x1e\xe4\xb8M\xac\xbf9\x19xN\xc6\xfb\xc9\xbf\xaa\xd8\xdc\xfd\xccn\xbb?\xf5\xdb\x17\xa9`\xc2\x9c?\xdf\xfc=B\x9b\x13\xca?pi\x90\xa7|f\xc6\xbf9\xf0\xcc8,G\xb0?\xdc\xd3\xa1\x02\x0e\x1c\x8d\xbf\x05\xbc\x00x\x0fF\xa3?\xb5\xac\xd7\x9d5 \xc4\xbf\xd7-\xd1\xcc\x1f\x13\xb6?e\xfe\xd4\xfc\xf7\xec\xb6\xbf\xd3\xba{1\xf5\x96\xb3\xbfd\x8b\xbd.\xbf\x8cf?\xa3|\xeaO\x1fC\xa6?\xbcu!\xec8\x06\xb5?X\x1b\x8b\x14\x08\x9a\x93\xbf\xa7\xee|)\xa0\r\xc6\xbf\xaa+\xb2\x1e\xa3/\xca\xbf\xff4\xa8\x1e\xe6\xaa\xb6?\xc5\x82~5\x94\xca\xc7\xbfw\x18\x15\x19\x98~\xce\xbf\xe9\xc9\xf4\x16f\x19\xb1?\xdf\xa2`\xa7\xd5\x05\xc8?\xe0\xd7\t\xda\xd1\xf1\xd3\xbf\xd6\x07\x85Q\x80\xd6\xc8\xbf\xb6R\xf4\xef3\x12\xab?\xc3|\xbf\x88\xe5z\xa6?\xa9\x9f\x85\xa2\xda\xb7\xcf?\n\x8br\xd6N=\xc7?\x91\nfp\xb3\xe4\xb8\xbf\x07\x96\xbc\xfbO2\xa4\xbf\xb9\x8aOa[\xb8\xb4?\x1eL\xc0-\xeb\xbf\xbf\xbf\n<{f\xe4W\xd0\xbf\xdb\x8a\x96\x19\x9f\xc0\xa4?\xd0\xc1b\x0fQ\xac\xbe\xbf(\xc4B7&\xf8\xa2\xbf\xce\xad~R\xa5\x15\x90\xbfw\xca/m\xc3B\xc8\xbf0\x87Y\x1f\xb73\xe2\xbf\xb1\xb5\xc5\xbf\xe4>\xbf\xbfz\xd5\x91RS\x92\xb6\xbfK\x1dw\x9b\xf3f\xc8?[\x14\x94\xc1\xb3\xe4\x9d\xbfeZ{\xe6\x045\xd6?\x00\xcfo\x93eGv\xbf\x0bm\x9d\x16\xa4\xf6\xbd?\x9f\xef\x90\xf7\xda\xfe\xc4\xbfo\xc3\x1b\xd4\xe8\n\xb9\xbf\\\xc6-\xb9b\x0b\xb6?,\xd9\xe2\xa6\xb3\x9c\xbd\xbf\xec\xbf\x91\xcdy\x1d\xa8?*\xb2.$$6\xd6?`\xd5JQY7\xbc\xbfk5\xf4\x832\xa9\xbb?\xdb\x0f`\xcc\xaf\x06\x80?\xecK\x805\xc6\x0f\xa1\xbfUH^\xfd\xc4l\xba\xbf\xd1\xe5\xae\xf7k\xf6\xcd?\xdd\x13\xfe\xe6s\x1f\xbb\xbf\x00\xe5\xe0\'\x8f\xe5\xb1?\xb0q\xfc\rc/\xcc?\xf9\xb0\xf3za\xd5\xbc?\xb3\x8f\xc9\xf3\xedE\xd1\xbfr\xa0\'V"\x95\xc3\xbf\x9c3\x12\x99?\x80\xcb?,=]\xd4\xd6\x02\xae?\x835\xb8\xf68;\xd2\xbf\xfe\xe3\xd4\x91\x97\xa1\xcb\xbf\x1b\xf3\xb8W\xebj\x94\xbf\x1e\xed!\xcc\xe3\xed\xd6\xbf\xa9\xce\xc8\x8d\xb6d\xc2\xbf8\xeb$\x1c\x0cmq?\xa5=\x9f\x08\xbd\x9a\xa1\xbfZ<k\xc4\xf6\xac\xb7?4\xc9\xe7e\x8c\x8d\xd7\xbf\x84$\xa4\xdb\x1dz\xc0?g\x18\x8fx\xd9\xb8R?\xff\xd5\x94rJ\x8f\xca?\x03K\x0c\xed\xe8\xe4\x89?S\xfc\xfa\x1b\xb9i\xc6\xbf}A\xb7TJ\xd1\xb8?\x11\xf2\xea\xdc\xad\x82\xd3?\xb1\xb2\xa7\xb1-H\xcf?\xde\x9a\xd0\x9d\\\x0c\xc5\xbf1\xfa\xd2\xb9>\x05\xc2?\x9c \xb7\xcd\xd9\x05q\xbf\xc9`v\x18\x12\r\x8c\xbf@x\xe7\xfc\xb6\xf9\xc5?\x83k\x1a\xa3@3\xc6\xbfB\xc25\xa0_4\xc7?\x90\xdb\x08\xc2\xee?\xc3\xbf\x1a\xdf\xe4\xbc\x9c\xdd\xcc\xbf\xe1\x916\x11jr\x81\xbf\xf49_\xdc\xbcm\xb8?R\xe0\xd8\xe2O\x81\xad?\xf4u`_L\xa7\xce?S?\x0e\xe6\xdf\xe1\xce\xbf\xber\x8fa\x9f\xfa\xb5\xbf\xf3\xe4+t\xc6\x94\xc8?w\xe5\xdb\x17\x8f\xc5\xc8?)\xc0l\xa4c3\xcc\xbf\xe2\xfcH\xf7\x0e\x13\xd1?\x82\x90\xa7T\xa0\x19\xc7?6\xc5W\x1d\x08c\xc5?\xd4\x89\xe3\x1d\xc6y\xba\xbfg\xceU\xd3@T\xa7\xbf\x91\x02\xc9H[\xdc\xbc?\x03\xf4\x12#\xe0\xb4\xc9?\x92\x851\x1e\xe0\x97c?\xa3\x9c[\x8a\xe3\xb0\xc4\xbf\xc2\x82\x02\\\x94\xec\xa9?a\xe7\x90-\x14\xd1\xc6\xbf\x1at2\xf7\xbc<\x94?6\x89\x9c\xdd \x9b\xa1\xbf\xf8e\x9e\xf2.\xbe\xc5?\xe87C\x04\x00\x17\xbe\xbf\xbfKb\x0cC\x7f\x92?\x9cN\xb2\x93v\xab\xd8\xbf\x18\xda\x0c\x88\x9da\xa6\xbf\xbd\xfbJ_\xf5p\xc0?\xbb\xebX?\x90\xe9\xb6\xbf_\x1feO\x99\xe6\xcb\xbfk\xb6\xe6\xc3%t\xcb\xbf\x0fzHs\xeb\xb6\xb8?EvZ\x85s\x8f\x9d?p3\x8f\x84\xdc\xd0\xae\xbf\x12P\xe8\xcf\x82B\xc2\xbf\xeeGS*\xf87\xb9?\x17>>A\xdb\x81\xb8\xbfu\xfdb\x93\x97\xdf\xb3?mf\x1cu>9\xc8\xbf\x17\x93i\x89\x8d\x05\xc4?\x1d\x80\xcff\x08\xe2\xc3?\xd0]\x01\xb0j\xfe\xb0?w\x83d\xa9iK\xcd\xbf\xfe4o)@c\xd0?\x98\xadK\xbc\x7fQ\xc8?\x7f\x98\xdb\x9bAI\xc2?\xab\x7f\x1b\xc9\x9b\x9d\xae?uet\x9bR\xef\xb0?\xad\xe9C\xde2\n\xc0?b\xc7\xe1b\xcd\xb5{\xbf\x8e\xd0\xbc\x1e\x80\xc3\xa8\xbf\xda<\xca\x04\xd5\xcf\xab?\x9d\x99%c\x14\xdf\xbd\xbf\\\x86\xad\xd8\x1as\xcc?\xa8\x99G\x9bO\x1a\xb5?\xe4E\x04\xa9\x9d\xc8\xc8\xbf\x94\xd1\x180P\xc0\xb6\xbf\xbb\x935\xaf\x0b\xdc\xc4\xbf9]\xda\xec\xa0\xd1\xa7\xbf\x94\xaeR~\x7ft\xc5?\xad+T\x98\xed\xf7\xba\xbfU\xcaj\x91\x80\xa2\x87\xbf\x11M^\xc4\x1a\xf5\xc4??1\x89~\xc1\xb3\xa3?R\xc1\x12D\xd0\x0b\xa2\xbfz\xd7\xf1kod\xbe\xbfJ\xe0\x16lD1\xa6\xbff\xb3\x8b\x11\xc3\xf8\xd0?\x08\x9fu\xd0\x01\x9a\xcb?\x08\xcd\'z\xe8\x04\xb9\xbf\xd6\xa8\xd6-\x90\x0f\xd2\xbf-\x81\xe4\x07Q\xe8\xc1?\xab\xa1qA=\r\xb1\xbf\xdc/\x8e\xe1\xd3O\x9d\xbf\x9d\xf9>2\x14\xa1\xbf\xbf\x1f\x96\xea/\xdd\x88\xaf?F\xc0\x80/\x0cW\xb6?Vv\xa03\x19H\xc4\xbf\xee`z\xbf\x1eHA\xbf#\xb3\xd9\x80E\x0b\xcc?\x9a\xd2(7\x07\r\xa2\xbf\x15\x94n\xb2p\'\xa7?[\x80\x06\n\xc2:\xa1\xbf7\xf0NCR\xde\x8f?\x15\x1d\xc4\'\x88\xce\xcd?\x9e:\xf4cv\x80\xb5\xbfT\xde\xf7\xe9\x8fi\xd0\xbf\x87L\xfe\xb5_\xac\xd0\xbfRO\xcc\xeb\x1b\xcd\xb0\xbf7\x88\t{\xab9\xc5\xbf\x9fVkiC\xb1\xbe\xbft\x97\x16Q\xdb8u?\xd8\xb4\xf82\xcf}\x92?.\xf7\xd4\x8fI@\xbd\xbfq\x0b6>C\x15\xb2?{\xb8\xbd-|\xab\xbb\xbf\x7f\xce\x11\xf0\\f\xc8?3k~u\x1c\xd0\xb2\xbf\x97U.^\rx\x92?\x04\xf5\xd7g\xfe\x02\xb5?\xa3iR\x1bU,\xc4\xbf\x8e5\xfc\xa1\x86\x18\xb4?\xf1*\xa8\xc8\xd9\x0b\xb3\xbf\xc6\x94#\x19\x0e]\x9c?6/=\x7f(0\xcb?H\n0\x87\x1d\xca\xc2\xbf\x04.\x0e\x89jZ\xc3\xbf\xcc\x91\x18V\xb1>\xd0?\xce{\x16\xfe\xf8k\x9e?CW\x8cV:A\xcb?,\x1cT\xc4\xc4O\xd2?H\x14s\xccaf\xbe\xbf\xec\xaf\x11\x9d\xc2\xc1\xb9\xbf\x12\xa5\xcf\xdd\xc0\xf4\x82?\xee3 \xa1J \xac?,CV\x97^X\x90\xbf\x1aF\xaa(\xe0U\xb9\xbfq\x9e\xe6O\xda\x8e\xbd\xbf\t\xc6\xa1&o\xb5\xa2\xbf\x07m\x06\xd3\x8d\xd9\xcd?dme\xf8\x05?\xc8\xbf0\xd5\xd3f9\xb4\xd0\xbf\xe6\xb4\x11l\xac\xad\xbd\xbfI\x85~~\xa2x\xae?\x1f\xc1\x11:|Z\xb7?\xa9w\x1c\xe9\xd6u\xc4\xbfA\xd7\x1a\xfb\x9fl\xb6?$\xe0\xd7i#\x82\xa3\xbf\xb9\xc5\x80\x06\xcc7\xb6?\x10a\xc8\xe1rN ?\x10\xbe\xea\x18~|\xc7?\x88\xfe\x9f\xdc\xdc\xe4{?\x979\xb9\x7f;\xae\xa9\xbf?\x9a\x1a\x9e\x02\xa8\xc9?C\xa2\x7fF\xcd\x81\xa4\xbf 6"\xdf\xcf\xdd\xa0?\x17\xce\xf4\x97o\xd8\x86\xbfj\x16\x91\xf1p\x9d\xb6\xbf\x061\x00\x802u\xa0?\xe0\xa8\x8e\x9c\x15\xe0w?\x86\xcd\'\x7fb\x15\xcf\xbf\xd8\x03\x03\x9f\x83U\xa4?\xe9\xe1R\xfeF\xcd\xb2\xbf~\xef\xf3\xb63\xed\xbb\xbf73\xfc\x8e\x110\xc8\xbf0\xe0\xc5n\xb7\\\xb1\xbf\x99\x86\xd4\x06\xbb\xf7\x8c\xbf=t\x18tT\x97\xc2?\x147F\xae2j\xc7\xbfBl\xfa\xbe\xdc\xf8\xc4\xbf\xeeFMGJ\xa2\xb5?\x80\xb4>\xa5"\xa4\xca\xbf.\x88\x83\x10\x19`\xb7?\xd9\xbd\x99\x12\xdc\xed\xc8?D-\xf5\xfcG\xba\xa3?\x8eF\x9c6\xc3r\xb5\xbf\xba5W\xe5\x04T\xab\xbfi?\xb0\xc0dN\xce\xbfmK\x81\x05\xf6|\xbb?\xeeb\x9br%\xab\xca\xbf\x0e\xd5\x87B\xadl\xac?\xb8{\xb4Oyf\xcd?J\x027z\xe2\xf1\xbb?\x9d\xf0\xf60j\xfd\xb4\xbf\xfc\x8c\xdc\x82\xa07U\xbf\x98\xf9\x1an\'k\xbf\xbf\xadE\xb6|J\xb9\xb3\xbfp\xfdm\xa2I\x99\xc0?\xa1\xbd\xf8\x05w\xb4\xb5\xbf\xbc\x9c4\xb6\xa3x\xc5?\xaa\xc5\xb2\xd6`\xf8\xb5?\x12b\xc9\x87I\xeaH?\x9ap\xb0\x87\x0f\x0f\xc4\xbf\x1f_\x92i\x8a(\xcf\xbf\xedn\x02\xfa\x1fJ\xc2\xbf\x0e\xcc\x81\xb4\xeeG\xda\xbfiR\n\x0e\xde*\xb5?\xdf!\x95\x88)&\xc7\xbfW\xdaE\xe9V\xf8\xca?L\x00*\xd2&C\xbc?`\xb5\x08;\xc9\xc4}?\x1fw\xa7z\xd1L\x94?\xe6\x15-#\xa3#w\xbf\x98\xa3\x94\xeb\xb2\xbe\xcb\xbf\x80)\xf1\xde\x80\x02\xc2\xbf\xe9\x8181/\x94\xa9\xbf2\xc7\x8bX\x1f>\xce\xbf\xff\x10P\xca\xd7y\x8a?9g\x8a\xc1w\x98\xd0\xbfL\x1a\xa8\xd9\x8b\xcb\xc5\xbf\x17\xebf\xa4\xe7\xac\xc1\xbf 7\xf9\x14\xc3`\xba?\x0e_\x7f\x9e\x9b\xcap\xbf\x96xu\x93\xa9\xe4\xbf\xbf\xf8\xdc\xbf\x18}\x1c\xbd?\xec\xa3"\xf3(\xf7\x81\xbfP\xf5\xa8\x96\xe3h\x8d?i\xee\xb9+\x891\xa6?\x87\x92\x07F\xf6\t\x93?A\xde\xfb\'\x1fX\xa4\xbf:\x94\xc7n\xb5=\xcd\xbf2\x17W=\xc4\xb6\xa2\xbf\xfa\xfe\x95\xd2\n\x13\xb2\xbf\x02Y\xaf\n \xda\xbc\xbf\xf4Y\xd6#\x88t\xb0\xbf\xdc+EF?!\xd0\xbf\x14\xfe\x05\xfc\x03\xee\xb1\xbf\xfb\xd3P\xae\xb22\xb3?\xa4d\x84\xb5\x9e\xe3\x95?\x1d\x810\xf9\x12\x9c\xa2?\xaf8\x19\xde-\x05\xba?\xf2\x1a\x13k\x9eh\xad?\xb6\x16t\xe5\x9b\xd7i\xbf\n\x14E\x05X\xd0\x9a\xbfQ\x81)\xd5\x9c\xb2\xbb?\xf0\x17vh\x92\x1e\xb3\xbf\xd7\xe8\xde]\xa3\xd2\xc2?\xb0\xbf\xe1\x16\x8a$\xa3\xbf\xf6p\x0c\xd4\xbd.\xbb\xbf\x87&\xf1\xf6\xe4\x88\xa2\xbfjl\xa1\x98F\x92\xb1\xbfT\x14\xfa\x18\xc3\xad\xad\xbf\xb1\x106_\x03\xd9\xbf?R\x15\xb4M\xe8\xca\xba\xbfu\x08ETw#\xb9\xbf\x90\xb7\xe2\xb0\x1b\x9a\xc4\xbf\xc2\xe8=\x7f#\xd2\xbd?\xde\xcf\xb2\xbbxr\xbb\xbff!\xa3\x1e\xb0Y\x85?\xee\x8b\x91\xd4\xe58\x83?)\x1f&7\x94\xf1\xc5\xbfc\x05w\x03A\xc3\xa3?vp\xfa\xdc\xd0\xf1\x89\xbfd\xd4m\x98\x0cy\xcf\xbf\x9c\xce\xceCcC\xc5\xbf0\x140_\xbb\xbc\xb1?\xf8\xff\xf5\xac\x15\xe7\xb0?\xfb6\x14OQ\xcb\xa4?\xa0\x08\xd2c-\xd4\xbc?\x1e\x1e\x93\x02\xcb\x0c\xc0\xbf\xd8\xd7c{ 0\x8a?\xedx]\xaej\x7f\xca?\xa0#\xb2\x84\xf2b\xc4\xbf\xf0\xe3\xdd7\n\xbf\xa6?\xa8\xaf;\xb0\xc46\x88\xbf\xfc\x1b\xa9\xf7\xcd\r\xb0?\xda\xcd\x96\xc2\x8e\x1c\xc0?\x1d(\xe3\'\x81k\xb8?}\x08\x840\xa7\xbf\xba?\xe4x\xa9\x82\x89+\xcd?\xe6\x15\x1eEz%{\xbf\xba\xb6\xce\xa8\xfd{\xac?\xfe\xd9\xf2\xa8jA\xa1\xbf^\x06s\xf5)\xd7\xbf\xbfr\xf3\x908+\xc0\xbd?t3\x96\xa6yb\xc6?\xeb\xa3\xfa\xebCX\xa8\xbf\xfee\x8b\xcck\\\xd4\xbfj<<\xf0\xc4v\xc5\xbf\xc6\xf8\x05\xc1P\xd7\xa3\xbf\x1ck\x8c\xbe\xe5\xb7\xc3?\x85\xeaQ\x96\x1eY\xb3\xbf\xb2\xdb\x86x\x14r\xc1?N,k\x02\x12%p\xbfjP\xf0\x8fk\xdd\xc2?\xe9\xe6\x1cS\x8c \x85\xbf\xf1\xa3\x86\xb4\x1d\xe7\xd1\xbf\xb8\x83?"\x99\xe0\xbb\xbfrG\xc4\t\xdd1\x8b\xbf\x01\xc1F\x7f\x15a\xa9?\n\x87"\xa9\x01\x8a\xae?4\xcb\x91\x01\x08K\x87\xbf\x03O\xe9{\xf5\xc2\xce\xbf\xf8\x84#\xfc\xf4U\x86?\xc7\xf6\xd9Y\xfb\xe2\xb1?\xd6\x8d\xfdZ^u\xa6?\x8a\x14\x82\x1a\xed\xd9\xc4?\x93\x8b{\x10E\x8d\xb0\xbfQ\x18\xcf\xda\x1c\\\xbc\xbf\x12\\\xbd\x8d;\x16\xad\xbf\x14\xb7\x11>`q\xc5\xbf\xe18\xca\x8bqp\xc1?\xd3\xcfX\x10\x96,\x85?cz\xca\x08\x9d\xc0\x9d\xbf\x80\xaa~<p\xa7\xc6\xbfH\x19o\xb8 \xaf\xb6\xbf\x87^]\xfdcs\x94\xbf\x08\x1c\xa4\xf5\x9f\x1b\xd7?\xd1\xec\x88o\x9e\xe4\xbb?\xa7\xcd\xf2;|\x88\x90\xbf\x982\xdb\xdd\xf5\xd6\'\xbfu\xcej\xcf\x9b\xa2\x9c?\xed\x94\xbc\x0bKq\xbb\xbf\xe0\xcfJ\x15\xa5\x8bu?\xe1\xe1\xdd\xec\x13u\xb9\xbf\x86\x1c\x8f\x10\xa4h\xcb\xbf\xb0\xb6\xa5XGi\xcb\xbf\xabA\xb5\xc3\x90\xbd\x8f?\n\xbe\xc58\xe8{\x95\xbf\xbc\xdcm\x055:\xa8\xbf\xd6&\xb6\xb7P\x03\xb6?\xd9\xdag\xb3uV\xd4?\xa0\xe7\xea\xd87_\xa3\xbf;J7\xcf.\n\xc6?\xeaZ\xdb0\n\xc3\x97\xbf\xe3y\xc3\x0eJs\xb1?C-\x8e\x1c\xe8\x1d\xc4\xbf\x10e\x15^\xe4\x98\x9d\xbf\x85\xce\x93\x13\xfd\x0f\xc9\xbf\xaf\xb8\x0f\xae\x02G\xc5?\xe2@\x83o\x8e9\xcb\xbf\x1d\x02\x91\xa68\xc7\x8c\xbf\xb1\x92\x84\xee\xa2d\xc7?3g\xbb\xeb\x11\xad\xd5?S\xdd\xa7\x96\xef~\xcb?k\xe1!\x89\x969\xbb\xbf\xfc3J\x89A_\xb4?\xdeQ\x0c\xc1\xd7{v\xbf\xa2\x00yk\xaf!\x91\xbf&Ehm\xd4\x15\xb2?%\x9f\xfd\xa1\xd8#\xb2\xbf\xa4#\xfd)\xa8\x9c\xd2?\x15\xe6\x16 \xa9:\xc2?)\xf3\xdc\x027\xff\xc7?L\xf6t\xba\x18\xe4\x90?#PUG\xa1;\x8a?\xbdD\xe2\xa8\xc2ge\xbfc\x84\x05]\x0e\x04\x91\xbf/\x94["\x17}\x97\xbf\xc9@&v\xb4\x9a\x87\xbf85\xed\xca\x05\xeb\x98\xbf\xb5~\xdc\xef?]\xc2?\x82\x1d!Yy\xb3\xc1\xbf\xa6-\x17\x85\x90\x16\xc8?\x8fD\xce!\t|\xc4\xbf\x030\xa9\xe9\x1d\x0b\xb7\xbf\xe9\'\x18\x8d\xb4Y\xc0?\x7f\xeeSJt\xc5\xac?\x07!\x90\x03\xa03\xc2?\xfbC\x0b\\,\xa0\xcb?\x92_W}U0\xab?\x19\x92\x14\xba\xb3\xa9\xbe?\x87\x86\xe0O\xf6\xb2\xb0\xbf\x15\xf9<\xc5\xfd\'v\xbf\xba\xca\x85\x96?%\xc0\xbf\x05?\xcf\x8e\x9f~\xc0?\x8a\x83~\x0bsX\xbc?\x96\x8e\xdd\xef\x9a8\xc6\xbf\xcdt<\xc0\xeb\x88\x97?\xfa\\O\xabs\xa3\xb1?\xbfi\r\x973a\xbe?$d\xe9\x92\xc3\xd1\x94\xbf\x19\xf6\xab\xfew\x0f\xb4?}\x8d\xd3\xb4\xe7l\xc4?\x8a\x80\xc8k\xa9%\x94\xbfV\x87\xa9\x8dB\x94\xc3\xbf\xe3\x8d\xec\xc3\xc9\x80\xc3\xbf\xfdZ\nE*Y\xb6\xbf\x89\xebI\xa2\xb0;\xbb?z\xfb\xbb\x1e\xf7\xf7\xc6\xbfb\x0c4d\xbdy\xc4?U\x93\xba\xb9\x8f\x96\xa5\xbf2\xece\xebK\x85m?\xc7:+\xfd>\xd8\xcd?A\xdb\x94x&?\xa5?\xc6\xdb\x93&|l\xac\xbf\xbe\xf6\x00|\xaa\'\x9c\xbf_\xb8\x10\x7fR\x9a\xb1\xbf]\xdfr\x8f]\x81\xa5\xbf%\xe2\x0el\xed\x17\xc4\xbf\xdb_u\xaaP\xaa\xbf?\xf3\xf2\x83P\xec\x80\xab\xbf\xdb@\xe9\xd9w\xaa\xaa?q\xa17\x16QO\xab\xbf\x85\xe4\xdeW\x06\x1f\xbb\xbf@\x14\xe7\xcbeV\xdb?Ohb\r\r\xf7\xc7\xbfy\xa8\xc3m\xb6\x91\xbd\xbf\xe3\xdd~\xec]\xae\xb1?\x94\x1b\x81\xadF5\xc7\xbf\xa1\xf2\x1b\xe4E\xb8\xc9?\xa9rJ\xee\x82\x9b\xb5\xbfP\x96\xe6\xd6(\x07\xca?C\xb0\xc0\xfc\xban\x87?`\xbbb\x00\xa6\x9f\x8b\xbf\x12\x85\xc1\xbc\x03.\x92?\xed\xeb\x95n\xd4\xc8\xb2\xbfl\xc3<\xdb:\xf1\xb0?\x7ffQ\x06\xbc\xc9\xd0?d\x86\x0c%/zX\xbf\xd18\xe1\x81=x\xb5?\x0eg\x9dQc\xac\xa1\xbf\x90Ep56k\xde\xbf5\xc6\xe5\xe4!\x11\xa4\xbf\xeb|G\xb8i\x92\xa4?\xeb\xcap\xa8L\xed\xc9?Tjq\x1b\x97x\xb3?\xaf\x0c\xbe\xcfK\x1c\xb4?\xe1\x9f\xac\xcaxI\xba?\xac\xbd\xc3]\xa1e\xb3\xbfR>\x04\xeaN\x86\xb7\xbf\x98\xefuR\xdc"\x95?\x88\xf3#jF\xb2\x97?\xba;\x8d\'\x83\xdf\xd7\xbf\xb64\x9e\xdf8\xb9\xc5\xbfBm&\x1c\xb8\x00\xb5\xbf\x84\xd4\xfc\x91\x10\x89\xd1\xbf\xbd*\xaa\x840\xc5\xcc\xbf\xea\xc7bB)\xbet\xbf\x87\x01qL\xa5l\xc0?\xc1\xb2\xfd\x1d?\xc2\xc9?\xea2\xa4+Q\xca\xca?\n\x17\x80\xebJ\xd2\xae?\xd2\xa7\x94\xed\xfe\x9f\x90?\x1a\xd5\x91<O\xed\xc1?,\x1e@\xa1h@\xb6\xbfA\xced\xaeD\xd2\xbf\xbf\xea\x0e\x97\x18\n\xe6\xaf?cT:og^\xca?\x16\x9e\xcdh\x0b\xd5\xc8?\xc9\xf4\x1fgC\x97\xc6\xbfq\xac\x8c/\xdb\xca\xc5?\r\x98-\x8cb\x9b\xa4?9\xd1t\xb6\x90\rY?\x93\x10/\xb7&E\x90?\x8f\x9bJK\x07\xaa\xa2\xbfax\x97\x19h\xef\xd1?\xa8\xcb\'\xd6\xbb\x00\xb1\xbfq7\x89 \x8f\xcf\xb8\xbf\xad\xe7\x96B<_\xd9\xbf\xc7\x08\x9am\xe0\x91\xb6?\xba\xb9\xcd\x17\x92\x1a\xa8\xbf\x96\xebd\x93\xbdy\xbd?5\x95\xf5\x8f\xe2a\xcf\xbf\x01\xe9\xd2/,\x03\xb8\xbf{\xab\xb4\xcd\x17\xce\xce?\xdb\\\xaaC\xd9\xaep?\x9a\xfb\xe6\xa3l.\xca\xbf\x0cQ\x9cbi\xea\xcc?\x07S\xf2R\xc1\x97\x7f?\xba\xd8\xd6d\xea\xe9\xcc?\xfe\xe4\xf1u\x0b\t\x89\xbf\xf2\xebl\xd7l\xe2\xac?\xb5e\xaf\x88\xd9\x1a\x90\xbfU%{&\xf4\xfe\xc7?\xd3u>\xa6\xd3\xf1\xb2\xbf\x81\xc2\x94C;6\xd1?\x9b,t1W\x1e\xbb\xbf\xc2\x9d,)\xf2Q\xc0\xbf\xc7\xd4\xb5\x87\t\xfc\xc7\xbf\xeb\xe6\xb4\n{\xe2\x94\xbf%\x95\xc3\xf3I\xd1\xc7?\xff\xdftq\x8f$|?\xb9.\xeb\xb1;\x7f\xdf?\x14\xff\xd5\xdcJ\xab\x81?\xa1\xee.\rM\xde\xb7\xbf\xc1\xbe$\xf6\x13\xb5\x89\xbf+\xc0\x0eW\x0b\x90\x7f\xbfb\xc9\xd4\xfd\xa26\x9f\xbf\xef\xc1\x01|\xb1\xb6\xd1\xbf\x9fqE\xa7\xf3\xd9\xc1?\x0e\xd5\xfc;\x91H\xba\xbf/\x91x:\xda\xd6\xc3\xbf\x132\xed\x19n\xb9\xc6\xbfW\x0b\xe2\'\xb5\xb6\xa5?\xebt\xaf\x05\xd9\xf8\xb0\xbf\xe0\x07\xf4,t{s?\tAq!\x9a\xc8\xc4\xbf\x04;%\x97n\xbd\xc1?\x15\xbb\xfff\xcdy\xb2?\xb5o\xd5DRP\x98\xbf\x1c\xa6\xac8\xdcP~?]\xc8\xe4M\x1d\xe5\xb9?3\xf6\xd7\x00\n\xdd\xc6?\xe5$\xd5"\xb7\xda\x97?\x9a\xfd\xacP\x12\xb1\xb9?\x02zu\xf8\xc4\x01\xaf\xbf\xee\xd6\xabh-E\x91?<"\x13\x1b\x13I\xc3?j\xff\xbcLB\xde\xb6? 0\t\x0e\x82IZ?S@\x8eCe\xc1\xbf\xbf\x12\xfe\x92nU\xd8\xbd\xbf\x04\xf4D1B\x82\xc5\xbf\x96+\x01\x9e\xbf\xa4\xb7\xbf`_\x9fc\xe7\xc1\xae\xbf\x80@\x95\x88\xf0\xb1\xd0\xbf\xe1\x05W\\\xe2K\xa3\xbf\x827M\x8c\xc9\x82\xc0\xbf\xe5d\xb1\x80^V\x9a?\x94\x9fg\xb5O\x1b\xb0?\x83\xc1<\xf1\xc8\x1c\xbc?O\xfb\x1d\xd1y\xca\xb1?\x96\xe4"\xcb\xf7\xc2\x97?O\xbd\xc7\xc9\xb0\xa5\x97?B\xfe }**\xb2?.Z\x07[Kk\xc5?\xa5\xd8\xa1p\xcd\xc4\xba?\xe0\x18\x9a6\xb7\xe2\x88?\xd3\x9ffP\xaf\x90\xd1\xbf\x9f\x80\x1b\xf2\xbb\x1c\xb6?y\xf9\x08\xf8\xa3[\xa5?\x8a\xa1\x0c\xbf#\xec\x90\xbf\xa3\x9d\xa7\xd6\xffx\xd5\xbf\x88\xd1\xce]\xb3\x06\xa0\xbf\xc9\xb9\xe3\xe9\x95\xf1\xcc?\xf3\x12Z\x84\xe6\xbb\xbe\xbf\xa3\xef^\xe78\x1dZ\xbf\xd7\xef\xc4\xf6\xec\xc1\xc2?\x98\x13\xb0\xdfw\x90\xb6\xbf\x19\x08\xcd\xe6p\x0b\xa3?\x860\x96-(\x8f\xc0\xbf\xb8\xc8\xdc\xd7\x97\xc7\xb5?\xbaJa\xbf\xfd\xf1\xc1?\xad\xea2\x9f\xd9\x15\xa4?\x93\x84\xa9\x9a6\xd5\xc1\xbf\xf4}\xa6S\xd3\x07\x99\xbf\xe1\xf3\xf1i\x1b;{\xbf\xc1\x8dd{\x04x\xc7\xbfBs\x8a{j\xe8\xc3\xbfQ\xeb\xfc*\xe4\x02\xba?WY4N+Y\xc1\xbf\xeb\xecP\xcc\xc6\n\xbf\xbf\xd4\x14\x06@\xd6\xb7t\xbfXq\xdc\xec\xe9A\x89\xbf\xb8)0\xac\'a\x88\xbf\x89\x88r\xb5c\xbb\x9f?"\x02h\xc4\x84\xe1\xcf\xbf\x88\xbf\x9d\xd6 E\x9c?\xe5\x89\xc2[\x12\xfb\xd0\xbf0\x17\xf3\x90\x88\xce\xb7?SB\r\x9dE?\xc7\xbf\xb3A\xc2\xbd\t\xd5\xca?\xda\xab\xc1#\xab\xeb\xb6?\xe3\x9dZ{Z}M\xbf@ .\x17\xf1\xb5t?\xf8\xc7\'&\x9f\x9b\xb2?\xa8.\xf3e\x91\xa2\xb2?\x95\xcf\x8e%\x0f!\xc2?[8cr\xcf\x14\xc3?\xf3\xc8\xd3p\xb0\x92\xc2\xbf\xde{\xeb\xd8\x1c\x1fZ\xbf<\x8e\x16\xaa?\xf8a?\xe3>7\x0b\x17\xf8\xa8?6\x1c\x94>\x1dT\xb6?\x06\xeeS\xdd\xed@\xa4\xbf.\x0b/lk\x98\x98\xbfQc\xd3\x99\t\x15\xb5\xbf\xe4$z\x0b%N\xba?\t\xb3\x91;\xcak\xcf\xbf\x04Pny\xb9\xd8\xb1?e2B\xa0\xd1\x0f\xb7\xbf\xf3Q\xaa-5\x1d\xb7?\x02\xc5\x1b\xfa\xb7\x98\xa0\xbfcM\x18\x1f`\xff\xc8\xbfDFGA\x1b\xad\x9c\xbf\xdb9\xbcp\x0c\xec\xcb\xbf&\x1c\xa4\xa6H\xbd\xc0?\xe3"\xc9\x12}$\xb4?\xb5G\xe5\x9e\xe9\xf5\xbf?\xec\x8a\xbb.uI\xa3?\x8e\x07\xf6bd\xf0\xa7\xbf\xd1\x98FP>T\xc8?-\x08\xcf\xc10c\xb5\xbfX\x1f\x82\x19\xdf%\xcc?jz\x10*\xc61\xcb\xbf\xd9S\x1d\x02\xd1\n\xb8\xbf\xe1\x08\xf9\xa8\xdcY\xc1\xbfv\x01KW\xd6\xaa\xa1\xbf\xaeT\'\x14%\xea\xdb\xbf\xc4\x8b\xe2\x9b\x00V\x94?h\x04@\xae\xfe\xdc\xd2\xbf\xfe\x11\xe3\x1f\x86\x98\xc9\xbf\xbd\x987\xe7Zp\xc2\xbf\x12\xc0+\xb2O\xe6q?/:\xd2\xecYU\xad?+:\x9b\x91+P\xc0\xbfi\x181\xed\x82\xc3\xc0?\xea\xae\xf1O\xdd\xa3\xd2\xbfKjq\x8f\xa9l\x97?\xd8\xb0\xdcr\xe6\x02\xb1?\x1f$d\xe2\x82\x8b\xbe\xbf]\x94\xa9D\x8f3\xb2?\\l\x8f8\x18R\xbd?2\xc6\xa0\x8bQ\xad\xc3?\xfc\xfb\x08\xe2\x82\xa0\xa9\xbf\xad\xec\xf4\x0e\xcf\'\xd2\xbf\xc7\x1a\xb9\xd3\xf9$\xc2?bTA\xd5\xfff\xc7?\n\n\xb6\xf5\x94\xc5\xce\xbf\xb7jpd\xbc\x9e\xb9?\x88\xf6\xbf\xca\xd5\x84\x93?\x06\x15\x80\x08)\xe5\x9c\xbf\xc2\xdd\xba\xb1Y?\xbb\xbf\x84\xf1\xad\x02\xb3\x01\xc9\xbf\xb4\x9cv\xfe5\xc4\xaa?\xa4^\xeb\xbb"\x1f\xb9?,\x89\xbf\xb1\x02\xb4\xd5?\x1f\xdfNx\xc7\xc8\xd0?\xfcZ^5;\xec\xd5?\xf0\xc0u\x1e\xa7\xf1\xc0\xbf\x9c\x05\x93\xe0\xab\xa6\xb7\xbf\xa5-f\xf6\xac\xcc\xd0\xbf\xdb\x82\xdad\xbe2\xc2\xbf<\xd8eR\xd7t\xdb\xbf\x19\x1f5\xa8 H\xc3?c\x0e\xaa\xa1"-\xc2\xbfa\xb2_nB\xc6\xcb\xbf\x96\xd0m6\xe5\x05\xc2?\xad\xc9y\x98\xd1\xf7\xa1\xbffw0n}3\xc2\xbfo\xd3L2\x88Y\xc1\xbf\xab3\xad\xb4\xd1\xb9\xd1\xbf\x93\x87\xc0j\xbd\xe6\xd0\xbfT\xa9\xd9W4\xa7\xae\xbf\xcf2\x8b\x16\xa0\x0e\xd2\xbf0\xfdv\x1e\xb2\xc1\xcb\xbf\x853?\x1c\np\xc8?u\x87[Z\xf5\xe7\xc6?0\xcd\x99\x9fC\xb5\xa7\xbf \x04<\xf1\xa5\x1d\xc9\xbf\xd3\xa59$\x9a\xd7\xc2\xbf7\xab\x95h\xd5\xca\xa3?\xe1\xf2p\xa6\xafz\xb6?y\xcb!\x13\n\xaa\xc3?\x8d\xc3\xce\x86\x83\xa5\xd0?`=\xb2y\x08\xb4\xcd\xbf\xbc\x9f\xf2F\x08\x12\xb4?\xcfb\x1d\xcfUu\xca\xbf{\xf4\xceu~:\xb1\xbf\xef\xc9\xe2u\xbe\x10\xc9?RL\x1b?\\\xfc\xb2\xbfn=\xc5V\x91\xb6\xc3\xbfM\x90"\xde\xd0\xd3\xc3?_\xfd<\x1eh{\xd2\xbf\rU?\xc2\x8f\xbb\xcc\xbf\xfa\xdf_a\xa6S\xca\xbf\\\xed\xc6K\x1d\xc5\xcb\xbf\xb9\xf2,xE\xc0\x94?\xa41\x7fCN:\xb9\xbf\x18\x04\xb8B\xe6\x05\xc0?\x9e$\x9b\xf6y\xd6\xa6\xbf\x1fe\x8c\xa6u>\xbd?\x8b\x9c\x8f)@y\x9b\xbf\xd5\x91B:\x873\xd5?)\xab\xc64TU\xbe\xbf\x17\xc1\xec\xa6\xd4\xc1\xa6\xbf\xe6\x13T\xd3If\xaa?Y>\x91\xc5Y\xad\xd0\xbf\xf6\x17>\xf5\xe3;\x8d?\xeb-\xeb\xc6#C\x86\xbfP\x93\x9b\xb3L}\xc1\xbf@g#\xdbD\x00\xa5\xbf\x90\x1fo\xd7\xd9\xb0\xc6?Z\x03\x7f\xdf\x0b\xb3\xc7\xbf\x834\xf9\xda\xe9\xe0\x85\xbf0\xcfL\xd6\x0b\xf5\xd3\xbf[\x8f6M\x1c\xf2\xc5\xbfyfH\xe4\xe9\x15\xb0??\x9b\xfb\x12\x9f\x05\xbe?3L/b\xf9\xa2\xbb\xbf\x8d\x02\x17\xebT\xb3\xcc\xbfe\xa5$\xd9\xe5\x9c\xc5\xbf4\xe2x\x1e\x8c1\xd5\xbf\xfab\xe8X\xc7\x82\xce\xbf~\x87\xeb\x99\xfbt\xb5\xbf\xafz\xca\xdaX2w?\xd6\x0e=\x96\xfeN\xc6?h\xe6\xf7;\xcf&\xdf\xbf\xbdX\xf7\x0c#$\xd3\xbf\xebZh)\x04\xcc\xbd\xbf\xb9\x86$a3V\xb9\xbf\ts8\xba\xbb\xb7\xbe\xbf\xfd\xcb\x1d\xec\x87\x16\xcb\xbfQ\xa3\xccX\xb0\xbbm?\x0b\x121S)\x7f\xc1\xbf\xa6~\x9e\x83%s\xa8?\xe0\x86\x9d<PZ\xc0\xbf\xe3\x8f6\xe6\x11\xd5\xb6\xbfi\xa1\xd9\x93\xc8z\xc5\xbfF\x9a\xf4\x06d\x15\xb3?\x1d\xe8\xb0K\xff)\xcc?\x95\xe3\xdc\x9f\xb7\xc5\xa3\xbfW\x8e)!\xb4\x02\xcb\xbfHH\xb7A\xa4\x0f1?*w\x823*v\xd2\xbfw\x1f\x03\x08\xff\xd7\xe0\xbf\xe9\xafX\xf3\xd6\xff\xae\xbf\xf3[\x9cf\xb1\xb8\xb3?\xc1\x0b\r2wW\xe2?\xcc\xd9:KX3\xaf?\x91\xfa\xea!\x94\x07\x90?\xcav"\xe0G#\xb1\xbf]-Ah*\xd7\xb4?(\xcd\x18\xbb\xff\x83\x9b?\xc0\xe7`\xf7\xf6\xf4\xd4\xbf\xd8\xcf\xeb\x014\x9a\xc1\xbf7\x98\xcd#\x92\xb4\xc2\xbfw\xf1\x01"\xaeS\xb2\xbf0\x1b\xa5\xe9\xfb}\xc7?\xb1\xe7$\x88\x16\xee\xb9?%\xc7\xdc\xba\xa9\xb0\xd0\xbf\xf6~\xb8\n\xc23\xcb?/B\x05\x04\xb1\x8c\xc3?\xfc\xfc>\x9c/,\xb5\xbf\xf6\x01f}\xdd+\xc8?\x00\xca\xb4\xea:I\xde?\xd1V\xd0\xdb\xf1\x06\xcc\xbf+\xa7\xc0\xc1\x8c{\xb2?&\x02\x99\x1d\xb47\xc6?\x93\xa5\x16\xb5[\\\xc5\xbf\x86;R\x08\x99\xde\xa7?\xbe\x89\xb0\x87)\x00P\xbf`\xbc\xa7\xbf\xe9\xb4\xbc?\xa1\x95W\x9d(\r\xce?\x05\x1dY=\xe9 \xc8?\x93\xc7Y\x9fBc\xea?\xb4\xd8\xb6\xfe\xdaW\xb9\xbf\xf3\xd7\xef\xa0Jx\xca?\xf3\xa9\xd7\xb14\x0c\xce?\x83\xa8\x89\xc0\x9b\x96\xb2?\xb7\xc7\xf0\xdf{\xf4\xad\xbf\xeb1\xe6\xa6g%\xc4\xbf\xb2.\xdd\x85,\x15\xc4?\xf8\xff$;xf\xd0?\xd1\xc9H,\xd7(\x9c?\x18\x0e\x8b\xc4\xc2S\xbb? \xf7\xa0\n\xa3\xe9\xc1\xbfY#+h\x13\xb3\xc3?d\xf2\xd8\xbd\xd5\xd3\xbb\xbf\x98B\x00yW[\xc3?\xa5\xbdh\x9dP%\xc8?\xca\xc1\xc8\xc1\xf3\x12\xc1\xbf\xab3(~c\xa4\xc9\xbf\xbf\x18\xd2a\xdcW\xc9\xbfq\xda2\xd0(\xc8\xa4?\xee\x89\x1d\x10<<\xaf\xbf\xd0\x83\xdcsa\xaa\xb1\xbf\xc8*\xca\xe87C\xb1?<\x98\x9f\xf9\xd8m\xd1\xbfX`\xbdn\xdb\x83\xd0?\x13\xeb\x83\xb3\xd7\xf4\xb9?H\xb7\xfd\x8b\xd9\xa5\xe4?\xc8\xd5CW\xd5&\xa9?k\xeeNIJ\x00\xda\xbf\xca\xb7\xb4\xca]\xca\xa3?\xbe.\x0c\xc4\x97\x93\xc0\xbf5\x18\xdb\x1b\xc0\x11\xc1\xbfx\xad\xa2a\xc0\x08\xcf?C\xf1=\xbb\x88U\xd1\xbfU\xbdw\x10\xa1L\xb0?*\xe3\x9e\xb8\x15\\\xb5\xbf\xa1\xd9\xe9LL(\xeb?\xba\xa1Q\xa7`\xd1\xa9?VU@\xbe\xca#\xc4\xbfe\x0b\xde\x01*\x0e\xd9\xbf\n\x8b@\x81\xea\x1b\xc4\xbf\xd9\\\xe9\x8d\xc4l\xab\xbf\x84\xd2\xcbI\xba\x0e\xc1?\x01\xfb/J\xf51t?\xcb\x02Y\x16\x8b\xe5\xcf?\n\xb9\x93\xf9\x9a\xf6\xc5\xbf\xbe\x94\xe0\x1c\x00\x16\xd1?\xb2\xf4\xa8\xd3\xa2\xf8\xd2\xbf\x99\xa8\x16x#u\xc6\xbf\xbf\x01\xc0\x99\xa8\x1e\xdb?`\x7f\x1fj\xaa\'\xa2?\x0e\xff+Bb.\xb3\xbf\xab\x8aP$\xb9h\xd0?\xb5}\xc9\xe4\xa4f\xc8?\xd2\xec\x17\xa6S\x1b\xc4?\x06\xa4\xd4\x7f\xc9\xce\xb6\xbf\xf8\xb3\x82)\xb6\x92\xb9?\x1b\xbe\x00\x10k9\xb1?\x9dM\x80m^xu?\xbf\xd3y:\xef\x16\xc1?\xfd\xce`*4\xc9\xc2\xbf\'\x12|\x96\x0c\xd2\xbb?/\xe754Wd\xc7?\xa4\t\x08\xab\x93\xf5\xc0\xbf\xbc%\xaf~fM\xb2?\xe5\x85%\x99i\xeb\xd0?=\xfff\x90\x89\x96\xdf?\xea\xc5\x15cOT\xd2\xbf\xf8\x92\xee\xbc\x05\x08\xd2?\x95\xa6\x88Q\xb0\xad\xd4?\x05g -e\x18\xc3\xbfS\x0fJz\xdc\x8b\xbc?\xa9g9\x1e\xaa\x9d\xcd??\xa5!\xc3PC\xda?\xcc\xd2\xefs\x8f\xfe\xa8?m0\x8c\xf5\x1b;\xa3\xbf\x7f\x94\x18\x04k\xce\xc2\xbf\xd3\x95d\xb5\x81\x9a\xd1\xbf\xf0\xfb\xffD|D\xd7?\xe3j\xf4\xa3\xf1\xc7\x97?XYLk\xfc3\x82?\xfak\x18\xbe\x18\xb9\xb1?4\x98\x9f\xca\xe0\x1f\xd6?\x1e,\xbdQ\x13/\xd1?\xd30\x00\xd1r\xc6\xa5\xbf\xbaF\xd7j2\x0b\x97\xbf\xda\xb9\xfeYb\\\xb6?\xa5\xb0\x19\xe4\x05%\xb0?\r\x8e`\xec0\xd1\xed?\x9e\x8c\x02\xfd\x83|\xc0\xbf\xf2\xb8\x9e9\x0e[\xbe\xbf@:\xdb\xb1\x90o\xb7\xbf\r\x1e\xb7\xb0\xcfp\xc8\xbfj\x19?\xdc\x1f\x05\xc6\xbf\xde\xe2\xfbbv\xde\xbd?\t\x06\xc3\'S3\xcf?\x05\x84gj\x16(\xc9?l\x08\xfeN\xb6\xdf\xc2?\xc8\x99t\n\x9d\xfc\x95?\x90\x19\x80pD\x1e\xc2?\xdbn<K\xdb0\xc5?\xc4\xe6\xfa\xb3Y\x89\xcb\xbf\xc9\xcf\xbd\x8esA\xb5\xbfs\x88\xa6\x85&E\xa4\xbfv\xf2\xcc\xd8\x10\xea\xb2?\x9ba\xae\x9dB\xd1\xe2\xbf[H\x8a\x1c\x03o\xbc?\xbeY=L\xc4S\xd2\xbf\xb0\xf2l!Y\xb3\xda?]|\xe4\xb6S\xfc\xd0?jL\x03\xf5\x8dp\xc2?\x8bW\x9d\xeeA\xd6\xb1?\xa5Z\xec.\xa3\x95\xd2?\xa6\xaa\x08\x0cbm\xa2\xbf9wA\x1efO\xcf\xbf\x92\xae\xc6\xe5\xda\xa5\xb9\xbf\x08\x00\x9f-F\x98\xd2\xbf\xaaW\xa4\xe6C\x18\xc0?\xcfd\\+\xa2\xa1\xa0?\x16\xa4\xb6\xc1\xd8\x80\xca?\x8bW\xe5$.C\xc2\xbf\xc7\xa9G\xad\x04\xb1\xad\xbf\xd5?2\x12;)\xb3\xbf+\xbc\x89\xce\x85|\x9a\xbf%\xd3:=M\xf6\xe1?\x18)\xecs\xb8U\xa9\xbf\xb6\x9f\xb7\xedM\xdc\xc9?\xe1F5\xee\xb81\xc7\xbf\x88GZ\xce7\xc0\xb9\xbf\x10\xd2l\xa5[^\xc0\xbf\x9a\x1c5\x05P\x06\xb7?9C]\xc5y&\xc9\xbf\x89\x0c\xca\x8c\xa5\x95\xcc\xbf~\xd6\xae\r\xb1\xef\xc4\xbf\xbdk\xce\tC;a\xbf\xd4=\x8f\x9bs\xe7\xb5?\xbe\x82\xd6\\\x95\x08\xc3\xbf\xd1\xb0\xe9\x94\xb0\x06\xb9\xbf\xbbG\xb0\xe1}i\xd4?\x7f\x8el\xde\xe3u\xd0?\x9d\xcd\x04\xe7\x05\xba\xc1?\x99N\x92\x11F\xa4\xc4?\x14J\xc8\x91\x1c\xe8\xdd\xbf\x85\x99]\x05\xee\xba\xb2\xbf\xb7\xee\xac\xab\xb2n\xce\xbf\x1d\xdc\x85=v\xd1\xc0\xbfex\xc6\xa2\xe5I\xc5?\xfd\xa3_\xea\xf4)\xc6\xbf\x8b\x06B\xb1T?\xbe?\xb6\xfev\xad\x1c6\xca\xbf\xfdP\x11\x82.o\xb4\xbf\x14x7Z?\x04\xc2?\n(\x8b1\nJ\xc2\xbf\x18A\x054\x1e\x86\xd3?\x1d\xd8S\xc00\r\xc3?\xaa\xf0\x04/q\x1a\xb0?_\xd0v2\xe8\xf1\xa7\xbf\xe1\x95l4\xf6\xb5\xaa?\x91u\xcd\x1e\xd9#\xc3\xbf\xaa\xe3\x93\xfe\x0c?\xe0?\xab\xc8\x0e\x1c\xe7\x02\xc5\xbf\xa3b|\xa9BA\xd4?I\xf0\xdc\x02\x0f\x9e\xd6\xbf\xe8o\t:\xb6(\xc6?\xe4,\xd9\xf7x\x90\xb8?\xed6\xff\xd9\xae\xaf\xd9?r\xb0taj\xc6\xe4?7+\x8aj\x8d\xc9\xe4?\x8f?"8\xde%\xc1\xbf\xe2\x07\xde\xe9`\xf6\xd5\xbf@\x14-\xd3\xfcX\xa7?8U\xc2v\xaf\xc8\xcf?\x0f\xad\xf1L+\xd5\xbc\xbf\x8e\xc6\xed\xac\xc7a\x82\xbf\xb8\x7fyVX\xb8\xd0\xbf\xe1\x98\x02\x14$\xf0\xbe\xbf\x1c\xf4\xe6\xcfaO\xb7\xbf\xb9l\x82d\x02\x13\x92\xbf\xc1a\n\xccs\xa7\xa9\xbf\x17\xbc\xfaCN\x1e\xbf\xbfC7\xec\xb0\x17\xf5\xbd\xbf\xd5\x08)\xdfy[\xb1?\x94a\x1a\xa1\xfc&\xc6\xbf\xb5\xa9\xbbEk(\xa7?\xebQ;(\xd3\xd3\xda?|\x9cO\xc7@\xc2\xc2\xbf\x92\xb8\xfe\xa4\xf2\x00\xb4?\xeaw\xfe\xbc\'\xc2\xbe\xbfg]\x84\x0fA\xcf\xac?\x164d\xaf\x11\xf2\xca\xbf\x0b\x8e\x1e\x00r\x1d\xc4\xbf\x92\xfa\x9b\n\xd4e\xc3??\xc9P\x1fz\xf2\xd1?\x80\x0e/Z1\xb3\xd0?\xa1\xe9+\xd7\xfa\xb8\xc6\xbf\x04tH\xb3\xed\xb6\xde\xbfH_\\\x11\x18\xbe\xd6\xbf\xd8\xb6\xb2\xb3z\xe4\xc8?\xeb1\xff\xe8\x01\x8e\xa3?5\xc9\x16\xb0\xed\x02\xc8\xbf6\xd5H\x98\x15Q\xb1?\xc6\x15\xa5\xa8^\x82\xd5\xbf\x08sGK\xcd=\xa6\xbf\xef#\x1aX\x8c\x8c\xcd?\xb0-\xb8\x00\xd1\x17\x8a\xbf?\xc8\xc28\xaa\x16\xa0\xbf\xb5\x08|\'\xaf\xd4\xb6\xbf\xf4\x80]\xd0\xc7\xf4\xc3?\xc8\xbe\xa8\xc7\xca\x12\xc6?\x19\xf6\x97\xf1/T\xb0?\x9c\xef\xb8\xac\xac\xb9\xd0\xbf\xa6V\xed\xeb\x82N\xc7?\x16x\xa3~\xd2|\xb2?\xc44|\xban\x8d\x8b?\xe0\xa3\x0ei%x\xb0\xbf%GM\xd4\x88;\x83\xbf4r\x97\x04\x8b\xc8\xdd\xbfN&\xda\x16\xdf\t\xd0\xbf\xea\x7fu\x15o\x8f\x93?>!\xd6n\xda+\xc7\xbf.\x82F\xd8\xd4\x00\xbb?\x02\xc3\x1f\xfe5%\xce\xbf\x17T\x9a\xc1\x9c\x80\xc0\xbf\xc9\xf1\x99\x93\x0f\xa0\xc5\xbf\xc5o\xaa\x01q`\xcc\xbf\x8e\x18\xd9m\x17\xba\x91?\x88b\x9f\x8b\xc9l\xc5\xbf\xbb\xd6\xaf\x80g\xf2\xc7?\xb5_\x92d\xea\x96\xda?F\xb3\xe9\x8b\xd9,\xcd?\x92FW\x00\x18\xbd\x9e\xbf\xa3\xe7\rH\xe2q\xc3?\xc102\xa6\x1bE\xc0\xbf\x12\x9b\xbf\xab\x00#\xb8\xbf\xeb\xcf\xd3E^\xf8\xc7\xbf\xa3\xab\xea\x98)\xc2y\xbf\xaa\xc3\x8bf\x85d\xce?!\x99<a\xd1I\xcf?\x11\xe6\x8d\x9dB\xa2\xc8\xbf4\xd4\xb5\xbcq%\xab\xbf\xd2\xaa\xb7\x89\xab\x0b\xda\xbfq\xbd\xaf\xbeMU\xd2\xbf\xe0\xe7\xcdD\xfb1\xd3\xbf\xf8Q\x15y\xd6\xdf\xc0?/.\x9dk\x8f.\xc6\xbf\n\xcf\xbc\\\xbe8\xab?E\xca\xee\xcdw\xaa\xb6\xbf\xca\xffWV\x87\xc7\xc8?"\xce\x02+\xee7\xd2?vC2\x11\xe0E\xd3\xbfq\xee\x05\xd7\x88\x02\xaa\xbf\xdaw\x15\r\xd9\x89\xc2\xbf6[+_\xf3x\xce\xbf\xc0}\xbf\x16\xe5[\xc1?\xff\xc8om\x8a(\xc6\xbf}\x10\xdf\xeb]\x83\xc4\xbf\xe4>\xdd^~\xf5\xbc\xbf\x93\xf9\xd6\xdd\xf9i\xce?\xfa_\xc1z\xef\x05\xb2\xbf\x11\t\x99\x1f\x8cm\xad?\xbc\xd0&\x93\xec\xc4\xa0?\x83\x94,\x0fd\x0f\x86?Z\x9d\xd6g\xdd\xf4\xc3\xbf\x1bQ\x17th0\xe0?\x0c\xd8\xe3\x0f\xec\x0e\xbf\xbf:qvN\xa7\x14\xc3?\xa9s\xab\x05 \xe9\xbd\xbf\xd2O\x1f\x87\xbf\x86\xb1?:z0\x1aZe\x99\xbf\x84\xab\xf41\xff\xf3\xbb\xbf\x90\x8fd\x1b\xd2\xca\xb6\xbf\xf1\xb8#X[L\xbd?\x13\xe2\x9f\xb8\xdd\xe2\xbf\xbf|\x01v\xfa\xd8o\xc2?1J"\xcc\xff8\xc1?4:\xda\xe1\x10\xe9\xba\xbf`\xa2\xdd\xbb\x15\x7f\xaf\xbf\xa4P\x1d\x98\xefC\xc7?Y\x83=\xf2"\xd1\xcf\xbfN``+\x9f\xb8\xbe?\x9du\xf5\x81\xf1x\xd1\xbfK\x8e\xb9&\x18/\x96?\x84\x0b\xac\xe4\xb8\x03\xdd\xbf\x01\xd8\x02\x01\xde\x05\xbf?\xa4\xf5L\xb5et\xd6\xbf\xca\xa9\xb2F\'\xf7\xc1\xbf.\xd9\xceTF\x85\xad\xbf\x84\xcb\x8e\xdc\xa7\xb7\xcd?\xdd\xd3V\xa3U\xf7\xca\xbfZ\xfboj\x15\x04\xd2\xbf\xc8p\xebU\xce\xc5\xd7?\x92\xaf\x17\n\x84\x05\xd6\xbfAf|\x0cF\x88\x85\xbfk\xdf\x1f\x15\xf2\x12\xda?\xfe\xc4[\xe7\xbb\x86\xd5\xbf\xf3M\xa3\x02y\xd5\xce\xbf\xc3\xd8\x05\xa4 ~\xcf?4\xb5 R\x96\x9a\xc6\xbfH\x1a^\xeeK\xf1\x90?\xb5\xe9\x14)\xcb\x1c\xc1?\x99\xfc\xe9\xcf\x16L\xb3?5\x10n\xb9r%\xca?i\xcf^I\x91\xb9\x8f?\xf6\xf2wc\xea[\xab\xbfT\xc3\xccC73\xbd?N\x9b\x14\xec\xa2n\xc7?af\xaa\xc1\x00\xbf\xb0?)\xb6\x8d\r\xf1\x05\xb9\xbf\xc7J\x88it!\xc2?\xd5qo\x92lK\xc2?\x07\x16g\xcf\xb5\xb4q?\x1fA\xdd\xbb\xb4\xdd\xcd\xbf8@\xbaHv\xcfo\xbf\xb9zad\xfc\x8c\x93?r\xdc\x10M\x0c\xbd\xb2\xbf\xe2\xe1\xb4\x81\x8d\xd5\xb2?\nc\x04\xff\x92\x96\xc4\xbf\x86V!\x95\x03\x92\xa0\xbfs\xff\xd4\xddW7\xbb?\x9b\xce\xc0iO2\xb0?\xa4\xfc=b#\xb2\xa7?\t77\xa0\xe3l\xba\xbf\xe0\x96\x9el\xe4n\xc1?\x05%#\\(\x8e\xcb\xbfI\xaeq\x93\xe8C\xcd?\tp\xba@\xe9\xd6\xb5\xbf\xba\\7K\x98k\xa8\xbf\xf6\x1e\x9c\x0c\x83I\xc0\xbf\x1bS\xd1\xc5\xb00\xaa\xbf\x97nG\x15\xbe3\xc6\xbf7\xcf\x95<U\xa3r?\x87\x1ej?\xce\x01\xa2\xbf\xae\x87\xbc\nI\x1d\xc2?@\xb0\x12i\xd4\x10\xcf?\xde\xdc\x83,\x97\xdd\xc4\xbf\xe7c\xc5\xc6\xb9\xa8\xba\xbf*\x06a\x10\x9e\x8b\xc1\xbf\xe4 e\xad\xef\xac\xb8\xbf(O\xf3"f\x8c\xb3\xbf6F\xb2\x15+\xfe\xb2?0\xc7\x1c\x11-\x85\xc8\xbfT\xbbf\x99\xa7\xcf\xc4\xbf\x16\x9aP\x1e\xf4\xa0\xc4?\x129\r\xcb\x9e\xd5\xce?\xf8\xf5F\xa3\t4\xd2\xbf\x8e\xaf\xbd\x88d7\xc1\xbf\x8b\x86K\xbaZk\xbb?j\xf1\x86f\xae\x7f\xbf\xbf\xa4\x94\xc9\x8b\x18:\xca\xbf\xa48\x18\x88\\z\xd0?\xc6\xa5\xb99\xed\xd8\xd1?\xa18\x0c\xd6O\xea\xc4?\xf1\xb1\x80\xb7\xb6\xfc\xbb?\x13#x0\xd8\xe3\xa7\xbf"\xe6\xb3D5c\xae?\xd2\xdb\x02\xdbI\x89\x9a?a\xde\xdd\x93\x18h\xcb\xbf=\xf3\xe8^7!\xc6\xbfX!)\xa1vd\xc8?T\xfd(\x97\x0f\xab\xcc\xbf6\xef\xe6\xc5\x8f\xa5\x85?(=\xefB\xa2E\xbc?M,B\x1c\xbb\x0b\xcc?\xc0>oD@%\xc6?.K0W\xd1\xc8\xc5?\xf6\xa5\\\x13\x11R\xa1?!-M\xa3\xee\x9cy?\xed\x8a\x12\x05=\'\xcb?`/\xa2\x1bq\x04\xc5?Iu\x13\xf93D\xcb?\xd36\xc5F\x97\xd1\xa2\xbf\xe0\xbeO\xb6\x84\xa2\xbc\xbf\x8b2 \xc5\xf2R\xd0?\xbb\t\x9a\xa3[b\xb5?k\xde\xad\x15\xa4\\\xb3\xbf\x06\x03U\x10\xc7\x97\xb7?\xf4l|\xaa\x9e\xa2\xcb\xbfI\x06\x8dZf\x0b\xb0?\xd0\xac\xb4]\xa7\xb1\xb7?\x08\xa8D\x91\xe9\x94\x85\xbf\x94\xa5;I|-\xc9?\xbcm\xe9t\x08\x8b\xb4?2;w\xbaR\x82\xc1\xbf_\x08x\x99\xa3r\xb4\xbf\x1a\x1a\x06\xe5I\x16\x92\xbf\x1b2\x1a\x7f\x86\x92\x92\xbf9h\xafz\xa3\x00\xc6?I\xbb<l\t0\xcd\xbf}\x92\x9c\x93\xac\xa2\xab?\xf9ny\x8a\xe9\xce\xca?\x8c\x95\xcfap~\xb1?F4\x95\xe0-\xf7\xc2?H\x1e\xe7|0\xe1\xa1\xbf\x16Z\xb2M\xd3\xa9N\xbfF.\xf4\xc1\xa6\xca\xae?aK\x9a\xba\xe1\xb5\xc7\xbf\x93\xfc\xce\xb5T\x19\xcc\xbfC\xc4\xa8\xce\x07\x0c\xcd?\x81\xe0\xa3\x1f\xa10\xc8\xbf\n;\r-\xa9e\xc4?\xf5\x81"\xcd\xaf\x9c\xcc\xbf\\\xd6\xaf\xb9f\x8c\xca\xbfG\x90u\xc6\xf2\xb6\xa9?C\xba3\x1dw\xeb\xb5\xbf\x97\xf1\x8b;\x97\x9c\xc3\xbffoMw\xf5\xe8\xa7?\x115\x85C"\xfc\xc0\xbf\x1d\x9c\xc1\xd5tB\xc0\xbfv+XhfF\xb8?|\xa5[\xac$\x01\xa4?\x02\x98\x90\xf0\xe4\xf9\xd0\xbf\x17\xff\xe5E\xa8\xa3\xd1\xbf\x8a\xa3\x10\xc8\xc3\x8e\x99\xbfa\x88#\xee\x16=\xc1\xbf\xaa\x1e+\x9f\xe3)\xcc?\xa1\x16*oU\xf5\x8b?\xd2\xf1\x05\x8b\x1e>\xc1\xbf\x80\x06\x90h\x15\xbc\xbe?\xdd\xa6\xdc\xaf\xf2\xba\xb7?G\xffa\x985\x8c\xa0\xbfO\xca{\xd5\x06\xba\xcb\xbf\xf1\x1d\xe2\x86\xeeU\xb7?@\x02\x10\xef\xbfe\xb7\xbfR5\xac\xee\xff\xec\xc0\xbf\xc7\xf6\xb9\xd4\x9e=\xb7?\xca\xe6j\xa7\x0f\xad\xc0?\xc9\xc7j\x1f~\xd5\xcd?\xc4\xecX\xdb\xe3\xaa\xbe?\x19\xbdCF\xf0\xd3\xc7\xbf\xc6\xa0\x01\xd0\xfc\x8f\xd0\xbfO\xd6\xeb\xcfhW\xc5\xbf\xf3\xe1S\xe0\xde\xaai\xbfu\tfP\xf8\x87\xa0?\xa1\x15|\xff\xb3\x9a\xa3?5B\xa4\xa315\x97\xbf|i:\xe5\x00\xda\x9d\xbf\xc3*=j\x91f\xcb\xbf\xbdAeu\xdd|\xcc\xbf\xac\x16\xc7\xc2\x8d\x86\xbd\xbf\xd4:\x9c\xdc\xc7\xdd\xc4?\x97\xb9U\x8e<\xe1\xb0?\xa4\xbd\x8a\xde\xc1\xee\xd0\xbf\xfb\x04\nZ\x8a\xa9\xc2?\xbac\xf3_\xd5\xe0\xbc?\xd5\x12\xf4.J\xa9\xb5?nn\x15L\xe0)\xc2\xbf\xe1\xdb\xfa\x15\xc0\x94\xc3\xbf\xf1\x9d\xba\x8b(\x87\xbe\xbfL>\xfa3\xb0\xe5\xc5?\xed\x9d\xb1\xe1h3\xb7?\x05~V\xa1\xa7\x8b\xa4?h\xf0<\xd6\xe3\xe7\xc6?n!3\x92R\x07\xd2\xbf\x0c\x86\xa5\xa2\x8b\xb4\xc7?\x84\xdf\xd8%\xe3@\xca\xbfd#m\x1c\xec)\xc4?\xcdQY\xc8\x80e\xca?\xe6\x9f\xd1\xe16\xc5\xbf?\xdb\x1c\xb1\xdb@X\xa4?\xe5\xd7\x1a\x9aW\x14\xcc\xbf\xb8\x0c&\n?\x0f\xce\xbf\x7f\x12\xe4]\xbe\x9d\xb1?{\x7fG\xe5\xdf\xbe\xc2?\x12U7p=y\xcb?\xed(\xe8A\x06\x82\x9f\xbf\xe3\x1b\x81#\xf2\x1b\xcc\xbf9t\xba.Dq\xd0\xbf\xfd%\xba\x85D7\x98\xbf6G5wq\x92\xa3\xbf\xbb\xb4\x19\x19Z\x01\xb7\xbfgMn\xffw\x16\xc9?b\xd1\xce\x8b\xb5\xac\xc5\xbf\xdf\x95\x91,\xb0\xdb\xb7?.\x1e:\x8d\xb2\xb2\xc9\xbf\xd8\xe8\x85c\x9a.\xc0\xbf\xc4\xe4Z2b\x0f\xc2?x#\xb0\xb9(]\xd0\xbfS+\xc9\x17U\x93\xb6?rY\x7f\x01\x9c\xc0\xbd\xbf\x97\x1c\xa9\x15%\xa4\xc7?!\xecb\xe2\xb5!Y?\xcby\xfcdH0\xc1\xbfh\x19\xa5ef)\xbe\xbfD;\x17\xe2\xc0W\xa2?\xa6p\xde\xccc\x07%\xbf\xaab\xa3gc\xb0\x98?\xa2\xa9G"\x07}\xd0\xbf\xb0\xb0\x96a\xa0O\xd1\xbf\xcb7\xc5\xb4\x93\x91\x8b?\xc7e)F\r\x93\xcb\xbf]h,\xbd\xe9\xe1\x92?a \x89\x99b%\xc1\xbfS}\x80\x02\x9d\xb8\xce?:\xd2\x01\xc4g\x8e\xc3?Zh\x01\x90q\xa7\xc0\xbf_L\x8b\xa3\xd2c\xd0\xbf\xb06\x8c\x9d\xb7\xd4\xae?\xfc\xf3u\xa6m\x01Q?\xe2\xf7\xc7%Kz\xa3\xbfM\x04\x19\x05\xf7\x0e\x82?\xc0\x05\xf9\x01\xd2\x99\xc9?\xc9\x0e\x15\xe2\xd0\xbc\xba\xbf>t\x83\xba\x12\x13\xb4\xbfe<\x01*\x1a\x1e\xca?8+\xc4\xfa\xb5\xde\xc7?Naj\x9d\x96\x1f\xbd\xbf\xf7\xc9ljH}\x9a\xbfk\xce\xc3\xe1\x96`\xca\xbfF\xb5\xb9\xc6\x19\xe0\xc8\xbf\x07?\xafHi!\x98?t\xbd\x1d\xa4<A\xcb\xbf\xc8z\xe2N\x04\xb6\xad\xbf/[\xe6\x9e$\xca\x97?\xe8\x84\xaa6#f\xc8\xbf\xd3"v\xc3X\x91\x91\xbf?\xf7\xe86\x0e\xea\xcb?\xb3\x90\x92\xf34\x12\x9b?1\x84v\xc5{\xda\xa3\xbfMa\xc8\xfd.\xdc\xc4?]\xa6\x84\\\x858\xd3\xbfy\x92\xe4\x8b\x89Jv\xbft\x8f,\xd7\xd4#\x96?\x96\x0e\xdch\xf0_\xc7\xbfzd\x8eM;S\xc5?\xcd\xdd\xd4\xe1\x1d\x8c\xc5\xbf\x1d\xcb\xbe\xf2}=\xa0\xbf\xe0\xe3\xfb\xfa\xf4\xc8\xc7?\xcd\xc7\xca\x1e\xaav\xc0\xbf\xa1\xb5\xf3B\xa3(\xce\xbf\xe1.\xb1yQr\xc7\xbf=}I\xee\x96\x98\xc0\xbf\xf9\xf6zT\x90Q\xbd?~,M\x02]\x9d\xc7?\xc6Jk\x04\xc3\xd9\xc3\xbf\xeam\xc6N\xcf\x84\xa2?d\xce`\xce\tU\xa6\xbf\'\xd1\xfe\x95\xdb\x10\xd0\xbfVl\x82h\xdb\xa8\xa2\xbf\xf7\x8b\xb32\xde\xbf\xb0?\xfb2S\xf6\xf58\xcb?P\xc4\xcc\xabP\xc0\x94\xbf+\x85{\x8c\xe2\xb7\xa7\xbfp\xb5_\x0cJ\xb6\x9e?\xe9\x89\xb6Nq \x86\xbfdL\x02\xde\xd6\xeaj\xbfT\xc7n|\xa4]\xce\xbfR\xee\xac\xa5\xba\x82\xc6\xbf\x96\xcb.J\xddU\xc4\xbfe\xa8-4\x06R\xc4\xbfY\xa8\xfc`=\x0e\xcf?`\x9a\x922q\xcb\xbd\xbf\xe7U\xd4\xc1N\xec\xd2\xbf\x92\xcb}\xaa\xc7\x98\xc0?\xb8P\xfa\x9c\xad?\xaf\xbfV\xdfX+\xeb\x1a\xc0\xbf\xcb/r\xd1\xefQ\x92\xbft\xfd\xc4\xfb\xec\x90\xb2\xbfm\x91\xc4}\x12g\xc4\xbf\xb5I\xc8\xbc\xaa\xd1\xc9?\x06$\x9b\x85\x131\xb6?\x8c\x1d\x15\xf8p\xef\xc2?*\xa5\x90\x92\xce\x1a\x8c\xbfoj\xe1\x91cI\xc3\xbf\xa9\xfe\x97DUS\xc3\xbf\xad)\xf0\xce\xf0e\xcc?\xeb\xe2\xb9\xee\xd8\xb8\xbb?N\xb2\xe7\xcb\xc68\xd0?%\xdf\xc7O^\x9d\x82\xbf\x91d\xe5\xa5\xf4\xbe\xb0?\x1c\xc3\xbcy\x9b\r\xc0?Bg+\x03\xa0f\xb7\xbf\xdc\xa5\x93\x91\x03\x02\x9e\xbf)-\xf8\x8e\xde/\xb8\xbf\x87\x1f\xa4\x84b/\xb0?\x87\xa0t\x08\xb5m\xc0?\x06c\x07m\tN\xc1\xbf\x16\xfdN\xb1Sg\xa4?\xfa\\=d\xa2\n\xc0\xbf\xb5[\xb8$\xfa\xe9\xaa\xbf\xb6\xbf}\xfb\xc8v\xcc\xbf\x0f\x1d\xb1.+\x05\x9a?\x1b_\xd7!U\xe5\xa2?Y\x9aQ\xc2/\xcb\xbb?i\x1c\x9b\xb7y\xe7\xca\xbf\x98\xfe\x04\x18\xa6\xa6\xc0?\x9e\r\xaf\xde.\xf6\xb6\xbfi\xf65]\xf0\xb3\xc6\xbf\x93\xc6cq\xe3^\xc3?\xef\x0b\xa3\x9a1\x03\xc9\xbf\x89\xcb!\xa0<\x0b\xd2\xbf\xf3\xe8\x11\xb6\xffr\xb7?\xbc\xaf*W\x9b\x08\x96\xbf\xa41\xbd\x05\x14\xa5\xa4\xbf\xca\x89\xd8\xdd\xd2,\xb5\xbf\xe6o>#\xbd\xa6\xd0?\xf3\x14\xb6\x88\x98\x05\xcb?3\x9b\x92\xa3\xdd\x1f\xc2\xbf|\x91b\x8f\x88\x8f\xbb?\xad\xa0\xe2tW\xed\xc3?\xf8\xbc\x0bC\x1ab\xd2\xbf\xd7\x8b_O\xcc5\xcf\xbf[\xbc\xe0\xfdi}\xcd\xbf\xf8\x1c\x95\xf3\xfbQ\xcb?\xd4O\xf8==\xf9\xd0\xbf-i\xe9\x0f\x1b&\xc5\xbf\xe4\xaa\xeb\x9f\xdc\x8f\xb4?|\xa1\xf4\x8f|\x8d\xa6?wr^5\xdf\xcd\xc9?\xce\xb4\x91o\xf4\xfe\xbb\xbf\xd28\xe3U\x1bY\x90?\xf5\xf9#\xfbQg\x99\xbf\x92\x18\x83D8k\xce?\x1a\x87z\x04\xb2?\xad\xbfu\x96\xcb\xa7Sy\xc0\xbf;Y\xeaR\xccn\xc2?\x1f\x15\xc6C\xf9A\xc3\xbfd\x1b\xd8\x0e\xe7\xba\xc7\xbfE\xcd\xad\xff\'\x11\xd0\xbfwr\x15\xf1\x05\xf9\xd2\xbf\xdf\x8f\xfd\xe6\xaf\xb7\xb6\xbf\x18u\x0e\xc2(\xf8\xd1\xbf\x8fN\xa1<-q\xc4\xbf\xd6\x87\x88\xf5\xa9\xe3\xc3\xbf\x8cl\x89\xdf\xf7L\x9d?\xad\x12\xf0!\xf5\x14\xa3\xbf\xd39&X\xa9\xd6\xbf?f\x8f\xfc\x19(\x13\xc1\xbf[;m\xf9\xcb\x07\xc6?0\xd9\xde+dy\xcd?\x96LVc\xf0\x16\xca?4\xc8\x8c\x1a?I\xc7\xbfA\x87-\xe03\x95\xc7?R\x7f\xa0@yU\xcd?\xd7\x87\x07_\x80\x8e\x8e?\x99\xc4\xa1\xf4\xfb\x15\xca\xbf\x7f\x9f\xd6\x85H\x99\xa5\xbf\xd31a{\x90X\xd0?WD\xa4\xec\xb0Dm?\xcb\r\xc3\xac=\x84G\xbf\x85Z&s\xdb\x07\xbd\xbf\xba2\x96\x18F\xd6\xbc\xbf\xef\xce\xfc:5mi?\x8f\xd5\n(*[\xcd?D\x7f\xa3\x94\xccv\xa1\xbf|\x83\xc9\x88\xff\xf5\xb2?\x85l\xb7U\xdb\x12\xb1?\xc3\xf9\xa6\x82\x85\x1f\xb6\xbf~L\xea\x85;q\xc2?h\x7f\x9c\x8d\xd5\x94\xc9\xbf\x0b\xc8\t\xf0`on?9%y]B1\xc7?K1(\x85\xc53\xcd?\x82\xc7c\x1a\xe8\x85\xc3\xbffX[)\xbcA\xc0\xbf\x9b-\xc03\x9c\xe0\xb7?-[\x04*\x86\xdc\xca?\xf3`\xe8\xa2\x17_t\xbf\xd4\x9b\x00jTE\xd0\xbf\xdb=\x86-\xe2\xa5\xca\xbf\x97\xa0(_,\xfe\xc0?T\x96\xa2\xf2\x9b\xbf\xca?\x9b\xf0k\x1cA\xc8\x9e?\xf3\xd1\xd87\xf8\xc3\xa1?\xc4\x00\xe0Z?\xa9\xad?\xc3\xbdO\xbb\xa0=\xc0\xbf=\x9fpq-\x07\xc6?_x\x9c\xd83*\xc4?\x93\xe6\x05i\xbe\xc8v?\'\xd8\x1fsm\x80\xad?\x01\xcf\x19\xb7\xb0\xc1\xcc\xbf l\xc0\xfa\x95^\xa1\xbf\xea\x16?F_\xaf\xb5\xbf2pZ\xab\xf0\x1a\xc1\xbf\xd8e\x13\x1au\x99\xbc\xbf\xf68\x98,W2\x94\xbf\x92\xf6\x13\xce#B\xc3\xbf\xb8!\xaa}\x0cR\xa0\xbf!\xc0\x8b\x80\xa6\xef\xa2\xbf\xda\xc4\xb6bw\x1c\xc7\xbfSX{\xfe\x92U\xca?\x0c\xebP\x03\xd6\x0c\xc6\xbf\x1f)\xfd\xe7\xe3h\xac?\xee\x19\xb2\xa5\xe1\x0f\xcb?\xb1r\xd2\xad\xff\xb5\xb4?{\x15\xbe\xb2@\xe3\xd0\xbf\xd4\xfcb\x16\xab\xef\xc2\xbf\xde\x81"$j\x80\xad\xbf\xccmw-\x17\xea\xbf\xbf\x83\x7f=<\xb3\xa7\xb7?^3\x81\xb8Z]\xcb\xbf\xf2*@\x11d*\x96\xbf\xec+\xfe\xb1\x9c\xbf\xd0\xbf\xe9Q*\x96\xda\x82\xb2\xbfk\x87\xa00\x80\x9c\xc8?\xac\xb0\xfe\x83&@\xd1?9F\xdb=\xfd\x13\xc4?\x80v\x1ct\xa1\x8f\xc7?>\xf6,\x96\xce\x9b\xa6\xbf\x84]\xdam\x18\x07\xc8?\x85\xf41$,\x13\xca?\x10n\xb3\xa3\x99Y\xce\xbf\xc9\xe6<z\x9c\xe1\xb5?\xdd_=\xd6\xba\x81\xb6?7+H\x93\x0cg\xc7?\x87\xac\xc5+\xa0\x94\xc7\xbf\x1a\xbc\x9eB5\xc3\xca\xbf\x89;\x03\xa1\xd4\x9d\xc0\xbf\xea\xd5\xb7,\xd5\r\xb4?\xcc6\x1b\x85<\x04\xcd\xbff\xfe!\xc6\xd9\n\xc2?\x0f\xb4\x07\t\xf8l\xb5\xbfY\x7fS\xd1?-\xd0\xbf\xdf\xbd-\xa8\xff\xe2\xc2\xbf\xd0-^\xdf\x1d(\xb2?d\xaa\x912\xf1+\xc5\xbf\x0b\x11T$U\xed\xb4?\r\xa4\x07DNp\xce?\xa1q\xfa\xbf+j\xc4\xbf\x13\xb5d[\x88|\xcf\xbf\xc8ef\xb2\xfd\xe6\xa2\xbf\xd2\x06#\x0f4\xf3\xc3\xbfZ`z\x8c7(\xcb?\xd8\xf9\x1fM\x80\xe9\xb4\xbf\x8d\xe5\\\xd7\x01\xf0\xc3\xbfJ7\'U\xba\x85Z?\xd4K\xfe\x8eT\xd2\x94?2\xad\xe2\x06\xf9\xf3q\xbf\xf1-\xc6JUu\x93\xbf?\'C\xd0\x88N\xaa?gr\xfb\xc7_\xd9Z\xbfU\x8b\x1b\xee\xad\xb4\x9a\xbf\xd0pw\xe8S>\x98\xbf\xf4\x15\xc9\xc9\xd5\xcf\x99?\x10\xddk\x15\xca[\xa4?3\xc5\xde\x93\xa5\xe7\x92\xbf\x03\x19D\xe1[w\x92\xbfP \r\x85A=\xa1\xbf\xb0\x99\x9f\xe9\xe0\x06\x9b\xbfX4\x7f\x98\xd5Am\xbf\xeb\xce\xae\x06\x14\xc6\x8e?\x86\\,K\xe0\xbf\xa0\xbf\xf8!t1*\xff\x94\xbf\xbe&<9R\x96^?*\xd5\xac)U\xc9\x87?c \xbce\xc5\xa2\x87?\x00\x11\xac\xe1\xb0\xba\x87?\xa1\xf3\xd9\xae\x9c\x9e\xb2\xbf(\x96)\xca^\xf8}\xbf\xaa\x13\x07-W\x1d\x8d\xbf\xfb\xf1t7\xb7d\xae?\xad\xe2\xe1\n\x8c\t\xa3?M=\xc2\xee\x1c\xc5\x81?-\x05z\xb6h]\x99?\xe4E\x11WQ\xc7\x8c\xbf&w\xbbu\xc9%\x96\xbf"ho\xdd\xd3\x97\xa1\xbf\x91T\xbc.\x17d\x94?\x82\xdd\xaa\x02\xf3\x12\xb0\xbf\x9f\xc7\x07\x1e\x98\x0f\x9d\xbf\xda\xa4\xd1ST\xb2\x89\xbfM\x1a\x99s=|\xb1\xbf\xf0\':\x1d\xba\x1d\xad\xbf\xe8\x1d\xf6t\xe0L^?b\x8bJ\xdb\t\xae\xa7?i:4\xa7\xda\xf4\xa4\xbf\x82F\xabX\x130\xaa\xbf\\k#e\x987K\xbf5x\xd1mX\xf8\xa1\xbf\xd2\xc9!\x90\xf75\xa1\xbf^\xfd\xebH\xfaz\xa0\xbf\x88\x18\xa0\xc3\xb6\x8f\xa8?\xc8\xc8\x1bN\x8e0\xa0\xbf\xeb\xbf\xed\xf3|\x0b\x98\xbf\x02a\x93q=\xc3\x8d\xbf\xc9\xecw\xc7\xd0w\xa5?k\x9a\x1d\xf8,-\xae?\xf4\x7f\xf9rj\xa8\xb3\xbf\xc4\x7fV\xbd\xe5D\x9d?\xc9\x8c\xd6\xf0\x05,\xa8?\x9e\x7f\xc5\xa2\xf5\x08\xa1?\x10I\x00\x00f\x8b\x8d?&\xa3\xef\xc8\x8b\xe7\xac?$\xa3\xc4\xfe\xe0e\xa1?\x0e\xb1\xf0& \xfe\x81?m\x0e\x06\xf4~\xa0\x91?~\nB\xcd4\xac\x91\xbf\x15\xe4Y]\xbd\x0e\xaa\xbf\xfa2\xe3DD%\x80?\x88\x89\xa4\x86\x9f\x01+?m\x18\xa4\x9f!S\xa9?\x1d\x91\xc5Kd\xc9\x85\xbf8\xef\x05\xee\x9dlk\xbf\xa5+&\x18\xee\xed\x88\xbfP\xc9\x88\xb7D\x04\x93?^\xf3Z\x1f\x84\xf9\x86?+\xf4\x9e\x15[Nf?\xae\x03e\xd3W6z\xbf\xb4\xce-\xe4\x8dT\x7f?\xc9\xad\xa9.\x8fX\x93?9\x98\xcf\x9d\x19uc?\xc0\xe7\xf1\xac\x12z\x82?\xd7S\x11\xa5h\xac\xad?\xb5- g\x1d?\x83?\xa9a{~\x10:\xa3?U\x9eX7T\xf5\xac\xbf-w\x1d\xa3\xcb(\x9c?\xe2Hxy\x921\xac?z\x82q\xd9\x0b\xces\xbf\xce\x1a7\xff6\x10\x99?\xf88\xaf\x01\x12\xe5\xad\xbfI\xea\x0b7\xf1.\x84\xbf\x88MT\xfd\x8e\xb3\x83\xbf\x95lF\x8d\xc8\x16\x9e\xbf\xb2\x8f\x13V\x18r\x96\xbf\xdb4\xe8\xda\x97\xd7\x92?\xf5\xcei#\x87\xd8\x94\xbf\x96\xae\x13[\xac\xb1U?\xb3\xa0>@\xc0\x89\xa0?\x9e\xb8 N\xa9\xf6t?\x0e\xe6\xed\x08\xff\xaf\xb5?c\xb2\xdf\xc0\xf1Q\xa1\xbf\xfcHES\xa6%\x98?\x85\xaa\x16\xab\xc1\x17y?\xa7\xe0\xb9\x9f\xb4i\x90\xbf~\xca\xbe\xc8\r\xd4\xa9\xbf\xd7K\x83@v%\xa2?\xed\xc2\xde\x8al\xbed\xbf(]\\\xc8\xb8\x14\x87?\xee\x93\xa3\x00\xacR\xb6?)2\xc8\x93/}\xa8\xbf\x93}\xc0\x82\'\x85\x98\xbf\x15E\xf4`8a\x9e\xbf\xac7\x8b)\xd23\x8a?\x94\xc1#[\x9b=\xa7?l\x9c\x90\x8d\x16\xa2\x8b?\xde\xbbx\xf8\xda\x18\x83\xbf\xaf\xf4CP\xb2\xe5i\xbf\xf3z@B#\x1b\x9d\xbf\x90: \xdc\xf03\xa1?`\x7f\x08q\xcc<g?tu\xc8A}v\x92\xbf\x15\x92*\xc4d{`\xbf72\x93\x88x\x89\xa7\xbf7A\xce\x89\t\r\x8b\xbf\xc6\xe2\xd0Q\xbd\x9d\x93?\x84+\x02m\xf78p?Jf\x12\xd6t\xa0\xb4?+\xb0\x80\xa1\x9a\xb4\xa6?\xf8=\x17}\xfd\x9f\xb4\xbf{\xd5\x80\xe9\xa3\x87\xa6\xbf\xa6\x03\xb9\xaa\x8d\x87f\xbfq5\x08\x9bxE\xa8?\xb0\x7f\xa9\xee\'\xee\x8a\xbf~\x9d7\x82\xdf"\x9d\xbf\x8b\xa0\xf6\x8e\x96\xfar?dJ\xb99\xfe\x9e\xa7?\x910<\x97\xb3\x0e\x93?\xe2]\x9b\xaa%\xf3\xa2?r\x9e<\xa9\xe1\x9f\x1d\xbf\xcb\xc3\x06\xf4\xcf\x0b\x9a?=\x811\x1aN\x95\x81?\xb5\xb5\x8e\xe0;\xe7\x8b?\xfa\xe3\xe4a!\xe0\xa7?\xea\xe10\xf1\x05O\xa2\xbf\xfa\xb5J\xe6\xb8\xe7\xa4\xbfH\xe1\x93\x91\xd2\x15)\xbfTe\x02\x9c\xe1\xa5m?\xda\xe6\x18]\xf3\xb4\x96\xbf\xb1\xe8\xf8\xd9\xd5U\x96?\x1dQ\xf6\xc7\x82\xc1\x93\xbf(\xa9\xeb*%\x93s\xbf\x1c\xdd\xeb\xbd\xf1\x8a\xa5?\xe7\x13\x0e+\x7fr\xa6?.T\xca\x0b\xa1\xa4\x95?\xb9\xd0D&\x95\xd1\xa5?\x94n|\xc4\xd2\x94\xa6?\x0c\xf6\x9a\xdb]\xc0\xb2?\xa3\x16\x98EP\xe3\xad\xbf\x07\x1eP\xb2\x8a\x1e\x9e\xbf\x8c\xbezH\x97\xa7\x9f\xbfZ4i\x02\x95\x9a\xaa?%\xc5\x98\x99}u\xab\xbf\r\xbf\x8f\xc6b\x83\xa9\xbf8rb\x03\x82~\x97?\xf8@\x02\xc1\xabM\xa5\xbf\x08\xa9c/\x02\x86\x92\xbf\x9d\xb7NiPn\xa8\xbf;\x0e\xa5]C\x1a\x98\xbf\x9c\x9a\t\xa6\x92\xdc\x9e\xbf~%u\xbf-\xbf\xa0\xbfs\x9d\x14\xa2I.\x9e?n\xc0\x04o%\xf4\x83?B\x8b\t\xc0\xb3\x8b\x87\xbf\xda\xc8<\xf2\x03\xc2\x89?\xeb\xd8\xbdC[\xc9\xc3\xbf\xce\xa2\x10,!\x11\x8e\xbf\xf0T\xa0\x19\xbd\xf8\xa0\xbf\x8c\xb8\xf1\xd0.O\xae?l_\xe4\xed\xdb{\x92\xbf\xc4C\x14\x8b\xceg\xad?\xb6uD<\x99X\xa6\xbft\x99E\xd1\xbb+\x9f?\xb4\xfb\x16\x1b\x8f\x18l\xbf\xc1X\x982\xeb\x81\x99?\nF\xc1\x08w\xf9t\xbf\xf1(\xbe\xeb7f\xa3\xbf\xc7\xf9\xfa\x16\x91O\x92\xbf\x1b\x8d\xf8\xbf\x11`\xa5?\xc1\x14\xbd\x85+3~\xbf\xfcn{7\xb4\x1a\x96\xbf\x93\xda\xcfI\t\x8d\x87?J\x19\xe9;\x84\xef\xa2\xbf<[\x84\xe2\xd4r\x9f?[\xab\x0e\x94\xb4\x19|?\xa4C\t\x8e\x1bE\x9a?\xbc\xf8\xca\x1e\x03\xb0\x9d\xbfR\x83\xbc\'\xba\xdd\x9e??O\x90\xbe\xc2\x08\xa1?\x8d\xe4\xb30\xbd\xf2\xb3\xbf\xfd\xa5\xb0\xb7\x82d\xa4?\xfe\xe5@\xb8n>\x91?\xc6\x91\xf7\\)\x81`\xbfb\xcf8d\xc8\xb0\x9d\xbf%\x15&L\xb4!\xa2?P\xccR`\xf26\x8b\xbfM\xe6\xbf\xd3\x11\x92\x97?&\xb1\x18\x82\x07\xfc\x89\xbf\xb5\xd4\xde?\xf4\x19\xaa\xbfXp4\xd3\xd4\x81\x82?46\x84\xe3qgu?>\x82\xd6j9\x87\x90\xbf#\xa1\x183\x01\xbd\xa2\xbf\xe7\x1b\x8f\xe1C\x9au?L\xae\x10ed\x88c\xbfV\xe1\xab\xbe\x01\xb7@\xbft!\xdb=bs\xa2?.V)\xd6=\x17\x81\xbfm)\x18\x01\xb4>\x99\xbf\xe3\xef\xfa\xe7\xb85\x9d?\xcd\n\x8f_\xf71\xa1\xbfw\x9eJ\xbc\xcd\xe6\x82\xbf\xe4\x7f\xbbC\xdb\x93\xa9?ZjBoT\xcf\xad\xbf\xa9\x9dmnMHs\xbfJ\xb75\xdbjl\x87\xbfn\xfe\xa7p\xc8\xf9\x8a\xbf:\xce\xdb\xeb\xa9\xac\xa9\xbf"\xcf\xdal\xd2a\x9c\xbfg\xf8\x1aI#\xba\xaf\xbf\xabQ\x10\xfe\x05G\xa8?9\xc2\xd4\xd4\xaeW\x90?\xa3\x8c\r\x9dU\xec\xa3\xbf\x95\xb7\xdc\xa1Nnz\xbf\x16\x89\xe7"I\xe9\x9b?\x02T\xaf\xe9\xf8\xae\xad\xbf\x1c\n\xfbE\xf8,r?{\xbfIxJ \x8e?\xe3)\xf1\xc4\xcbf\x92?\xf8\x89>\xa9@v\x8a?\x11P\x00X\xde\x9eb?\xad\xb5\xdb\x8c\x02@\xb0\xbf\x03\x98`\xd7\xfc(~\xbfg\x99\xb4i\x03\xbb\x83\xbf[\xd5\xd2\xf8\xf9\xad\x9d\xbf&7%I\xde[\x93?\x07\xa7*\nJ\x13\x8e?\xff\x19o8*\x97z\xbf\x12\xa3Y\xeao\x00\x9e\xbf/Dd\xa9\x05\xcf\x91?\x184\xe0\x91-\nx\xbf\xe2\xbaP\xad\x06I\xab\xbf4\xfdt6\xc4)\xa0\xbf\xfc\x7f\xda\x03\xb60\x83\xbft\x08\xdc@\xbf\xccW\xbf\xc1y\x0f\xe1\x14\xed\xae\xbf\x1b:q\xa5\x18\x16\x95\xbf\xd1\x1d\x85\xd6y/\xad?\xba*|\x12v\xa8\x8f\xbf\xeaaH{\x8bEm\xbfuS\x1f\xc6\x1e\xc0\x99\xbf\xef\xb1\x96\xfe!\t\xb3\xbfz\xd3\xe3\x83\xca\x05|?\xe6\xe5\x84O8-\xbf\xbfOo\xa7\x89\x8b\xa9\xa4?|\\\xb3N\xaa0x?\xc4v\xc1W\x8e\x19\x80\xbf\x92Cb\x8fN\xfd\xb0?\xcd\xbe\r\x1e\xbf\xca\xb1\xbf\x04f\x8d&|\x1by?\x8b-[\x90Jc\xa6?\r&\x01\xd5\x862\x8b\xbf\xfe\xe2>\xce\xc7Cr?`fzvu \xa5?"\x9c\x0e\xa4h\xe7\x99\xbf\xd4\x89Q\xe2\xfcr\x8a?Te\x01b\x97\xdb\xb6?Z\xddH\xe1\x87\xd0z?\\\x1d\x1cC\xc8H\x91\xbf\xb2\xe9\xca\xb4\'\xfe\x93\xbfmM$\x1fm\xac\x87\xbfgH\x7f]\xd1\xa4o?,+\xf0J\x8c\x10u\xbf\xf3E\x8d\x1a-\xa0x\xbf\x03\xe8\r;p\xc5\x80?4w\x0ey\xbfmb?\x97q4<\x91\xa9\\?\xaa\x91\xd7M)E\xae?\xfd\xe6\x1c\xf0\x99\x7f\xa4?\xe7\xd7\x94\x18q\x8d\x89?\xcf\xe1\x98\na\x13\x99?M^g*\xec\x12\xa7?\xb0\x03\xa0\xd9i\xf4\xb9?M\xd8\x90\x93%\xd3\x8c\xbf\xfa\xc7s\xf9\x94?\x9b\xbf4l/[\x1a\xee\x90?\xb5\x8a@_<!s\xbf*F\x8b-6s\x9b?\\L\xb5V\xff&\xa6\xbf&\\\x1c\x9b\xe8\x85\x94\xbf\xa1\xfa#\x8e#k\x99?\xac\xe4\\\xae\xca\x9a\x86?\xc2\xf7\xa2o\xe5 s?\xa1m\xc6$"@\xa3\xbf\x8d\xfa;\xbfc\xbe\x9b?\xf2Z\x12\xb5X\xda\x9b?zjw19\xbb\xbf\xbf\xf4\xe148\xeb\xeb\x88?N^g\x99o\x85\xb2?\xee;H\xbcEz\xa0\xbfq#\xbfz/\xe4v?\xd8R8\xa1c2\x93\xbf\x05\x97\x8e\xbai\x0b\x7f\xbf\x14\xd5\xc2\x85\xce]\x88?\x9d\xa1\xeev\xab\xdfz\xbfN\x067\xc4\x0e\xe2\xaa?\x0e\x05\x84b\xf7\xbb\xab?mRPvD\x7f\x9b\xbf\xe7\xdeK\xf2!#\x82?p\x7f\xd8W@\x13\xb1\xbf\xea\xc7\xbf\xa0\x9b}\x9f?\xd0\xa7\xef\tz/\xae?\xbeT\xef\x88j\xb9\xa5?pR\xc4\xad\x1e\xe8\xa2\xbf\xfe\xca\x12\x18g)\x97?\xb0\t\x98\x05I\xec}\xbf\x9e\xe8#quY\x9d\xbf.C\x17\x90\xe7]\x85?Ci_[I+f?_p\xbd\xd9\xef\xad\xa3?7\x15\x88\x17\xb8\x9e\xa0\xbfX\xe7#Y\xff\xf1\xa5?\x95\x10x\x99\x80\xe8\xaf?\xec\x11\xc6\x96w\xc1\x97?`\xad(R\xe2\x82\xb7?a\xb5\x1e\xd51|\x9c?\x97\t")\xadW\xa6\xbf\x16\th\xffv\x11\xa4\xbf\xe7\xdd\xdf\xdd\xdb\x84t?\x11Q;\x18\xc5^k?_\xbcw\xa9\x94k\xb4?\xce\x88\x99\xcd$\x10\x8e\xbf\x9f\xe2vw\xe7\xd2\x8e?\xc1x\xbb\xcb\\\x1e\xb2?\x98t\x94I8\x02\x9e\xbfF&\xc4Q\xa1j\x92\xbf\xed\xfc\xefT\x82\xf3\x9b?\x0f\xd1\xd9\\O>V?%}\x840\x12\x9a\xb5?\xf45\xfc\x13\xe0\x15|\xbf\x82\xaf\xcf0\xb7aV?\xa5\rp\x8aV\x00r?\x0f\xea%\xdb#\x95L\xbf@\x94n\x85l\xff\xad\xbf\xbe\xa19\xc8`\xc3u?\xe0\xc5\x8f\xcel]\xb1\xbf\x03A\x82`\x88\xcf\xa9\xbfO\xb7%\xc5m\xaa\xa2\xbf\x12r\x88C\xb7!\x82\xbf\xdf\x97\xac)\x95\xfef\xbfh\x9e\xffP\x9fT\x88?\xe4\xa5;S\x80w\x89\xbf\xcd\x88\x81\xdc}J\x9e?\xe8\x02\x12\xfa\\J\x96?\xf6\xc0\xb6\xc2@1\xa5?y\xecP\xf3\t\xa2\xa9?\x14\xed/y\xa6\x8f\x8e\xbf\x93\x85\xed\xfd-\xe6\xb5\xbf\xda)\xb2\xd6a"\xb6\xbf\xed\xda+p\xdc\x1fR?\xa9jc\x02\x9dO\x99?\x89\xabT\x1c\xff\xa4\xb0\xbf~\x9d\xeb\x9f\x11\xfa\xa8\xbf~\x08? W\xaf\x8f?\\?\x8d\xcd\x8d\xbf\x1c\xbf\xd9-\x1e\xa5nY\x99?,-\x8d0\xca\x89\xa2?\xb8\x9e\xbc\xca\xd1\xe2\x8a\xbf}Rc\x15\xc0S\xab\xbf\xa8-m\x83\x91$\xab\xbf\xb4I\x80\x8d\xd1Fr?\'Z{[n\xe9\x88?NRB\xd5\x83\xaf\xb1?\'\x9c\xc09\xec\xdd\xaa\xbfE\x14r\xdc\xdby\xa9\xbf>\xc6k\xf0\xa3Y\xb5?\xabL>\xb3)\xec\x98\xbf\x80n\x95\xf2U\x8a\x99?*\xe1%\x18\x172\x8d?9y\x87\xf5\xbb\xc8\x90\xbfB)!Y\x9d0\xa1?l\xf9+\x06\xed4\xb1?\xbe\x14\x0c\x8e\x07\xb4^?\x86K\xc6x\xeb\xdf\x98\xbf]\xc7\xb3\x89\xc1\x1e\x8b?\xcd\x8b\xdf\x87\xb6\x83\x9d?\x94Ocl\xc7\xea\x9b?!\xec\x1dj\x16{\xa1\xbf\x04\x9a\xe5az,\xb0\xbf\xacw\xf7\xb6\x150\xa1\xbf(\xa1;\x9cd*\xb3?\xdcy\xe5\xf7Z\xca\xa7\xbf\xec$\x9aF\x88\xa7\xa6\xbf\'\x12!M\xa7\xcc~\xbfC\xc9! \x15\x1c\x86?\xf4\x95\xbc\x89\xf8\xeah?\t\x16\xf6\n\xad\xc8\xa7?\x0f\xcc\\nl\xeb\xa0?\x93\x89.\xf7\x8f\xe4\x7f?]\xd3\x97KV\xd7v\xbf\xe89\xd1\x9e\x1a\xa4\x96\xbf\xaf\xe4\x8d]\xf6\xed\x8c?\x96\x7f9\xa9\xebR\xa1\xbf\'\xea\x1d/_\x83r?W\x14i/ZC\x8e?\xf2\x16\x89\xf9\x82l{\xbf\xe1$\xe7\x1ap\xf4\x9f?\xc8\'\xfbX\xae3\x95?\x80e\xd9\xb7i\xdf\x9a\xbf\xc7\x97\x94g\xf8E\x8f?\x1ay\xee\xd2\xc1o\x95\xbfk\xc0%=\x8fU\x95\xbf\xac\x8cN\x0fv\xd3\x93?5\xd5\x0cW\x82\xde\xb5\xbf\xb9Q\\Do\xd0\xaf\xbf\x84\x17\xaazX\xec\x81\xbf\xa8q\x01\xcfu\xc6\xa4?\x87\x94\xb3\x86f\x80\x88\xbf\x91\xe6\xb9T4\xc4\x9f\xbfse\x01q\xe4u\x90?\xc3fg<$^\xa1\xbf\xc7\xac\xc3\xec]X4\xbf\x82v\xb5\x0e\xf1\x14Q?\xba6i\x05{\x18\x97?\x9d,\xd2{2S\xb7?\xa9\xfe\rE\x92\x89\xa0?`\xbdh5R;\xae\xbf\x02\xe6\xc0UNT\xa7?\xb11\xc99\xd7P\xa5\xbf7\xf4\xb4>vc\xbb?\xfb\xfd4\xd5t\x0b\x9a?P\xca\xf5\x16\xa8\x97\xaf\xbf\xd2\x0b\x94\xf9\xe0?\x91?\x03d\x11\xe6j\x18\xa9?\xec\x12*\xa7\xab\xdb\xb1?\xe7a\xd2\xc2\xd3\xde\xb0\xbfk\x96\xe5ad\x1f\x90?\xd0\xe6\xc0\xda\x80\\\xa0?\xc9\xdcB\xde\xbbv\x93?\x0b\xeb \xdf\xe1n\xa5\xbf\xbbr\xee\x9f\xfb\xe9\xb1?\x99\x99F\x9e\xe1\x01\x91?\xdd\x81n\x16\xd7\xf8\x87?\xce\xd6\xa3\x8d\xf4R\xaf?\xd3lYP\xecIu?8\xe1\x88\x0fLw\xb4\xbf\xba\xd5\x9a\x069\xe2w?@\x12\x97\xf7L\xcd\xb3?L\xce\xd9\xb2~\xe6\x8e?\xf1\x05<\xca\x1d#z\xbf\xd91#\xe38\xb5\xa4\xbf\xfc\xe57\x8fy\xd8\x86?6F_\x9cs\x82\x8c\xbfA\xa2\xcc\x1fN\x08\xa6?Z\x0fz2\xb7\xf3\xaa\xbf\xbc\x12\xac\x16\xa2\xd7\xa4\xbf\xb4\xb3\xc8\xa1PQ\x88?\xcc\xfb\x8b\xdc\xe8H\x95\xbf`\x1et\xefOi\xb6?A\x11\xef\x9d\x03j\xc0?H\xf9\x07\x8a\x15s\xb2?\x8de~\x90Q\x02\x93\xbf\xffxkM\x06"\xbd?\\}\xbc#N\x98\x98\xbf?\xe8\x13v\x82\x10\xc0?\x95\xb2\xb0\x12\xd2\x81\x8e\xbf\x89\xcf,CI\xaa\xa4\xbf\x03v]R\xc7.\\\xbf\xfbl{\xcaC#\x86?U\xdc\x9fR\xb7K\x83?\xd7x\x9c\xb8D\xbc\x8a\xbf+\xb7\xa5`\xb6\x15\xba?oD\x97F\tx\x9b?\x8f\x0e--\xb7\xee\xb2?k`\x92\xd5\x01l\xb3\xbf\xf6\xaa\xca\xb3\xea\xbb\xaa\xbf\xbcG\x9a\xda`(\xaf?x\xd70\xa6\xc1l\x8a\xbf\xd1\x90\xa7"\t\x1c\xa8?\xd6-\x14\xab\xf3%\xb0\xbfuK\x90\x1cvt\x90\xbfKa\xcf\x91*\xd3\x84\xbfI\x07c\x06D)\x99\xbfB\xddi\x1c\xf9~\xbf?\xc9\xff\x08\xdf\xc0\xd2\x88\xbf\xe5\xe5\xcc\xa9\xb6/\xb9?\xbft\xb1RGx\x92\xbf8\x1b\x07\x11\x81\xd7\xa6?hV:\x01PY\xaf\xbf\xac\xe1\x81\x93#\x93\xa9\xbf\xe2\xf3x\xf0\x18j\xb5?J~e\t@\x12\x94?\x91\xbe`\x88\xf6\x90\xa9?&\xd8\x8aF\x0e\x9b\xab\xbfZp\xd5X>c\xb4?\xa4\x9d\x8a$\xaa\xfb\x81?\xb9N\x10\xeab\x8f\xb0\xbf\xb5\x9aL{)\x99\x93?\n>\xb9\xec)\xe6\xaf?\xd7\xfa\x15\x1e\x95\x81\xa1?\xc2n\xf5`\xe3\x06\xb2?A\t\x9cGi\xc2\xb1?\xea\xea\n\x0c\xdd\xb8\xb3?\xba\xac\xdbR\x8c\xa8\x82?\x0b`\x15k+ \xbc?S\x07\x0f\xb9\xedZ\xb0\xbf%|\x90\xd52\x9d\xa0?\xb8\xbe\xfa|6V\xa1\xbf\xef\xe3\x15\x15V\xb6\xbb?\xe9\xf1\x08\x8d\xbb%\x9a\xbft\xcb`jQh\x8b?\xaa\x89\xf8U\x0c\x8d\x99\xbfo\x90\x0c.\xe2x\x88?B\xe8\x97\xf1<g\x9d?\xec\xeeV!%\xdd\xa9?\x8b\x10\xa3Ir\x81q\xbf\xber\xbd\xbf2\x9d\xb9?\xea\x82\x15J/\xa2\xb1?z2\xa3^7\xda\x97?\xaf)\xddV\xaf\x99\x99\xbfu\x87\x8eYe7\xab\xbf\xf8\xba\xa3\x0f\x8c\x9fp\xbf\xca\xf1\xbe\x06\xb4i\x9d\xbfvrh\x12\x88\xa8\xa1?sR\xb8\xdf\x133\xb6?j+\xe6d\x8e\xe1\xab\xbf\xf9\x16\xa3Bj-\x82\xbf\x01\x7fHf\xfd\xf5\x81?uN[\xfac\xbb\xbb?\x91\xee\xd6\x00<\x94\x8a\xbf\x99\xc2\xa0\x0e&`\xa0?\xa2\xa5{i\xb4\x90\xa2?;\x03bp$\x17\xb3?jG\xd6\xa4<u\x94?\xe1PC\xec\x04\x9c\xb3?\xf3\x9aS_QX\xb4?\xcb\xc5"*H\xfd\xaf?{\xf5\xba\xa5\x0b\x0b\xb1\xbf4\xb4R\'c\xe4\xa1?>\xb9\xee\x92\xbd\x83\xb2\xbf\xb5\xb0\xc5\xb7\x06\xec\xa9\xbf\xf1\xd6\xd9\x99\xcc,\xb2?`Fh\x05\xd0\x84\xbd?]\xa3\xe5\x1c\xf9\x7f\xb1\xbfp\x88\xa4X\xe3\xf2\xb7?\xc8\xb3U\xc1\xf1\x98\x9f\xbflu\xbf<\xce\x8cz?%\xe2\xc4\xc8\x1ae\xb9?2\xbd)\xa5\xd7\xc6\x93?\x98^F\xe0\x93P\xb0\xbf~V\x1e6\\\xe7T?T\xb4cN\x11\x1d\xb6?\x0e\xbf\xa7\xe5\xc7d\x93?\x80\xa0\x84\xca\x0eW\x97\xbfF\x1a\x88\xdc\x8c\xea\x8e?\xfe\xddc\x91\x7f\x83\xb4?\xbb\x8c\xd6\x97\xca\xfb_?F\xa6\x8bU"\xb4\xaa?\xa2\xa4\x13\x96\xd7w\xa5\xbf\x11?\xb6<\xb2A\xb2?B\x05%&\x10\x83\xbe?1\x90\x82\x01\xa6D\xa7?o\xcd\x9e\x0f\xe1l\xa3\xbf#\x1c\xf7i5n\xaf?\x02\xa4\x8b\x13\xcb!z\xbf\xaf\xf4`M\x8bQ\xb7?Fi\xd87\xf1\xc2\xbc?psTQQy\xb0\xbf\xc8\x06\xd0\xf6\x04D\xc1?\xb5MB \xce\xf3\xa3\xbf\xfb\xbfH-o0\xa1?\x1d\xfdQ\xa4$\xd2\xb6?B\xd1\xc1\x01\xf6\x87\xb7?\x82)5\xc7e\xa1G?%\xd7y\xa9\x86\xdc\xae\xbf\xe4Ym\x88\xb3g\xb0\xbf<9ct#\xca\x85\xbf\xc9\x17\x87\xc5e\x7f~?8h\x0c\x8d\xbc\xd1\xb6?\xbe\x12\x11$g\xfa\xa7\xbf\x03\x94"\x96\xfbA\xb1\xbf\xb0\t\xb94l\xf4\xad\xbf8\xfe\x1c\x7fh\x8b\xa3?M\xc7:\xcc\x03\xae\x87\xbf\x1d\x90A%Q,\xb5\xbf\x96J\xc0\xb6\xf6\xf5y\xbfi\x03\xae\x11\xeb\xf0\xae?Hd\xcc9\xc53\xa4?\x9c\xb9\x8eF\xfew\xb0?\xccxh9\x9e\xf3\xb2\xbf\xe2N\x8e\xad\xd60\xac?\xfa\x1eC/$\xc2\xb0\xbf\xdd\xea:\xe2\x19>\xa8?\xc6~U\xd0\xb0$\xa5\xbfY\xe1y\x92\x1d\xc2\xbe\xbf\xbawF\xdd>o\xb8?i/\xeaH\xcf\xe5\xa1\xbf\xd4\x1b\xcf"\xa8r\xb3?\xff2\xbeLe\x1c\x94?\xe0e\xbe\x18\x8c\x8bv\xbfCDP\x13\xedl\xbc?Kho]\xf2\r\x90\xbf\x03\xa5\xae\xaa\xf5\xeb\xba?\xfc\x17\x0e\x18\xdf\xf0\xad\xbfK\xce\n\x1f\xe8\x06\x96?\x04\xe0s\xe5j\x97\xb9\xbf\xafGP\xa5\xc4w\xb2\xbf\xdd`\xeb\x8f\xac,\xa8\xbf {|\xe8~\xb2\xa5?\xec\xa1\xe3Z2\x1c\xb4?\x17U\xa6l\xe9\xd1\x92?\x11\x85 7T\xae\xad?\'F\xa7^\xe2\x9c\xa5\xbf\xd4\xac\x01f2\xf4\x9d\xbfH\x12\xc3\x85n\xed\x9e?\xfb%\x9b\xc3\xb1\x94\x90?\xa7\x90\x19_\xed\x19\xbd?\x8eB\xf4\x90\xb6\x0b\xad?:\xe2\xeb\xd0d\xd6\xb1?\x11\x89y\xc0}\xe2\xa8\xbf\xf1Y\xa8\xd2/\xf2\x9f?\xd2&[qL\x08\xaa\xbf\x16\x8fie/\xefp?\xe0\x16`\xed\xc9:\xa4\xbfi\x06MA`\xd9\x8c?\xa5\x1d\x00VY\x10\xa1\xbf\x0eOf\xcdSk\xa1?\x89\x96K\x9cR3\x93\xbf\xc9\x12=\x10\xaa.\xb5?q\x89\xba\x03b[\x88?\xbf\xf7R\xbf\x08\xd3\x97\xbf\xd7Ko\n\xc9,\x99?"\xaf\xe2>9\xa5\xa1?p\xde\xe5\x15J7\xa4?\xd8\xe3\x88+sx\xa6\xbf\xb9\x03"\x03\xe2\xc5\x9c?\x1e\xf5\x01\xc5\x83\xde\xa1?!Y\xf27\xe7\x05\xa9\xbf\x990\x82-&\x01\x9a?lO\xf4L\x1d\xdd\xad\xbf\xff4%\xd3\xfbg\xb9?\x03v\xf5\x18\x00\x85\x9e?\xce)l\x7f\x81Z\xb7?V\x0c\\\xa6\xf0?\x94\xbf/Y^\xe1\xea:\x92?\x9c\xe1\xac\x925\xa6\xa9\xbfI\xbd\x01~G\xca\xb2\xbf;\xfda(\xbd\xf7\x9b\xbfE\xaeM\x8f\xf2\xf1\x94?~\xa5\x9f!/\xff\xaf\xbf\xb8\x9c\xf6|\xa4L\xad?\x8e\xb73\x176\xd1\x97\xbf%\xd0\x12\x92r\xca\xae?1\xef\xe57\x1dDb\xbf\xa0\xbaua\'hv\xbf\xe8\xbe\xb6\x0c\x12f\xae?\xab\xf4QM.\x9b\xa4?\x0e\xe9\x1d(\x8a\xa8\xab\xbfV\x1c\x0ec!4\xa3\xbf0.~\x92E\xe4\xa2\xbf\x85\xbcP\x15|\xb9\x83?\xb7\xac\xaf\xa1s{\x90\xbf\x9a|\x01\x85\xa3\n\x9b?\xb6\xed\x87\xea\xdb\x9c\xa7\xbf\x93L\xcb\x84\xdc\x7f\xa1?\xabI\tYl\x8d\xa0?\nZ\xb9<A\xca\xb8?\xc8`\xc2\x83\xdf\x99\x93?\xa4E\x1b*2n\xa9\xbf2\xb9\xb3,\x8b\xf1\xbd?\xad\x04WK\xa5\x15\xb9?|[\x90\xad^\xf0\xb5?7\xd3\x89E\xb0\x15\xa4?\xfe\xc8\xc3\xb8\xe1=\xb7?\x9d\x99\xcd\xd7\xef^\xa1?\xc8\xa5|\x81\x93\xc8\xa1?\x00\x8eO.\x0b\xc6\xaa?t\xae\xc6uA\n\xc1?I\xe4\xc1&V\xd8\x95\xbf\xfew<^m]\xb6?\xa6\xf14L\xec\x1d\xa9\xbf\xb8\x12,\r\xc9\xc5\xb1?@\xd6:\x8eg\x16\xb4\xbfE\xd08\x1d\x1e\xc0\xb3?\x95\x03\xd6\xc24\r\xa5\xbf7\x0b\xd8C6tD\xbf\xfdA\xa8yd\x14|\xbf\xf3`\x94A\xf0*\xbe?+Mk#\x84{\xa5?\xb7\x0c\xa1\xe5XV\x8e?]\x0c\x0fn\xa6\x16\x83\xbf1\x0b\xa9p\xfd\x03\xb1\xbf\xff\x1a\x08x\xbf\xe9\xaf\xbf-\xae\xa6\xf2\xd5\xf1\xbc?s\xfa\xbf\xaf=\x17\xb3\xbf\x9a\xd0t\xd7\xbdW\xb5?GE\xf1\x9d[R\xa0?\x19\x90\nh\xecf\x97?\x7f=\xe0\x12\x1f\x1d\xa4\xbf3\xf4n\x96+\xd5\xb4?\xeft%\xd8\xfb\x15\x8e\xbf.!\xfc\x93\x99-\xa2?t@\xc6q\xf2\x0c\xa7\xbf&\xf8A\xd1\xbf$S?\x95]\x16+\xab\xb5\xc2?E\x0bK\xf2\x9f\xf1\x90?\xf6\xbf]2\xe4"\x92\xbf\xee\xca\x9e\xaa5\xa1\xad?]-&\x97\x06k\xb1\xbf\xb6o\x8e\x8a\x92\xd9\xb7?;\xa9\xd3\xb4\x86\xfb\xb0?\xd1|-\r~\x93\x98?\xafN\x93=\xb3\xb7\x95?\xdctu\x87[\x08\x98\xbf\xb6H!H\xf2\x8d\xb1?\x7f\x11\xe5\xbf\x85\xc8\x81\xbf\xf2\t\x17a\xf8\x88\x98\xbf\xb9\xf9\xb6G\xf8A\xb4?m\x88\xedng\x0e\x93?\x13Lw\xd8\xf4\xb6\xaf?j\xc8\x8f \x80,\xa0\xbfS\x05K\x13B\x02\xac?\r\xde\x8fpe\x18\x9d\xbf\x1d\x8e\x7fl\x9b\xc6\x9d?\xc9\xf1\xe7\x88,D\xa2?\xd2\x94}\xc55\xd5\x92?%\xf5\xef\xed8\x02\x98\xbf|\t\x9c\xca\xbc\x96\xad\xbf\x9a\xa2-$\xeb\xd4\xa3?\xecpgx\xcdQ\xb6?S\xac6\xc2n\xa1\xbc?\xb8\xcc\xc4\x04h\xcf\x8e?{\xfaw\xcb\x06^\x9d?\x903N\x0f\xb8\x17f\xbf\x06\x04\xa3\xd8\xccd\xa0\xbf[\xa1\xadU\xd6\xd3\xa6\xbf\x90\x8c\xfb\xeb9\x93\xb1\xbf\xe5U\xee@\xec\xe1\xb4?\xd5%\x11\x82\x0f\xc7\xa6\xbf\x07\x01l\xb0\x93K\xa8\xbf\x89v\xc7%6\xa2\xb0?\xf7b\\\xa6D\x80\xaa\xbfJ\xcft:\xe6\x1b\x86?\x918\x06l\xc06\xa4?\xdaL\\\x9f\xb8\xfa\x94?\xb3\xb7f\xebVG\xb0?\xe8\xbai~\xc2\xf6\x1f\xbf\xdf\x02\xa9\xf7D\xb9\xb0\xbf\xb8s\x90\xb0\xf2c\xb3?\x07\x14\xfb(\xc8\\\xa8?v\xa7\xce\xe6\xe5Y\xaf?e\x80J\xa3u>\xa3\xbf\x9c\xcb\x8f\x8dn\x92\xaf\xbf@.s\x95x\x89\xbb?\xec\x00\xbbo(*\xb1?\xc0$\n\x16\xb4V\xba?\xe27\xb2\x88\xb8\xad\xbc?\x8d\xab3\xd8\'}\x9a?\x80\xed\xdb\xb7?\xc1\xd1\xbe\x1a\xb1\xad_N\x00\xb1\xbf\x07\xcc\xb7\x8f\xc2\x0f\xbc?\x03\xacD=i7\xaa\xbf\xd0h(\xad\x9e\xdc\xb3\xbf&l\xcd\xca\xbc\x1a\x85?\xf5\xf66#\xa6_\x98?"{\x18\xa5b\x07\x9a\xbf\x97\xde\xbbz\xbf(\xa3?>\xf5\x92\x18 +\xa1\xbf\xdb\xc1z\xbe\x14\xb5\xab\xbfVq\xce\x07b\x17\xb3?\xc1\x8d\xe8\x06M\xff\xb4?\xd3\xa2OcW\x8c\xb0?\x16y\xe8mF\n\xad?I/\'\xe3V\x9c\xb3?\xf8:\x16\xdeo\x13\xa4\xbf\xb4\xaaS\xfa\x9e\xfa\xab?w\x81^m\x87\xeb\xb4?\x99\x93\x8b\xc9\x14\x1e\xaf?J\x97j\x18)\x93\xb1?\xec\x98#W\x9d\xea\xb3?,\x86\x98\xedK\xb5\xb1?\x9f\xd9M\xe8\x0b\x9c\xb0\xbf\xaa\xb88\xaf\xe2\xf5\x88\xbf\x98W\x86\xb8A\x1f\xb5?Z\xd3\x0e\xd8)\x9a\x91?V\x08,Y\x01\xca\xaa\xbf\xc5\x17\xff\xca\x82\x98\xb4\xbf\x07\xa8oA[\x8d\xa2?\xc2\t\x97\xae}\x04d\xbf\xc6xZ\xf4\xda\x11\xb0\xbf\xd5%\x9b\x99\xcfk\xad?\xe2\x9d\xdc\xdeQ\xee\xb4?\x1e\xfd\xc0ng\x92\x8a?\xee\xe7\xb8f\xb0\xe4\x9d?\x9d\x9b}T\xcc\xb9\x9a?iK\xea\'\x12P\x90?Xiz\xb0N\xb6\x95?\x05\x81!.V\x1a\xa0?\xe6tDK\t\x8b\xa6?*\x17De\xf7\xdb\xa5?:+*\xf9\x87;\xa9?&3\xdanL\xaf\xb0\xbf\xa2e\xe7\x11=a\xb3?\x7f\xd8\xb3\x84\xcd8\xac?AG\xf0\x1e\xa2i\xa8?uv%]\xe9I\xab\xbf\x89\xd7n\x0fqF\xb9?3f\xd0\x87\xd1\x9c\xb4?:\xfc\x83a\x12\xdb\x94?\x17\x1fW\xf8B\x7f\xab\xbf^\xcdM\x05\xda*\xb8\xbf\xcf\x05m\x85\xe8\x88\xaf?\x82\xf6\xa6\xc1\xfcO\xab\xbf\x01\x0c\x9c\x97\xb2{\xa2\xbf\x1c\xdc\xb6\xc0\x80\x12\xaa?I\xa8\xc5s\xf64\xa9?]eJ\xa7\x04\xcc\xa3?\xdb\xe3~\x9dt\x14\x9b\xbf\x1ai\xf6;\x05\x06\x93?u\xe9\x14\xd2\x86\xfe\xaf\xbf\xf5)\xd3\x8e\xbf\x11u?c|ZNw\xa8\x7f\xbf1`m\xdf\xc2\xb2\x95\xbf\xcf\xb0\xf7\xe1\x96\x8a\xb1\xbf\xbb$QE\xe3\xcc\xac?\xcfb\x1e\r4T\x95?\x8c^\xa14r(\xa6\xbfP\xba\xcf\x9d\x9d\xaa\xaf\xbf\x91\xf9\xf1\'\xde\r\x96?ei\xfe|J1\xbb?]\xbe\r,J\xe0\xa5\xbf\x89Y\xf4\x93\x81\xa3\x99\xbf~w\xd5u\xa9\x16\xa2\xbf\xd5\x85\xd92L(\x9e?-`>\x9b!\xb1\xa0\xbfH\xda\xfd\x00)\xb0\x9d\xbfV\xb9\xffK5E\xb3\xbf\x99}\x15\xb2\x83h\x99?\xc1:]Gt\x91\xb6?F\n\xdbj\xe3\xc3\xad?\xd4\x96\xd2>\x84\xd8\x93\xbf<\x8c\x1fE9\xbe\xba?\xb7L\xe1\xe5\xaf\xf0\xa5\xbf\xf0g\xdb\x81B\xec\xb6?\xdb\xe1TY\xb3x\xb0?/\xbb\x85\x01\xd8\xbe\xa4?0\x06(\x19\xd0\xc7\xbc?\x12D\xdc\xbf\xa0j\x9a\xbfg0,\x8a\t$\xb0?\xcd\xddS\xc4\x15hy\xbfk\x9d34\x19.\x8e?\x88\x15\x96$\xbc\xcd\xb3?6\x0c\xf9\xa0<\x8e\x8b?PL#>$\x7f\xa2\xbf\x1c\x9f\x96\x1b\x10\x89\x9e?`]\xf4\xd9\xfd0\xae\xbf\xd9\x90wN\x18\x8b\x8d\xbf\xcc\xdb\xb5W8\xca\x81\xbf\x84\x96\xff\xb1:&\xb1\xbfbE\xe4eE@\x90?\x85\xfbtL\xbeA\xb4?\xa5\xa3\xc1k"A\x8f?\xd9\x0bN\xc3=\xba\xb3\xbf+)\xd1\xe9\xbc\xa5\xa8?\x873\xdf\x02\xb28\x9c?\x1b\x1c\xb2\xb1`\xb7\xac?iZz&/\xd4\x9c?f\xc6,\x8a[\x03\xb3?\xdf\x1a{\'t\xc3\xab?>\xa0\xf0:\x1fk\xb1?\r!\xc0]\xbe\xcf\x9e?\x8e \xed\x81\x92\xd2\xa1?\x86>\x1a\x8eO\x89}\xbf\xce\x98*^\x13\x96\xac\xbf(\x1d\x1d\x98\xe1\x86\x9f?\x80\xa7\xb5\x95\x87v\xad?y\x16\xff\xd3\xc8\xb5\x8d\xbf\x0c\xe5\x06\xb5\x14\xd4\x8d\xbf\x825\xd2;"\xf0q\xbf\x80(\xed\x8f\x1aC\x99\xbf\x90O\xec\xe1{\t\x92?\x8a\x9e\xde\x91n\xf6\xad\xbfV\xf0\x12q\xe8w\xa0\xbf\xbc\xa8\xda\x86\t~\x7f?\x85\x00!\x87\xc4\x98\xa8?\xccD\xb3\x06\x01\xb5\xa6\xbfM\xd3\xe1\xc7\xe9\xb3\xa0\xbf9\x1f\'\x03,\xb5f\xbf\x17s[[\xfa\x03\x8c?\xa5~\x1e\xb3\x02(\x84?\xe3VR\xe4e\xb4\x94?\xc7\x83\xc8\xfcD\x07\xa6\xbf\x8e\x9e\xd9\xb2\xd4\xeb\xb0\xbf_H\xd8\xa3j3\xb8?\xdc;\xdc\x19o\xb2\xb0?\xdbW\xe9X\x90\xac\xa4\xbf\x08\xac\xda\xadK;\x85?c\x17(\x1a\xdb\xe7\x9c?\x971\x1bk7\x8c\xae\xbf\xbc\xa2\xb1\xc6X\xf8\xb9\xbfc\x1b<\xfd\'\xe9\xa0?]p\t\xe6I\xee\x8d?\xd7\x97\x17\xc2\xa5\xa4\xb2?T\xce\xe7\xef\xc5\xf0.\xbf1\xb9\xaer\x88\xb2\xab\xbf\x0eM\xbfz\xc8qw\xbf6*A\xfaF\x95\xaa?\n*b\xc0\xcb\xf5\xbe\xbf/\xf8\x06\xb7\x02\xd8\xaa\xbf\x9b\x7f5%=R\xa9?wU\xf9\xd4\xa9c\xb5\xbf*\x84@\x05k\xc8\x93?\x93f\x9a\x02\x82^\xa0?L\xa9\xcd\x0b$\x93\xa4\xbf\x8a\x13R\xa5\xa1s\x87?\x83\xa1\r\r\xac\xf4\xb5?\xcf\x9ar\x8c\xe3\xfb\xa4\xbf\xc4&`\xe4\xed\x11\x9b?\x9cm\xb0\xa0\xf5k\xb3\xbf[x*\xcd\xd2\xbe\xa4\xbfL\t\xc1}\xfa\xb8\xa5?\x0f\xf9\xc4\xe4\x1cm\xa8\xbfI\xe8(\xdb\xb6\xc8\x8f\xbfQ\xf3\x19\xcc\x15\xf3\x93\xbf\xb5\x1dM\x07\xfc\xb1\x93?\x9a`\x017=\xb2\xba\xbf\xc3\xf9\xa2?\xf4\xd2\xab\xbfb\xb8\x15\xc74\xba\x99\xbfL\x90C\xc1\x0f\xc6\x90?;\xd2mv\xc7\xd3\x95\xbf\xa9h^]\x02\x91\xac\xbf\x84[\xc6\x98o\x1a\x99\xbf\xde\x8aT\x8c?N\xb1\xbf%DM\xb2I^}\xbf9}\xa1\xa8\xff\x17\xa4\xbf\x0f\xf0O\xc5\xbe&\xab\xbf\x1b:\x9fg#$\xa0?\x14\x03\xc6\x18$\xa4\xab\xbf^\x9a\x7f\x87R\x90\xb3?o\xdf\x86n\xe8\x14\x9c\xbf\x0c\xbd\xfd\xe4\x9a\xd0\x9c\xbf\xf5\xfc\x94s#\x0er?g\xa7\xe2bp\xbc\xaa\xbf\xa5\x90KO;A\xa0\xbf\xca\xfd\xaax\x9f\xc1\x9b?\xb0\xabd\xa9\x08\xa0\x18\xbf\xa0\x8b M;\xd2\x9b?vc\xbaO\xa7*\xa3\xbf\x81"4)\x97U}\xbf\xe2l^@\x8d\xa3\x9e\xbfI\xa3\x192z\xba\xa9\xbfls\xbbA\rF\x95?\x11\x90Ajz\xff\x86?\xf3\x00\xd1\x11\x8a\xa5\xb0?n\xa5H\xa4\xf2:\x9a\xbf\xcf?p>\xfc\xc6t\xbf\xb2\xf8m\x9b\x0f\xcc\xa8\xbf{\xb7!b`\x1b\x96\xbf\xe2[\xc2\xe9\xd4A\xa6?\x96\x18w\xbdCw\xac?\x9b.\xcf\xf5\xd8a\x92?\xcd\xfeU\xc6\xf6\xf3\x95\xbf\x9a\x02zU\xabA\x83?c\x0e/\xe3\xdc2\xaa?\x8c\xf4\x96\xbf\x19~t?6\x9b\x05`\x937D?=\xc7CJ\x17\x95\xb1?\x0e\x15$\xb4"\x0f\xa2\xbf\xa1vD`z\xfd\x81\xbf.-^;\x18i\x8e\xbf\xa1\x96\x08\xb9\xa6\xbe\xb6\xbf\xec4E_J\'\x95\xbf\x85\x16\x8c`\x186\x9f?S\xd5\xcbH\xd5v\x8b\xbf\xbe\xeeo\x9b\xe2D\x9f\xbf@[\xee\r\x10\xf0\x8b\xbf4\x9cu\x08V\xdd\x93?[\xb5\xcbs\xce!\xb8? \xbc\xf6\x8f4\xbc<?\x88\xf6\xb5c\x83{\xaf\xbf\xc9\xd9\xe8\x9b\x80\xef\x93\xbf\x18\xf0\xc8\x81#\x80\xa3?+ f*\xb2r\xa0\xbf\xd32\x9bi=\xfb\xa2?\xcb\x07#k\x8a\xe4\xa2?Bq\x0c\x19\x1e\xacx\xbf\xa9\\V8\xab~\x99\xbf\x95#\xd9~4\xca\xb0\xbf\xe8g\x9e,\xd7Uy?7A\xe3W\xf4\xb2\xac?\xb82\x9a\xf29\xb2\x9b?\x88\\\xbcs\xa3\xe0\xac\xbf\xee\x80\x11D\x0bE\x9e?\xa7r\x84e\x88m\x9f?\xc2\x82\xa9Z\xe6\xcaR\xbf\xb6\xa9\x7fCn&\xb1?\xf6J\x9e\x030-\xb1?\x18\xa1\xe5<J4\xa6?!Q\xf6v.`\xac?&I\xdc\xad\xea\x80\xa2?H\xc5~\x8ag\xc3\x93?\xd5\xda\x05+\xfc\xf3\xa5\xbfb\xbb1\xcb\x1e\x03\x87?\xeeZ\x03<\x8f\xa9\xb0\xbf$\x8a\xb7>\xa9S\xa7\xbf\xed\xc2u\xf4P\x82\x9d\xbf\xe2\x16\xf3\xbe\xb3k\xae?\x13\x8d\x04L\xfeu\xa5?u\xb0\xd1\xe5\x99\xe2w\xbfr\xbf\xce\x84\x99z\xae\xbfr\xa3[\x1c$5\x91?Up\xf6\x91n<\xb3?\xae3\xd0\x0b\xeb\xce\xb1\xbf\xf9\x905F\x961\xa4\xbf\x14\x9b\x8bs\x0c\x8aj\xbf<\x02B\xcauh\x9d\xbf\xf17(\x16\x01\xae\x9a\xbf\xb0\xf0a\xea{\xbfD\xbfS+%X\xfe\xbd\x92?\x87\x90\\\xdb\xb0\xaa\xa6\xbfF\xb8rb\x82\xd3\x9c\xbf\x06\xe4\x9a\xbb\xf8\x7f\x9a\xbf~\x16\xfc\xb0\xcam\xa4?\xbco\x88\xa2\ra\x8d?#\xeam\x8a4\x01t\xbfk\xaaP\xbaO#\x95?\x9b*\x85]\xec)\xb6\xbf\x14\x05\x8e\'\x00\xd4\xa2\xbf\xae\n\x8e~11\xb5\xbfnC\x0b\xc3\xd2\x1d\xb4?R\x1a\xfc`"\xe8s\xbf\\\xa0d\xcaG]\xb5?;1\xcb\xa8\xc7T\x91\xbf\xb4\xf3\xbe\x94\x08]\xa6?\xce\x10\x90\x8f\xc0\x90$?\x8eJQ\r\x91t\x90?\x11i\xb1%\x0c\xa6\x95\xbf\\h \x84K!\x84?chy6 \xfa\x9b?K7[\xb6\xa7\xcd\x9e\xbfF\xb2\xf7\xcc\xc5\t\xa3?\x11\x15\x8f\xec\xe9\x99\x98?\xbe\xe3\xbe\xe6\xf5\xa3{\xbf\xa19\x01\xec\x87\xcd\x9b?\xb6\xa00\xdd\x1c\x85\xb5?\xf5\x99\x97\x9d\x84\xda\xa0?\x07\xec\xb2\xc2A\xc0\xa7?YR~\x17\x9bAd\xbf\xf7\xab\x04\xa7\x18\x81h?%g\x1d\x9bA\xee\x96?H\x0eD\x9c\xb0\x80\x88\xbf\x186\x1e\r\xa9\x86\xb6?\x8f\x9f\x02\x8b\xa1\xae\xa3?\x94\xf7\xd3\xa5\x87\xc0\x8f?\xb3\xdc\xe5\xa1\xc6\x19\x9b\xbf\x96\x9d\x81K_\xa4\x8f\xbf\x0f\x93\xed\x13\xc7]\xa2\xbfeP\x95\xdf\x8bj\x9e?/\x84\xd3tX\x14\xb6\xbf\xa5\x88\x18\xae\x19\xfc\xaf?\xea\x05\x8blJtw?\xc2v0\xa1\xb1\x0f\xa9\xbf_\x08\xc4\x05V@\xaa\xbf\xa2\xb9\xf4TW\xcf\xa4\xbf\xee\xd1\xa0Qv\xe4t?\xc2\x10\xfd\x8d\xb6\xbb\xa9\xbf\xa29\xa9J\x9ft\xab?!e\xf9\xed\x92\xce\x7f\xbf\xfc\xf0tt\xcd\xd3\xa6\xbf\xb5\xae\xdf\xf6\xc0J\xa2?]\xf0\xa7\xd0\xf9U\xa5\xbfZ\x9b\xb9\xc2\x0fc\xb5?\x08\xf9\x12WZ\xec\xb7?l^\xed\x1f\x9a\xcd\xa4?\x02\xb5\xc6MQ\x99\xac?,\xaf\xf3\xe5\x9dx\xb7\xbf\xac\xba\xda9\x03\xa2w\xbf\xaf\x1b\xa6u\xaf\xfb\xb1?\xea\x87\x98\x95\x94S\xb3\xbf\xe9Y\x15\xfcZY\x95\xbf\x85\xdci\x11\xfe,\x97\xbf\x98\x86\xb4j\x7f\xfe\xa9\xbf\xf8\xd5\xe7;P\xdfi\xbf\x88c\xf8\\0\xd1\x92\xbf,\xf6|\xab\x13\x9b\x90\xbf\xd9*\x1d\x8f\x0e\xe0\x93\xbf0\x7f\xf2w\xd0\x18\x13?\x94\x1e>v\xe5\xe0\x86?8j\x95\x14\x0b\xce\x9e?uK5\xba\xf4\x0c\x80\xbf\xaa\x8b<\t\x03[\xa5?\xae)\x87k=\xeds?]\xf71\x88o\xea\xa9?\xeb7\'\xa6\x8fx\x91\xbf\x9b\xbc\x1a\'\xd7\x97\xb6\xbfJ\x04P\xaa\x08\xf8\xaf\xbf\xd8\xfc>\xdc\x9fW\x94?=)\xdb\xe0\x91\xbb\xa9\xbf\xdb\xe8\xc0\xfc\xc6\x88\x98?\x11NV\xb9F0\x87?yx\xc2\x916&f\xbf\x13\xda\xc8\x89\xfe\x8d\xb1\xbf:x\\\xc9\xcc\x86\xa7?9C\xcb\xa1/\x02\xb0?\x8d<D\xa6\xcb\xd8w?H\xdf\xbb\x826\xa7E\xbf\xd8\xeb\xeb\xf0\x98\x96\xbb?\xad\xb7\x86\xfd\xca\x97\xa8\xbf\x9aV\xd9\xbe"~\xa7?1\n\x12\x1cks\xbe?{\xb8\xd8\xdd\xc3\x9f\x9f\xbf`i-A\x93\x97\xc0?#\xb6\xdb1\x12\x91\xa5\xbf_~\xb8$\xf5E\x8f?\xa8GW\xf8\xcd\xbd\xb1\xbf+\x9d.\xb7\xb7d\xb2\xbf \x81Uq\xd6z\x82\xbf}\x10=\x9f\xc1L\xac\xbf\x95\xe8y \xcd\xf6\x9a\xbfY\xa4\xb3\x01K\xe1\x96\xbf\x08o\x9f\x08\x92i\x8e?\xef\xf8\xe4+\x98\x11\xac?(\xe3\xb7\x1e\x06/{?&\x8a\xdaj\x8ax\x90?\xdb\xb5\xf1BE\x87\xbe\xbf\xec\x81i\xd0\x15\xe3\x96??\xdekh\xe5\xe2\x9b?\xd3\x98\xd6)\xc8\x08\xa7\xbf-]!\xac\x10\xae\xa6?\x83l(B\x1f\x18\xa4\xbfc\xdd<?\x96\xff\x97\xbf\xd3\x87\xce\x85\xea\xae\xa3\xbf\xec\xf9c\xa6\x9eI\x80?\xadO\xbf\xf6\x0cZ\xa8?M\xe7\xea;\xa8\x17\xa0?\xfb\xb7_\x93Uv\x9f\xbf\x86d\xe3[\xb5\x1e{?=\x955\xb3Y`\xa4?\xc8\x02qB\xf3\xf6\x97\xbf4\t\xda\xce?\xa9\xaa\xbf\x1b\xf0\xebK}a\x97\xbf\xd5y\\}\xc8(\x82?#.\x9a}f\x85\x9b?\x17\x1a\xbbW?\x18\x99\xbf\x14\xea\x11\xf6\xb2\xec\xa6\xbf\x9a\xf6\x8c\x88\'t\xb0\xbf\xcf"1r\x88\x97i?e\x0e\xed\x00\x9b\xb2\x9d\xbf\xcdb\x0f~\xe0\xfe\x96\xbf\xb7\x99\xeb\xce\xccH\xa3\xbf\xb5\xa65\xe0\x04\x08\x93\xbf~\xbe\xe4\xee\x07\xd5\x93?M\xea\x08\xa4S\xd8\xab\xbf\xd2.2\xfd@\xfd\xb3\xbf\xcf@Dp\xd3\xb1\x83\xbf\xd3\xc8\xd7[\x16\xf1h?:\xc0W9\xe2\xe6\x8d\xbf\x9c\x97C}A\xd5\xb0?s@\x84\xa4\xb5*\x93\xbf\xf2#\x15E\xbf\xc6\x86\xbf,jl\x9f\xb3\x83\xa7\xbff!\xf9\xd6mw\x9c?\xda\xe2\xad\xd1i\xe7\xa5\xbf\x14\xc3d\xbc]\x9c\xa7\xbf\x99\xe5\xed\xb7\x14\x93\xa3\xbfK\x90("EZ\xb4\xbf\xce)\x0e\xa5\xbcex?\xaf}\x1d&\r\x9e\xa6?a\xca5\xdb\xed\xacy?d\'\xa9\xbb\x7f\x83P?78\xe6\xc3\xadU\xa5\xbf\xa3\xa0<Z\xe7\xa9_?\x99M\xa1M\xa5\x8f\xb4\xbf\xbdD\xb17\xb8\xb5\x80?\xac\xd5\xec\x91\xee_\x9f\xbf\xd9\x8cZ\tt\xc0\x87?\xad}\xd1rlH\xa2\xbf}?\x7fo;\x00\xa6\xbf\xad\xa2\x90\x1d\xe2\x8e\x9d?\x16\xe9\xb7\xf1\xf0\xbd\x9a\xbf~\x18\xb6\x98\xc9\x7f\xb3\xbf\xdentZ7P\xa8?h<h\xb6u9\xa0\xbf\xb3<g(P|\xb1\xbf\xc0\x82\x13u\xbb\xa9\xa2?\xc2\xda\x05+\xea\xa9\x99?\xbd\x8e\xcf\xd2#I\xa4\xbf\xd4\xaf61#Q\x99\xbfDe#gR\x93\xb4\xbf\xe7\x95Ie\xe8f\xa5?\x95\xbe\x00\xc6\xc2S\x94\xbf\xf5\xf0Yy\xd9\x8bx\xbf\xf6\x92!}\x85]\xb5?\x8dJ\x9f\xe4\xbe\xd7z?\x93\x9d\x832-Z\x88?\x8c\xaf=\x99^0\x98?\xbdG\xaao3Q\x8f??\x18\x05\xad\x93z\x9c?\xc01\x8d;\x84c\x8f?\xc1,BAQ\xb5\xb3?\x92\xf62\xadJXa?\xd7\x96Hw\xd1W\xa0?\xfb\xe0\xca5wng?+\x84?\xfc\x82\xeaw?\xb4\xc3\x08\x1df>\xa9?\x85\xfe\xf4{\x01=\xa0\xbf\x8c\xa7\xb8\xa0\xfc\x85\x9d\xbf\x99#&i\xa1\x93\xa4?\xa1r\xacv\xf2`\xb6\xbf\xfa:?\x86Q\x9b\xa7\xbf\x80\x94\xd0C\xd4?\x82\xbf\x15Uj\xdd\x9b[\x9d\xbf\x91&\x8c@\xa8\xf9\xaa\xbf\xfaj5\x93JG\xb6\xbfR\xc0gR/W\x9c?\xdbe\x14\xa7y\xc3\xbb?\x97\\\x00\xc4<\xe8\xb8?\x13x\xa1H{\xa6\xa3?\xd9\xa7\xd3dP\x88\x99?b/S_My\xb6?\xe9\xd4[L\xfe%\xb0?\xec\x92\tz\x82\x82\x9e\xbf\xb5\xcb\xa9O\xc5\x86\x96\xbfO\x7f\xde\xf1\x94>\xb8\xbf\xf87R~\x81\xd5\xa2\xbf\xba1\x90\xe4\x0c\xbb\x89\xbf*\xad\\\xd1B8\xab?m\xdff\x19"F\x94\xbf\xbc\xd7\xbf\x94\x8d\xee\xa9\xbf\x86;\xd7\xeb\xb49t\xbf\x13\xad\xd4\x10W3\xa1\xbfi\xe0\xcd\x16Nk\x9c?\xaaO\xc8\xcc.\xb0\x8b?\xc9\x10\xbeI\xc7\x8f\x95\xbfo#-A\xca\xc2\x84?\xa8\x03\x1f\x97\xd0\xd6\x83\xbf\xf1+3\xf3\x15\x83s\xbf0\xa6n\xb7(Lc?\x95Fd\xc2\xb34\xae\xbfaO\xd0\x14\xa3\x02\xb8\xbf\xdf_\xd1\xf9vZ\xa1\xbfyG"\x18O\xc0\xaa\xbf\x002\xa5H/\x88\xa4\xbf\x11C>\xbd\x15$\xa5?N\x81\x18\x1a\xbe\xef\xa9\xbf\x1c\x9cz\x88\x94\xa7s?\xc6\xb4\x82\x10:\x8f\xa0?\xd0Q\xac\x03C\x8f\xae?l\x01:\xac\x9f\xee\x8d\xbfy\x04\xc5\xd4T\xb9\xad?\xc6\x15J.!\x19\x95\xbf\xe7X\x12\xcd\x02\xb1\xa4?\xdfj\xac\xda:%\xb3\xbf3B\xfd\xcc\x9c9\x80?\x82\xff\x96\x99\x82\x97a?V\xb4}\xd2\x01\x1c\x92?\x97b\x99\xd4\xcc=\xa4?\xcd\xe9\xca\xe3\x82\x13\x8c?}\x15"\xf7M \xaa?\xe1n4\xd4\x93f\x82\xbfD\x92\xdb\xc8\x02{\x99\xbf\x8b:}\xb9\xa3\xca\xa6?|\x19\xef\x96n\xd3\xab\xbf\x13\x17\x01\xfbTM\xa0?\x05\x04\xaf\'\xcal\xae?\xe9`DV\x0f\xeak\xbf\x00\xe5\xa4\xc8\xe6=\x9d?\xb23\xb9\t\xe4\x06g\xbfeP\xfb\xcf\\\x9f\x98\xbf\xc3a|\xd6;\xed\x8f\xbf\x8d\xf2\xe1;\x06\x1a\x95?\xc43\x02\xdb\x99\xb3\xaa\xbf~s\xac#\x95\x0b\xab?\xf0v\xf9\xc5\xaf\xb0\x93?"\x99/\xbc6\xbe\xa9\xbfT5n_\x86\x8c\xa8?\x12\x04\x1a\x0b\x87\x82\x9e\xbfT\x92\xdf\xf4#j\x91?\xae\xbeV\x9aH5z\xbf_\xbb\xea\xb0.\xe0\x93?\x80\xa9u\xe1\x0eQ\xa6?\xc4\x86\xa4Ps\xd1\x9b\xbf=\xefibP\x11\xd0\xbf\x05U\xadrY\xd5\xd6\xbfxo\xa8\x0c\xe2\r\xd5\xbf\xd3\xd2\x16\xc1\xcc\x95\xcd?\x81\xd4}*\x13\x93\xd7?\xc2\xf2\x0b\x1aT\x94\xc0\xbf\xae\xc9V\xc3S\xd1\xb9?\x05\x9aK\x83\x81\xe5x\xbf\xf3\xe7\x8e;\xc5\x15\xd8\xbf\xf7\xb7\xbb\xea\x0c;\xd4\xbf\x9e\xab\xe6\xc4.\xfc\xda\xbf\xee\\{Dnr\xd6?`B\x8e\xac\x83k\xcd\xbf\xe4[\xd8\x1f\x089\xd6\xbf\xc2\xf2\x83zm\xb7\xd4?\xd9\xb7y[)X\xd1\xbf\xca\xc1\x8c\xecQ\x9c\xb1?6\x02Z\xfe\xf9\x1d\xd2?{U\x9c\xdf\x07\xa0\xd5?6-u\x8d\\\xe6\xd2?q\xfd\x83\x07\x19\xd9\xb3\xbf3D\xa48\xe0e\xd4\xbf\xdf\xc9\x1d\\\xc5\x8c\xd7??\xf4\\\x1e\x80\x19\xc9\xbf\xb4\xfb/\x96\xe7=\xcd\xbfd\xc6\xfd\x9f~g\xa7\xbf\x13\xd2\xf2\xd1\x98\x1d\xd8?\x91u\xd6\xd9j\x9a\x99?\xdf^\x8e\x9a\xd7,\xd1\xbf \x84\x89F\x15\xa7\xd3\xbfB\x86\x85f\x9b~\xc0\xbf\xd8Us\x84\x11z\xae\xbf\xb6\x1d\x8ap\x8e{\xd5?\x18\xd2Y\x96\x9b\xdc\xd7?b\xaa\xa5\xffO\x13\xd8\xbf\xff\xdd\xce\xa7\x8bc\xd2\xbf\xeb9/\x05\xd0\xe2\xce?\xbey\x89cd\xed\xd6?\xa0\xd6I\n\xe4\x1c\xd2\xbft.J^<\x7f\xb2?\xe7\x00]hF\xa9\xd8?\x00\xebe\xeb\x05\xe1\xc1?\x9bI\xbc:\t\x0b\xd5\xbfI\xec\xe4\xa8\xba\x13\xd3?\xc3}\x84\xb6\xfd\x97\xc7?qe{\xb7/\xb0\xca\xbfj\x87\xd3\xa6O\x7f\xd0\xbfy\x80\xbf\'\xc4s\xad\xbf\x14\xcb\xa5\x86\x94\xdf\xd4?i\x85V\x9a\xf1s\xb3?\xed\x08\xd47\xca\x98\xb8\xbfe\xf57\xca\x80B\xc2?\xa2\xc2\xc3\xd5\x1d0\xd5?\xcc\x07\x8a\xfc\xa4\x81\xd1?\xbaCm~\xf3e\xc6\xbf\x15\x95b^\x11\xbe\xb3\xbf\xc7\x9c\x8f\xc1\xc2\x8d\xd7?d\xed\x93&\xc5S\xc6?\xda\x1e\xa8\x10\x98j\xb7\xbf\xc1%\xd0\xbb5U\xb2?p&\xac\xcbl\xea\xc8\xbf\xc6\xa0\x16v\x9a\x1b\xd4\xbf\xba#6\x06\x9d\xaa`?\xc5n\xb6\xe5\xd7\x1a\xbe?NL\xb0\xdd@k\xa7\xbf\xf0\x0fR\xc6$\xcb\x96\xbf?\xa31W\xa6u\x9c\xbf\xd2i\x0e\x06\xc7\\\xd5?\xa8\xa3\xe3\xb0~\xfc\x82?J9\x1f\xef\x11\xc6\xc6\xbf\x04\xcb]\xb2 \xd1\xc6\xbf\xec\xc1\xac\'\xbfn\xd8\xbf\xc3"\x947\x80\x88\xba\xbf\xe0\xee\xcd:?f\xd1?\x0bD \t\xbf\xb7\xd1\xbf\xe4G\x16:R\x83\xa3\xbfe/\xbc\xc1\xbe\xc7\x8d\xbf\x90s\x0f \x15\xdc\xdb\xbf\x12?nu\x9a\xa3\xb1?\x95\xfd\xd7]e#\xc7?\xfbK\xc9\xf1\x1a\x01\xdb\xbf\xeb\xb0%2*\xa3\xc5\xbf{t\x93\xfc\xber\xc2?S\xeaY\\\x1e\xa3\xd8\xbf8\x81U\x8b\xc5\xc3\xc8?\nvE\xd7wb\xd2?\x82\xa3\xbfw\xa8\xfc\xcc?u\x1c\xf0:\x19\xad\xc5?\xf0}\xben\xe1\xfb\xa6?i\x10cE\xb6\xa6\xda\xbf\xfa#!^\xa1\x0f\xcf\xbfE\x1c7\x17p\xc1\xd2\xbf-k<G\x94-\xca?\x1dJ\xc1\xd4\x8dQ\x88\xbfQF\xcb\x1d\xc4\xda\xc2\xbf\xd5\xed\x7f7\xe1:\xd3\xbf\xf4j9\xf3\x88\xfc\xd7?\xf3\x7f7\x17F\xa1\xc9?\xfa%=\x9a\xfa1\xc2\xbf\xcc\x88\x14.\xa4\xa8\xc3?\xbf\xe9\xcd\xaf`\xb1\x89\xbf\xaf$\x1chGi\xc7\xbf\xc9E\xdd5\xe9"\xc8\xbf\xb0\x16\xfdOBE\xd1\xbf\xbb\x9a\xbd\xed\n\x96\xd5\xbfXEZ\xfc-\x01\xd2?k3;\xcf-\x88\xb4\xbf\x16\xb1\x97\xb1s4\xd8\xbf\x9bfB\xcd\x0e\x07\xb2\xbf,Y\xec\x82D\xeb\xd3\xbf\xe6\xad\xd3-<\xfc\xd4\xbf|9\x05\x1e \xae\xd4\xbf\xa4\xfb\xc3A\xf5G\xd4?\xb8t\t\x8b\xf8\xce\xcf?\xb3\xb4?o\xb1(\xb2\xbf\xbb\x07&\xef7\xfcz?L\xe5fp\x94G\xd3\xbf\xed\xdcFB\xba6\xd1\xbf\xa9q\xec\xfa\xcbu\xd1?^\xd1\x15\x94\xc2\xc8\xd4\xbf\x17<,.v\xfc\xaa\xbfU\xee\xa6\xf8\x19\x1a\xcc?\x7f\xbcS\xd04n\xa8\xbf\xaf6\xd9\\\xbb\x0e\xd6?-e\xd6\x85\xdb\x1f\xa6\xbf\xb7\xa5=\xff\xbd&\xbf\xbfBw\xa2\xae;\xf0\xd0\xbf\xb2\xa3j<z\xf5\xc5?\xf2W;\x1b37\xc6?\x7f\xf0\xb0\xc3;\xfb\xd0\xbfqG1\xab7%\xca?\x9dq=\x86\x0c\xec\xca?\xdb\xa2\x1c\xfd\xc6\xe4\xb0\xbf\x93F\t\x93^\xb0\xd3\xbf\xad\xf1\xc6/\xd9P\xd4?\x0e\xe4\xa8\xc0\xe6p\xd5?\xff\xbc\xe0f\x9ez\xd8\xbf(\x08#\x95~\xe6\xc0?5\xb8\xe2\xf5]\xa4\xc4\xbf\xad\xc6\xab\x17\x07\xa7\xc6?L\x0e\x1d\xd0=T\xd7\xbf\x05\xc40\xa8\xdb\xc1\xd1\xbf\x1a\x03\x8f}*\x96\xc2?J?\xe0\x9f}\xda\xb7\xbf\xb1\xe8$\xf5\xef\x97\xda\xbfr\xb2.\xbc\xd0i\xae\xbf\xaa\xf7\x07\xbe?\xaa\xb4?x\x9a\xe9\xff\xb6\xab\xb0\xbf"z\xb9\xbb~\xe1\xd7\xbf\x9e\xba\x06\x9e-\xa9\x99?W9\x01A\xb1\xaf\xa8?"\x7f\xc3\x83\xd6\x1c\xc5\xbf\x13\xf2a\xdf\xd5\xca\xa0\xbf\x03\xf6\xed\x7fMv\xc1?\xc6?\xe8ep&\x98?GlD4x\xc5\xa3?\x9f\x13\x8d\xf2\xf7*\xdb\xbf_H\x9a\xf4\xcb\x08\xc8\xbf\xbe\x9eR8i\r\xd0?\xa4\xcd\x10\xba\xf8L\xdb\xbf\x94k\xd6 U9\xd8\xbfOf\x91\xf49"\xc5?\x17m3\xc1T#\xb9\xbf\x9d\x84I\xb8\xdf\xd5\xc6?\x01\xf2\x87\x82\x12\x8d\xc2?\xaf\x9af\xa8aJ\xbb?\x1f\x9d+Q\x1dJ\xcd?Ic+\xfb\xa3\x02\xcb\xbf\xf3\x0e"KOP\xd3?\xa18\xbc\x8d*(\xca?#\xae\xc3\xe7\xf6\xac\x99\xbf\xf4\xb2\xba9v\xd3\xb2?\xcc\xbc\xda\x9e=}\xac\xbf\x91\xf3\xc8\xd4\x0f\xc1\xd4\xbf\xf5B\xa5\x1c\xe9\x9b\xc8\xbf\x89\x97\x84\x82\xb0,\xb9\xbfIUy\x90\xd4\xe1\xb7\xbf3K\x1b\xb1\x0c\xee\xac?Z\xdf\xc2\xb9sY\xd2\xbf\xf2\xec\xcc\xda\x1d\x12\xc8?=\x8dQ\xda0_\xd2\xbfs\x9dy\x1fv\xa2\xac\xbf\xa1\xda\x94\x98W\xc3\xd3?|\xb9(E*\x7f\xa4\xbf\xce\xd2\xfa\xf0|r\xd3?U\x17c\xdb\x12`\xa1?\xb6\x7f{\xf8S\xa3\x8c?\xd1\x8an\xa1!\xfc\xca?\xb5+\x9a\x07`\xdc\xd6?\xb3\x93\xaa\x1f\xdd\x0f\xd6?r\xcc\xfcp0\n\xd7?\xd3\xa9\x9bf`(\xcd\xbf,\xc9%_(\'\xd2?\x89\xbakW\xffQ\xb0?\x92:H\xd7yO\xd7?\xff\xe5m\xc4\xd8{\xd3\xbf\x83|\xe1C\x18\x84\xd2?\x88\xdb_\x7f\xdc}\xc6\xbf\x82\xee\x9ex\xddx\xb0\xbfM\x1d5\xe6\x93w\xd9\xbf4U4\xf9\xad\xfb\xd8?:\xc8\n\xfbL\x04\xcb\xbfI\\,\x02Ay\xd6?u\ta\xfa\x1e\xb1\xc4?Z\xf1\x16bs\rq\xbf=\x10g\xe8Q\'\xd2\xbfsS\xa3\xf3\xca\xf1\xd2\xbf\x07\x92\x9f\xaf\xdc\xcc\xd6?\xf5f\xc0\xc4,\xf5\xbe\xbf\x95\xd63\xc5\x8d5\xd3\xbf\xa8\x9a:f\xe4\x14\xd3\xbf6%\x8c7s\xc7\xd1?\x9d\x8b\xca}\xe7\x88\xd6\xbfW\xdc\x96\x8e\x95X\xda\xbfi[[\x12e\x9a\xa6\xbf\xde\xa4\xe2\xa0\x03k\xc0?\x11\xa6\xa6#!\xa9\xb1?\xad\xd8\x12qq\xaa\xd6?\xb9\x07\x0b=+\xb5\xce?\xae\xa4\xd3\x88\x87\xf6\xcb?\x9f\x91\xa6c\x1c\xea\xb4\xbf>\x8d\xc2X\xb6\x14\xc8\xbf\x96<2\xd4\xacl\xb3\xbf3\xed\xc1T\xc9\x0f\xd1?*[|\xabe\xf7\xc8?\xed5\xe5]\xe2\xa2\xc1\xbfx\x8b\xbd\x86e"\xd2\xbf\xf7b\xa8pG\xd5\xd7\xbf\xcf\x82X\xec\x81\xeb\xcb?tZyt\xf4u\xd2?F]\x92T\x1f\xec\x94\xbf\x90A\x99\x8d_)\xd5?\x81\xfd\xe5\xd4\xb7\x9e\xcd?\x8f<\x83ZP\xb4\xc6\xbf,S\x0e\x85\xb3\xe4\xc2?M\xf2R~t\xc4\xbd?\xc2\x99D\xe6mQ\xd3?_~\x93\x95Y\xea\xd0\xbfouk\xa1\x83;\xd2\xbf5\x80\x87\x9d1\xba\xd4\xbfMm\xe7\xf6>\x86\xd2\xbf\x96Y\xc9l\xa6\x87\xcf?\x0ep\'\x81*\x1c\xd5\xbf\xcfs\xd6\xc2sL\xa0\xbf\x024V\xd2\xa1\x1a\xcd\xbf\x12\xbf\xbc\xa2\xb6\xc7\xd0\xbf0c\xb6\x03\x89R\xab?\x94\xdf\x8f\x1d\xa6\x10\xcb\xbf\t\xa6SA\xb6\xb6\xbf?\xf3\xcdy2y\xed\x98\xbf\xb0\xae\x99hk\xc5\xd0\xbf\xcf]\xbc\x81\xd95\xc7\xbf\xb7\xefD\xb3\xf5\xbe\xd5?\xb4\xe2\xfb\x82\x8ac\xd5\xbfw$FE\x9a1\xb8\xbfK\x812\xe3\xad\xd8\xb3?\xc5+\xbc\x88\xbd\x03\xd7?\xd9u;A1\x8e\xd7?\xaf\xd9J\x0bz\xce\x94?\x0b\x9a\xd4H\xca[\xba\xbf\xdbKK\x97\xc0k\xa5\xbf\xa5kF\r\x02\n\xd4\xbf\x8e\xe1\x0b\xea\xf0\x80\xc4?A\x02{\x1a\xf4\\\xd2?\xa0\xc7\x0f\xf0\x15K\xd0?\x84\xf7)\x8cw\xfd\xd5\xbf\xbe\x0cSO\xf6h\xb4\xbf\x00Y\x92\xff2\x13\xba\xbff\xe0\xab\x90\xfc\x83\xcc\xbf\xc3\x88r\xa2X@\xc7?\x9c\x0f<\x89\x0b-\xd8\xbfF\x08\x96\xf3#x\xd6\xbf\x1e\x1d\t\xa3zL\xd4?e\xd1\x8a\x13\x04\x96\xc2?\x1e\x17\x9d\xd4\xf6&\xb7\xbfu]Bnyo\xb0?\x1d\xc9Mj\x80U\xc1?\xcf\xa046ie\xc0?l\x02A\xc8\x1a\x87\xa0??\xe9H\x12L\xd7\xd4\xbf\xfc\xb2\xd0\x12ly\xc0?\x04\xd0\x92\xabs\xc9\xba\xbf\x10\nH\x7f\xf7\r\xdb\xbf3c\x16\xe8C\xfb\xc4\xbff\xb5!at\xf8\xbc?\xaa\x1a\x96\xbf\xb2\xf0\x8f\xbf(*\xda\xeb\x0c\x87\xc6\xbfR>\xc9\x8b{\x8a\xc3\xbf\x03\xd0\xd2n\xa2\x00\xbd?\x02n-\xfa\x8b\x8a\x99?\xf4b[\xd8\xd6\xb1\xae\xbfC\xbdxeU:v\xbf\x1d\xa4r\xa1\xfe\xd6\xa0\xbf\xbc-@o@\x1f\xce?\xe7\x8e\x04\xbf\xc1c\xd4?YM\xd1%\xef\xd2\xce\xbfF\xe3\xb7+o\x9e\xcb?\xc7\'\xc2k\x0e\xb3\xbe\xbfD\x18\x9b\xa0\x01^\xd6?\xca\xb9\x04\xd8\x0c\x1d\xcb?BjX:D\xda\xd9\xbf\x81\x0c\x0c)\xd84\xc8\xbf\x9e\xb65$]\xdb\xc4?F\xb5\x16\x88[R\xb4?\x05\xa0ow:7\xd1?\xeb\xcc\xe2>B\xa1\xcf?\xa4\xaf\'\xf9\x0b^\xbe\xbf\xbb\xa5K\xf8\xd8X\xd5?N\xf4g\x12\xd8g\xd5\xbf\xf6z\xa3\x18\xaf\xdc\x89?R\xae~\xac\x16F\xd5?\x84\xbe\xf8e\xb3%\xbd?\xffx\xa3\xe8=q\xd5\xbfX\xa4H\x13\xa3g\xb9?\x0c\xeaZ\x93\xefl\xd6?\x07\xe6\x17\x0f\xdfJ\xce\xbf\xc8\x83\xb0\x85Jh\xb5?y!~\x03"\xaa\xcd?\xbc3\x06\xc6,\xb2\xd1\xbf\xc5\xa5\xb1\x04\x91\xac\xd1\xbfm:=\xee\xd9_\xc3\xbf@\xd6\xfc\x92\xcb\xf5\xcb?\x1d\xf28\r\xd9G\xd5?h"\x9b\xeb\x19\xf2\xd6?\x9e\x1b\xa8\xef\x978\xd1?\x88k\x8cX\xa7\xb6\xbb\xbf\xc2`\x8b>\x15\xf0\xd6\xbf}/\x8c\xa2\xf2\r\xd3?\xc9M\xd9mx\xc0\xc7?\x84\xc0\xc1@>\x1b\xc5\xbfJY\xed\x14\x9c\x16\x90?\xb2"\x14\x84\x81\xdc\xd0?\xe9\xb2\x1f\x93\x7fe\xb0\xbf\xf5\x1c\x88\x00\rz\xcf\xbf\x7fc\x1e\xa6}`\xd8\xbf\xf4\xef\x10\xd1\\\x8a\xd4?\x0e)s\xf3J?\xc6\xbf\x7fX*\x04u\x80\x8d\xbf\xdd\xedB\x82\x8a\xb6\xc1?\x95lR\x16\xd8*\xa6\xbf\xbc\x17\x0c\t\x045\xb0\xbf\x11\xbc\xdf\xd7Z\xa9\xd9\xbf\xa2\xae\xfd\\\x93\xac\xd3?\xaa$\x08\xf1U\x02\xda\xbfB85\xb8vY\xb1\xbfy\xc0\x0fU\x86I|\xbf\xf7!\xf9\xe9\x13\xb1\xcc?\x91\xa0y!\xd7\x8d\xd4\xbf[\xcf\xd3 (>\xd4?\xa4\x93\x8e<\xe1J\xac\xbf\xe5\xc3\xc7\xdf\xf2\xf2\xc0\xbf;2s`\xbc\x8f\xa1?\x02fz2\x02i\xbb?\xcb\x85\xeav\xb4\xd4\xbe\xbf\xb4\xf9\xae\xb7\xde\xb4\xc3?S\x87X\x86\x12\xce\xc9\xbf\x8e9#\x02\x80+\xb7\xbfpi\x19bZ\xfc\xb0?\xe50\xff\xbd\x0e\xc6\xd5\xbf6\x93\xb6\xddir\xb2\xbfK\x19\x85\x1c\xdd\x8a\xd2\xbf\x97\x0b\xc6g\xec\x0c\xd2?\x84\xe7%\x11\x82\x01\xd2\xbf\x853\xbd\xf4cI\xd4\xbfV\xc6\x1cyJ\x9d\xcc?\xd6\xa1\xd6\x10\xa6\x19\xad?6\xba\xe4.\xe9\xbf\xc4?`\xdcm\xb6\x99\xfb\xa3\xbf\xcd\xf7\x9bQ\xe3\xa7\xc8\xbf\xf4\xf0<Cct\xca?\x05\xe3\xaa\xa1\xc5\x7f\xcb?\xf57\xf3\xe7N\xf9\xd3?>i\x05\xae\x10\xc3\xbf?ob\xd9\x8c\xf6\r\xbf\xbf\xd9>\xc9D\xa1T\xd9\xbf:[\x80-\xa9\xb6\xa1\xbf\x8a\xf6\x11\xf2\rY\xcc\xbf\xf0f\xa3/\xa7\xd5\xcc?\xca\x1d\xe7\xb6\xe9\xc5\xd1?\xdc\xa0\x13\xdf\xfco\xcd?\x98H\x98\xe9/\x9a\xd7\xbf"*\xf1$\xc9\xbc\xa7\xbf\\)C\x06y\x1e\xd0\xbf/\xd4\xdb\xee\'k\xd7?c\xc4o\xcf#h\xca?\x9b\x812t\xfcj\xd7\xbf\xc6\x82\xfcM\xa7\xe5\x97\xbf\xfdW\x82\x81\xb8j\xca?g\xed\xf7\x81\x83F\xd3\xbf\xd9\x91\x95m\x83\xd3\xd4\xbfOP5\xc5\xd7\x90\xc1\xbf7\xbbg\xccMM\xb8\xbf\xfb\x1bx\x8c/i\xb7\xbf\x1a*\xfbq\xe2y\xca\xbf]\xec\x99\xc1\xe3E\xcb\xbfh +\x0f\xbeZ\xd9\xbf\xebj\xfbp3\xa0\xaf?\xadk \xd7\xf6\x05\xc1\xbf\x0b\x83\x81\x9a\x13$\xc5?H\x83\xb053\x00\xd4\xbf\x947\x1e\xe2$*\xd0?J\xd8I\xea\xa3\xb5\xc5?(\xce\x19\xce\x83\xf8\xd3?t9\x16`/\xb3\xa7\xbf\x86\x86\xcc\xd0\xa68\xd0?.\xccwe\xa2D\xa8\xbf\xac0\xb0\xea\xe8E\xb5?!\xf2_\xea_\xa6\xa5\xbf 8\x12\x96M%\xa8?\x85a\xa0\x07U\xbd\xc7\xbf\xfc\x80\xa4Q?O0?Hf\xb3\xeb\xda\x9f\xb7?$\x98\xda\xf3\xcd|\xc5\xbf\x15.c*\xd2\x9b\x9a\xbf(\xcc\xbf\xa2\x7f\xd8\xd3\xbf{\xb8f\x9e\x917\xd7\xbf\xf4\'\x7f\xe3\xe0!\xaa?j\xa0\x82v\xb9{\xbe?\xaaFs\xdc\xca\xfd\xc1\xbfF\x81\xe9\xba\xa5\xff\x8f\xbf\xe1V\xf5,\xf5!\xb4?9j\x86J\xa7\xe2\xb4\xbf@\xfaH\x18]\xe8\xd6?y\x89S\x99v\x9f\xcc\xbfCP\xd1\x8b\xd9\xd6\xbe?\xd2\xcd\xeb\xd1%]\xd9\xbfn\xd6\xc1\x14\xd4*\xb4?B\x93\x99\x1a\xb3\xdd\xcd\xbf\xdc\xdb[\xccP\xbd\xd1?'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp354
(dp355
g32
(I00
I00
tp356
sg34
S'float64'
p357
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg40
S'W'
sg12
(itheano.gof.utils
scratchpad
p358
(dp359
bsg10
Nsg28
g354
sbasg12
(itheano.gof.utils
scratchpad
p360
(dp361
g15
(lp362
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p363
I128
S'initialise_parameters'
p364
S'self.reverse_weights = self.weights.T\t# Tied weights, so the reverse weight'
tp365
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp367
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p368
I3084
S'transpose'
p369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp370
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp371
asbsg147
(lp372
g343
asg149
g1
(ctheano.tensor.elemwise
DimShuffle
p373
g3
NtRp374
(dp375
S'drop'
p376
(lp377
sS'shuffle'
p378
(lp379
I1
aI0
asS'augment'
p380
(lp381
sS'input_broadcastable'
p382
g356
sS'inplace'
p383
I00
sS'new_order'
p384
(I1
I0
tp385
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p386
(dp387
bsg28
g1
(g29
g3
NtRp388
(dp389
g32
(I00
I00
tp390
sg34
g357
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T'
p391
sbsS'learning_rate'
p392
F0.10000000000000001
sS'get_expected_rewards'
p393
ctheano.compile.function_module
_constructor_Function
p394
(ctheano.compile.function_module
_constructor_FunctionMaker
p395
((dp396
S'profile'
p397
NsS'function_builder'
p398
ctheano.compile.function_module
Function
p399
sS'accept_inplace'
p400
I00
sg98
(lp401
g1
(ctheano.compile.io
In
p402
g3
NtRp403
(dp404
g40
S'ix'
p405
sg272
NsS'value'
p406
NsS'borrow'
p407
Nsg54
I00
sS'implicit'
p408
I00
sS'mutable'
p409
I00
sS'variable'
p410
g1
(g7
g3
NtRp411
(dp412
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p413
(dp414
g15
(lp415
(g20
I76
g18
S'self.initialise_theano_functions()'
tp416
a(S'denoising_autoencoder_cart_pole.py'
p417
I67
S'initialise_theano_functions'
p418
S'input_matrix = theano.tensor.matrix("ix")'
tp419
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p420
I771
S'matrix'
p421
S'return type(name)'
tp422
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp423
asbsg28
g1
(g29
g3
NtRp424
(dp425
g32
(I00
I00
tp426
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
g405
sbsS'shared'
p427
I00
sg60
Nsbag1
(g402
g3
NtRp428
(dp429
g40
Nsg272
g1
(g119
g3
NtRp430
(dp431
g10
g1
(g95
g3
NtRp432
(dp433
g98
(lp434
g104
ag1
(g7
g3
NtRp435
(dp436
g10
g1
(g95
g3
NtRp437
(dp438
g98
(lp439
g1
(g7
g3
NtRp440
(dp441
g10
g1
(g95
g3
NtRp442
(dp443
g98
(lp444
g411
asg12
(itheano.gof.utils
scratchpad
p445
(dp446
g15
g137
sbsg147
(lp447
g440
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p448
(dp449
g15
g157
sbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p450
(dp451
g15
g171
sbsg147
(lp452
g435
asg149
g184
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p453
(dp454
g15
g216
sbsg28
g222
sg40
Nsbag227
ag239
asg12
(itheano.gof.utils
scratchpad
p455
(dp456
g15
g249
sbsg147
(lp457
g430
ag1
(g7
g3
NtRp458
(dp459
g10
g432
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p460
(dp461
g15
g276
sbsg28
g261
sg40
Nsbasg149
g259
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p462
(dp463
g15
g266
sbsg28
g115
sg40
Nsbsg406
g106
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g104
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp464
(dp465
g40
S'W'
sg272
Nsg406
g350
sg407
I01
sg54
I00
sg408
I01
sg409
I00
sg410
g348
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp466
(dp467
g40
S'b'
sg272
Nsg406
g47
sg407
I01
sg54
I00
sg408
I01
sg409
I00
sg410
g43
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp468
(dp469
g40
S'lW'
p470
sg272
Nsg406
g1
(g46
g3
NtRp471
(dp472
g40
g470
sg49
(lp473
g51
(g52
(I0
tS'b'
tRp474
(I1
(I429
I3
tg38
I00
S'\xe6\xad\x04/#[\xc4?\xff\xcd\x9d\xcc\x13Q\x98?\x97g\x98\xa8Ee\xc7\xbf\xb2=D\x85\xcc\'\x84?\xb1\x97\xc1\xcff\x01\x8a\xbf\x93h\xf5)ifg?\r|\x11\x96\xa2q\xaa?3\xda\xbb\xc5\x8a\xff\x90\xbf\x08\x8f33\xdd\xf1\xa1\xbf\xccs4L@\xe2\xbd\xbf\xcb\x17n\xe8o\x89\xb1\xbf\x99EQ\x1a\xd8\xb5\xc7?\xe6L\xbf\xcb\x9a\x92\xb4\xbf(%\xef\xb4I:\xd2?\xf7\xa3\xfe\x03F+\xca\xbf\xcb@\xb6\xfd\xb87\xac?\xf6\x9bx\x10\rY\xb2?S\xde\xa9\xc7t:\xc0\xbf\xd8S\r\xa6\xf3e\xcb\xbf\xe5+\x046]\xce\xba\xbf\xf6\xb4\x87 \x91f\xd4?\xa6\xc9\x0c\x85\xd4Y\xbc\xbf<^\x9e\x8do\xfe\xbc\xbf\xd8\x93U\t"\xac\xcc?M"\xa9|2"\xcd?\xc4"T\xa1\x98B\xc0?\x86\xa2\xfe\x8ee\xb2\xd6\xbfD!\x9c\xa9QK\xb1?\x87d\x7f\\\x08\xad\xd0?\xc9l\xe6\xc6\xdc\xff\xd4\xbfW2\x0b\x0b\x044\xaa\xbfbK\xd7\xdb\xe9>]?\xc5w,\xbc\x0cJ\xa9?#\xe2\xb3\xb1\x93\x8e\xbe\xbfbv&+N\xf0\xc4\xbf\xc43\x00\x02\xcc\x1b\xd2?\t\x04D]\xae\'\xbe\xbf\x9c#\x0co#\xe2\xbc?\x83\x06~\xe3\xaeXt?\xaev\x14\xa4\xc18\x97\xbf\n\xa5}\xf3A\xeb\xb5?\x8e\x87x\x8a\x11\x1d\xb0\xbfD\xb1\x92\xa4\xa6x\xc7?b\xca.\xfd\xfd\xe4\xb2?^\x0b\x95\xd1\x92u\xd0\xbf?\xe5\x80\xff\x08t\xc2?\x8b$\x03\x8b\xea\xbb\xc2?\xf2\x04B\xc5\xf9\x97\xd2\xbf\xeb\x19\x89\x14}\xde\xc0?\x83.w\xb3\xe9\x80\xb0\xbf\xd9\x04\x9bu\x10<\xb1\xbf\xc4j\xdf\xba\t\x93\xcd?\x16\x1e\xda\xe1X\xab\xaa?\t\xf9\xaa\xf9\xef\x1e\xd2\xbfrJ\\,\xd1\x06\x94\xbfX\x961\x88\x90\x12\xc2?\xea\x19L\xc5l#\xbf\xbf\r\x8f\xf7-\xdbZ\xc3\xbf\xe9\xff\x944\x91%\xc1\xbfjGF16@\xd2?\rQ\xf6<K\xb7\xc0\xbf\xa5~[\xd0\xb4|\xc9?\x17[\xca&\xd3\x8a\xb1\xbf?\n\xde8\xf8\xb9\xb3\xbf\xae\x00t\x80[\xf4\xb0?\xbeMP\xc3\xe5,\x86?\xd5\x99QL\xb0\x84\xc6\xbf\x99\xac\x84o\x11\x0b\xbc?!\x87\x1e)O\xfe\xb0?\xa1c?0\x96\xc5\xb0\xbf\xc8\x82\x8aG\x81\'\xbf\xbf\xfe\xf2\xe4\xbb\x8b\xf6\xc7?\x05\xc8\x87y\xcd\xaa\xb9\xbf\x1c}J]\xba\xd6\x7f?X \xb3\xd3a\xad\xb7?\xbfy\xac\xb4\x99\x04\x9d?\xad8\x83\x05T\x11\x86?\r\x0b\xb7\xdb\xa1\x06\xa4\xbf\xda:\x8bb+\\\xc3?\xa2\xf4\xcat\xdc^\xb6?\x06\xb5\xf0\x9c\x99\x8b\xce\xbf\x99<OW\x1d\x87\x9f?\xa6\xf2\xbaZ\x98\xe7\xaf?hH1\x83\x93\xd5\xb7\xbf\x07#bE7\xeb\xb5\xbf_(\xd2\x0c(p\xc1\xbf\xcf9\x83\xaf\xc3e\xcc?\xbc\xbd\xab\xe6\xdc\xdf\xb1\xbf\xc5A\xc4]\xad\xa5\xcf?\xdfbn\xea\xbe\xb5\xc6\xbf\x08f\xcc\x8c\x19y\x96?\xd3\xf0\xb2\x8fyZ\x9a\xbf:U4\x17\x00\x0bo?\x07\x03\x8eT\x10\xf6\xbc\xbf\xd1\xca\x06\x95\xc8\x1f\xb7\xbf\x1bg\xcat\xec\n\xca?+\xe87\xbd^\x80\xb2?\x97up\xd8|Z\xa7?\xc3"p)\x9d-\xbe\xbf\xbf(CS\xbf\x85\xc9\xbf\xed\x1c\xf6"\x03\x96\xb4\xbf\x9f\x1b_r`\xe8\xd1?\xdf\x81\x1c\x9c\x11n\xc3\xbf\xf0~\xf2M\x04\x11\x8f\xbf\xff\xa9\xfb\xe0!_\xc5?\xee\xf3\xf3H\xca\xf1\xca\xbf\x81t\r\xf2\xd7P\xa1\xbf:QwE\x00F\xcf?l8\x85\xda\xd5S\xc0\xbf\xe8\x92\xa1/\xcf\xc8\xc7\xbf\xa4e\x13\x85R\x0e\xd4?\x0be\x9fm\x96/\xb4?\xec\xa8p\xdb\x9dZ\xa0\xbfO!\xce\xff\x8e\x04\xa8\xbf>\xf3\xfe\r\xc9I\xb6\xbf2j\nt\x91\x00\xaa\xbf$\x14\x02\xe4\x08\xa5\xc1?$:\x86\xca\\\xa3\x8b?\xa8_\xd1\x1e\x0e\xd6\xa7\xbfA\xd1/\xec6\xed\xa0?\xa2\xd4rn|F\xb5?\x93\x01\x80Z|O\xbe\xbfBY\x1a\xd8\xff\x11\xa2?\xf8d\xc9\x1c|\xac\xc3?&\x13.KH1\x93\xbf\xaa\xa2c\x13SF\xc1\xbf6\xc4.\xcaH\x84\xbb?\xbb\xdb![G[\xab?\t\xd9\xdf;\xf6\x98\xc4\xbf\xe8*\xe4\x87|\xec\x98\xbf\xf4\n\xc6\xcf\xce.\xc8\xbfM\x90\xc2`^L\xcb?\xd5\xd0\x04k[N\xb8?\x11Ct9Z\x8d\xb6?\xed\x89<\xd2\xdam\xc7\xbf\np\xa5ES\xd4\x9e?\x9e\xd5\x92\xf3\xd3\x1f\xa5\xbf\x8av\x00C\xa9\xd6\x86?f\xc3\xb1Nfo\xb7?\x0c\x12\x9d\xcfI\xef\xc0?\xa2\xf3\xf5\xf6\xfc\xa6\xcc\xbfe\x04\x19\xcc\xe8G\xc6\xbf4\xf6\xd3\\\xef\xd3\x81\xbf\xd5C\xe6\xc1\'e\xc7?|p\x8am\xce\xb7\x8e?\xfcd\x8a8W\x0b\x9c?\x7f\xce\xa77\x9f\xb3\xa5\xbfPd~\xedR\xea\xac?/m\xe5u\x0b$\xaa\xbf\x1e\xb8\xc7\xbc;2v\xbf\x13\xf4$\x90\xf1\x90\xc1\xbf#jg\xa2\x9dS\x94?\xec\r\xb0\xb7\xfb\x0c\xbe?\x0c\xce\xa9S\xfb\x12\xb4\xbf\xbe\x16\xf3R\x909\x91?\x16\x11\xda}.\x89\xaf?K\xbaq\xe0z\xd1\xa9\xbf\x88\xa1&\xd4\t\xd5\xa8?t\x16c\x89!\x8e_?\x80\xaeBal\xa4\xbf?\x96\xa2\xf4B\xcc\xab\xb8?N\xa8\x1bR\x1c(\xcc\xbfX\xeb\xf0?{U\x97\xbf7\'\xc5\x99\xc4K\xc3?\xc9\t\xc71\x15a\xc0\xbf!\xfec\xc618\xc1?\xde\x8b\xed\xc0\xf8\xcb\xc5?\x13\xc5\xa8C\x15\x82\xd3\xbf\xe6\xedOJ\x00\x80\xa8\xbf\xe3\x9d\x0b\x8e\xbd\xc8m?\xf73oqt\xa3\xa6?b\x08.\x8d\xc3=\xb6?\x9f\xb5\xf2\x85\n\x89\xbc?\x1c_\x90\tgc\xc9\xbf\x8a\xdb\xbc?\xaf,\xa0\xbf\x90,\x84W\xa1%1?\x19\xd3\r\xfdc\n\xa0?df}\x99\x14E\x80\xbf\x08i!p]n\xb0\xbf\xc2\x15Q\x03\x00w\xb2?p\xb3\xc9^\xe2\xe1\xb6?\xd6\xaeB\x89\x86(\xb2?I1\x06t4\x85\xc4\xbf\xa3<\xc3b\t\x19\xa1\xbf\xcd\r]\xaf?\xf0\xae?\x19\xa23\x99l\xae\x9b\xbf\x0b\xad\x96J\x9b\x07\xc4?\xe3\xd79\xc0\xa7\xc2\xc3\xbf\x81J5\x97\xe2<a\xbf\xd6\x19\x96\xf7\x1e\xc8\xbc?\xe29\xb7ut\x17\xb2?\xe0\xa9\xa6\xb6\xc9o\xc7\xbf\x18k"\x9f\xae\xd3\xb8?\x7f\xbb\xe1\x0b\xae>\xa9?\x7f\xa4\x89\xd2\x82\xb9\xc2\xbfM\xb0\xda<\x87\xea\xbc\xbf\xa7\xd0.\xae\xe0y\x9a?\x15\xfcN\x11\x0fL\xb6?\xb4\xd7\xd9\xe0:\xf6\xc1\xbf\xe4\xa0E,1:\x90\xbf\xb3\x8bb\x06\x81\xfd\xc3?\x91\x1ep\xfe\xa1*\xab\xbf\x01\x0f\xf0$C\x8c\xb2?\xab\xfe\xdf\x96\xc8\xdb\x93\xbf%\x18\x95L#\xda\xb5?\xf8}hJw4\xb8?\xe1\xca~KM\x07\xc7\xbf+\x05\xd1\xcb\x85\xec\xb7?y\xc1\xe7\xf9\xe7\xa2\x96\xbf\xee\x14W\xcd\xcbC\xb2\xbf\x16B["S,\x98?]\xa0E\xb0\xdc\xb9\xaa?\xab\xa0\xb9 \x03h\xb3\xbf\x80\xce\xe9\xc2\xde\x00\x9a\xbf\xaa\x1b\xe0\xf7\x89>\xbe\xbf\xa6GM\xd4`_\xc2?Dv\x87\xc4\xff\x88\xaa?~\xfb\xe36}\x9b\xc1?O\xd9\x05(\xbd=\xc8\xbf\x14\xfe\xb2\x9e\xe8Q\xbc?UVY2gM\xbe?W*\x86\xe8\xa7O\xcd\xbf#\x84g\x8b\'\xf0\xcc\xbf\xc0\xf7\x0fx8\xe4\x8b\xbf\xa7\x83\xe8\x12k\xae\xce?s9\x19\xd8\xa9\xb6\xb7\xbfz\x03\x9b\xa6c\xcd\xc2?\xf5\x9a9\xea:\xc8\xab\xbf{\xd7xg\x03l\xbb?;\xd8\xfeJs\xb5\xb5?\xb5\xd7;Y\xbb\x90\xc8\xbf)\x02&j3\xef\xbf\xbf2S\x92?\xe3\xd3\xc2?\xcb\x90\xfaSL\xe2\x96\xbf\xc8B\xc6a<w\x91?\xb0|\xbc\xe0[\x7f\x9d?\xbf_A!L{\xa7\xbf\x1f+\x94\xba8\x99\xb3\xbf\xean8\x0f\xe66\xa7?\xc2\xce\xdf\xcb\x16\xf7\x9f?\x14<\xe2D\xe1K\xc0\xbf\xac>\xd6S\xd2\n\xad\xbf\xe7\xcb\xd7\xd9\x95\x8e\xc7?9\xc1\xdat|\x12\xa0\xbf\x14\xf8\xedRTk\x95?\xc9\x13\x8f-Is\x85?\xc6\xcb\x80\xc9`\xe1\x9d?\x1e\x99\x1b>,\x8c\xb1\xbf9\xccv\x17\xa8\'\xa4?\xc3H\x9d\xdb\xce\xae\xb9?\xf8\x08\x01\xbd\xc0\x99\xc0?\x89\xad\xcf*(q\xcd\xbfc\xac4\xfa\xee\xe4\xb6?\xba$\xca\xd2\xa5\xfe\xa3?_\xdf\xcc\xf1 r\xc0\xbf\x9d\xa5\xb9\xe3yb\xc3?\xdb\xa2\xee\x8b\xf5\xfd\xc2\xbf\xbe\xb5\xc0\xf2\x15!i\xbf\xa9\x12\xa8y\x17\x15\xa7\xbf1C\xba_:M\xbe?\xda9\xe6\xa2\xae\xc2\xb2\xbfB\xba7^\xbb\x83\xc0\xbf\xa7\x15\x00H]\xac\xb4\xbf\x01\xc57\x02\xea\xd9\xca?\xd7\x0b\xba\x1b95\xc0?IVp]/\xa1\xa6\xbf\x92\xec\xbb\x88\xda\x19\xb5\xbf\xea\x1cuz0\x03\xa0\xbf\xed\xa8\x04\xbcn\xc9\xc7?\xc2ag\x9d\xa2\xc8\xc3\xbf\xa2X\xb3\x1c\x89E\xa8?&\xae\xdf\xdc\x89\xef\xa6?J\x83\xc9|\x89\x9a\xb7\xbf\xa0\x9e\x88D\xab\xa8\xb1\xbf\x14\xab\xffa8\x1b\xc4?\xae\xb7v\x7f\xc5\x8d\xb6\xbf\xdd\xbf%\xa6\x10\xd9\xb3?Bt\xdc\x04 \x1c\xaa\xbf,\x16\xde\x8e\x02,\x9b\xbf\x9db\x1a\xf8\xf0Y\xb9\xbf\x80\x88\xafi\x12\xaei?\x95\xe6\xccd\x80\x8c\xb8?\x8a@\x13/\x11\xa5\x90\xbf,\xdfF\xaa\xf7\x88`??\xc9\x94s\xe4\'\x8d?\xaf\x914\xfd|\xcc\x94?\xeb\x9f\xf6sr\x94\xc2?\x162\x9d\x13\x02.\xc5\xbf%\x030\x86o+\xc0?\x9a\xb1\xce%`\x1b\xa1\xbf@\xadx\xf9.\xc9\xb7\xbf\x80\xd0\xf1&\xfa\xb3\x81?\xcc\xa3X6\x9fF\xae?\xdd\x8b\n\xe0\xceY\xb1\xbfa\xe0\x8b\x8e\x08|\x95\xbfnk\xcf\xbb\x8bc\xbf\xbf\xb91\xb9\xefFa\xc2?\xfexw\x92\x1b\x8e\x96\xbf\xb5/\xe8s/\x80\x92?\x9e%=z\xb07p?\xceq\xcd\xb6\xa18b\xbf/\nY\x15\x881\xc1\xbf\xdc?4\x9cjz\xc1?Z\xb2\x1d\xe5n\x02\x93?PkE\xf2)u\xba?6\xd8\x8c\xab\xc55\xbf\xbf\xde,j\x8c\xf5\xfe\xa6?\x94\xe1m\xaej\xeb\xbf\xbfE\xcb8\xe8\xefk\xb4?\xc4\xec\x03\xe9\x14\xe3\xac\xbf#\x01`\xae\xd0\xa6\xad\xbf\xce\xf6\xb1\xcb\xf2D\xbd?\xdfw\xbe\xfc\xa4\x14\xd1\xbf!\xef]J;\x9e\xa4?\tt\xe5&\xbb\x01\xcd?\xac\xf9f\xf8\x91\x88\xa7\xbf\xcb\x87Kk\x96\x82\xb6\xbf\x03\x82\xbf\xb3o#\xc1?>p]\xda8\x92\xa4?x\x18E\xbd\xc6X\xa6?dD\xd1\xcb\x7fu\xb5\xbf\xfd\xf4\x00Y\x03T\xc2?-\xdd*\xb2\xb7\x06\xa4\xbfO{\xec\xd8\xaa\xa4\xba\xbf\x98D\x94YI\xad\xa2?c\x02-\x0b\xe0\x9a\xb3?\xc1$\xf7\xb7\x84\xf1\xbc\xbf\xb7>\x9c\xed\x1f\xa4\x98?f\xdd]\xc5s\xbd\x9c?"\x0e}\xd9\xc9\xb0\xaa\xbf\x8b\xda\xa6xn\x8d\xb5?V\x16B\xe8\x1f\x1f\xa2?\xdb\xe5\xc7l\xfe\x9c\xbe\xbf\x7f\xfa\x8d\xe7\xca\x17\xc7?\x97,\xb2\xbd\x0c\x06\xa6?\xd2\x85\xfa\x16N\x99\xcc\xbf\x92\xbf6\xdc<Zs?1\xb0"\xb4m\x11\xb9?\x14\x1c\xe6\x81\x11G\xba\xbf\x14R\xbe-\x8fB\x97\xbf\xc3\xb71\xcd\xe9U\xc8?\xb2\xedy\xe7\x97m\xc5\xbf\xdc\xb5\xe7\xb3"{\xcb\xbf\x92^o\xb6\xd0\x12\x9f?\xfb\xc9\x19\x9d\xc8\x98\xc7?[\xb1\x15l$\xcb\x9d?@^\xf6z\xdf(\xa0\xbf\x1eX\xb8N\xd44d?\xa3Y\xda\xbbT\x9cb?\x17\xeb,\xe8\x946\xc3\xbf\x9c\x81=\x95#\xec\xc2?\xa1<\xbfs\x81\xdb\xb7\xbf\x07\xaa\xbfU\x15\xd2\xbd\xbf5s\xbfd\xcb\xd6\xca?(d]\xed\x18\xd6\xb7?\xca|\x07\xb6\x0c\xf5\xb4?\xa3p\xb2\xd1\x92e\xc6\xbf\x1b\xdd\x9bOx\xd1\xce\xbf\x96)\xda\x10\xba\xc2\xbd?\xa2\x90]\x8e6\xe0\xbf?\x8bA\x95V\xf1\x05\xc3?\x9e?\x18z]\xe8r\xbfP\x7f\xc4j\xaen\xc2\xbf\xe4(d"\x1b\x0c\xc1?\x81\xbc\xb7-\xf7\x16\xa5?\xe5\x17\xd2\xed\xd8Q\xc6\xbf\xd8}\xd6\xcf\xe6V\x91\xbf\xf2\xf8\xffA\xbdm\xc1?\xb2R\n\xd0\xc0\x85\xbe\xbfkm9\xc9\xb9~\xb5?\xdb\xad\xa5F\xb0\x07\xb9\xbf\xde\x02b\xeb\xb3G\x8c?\xfe\x89~\x03\x00\xa2\xb1?\xfd\x1c\x8b\xb5\xd7\xad\xc7\xbf\x0b\xb0\x97g\xaf\xb9\xbd?!\xda\xfc\x10\x06\xd3\x95\xbf\xbcX\x87(\xff\x16\xaf?\xa9\xeb\x08 |-\xa4\xbf\x8d\x7f\x84AF\xe6\xbc\xbf\xf47\r\x0b\xce\xc9\x9d?\x891\xc1\xbe\xd2s\xb5?W\xb3\xbdL\x97R\xa5\xbf2\x87(=\x9f\x99\xa7?.\x9eV\x83?8r\xbf\xc2c\xedu\xe6\x18\xc8?A|\xdd\xe0\xd2\xc4\x93?8\x13\t\xd2\x80\x91\xca\xbf\x14\x89\x95_\x88\xd6\xad\xbf\x8d\x02\x97r\x94Q\xb0\xbf\x19\xc7a\xa2\xd8<\xbf?4\xa1O\xa1\x80\xfe\x91?7$\xc8\xf0_e\xc2?5\x18\xf2\x040\xa5\xc4\xbf)7w\x14jb\x86?\xe8\x01\x13t:\x0f\xb2?\x8d\xe8\xa1\xb6\x87\xdb\xb4\xbf\xa4\xf1\xefuZ\xb8w?\xf9P\xb5\xad)I\xc4?\xac\xd0d\x81\xec\x06\xc5\xbf\x00\xa4\xa0^\xf0\xae\xa0?\x01W\x82.\xb1\x87\xb7?\x1a\xa9\xd2])\xdf\xbf\xbf\xab<\xdb\xcc`B\xc6?\xb3r\xb0\xb3.\x8f\x86\xbfP5\xa0\xe1m\xd9\xc4\xbf\x07\xfb\xcc\xe6:\x15\x99?n\x7fx(L0\xb5?(\xbe+\xe2\x9au\xbb\xbfz=%\x81\xd3S\xa6\xbf\x1e\x1aM]R\x0b\xaa\xbf\xe7+9\xef\x92/\xb8?\x9d\x0eob\xcez\xbd?kb+\x03\xf6s\x94?\xa8\xf3\x9c\xf1\xe5K\xc1\xbf\xcc\xe4Z\xe1%n\x93?k7\x91\x0b\xacy\xb7\xbf,~:\x93"\x9e\xb2?\x9a\x930\xc6\x98\x1e\xab\xbf\xb9\xb6\xaf\xc5Tc\xbc\xbf=\x00d\x94P\xf9\xc4?9q\xc9"3\x0f|?\xc7gH\xf4\xb6\x89\xb4\xbf\xe6\xd0\x1b\xc2\xc3\xc8\xb2?\xc5^X\xe4\xe7\x12\xac?\x9c\xbfU|\x9e\x07\xbd\xbf\xa6 S\x14U\xfc\xad?]\xebA&\xa5\x99\x84?a\x9b\xccO&\xaf\xb7\xbf\xfe]\x04\xab\xf1\x1b\xb5?5\xc81\xd1z\n\x83\xbf\xca\x15;\x9d\n\xbc\x9e\xbf\xc4\xfc\xe9\x02\xa4 \xa4?\x8a\xbaLeTM\x87\xbfg\x19#\xd9\x19\x05\x99\xbf\x94\xbb\xe4\x05\xe2U\xa2?iK\xc1\xe3^C\xb2\xbf\xe6\xfe\xc5\x9060\x91?7\x97\x1f\x7f\xa2\xee\xab?\xdd\\\x8d\x94\xab\x1d\xa5\xbf\x1a\x8f\xc6\t\xb6 \xb0\xbf\xea=\r\xd4\x8b\xaf\xba?\x96\x1d\xea\x8d\xeeL\xbc\xbfW\x03\'\xce\xd5|\x9f?\xd8\\`\x1a\xb9m\xb4?\xd2\x965\x85}\x18\xc5?s\x14 \xfc*\xdd\xb2?\xed\xa0E\x03\x13\x87\xce\xbf\x8e\x9feg\xaf\xb8\xc1?\x9a\x12\xba]\x83k\x9b?\x08\xe2\x1c\xd3\x1f&\xc5\xbf\xd9\xfb\xc3\x11\xd0\xc7\xc5?]\x81D\xbcz2\xc5?J>\x04g%}\xd5\xbfJ\xe5\xda\xf3(\xb0\xb1\xbf\xa5g\x9dED\x02\xbb\xbf\x83&\xbc\x9c6Y\xc6?\x98\xd8\x18\x9esT\xaf?\xba\xe90\xb3"X\xca?\xc9\x8f[\xcd\x9f\x16\xd1\xbf\'G\xa8\xce\xf7\xf6\x88?B\x94{\xb7f\xca\x97?\x01\xdcgO\xf1"\xa2\xbf\x17\xde\xd7PY\xe7\x91\xbf\xb6\xa2\xe2k\xeb\xe7\xb8?\xfe\xaa\xac\x17\x15n\xb4\xbf\x18\xcdP\x82Q\xd5\xcc\xbf-\t\xec[\x15"\xb1\xbf\xdah#\x18.\xb3\xd2?c\xc2\xcb%\x98N\xaa\xbf\x0b&\x98A&n\xad\xbfp\xf4\xb13_\xde\xbb?\xf2\x1aP\x8c\x07N\xc8\xbf:0\x0c\xa5\xccB\x7f\xbf=|x\xf1\x1dH\xc9?\xe7MX9\xdat\xad?\x88O\xa4f\x05\xb9\xb3?M;\xa8A\xb99\xc1\xbf^i\xf9g\x95\x8c\xb7?\x19~\x94\xfe\x9b\xce\xb1?\x9d\xf3F\xb3\x98\xad\xc4\xbf\xb7\x9c\x0e\x90W\xd2\xbb?\x98\x83\x10\xcc\xa5:\xb2\xbf\xf91\xfc\x87c/\xa3\xbf\xf8\xc9\xc0\x9a$\x1b\xa0?\xfc\xea\xd0G\xda)\xc1\xbf\xcepAB"F\xba?ep5\xea\xe2T\xc9\xbfc\x8a\xce\x90^\x82\xb4\xbf\xb2ZN\x19\t\xcb\xd1?34:\xec\xcd\xe5x\xbf.\xd7)\xb1\x16u\x91?\x86\x946lFw\x86\xbf\xb3\xc3\xd9\x8b\x9d\xed\xb7?z[\xa9\x08\xa6u\x9d\xbf\xcdl\xaf\t4\x90\xb0\xbfK\x12\xc2\xda\xc5\xac\xc8\xbf\xcf\xc6\xdc\x84\xe5\xe5\xbe\xbf\xce:\x98N\xdc\x0f\xd4?\x8a\x84\x17+S\xb7\xa5?!\xc7\x12s7D\xbb?\xcaDO\x84\xf0\x0f\xc3\xbf\xa4@w\xad\x99\xd0\xbb\xbft\t\xde#\x1a\x90\xb5?\xa4\xdbd&\xfe\x01\x99?\x8a\xb8sM\x19\xff\x9c?\x85\xfb2E\x1di\xc5\xbf\x83\x84\x84\x1b:\xc9\xc1?u\xc5\xba\xc2\xb9\x90\xba?\xfa\xb9\x9f\xb2<\xb5\xab?NQ\x05\x0e\xac5\xc4\xbfU \xcf@O\x18\xc5?\'\x822\xfa0\xd6\x8f\xbfC\xf8+1\xec\x1a\xc3\xbfg\x89h\xda\xb0\x00\xa7\xbf\xe4\xa0\x032lr\xa3\xbf\x1a\x156\x86\x8e9\xb5?m\x8ba~\xcf\xa2\xb2\xbf\xf7\x0fOt\xcfg\xb2\xbf\x98MXyO\x85\xc2?gffd\xd71\xa2\xbf\x90\xef\xb4\xccy\x12\xbc?\x84\xbc\x81\x1a\x8e\xf9\xb2\xbf\x9f#\xce\xad\xc2\xb6\x98?\xb5\xf2\xc1\x89U[\xb3?\xa0{55\x06\x89\xb9\xbf\xf2\xa8\xf1\xc7\x16\x12\x91\xbf\xf6\x06/e\xb9\xfc\xc4?\xc9\xd10\x8cv\xda\xc2\xbf\xa6ja"g\x8e\x8f?HLv\xd2\x1d!\x8f?\x86\xdbkz\xc2W\x9f\xbf\xd7Dnn\xb1\xac\x91\xbf\x9d\xb3\x91\ne$\xb4?\xf0D\xec]qr\xaf\xbf\x92*V2~S\xae?7\xb7\xd9\x9eM\x04\xcc\xbf\x8e,D\x12no\xc4?\x0e6Ci\x81\xcc\x93?\xe4/\x8b\x8d\xa2v\xa1?\xbb\xca,B\xe3\\\xab\xbfg*\xa0\x87w\xe9\xc5?\x95o\xd19\xddI\xb6\xbf\x0b\xe5n\xd5\x11\x89\xb5\xbf\x93\xf1\xb6\xec\xb3\x8c\x99\xbf\xf9\xd2\nq\xb1\xc8\xb9?\x0f\x17\xddu\x84e\xb3\xbf\x9d\xa6\x8f*\x03\x04\xc8\xbf\x0e\xa2\xb0_\xfd\xc4\xac\xbf\n\xcf{\x82B5\xcf?\xc4\xe8\xc3\xe8\xd2\xdb\xa8?\xd1>\xbc\xb7HL\x9e\xbfD\x93\xcb\x19]k\x93\xbf6p\x9a\xb4\x02\xf4\xb7?\xa7\xfd\xc1\x15o\x02\xb5?\x107.\xe58{\xc6\xbf?\xf6\xab6w\x9d\xb2?\xdbP\x0e\x90\xde\xdc\x9b\xbf\x03\xc4P%\x7fL\xa7\xbfa}Y\x02\xc0D\xc4?^Ow\xda-\x9ce?\xeaZ\xc3\xb90\x9b\xc4\xbf\xd8\xca\x05\xdf\x0f\xb6\xa7?\xb2ROF\x99s\xc6\xbf\x01\xe0\x8dN\x15\x86\xc0?\xc5# \'\xad\x83\xc4?\xb5j\xdfq\xd95\xad?s\xfe\x97\x83#\xd1\xcb\xbf\xc6\x1e\xae"\xa7\xeb\xad\xbf\xf2\x1bO\x1f\xde\xfb\xad?\x80\xce\xfc\xa0\xfc6 \xbfo\xc6\x89W.\xe0\x94?\xd3\xb5\xb2A\xcbP\xc7\xbf5}\xc1v\xc5\xb4\xc4?lm\xd2\xd4TZ\x82?\xc8C4\xf4I\xb5t?V\x8f\xec\xce\xf9\xb4\x8c\xbfh\xf4\r\xfb\xab\xdf\x9d?\x86\x91j\xeeA\n\xa3?\xc5\xc5\xf8\xf5\x0b\xfd\xb0\xbf\xd2\x00\xe49\xe7J\x9d?h\xf6pk$\x08\xb7?\xb4\xf6\xe99\xdeZ\xbe\xbfMUgG\xf3f\x97\xbfa\xda6%-\xa6\xca\xbf\xee\xc4#\x8e\x0b\x93\xcd?\xac\x0b1\xfa\xbe\xe2\xbf?}8 \x08S\xc9\xbc?3\xa2(\x01\tV\xce\xbfuo\x7fE\x14z\xbc?\xd97\x81\xf1\xae\'\xb9\xbf\x91\xbc\xf1\x9f*\x93\x8a\xbfWY\xf9\x1e\x92[\xbc?\x1b\x18v\xf3\xb1\x15\xc8?Pby\x81\xbd!\xd3\xbf\xad *\xe0\xb2\x9b\xc1?\x9e\x16\xff(q \xc2?\x8a\x9b\x94\x04\x12\xde\xd1\xbf\xd9eK\xf5\xf0\x99\xa4\xbf\x901\xfa\x1e\x05\xf6\xa2\xbf\xdc\xcb"\n\xfb\xc7\xb3?Xy\x91&\x05\xe5\xc1?/\xfb\xd1\xc1\x8a\xaf\x96\xbf\xb5s\xae\x9c\'\x1e\xbe\xbf\xaetx\xea\xa7\xb6\xbc\xbfg\xf6d\xc7\x97x\xc0\xbf\x9c0\xa1\xbc\xeb\xd3\xce?\x1e_\xba\xa1\xcc\xff\xb8\xbf\xd4=\x94\xd1y\x96\xb0\xbfGN\xa79#\xcb\xc4?\xfdj\n\xd0?\xd9\xa3?\xae\xb4\xefP$\xda\xac\xbf\x83\x93\xca\x01\xc9\x01\x92?)\xce\xa8e\x81^\xba\xbf\xb1\x9e\xc6\xf7\xa8+\xa2?\xb6~\xc5\xe9\xacH\xb1?\xbe\xd5\xbd)\xce\xac\xae?\xfd\xc3\x9d\x18+M\xb9?\x86W\xbe\x16\xc9Q\xc4\xbf\xe2\xc9\xc8\x11\xb6\xe3\xc3\xbfK2\xc8\xc5,\xad\xb6\xbf\x03\xe3\xactL:\xcf?\x8c\nD\xd5\x9d8\xb4?I]`\xa5\x8b\xae\xb0\xbf\xbak\x1d\x7f\x91P\x8c\xbf$\xfe$\xd0\xec#\xaa\xbfG>ecU\xb6\xbb?\xa3~\xa5\xf6\xbdH\xad\xbf\x1d\x9eoV\x95\xf5\x93\xbf\'[\x84\xc8\x08\xc3\xbe\xbfM!\x10\x0f7\xe0\xc1?\xd1\x8b6\x7f\x88&\xa7?\xc6\xdbS\x92\x1b\xe2\xb0?\x96!\xef\xd1_u\xbc\xbf\xc7\xfe&\xb6t!\xb5\xbf\x08\xec)^\n^\x99?M\x079=\xe4\x93\xad?YB\x86(D\x81\xa4?P\x12\xfb\xb5p\x03v?\x82\xa4E?\xb2A\xa7\xbf\xfd,\x87\x91*\x97\xc4?\x87\x81\x9f\xe66\xc9\x8e?9%\xf1\xff\xbd\x83\xc6\xbf*=\xb2%S\x1e}?N\x1c\xbd@h\xaa\xcc?-\xae\xea\xd9Z\x93\xcd\xbf\xa2\xad\xb2\x01\xbf\xf4\xb4?\xaa\x86q:\x7f\xa5\xbb?\x1e\x1a\x12\x1e\x1fM\xc8\xbf\x19\x84\xad\xbe0\xc2\xab?@%\t\x16\xd4a\xc0\xbf\xad\x88\xbb\xcc\x8f\xe2\xb2?&\x08\x8b\xcb\n\x0e\xa7?!B7ye\t\xb5?\x1ec~o5H\xc0\xbf\xa0y!zO\n\xa4?\x81\xed\xbf\xa1\xc5K\xaa\xbf\xbf\xcfy\x9e\xd8\x05\x89?\xf8\xc4fDf#\x9e?\x95\xd1\x08\xbc88\xb9\xbfj \xef*_\xaf\xb1?\xf9\nLZ\x87\x08\xa1?J\xe2\x00\x1c\x0b\x8d\xb8\xbf\xaa\xdc\xdan\xc7\x08\xb0?\xea\xf8\xf6.$9\xb1\xbf3\xf2\'\xe1\x17\x0f\xc5\xbf\xb2n\xa3\xf8\xa9\xab\xcd?#\xcde\x1e\xa5\xb5\xc1?\x7f\xc3\x1a\x0f\x9eX\x80?ayW\xff.\xbb\xc2\xbf\xe4\xb1\xf7E\n\x85\x99\xbf\xddF\x9bg\xaa\x05\xa9\xbf\x11\x90K\xc5\x17\xe4\xb2?E\xf4\xd1\x0c\xf8\xe9\x8c\xbf\xf8\x95\x1cc\x87\xea\xac?\xf6\x18\xe8_\t\xb0\xa5\xbf1_\xe7\xd1bH\xb6?\x80\xea\x03\x0b"\xc3\xb3?\xf8\xa4un\xc2\x05\xc5\xbf#4\xebp\xbe\xcc~\xbf\x00L\xa2\xe1\xa3\xd5\xd0?I\x9f\xde\xe7pZ\xd0\xbf%h\xa2\xcc\xa6s\xc5?\xa2\xe1\xe1{}\x9bm\xbf\xac\xe0\xb2\xd68\xfd\xc4\xbf\x08\xa7\xc7Dxq\xb2?A\xc9\xb7\xb3\xb4y\xac?\xe0\xc5QO)W\xc0\xbf\xd0,\xfc\xb56\x95\xc1?<\x9aM\xf4\x8a\x92\xb4\xbf\xc2~U\xef\xc4/\xad\xbf$g\x13\x03\xf3\x94\xaa?)\xc5\xe0\xd0\x88U\xca\xbfA\xeb\x1b\x10L\xb0\xc3?\xa8v\xee\xd0=\xe5\x92\xbf\x96*\xba\xdd\x1f\xac\xb0\xbf4\xc8\xf5Qoe\xb5?:\x7f\xe4\xbc\xde\xbc\xbc?\xcf\x1d0m5\xdb\xc0?9]\xa2\xcb\xa49\xcf\xbf\xcd\xf7o\xc1\xd5\xce\xb7?e\xd4\x9d\x02\x98\x82\xc2?l\xd0U\xe3\x02j\xce\xbf\n\xd7\x1c(\xb7\x8d\xc0?9=\xee\xdeE\xcd\xba\xbf\x02\xc5-\xc5\xa18\x99\xbf\x0b^\xe6\x8dLc\xc7?\xca\n\t\x90\x17m\xad?\xf1\xa0\xe8q\x92\xbe\xce\xbf\x82l\x99\xac\xbb\xab\x9c\xbf\x02\xe2\x82\x1e1\x9b\xb1?\xd1\r\xb9f\x84\xe0\xa4\xbf\xbd\x826\xdf\xbf\xc2\xae?0xM\xed\xb1x\xb3?\xca\\t\xee\x08m\xc1\xbf\x87\x07}\x97W\x07\xb4?"\x03dp\x97\xa8\xca?_C\x11\x9e!V\xd2\xbf\xcc\xdc\xaf2\xbe\xa0\xc9\xbf\x07 \xc9]\x93\xbd\x97?|\xb8\xf6\xc6\x0b\xa9\xc6?\xfd\xbeq\xa5wB\xa1?\xf6N\x18\x08T\x1b\xa3\xbf\x82\xffh*\xc6\x8dm?<+-\x99\xd8v\xb9\xbf\x89p\xa9\x1b\xf8\xdb\xa5\xbf\xcb\xf1\x80Sj2\xc2?9\x0ekz\xb0Q\xb5?.\x91[)\xa2/\xc0\xbfJ(\x98\xb0\'\x1b\xa6?\xc55\xee\xef\x1d\xc9\xbe?\xe9H\x1b\xc3\\\xef\xb8\xbf{\xb5K\xb3\x04g\x97\xbf\xf7\x1e\xf6\x1b)\xf4\xc7?\xaf\xa73\x01\x89\x87\xc2?x\xe3\x94\x0e\xd9=\xd5\xbfb\x90\x193\xa3\xb1\x85\xbf\x87xX\xfd\xb0\x88\xb7\xbf=\xaa\xbbc\xe5>\xba?\xc8\xb6<\x927\xc6\xa9\xbf\x1bq\x15wc\'y?\x8c\x08Z#K\xa1\xa6?\x1a,I\x91\xbc\xdc\xb3\xbf?CV\n\xba\x90\xb6\xbf\xbb\xb7\xcfM\xbb6\xc5?\x18\xec({\xb4\xaa\xa2\xbf\x12\xaa\x07\x8f\xd5g\xc0?\xf5\xddz\xe0Pz\xb7\xbfRT\xa1\x96\xc2\xcdi\xbf\xd8yk\x80\x1e4\xc5\xbf>\xff\xc5\x8aU\x9b\xc5?)\xd9\xbd\x8e\xd6L\xc7\xbfK\xc4\xec\xbb\xe4O\xa0\xbfk\n\xb9\xbd\xcf`\xcb?\xf2V1U\x89\xbc\x9d\xbf\xf1\x9d)I\x85\xdb\xb9?fH\xdd\xf3bl\xb2\xbf\xc8\xa8\xcb\x9dZ\xe0\xa4?#9:\xbaOA\xc4?r#\xadafy\xc9\xbf2\xd4\xd5\xba\xda\xcc\xc5\xbf\xc5\xac\xac\x96\xde\xf3\xb6\xbfb\x15\x16\x03e\xa3\xd0?/\xfb8%\xad\xa0\xc3\xbf\xdc\xf8\xbf\xa4\xd6B\xbc?\xbf\xfbcK\x07\xfd\xa5?I\xed\xbf\xcc\xc4$\xb5\xbfdO\xc3e\x82\x9b\x8b?X\x83\x07\x80T\xb1\xb1?~M\xac\xde\xd6\xb4\xad?\xd4x\x1f\xd8m\x19\xc5\xbf\x9a\xcb\xe8@pX\xbb?r\x0f9\xf0\xde\xa0\xc2?\xb8\x16\xae]\xa4}\x8a?\xbe\xf0\x136\xb9H\xc4\xbf|*\xc2\\\xcdO\xc5?\xea*\xaa\xbcp\xd7\xbb\xbf\x96S\xb4\xf9S\x90\xad\xbf\xb2\xae\xe2Y\xe1\xa1\xbd\xbf\xda\xed\x885\x87\xb3\x90\xbf\xe9t\xa2\x93a\xe7\xc0?\xee\xd0*[X\xfd\xc2?\x10h\xfbU:%\x18\xbf\x83\x11\xe0\xb3S\xfa\xc2\xbf\xca\xc8\x07M\xf39y?\x04\x80\xee\xc8R\xf1\xce?1\xbeVc"\xbb\xcf\xbf\xf7e\xc7\xdd\x93\xc2\xa6\xbfGx\\\xb1e1\x97?mS2\n\xc2S\x96?#\xc9\xc4\x83U\x11\x9b\xbf\xb8\xbf\x1c\xd3{\x93s\xbf\x14\xf9\x8bx4\xf6\x9f?\x8d\xf6_\x14\x8a[\xb5?\x0eq\x04\xaa,D\xc8?,6\x1a\xda\xf8x\xd1\xbf\xfa\x02c\x93\xf8\xe5\xbf?\xed\x8dG|\xc60\xc2?\xc8\x87\xfcb\xe1\x11\xd1\xbf\xeb\xbdk:\xb90\xb8\xbf2\xcfs\xbd\xc3\xc8\xa8?\xdb\xacc\xb7\xae\x98\xa7?\xc3\x16\xebYj%\xc9\xbfF\xf7\xc0\xbe\x89!\xc3?\x08~\xa8l\x82\x0f\xa8?Y{\xa4>X\x06\x99?\xaaL8\x92\x03p\xab?;E\xc5\xd8\x97\xf9\xb3\xbfM\x82@\xcc\xc5\xd6\xc6?\x1c\x85\xbe\x9bq\x00\x8b?:j\xfc\xe5\xcc\x86\xc8\xbf\xcf\xef\xd3U\x04d\xa0\xbf\x1d\x0e/\x186\xae\xbe?F\x16E\xed3|\xb6\xbf\xcd\xc3\x86\xc8\xac\xdf\xbd?X0>\xdf\'\xff\xc9?\xf6\xc8\xc0!\x7fw\xd4\xbf\xceq\xdc8uO\x88?Y4\x83\x10X\xbe\xb6\xbf\xcc\xa5gii\xb4\xb3?%\x16\xf1\x93\xdf\xc7\xbb?\xab\xe32\xdf\xc0\x02\x95?d\xe7\xde\xe5G\x84\xc0\xbfxop\x7fV\x10\x90\xbf\xabQ\xce\xf9)\xed\xb1\xbf7m\xaa\x99?\xf1\xb5?JUh},\xed\xb4\xbf\x0c{\xbb\x03\xa1h\xb1\xbf5\xe8\x91\xc0\xe6*\xc3?\xd8-K\xc0\xd5\x02\xc9\xbf$\x01V\x87\xa5&}\xbf\x17\xde\x85\xec\n\xec\xc9?\xb5IK\x07\xf0\x1a\xae?\xb5\x95nn\x05\x10\x8e?Yws\xb1x\xcf\xb2\xbfB\xed\xb3\x9a\xe0\xbe\xb1\xbf\xec\x983\xe4k\xcc\xb7?}\xae\xfe%-6\x98\xbf\xeb\xe9\xdb\x13\xe1\xef\xa3?Z\x1d1\x80\x912\x9d\xbf\xb9l\rOaZ\x85\xbf\xd7\xab\xfa\xc5\xe1\xd0\xbe\xbf-eR\x11\xe3\x15\xb1\xbf\x8a\x88\xa6kb\xf3\xc7?\xe7W\xa9#$\x84\xaf\xbf\xc9\xaaD\xed\x92\xc0\xac?\x89g%\xb3\x89\x1cv?\xf4\x86\xd5N\x0e6\x90?\xad-\xa5\xc8\x04\xe3\xb3?D\x8fZ\\\x88\xf0\xb7\xbf\xbc\xb8\xdc\x846\x90\x96\xbf%\xadND\xc9\x1a\x9c\xbf\xfc\xb2\x95\xe4\x7fU\xa9?\x1b\x82\xdf\xe2\xbf>\xd0\xbf\xb3\x7f\xf1\xf8\xe7\x0e\x92\xbf"\x9anb\xae_\xd1?\xe0\x8ae1\xd3\xdd\xc7?\xee\x82\xba\rtc\xba?@f!\x9c\xc6\x87\xd2\xbf"~\x10\xc3\x03^\x93?\x0e\xb9.u\xb1\x97\xab?\x10|[\xabY\xa3\xb2\xbfG\xe6\xd5\xe7!p\xbe?\xac\xaf/\xb2\xc8\xb3\xa4?0\xdfv \x03e\xc4\xbf\xf4o\xa5\x1f{z\xc4?\xf8&|L\xf7e\xb4?e\x83\xe3\xc5v\xad\xce\xbf_\xb1 .\xb0\xdb\xbc?>\x19\xc2\x8c\x16\x0f\xb4?\x1ceq]cu\xc8\xbf>\xb1\xc0(\xba\xa6\xc7?\xae^\xe3\xff\xbe\x8b\xc0?\xf0\x07R\x94<\x19\xd4\xbfC\x0b\xb5\x10%\x8f\xc8?\x8a\xbb\x14\x0b\xf9\x05\xb7?\x93\xb4\x1f\xcb\x10\t\xd2\xbf\x82Y$\xa9$\xf1\xa3\xbf\r\xe1x\xd1S\xae\xbb?\\\xb4\xe6|\xc1\xb5\xb1\xbf\x1b\x8d\xba!\xc2\x0f\xcc?\x94\xd0\x88\x89T{v?\xad\xd3\x06\xc6\x9c\xc3\xcc\xbf\xedv\x971\x13O\xac\xbfjWm\xae\x15\xd3\x9c\xbff\x11g\x04O\\\xb5?\xf0\xc8r\xcc\x96\xf9\x8a?\xd4#\xf1\x0c\'\xa0\xb0?\xe0|\x7f\xe6Y\xff\xb3\xbf3-\xcc\xae\x0b\xaf\xbc\xbf\xe5\xa1jO0\xb6\xc8?\\\x16\t\xf0T\xbd\xb4\xbf\xd6\xe6Yx\xb4\x8e\xa7?\xd80\xc3~x\x14\x95\xbf\xb8\x9c\xf0q\xf0\x08\x9a\xbf>\r_\xd3\x91\x93\xb6?\xbbS\xb6\xa3\xf8Q\xc0\xbf44\x1b\xe8\xbe \xa4?\x9d\xa9\x90S\xb2\xbc\xbf?1Td\xb8\xad\xf2\xa1\xbfg\x7f^w[\xc3\xb6\xbf\xd3\xa7\xe8\xa7\xaf\x06\xc1?P\xcc-\x95\xe5\xad\xbd?6\x8e\x7fr\xa2\xdd\xcf\xbf\t\x95\x95\x047\x0f\xc5?$\xd8\xe0\xc2\xb0\xef\xbe\xbf\xfd\xa3\x94\x8cz]\xa6\xbf\xb3\x13y\x19\xd7\xfd\xbd\xbf\xf0\x1d\xf0K\xf0\xd9\x9c\xbfY\x8d:\x96)\x9a\xc2?\x8arP\x0c\xbc\x1c\xc6\xbf&\x1f\xd0\x8c\xda\xdf\xc0?3N\x01\xfe\x85\xf3\xa4?\xb1\xff\xc6\x86\xba\xe1\x87?|\x99\xa8<\xf6\xad\xc1\xbf\x8b)<\x94\xda/\xc0?>\x03\xe2\xed\x19,\x9b\xbf\xc9\\yh\xae\xa6\xb1\xbf\xea\xdd\xf1\xe3\xb4q\xb8?q\xf0H#\xc7%\xc7\xbf\x1e\x9f\x0e\x8a\xbd\x15\x99\xbf[\xc4\x8a\xd4~H\xca?\xbe\x16\xe6\xcd\x99\x19\xab?\xf6\xa9\x97eW\xec\xbd?\xacZE&\x92\xbc\xc5\xbff\xca\xac\x02.\x85\x84\xbf\xe0HRV\x11L\x98?\xf9\xc6\xf7\xa9\xf4\x12\x8c\xbf\xc7\x0e*\x9f\x10A\xa4\xbf\xaa\x98\xbb\x1b\xe8\xbc\xc6?\n\x15\xf1\xf3\xa3\xac\xc1\xbf\x7f\xcf~\xc8\xadY\xbc\xbf\xa1*\xa1\xdbx\xd1\xc3?\xd8\n\x87\xdd\x87\x92\xa6\xbf%\xab\x18[\xa5\x03\x96?6\x8c\x9b@j)\xb3?%\xb7a\x97S\xaa\xb8\xbf\x92\xc1n\xde\xb9\x91\x93?\xb2\x94\xf7bo\xd4\xc4?\xcdl\xc5\x9e\xa6F\xc7\xbfa\xc6\x95t\x8e+\xa2\xbf\xb7\xc9\xcb.\xf4\x9e\xb9?\x82\xe6\x80\xf4,\x89\xb0\xbf.3Kf\x92!\xab\xbf3cq\xb2gO\xb1?GN^\xfa\xf3\xf4\x8d\xbf\xc2\x00\xbb\xcd;>\x92?\x0b\x9a\xbd\xea\xc4\xe0\xb9\xbf\x18\xdaN\xf75Q\xb5?8#EM\x9d\xad\xc3?\xea\x15h\xa6kh\xc7?X\x9c\xd6y\x04\x8b\xd5\xbf\xdfR\xc4\ra\r\xb3?\tdsC^\xfc\xa5?\x06\x05~/\x90\x0b\xbe\xbf\x0b\x8a\xedimp\xb9?8g\xe3\xcabN\xc4?\x12\x16\xed\xbfL\x83\xd0\xbf\xd5\xca\xa6\x1e\x02A\xb6?`\x0b\\7Iu\xca?q\xb8W#\xe5\xca\xd2\xbf0Z\xd6\xa7\x17\xc0\xc6?\x7f\xa8I\xc5Y\xfa\x81?\x95\xf4*D\xbd\xdf\xc7\xbf\xe1\xd3\x05\xf2-\xf5\x98?\r\xb6.\x15\xca\x00\x91\xbf\x82w\\s\x8f\xd1\x7f\xbfR.mt&&\xb5?\xe2\x02\xb8\xb3v\xbd\xc5\xbf\x82\xd7\x02\xf3\xc6T\xb6?\x1ag[g}?\xc5\xbf\xd3\r\x85\x84\xf8-\xb6\xbf\x05\xf7\xce\xd4<+\xd0?\xdd,\x9c\x9f\x80q\xae\xbf,\x89\xec\x99\xdbQ\xa8?\xbf\x90\xbe\x16\x94~\x88?\t\x9f\xc0ZcV\xc1?\'/\xfb\x80\xad(\xa2?\x02k\xff\xba\x8e\xe0\xc5\xbf\xf6\xc3b\xef`\xe6k?\x02\x81\x9dq\xadHf\xbf\xa2\x06\x15\xf7\xcdvF\xbf\xd7RGtD\xa0\xb0?\x04\x9e\xe5\xa6\xc1^\x9a\xbf\x99\xd6\x1b\x15(\x11\xa4\xbf}!\xcb`\xc2\x02\xb3\xbf\xf7\x81\xe4\xb1\x01\x83\xba?\xec\x81eD\xfd\x00\x9e\xbf\xd7\xb7\x05 \xfc\xf2\xb6\xbfFRK\x9f\xb8\xb8\xce?\x94vH\x8f:?\xc3\xbf\x1f\x141Xs\xd7\xb6\xbf[\xccrE\xb6\x80\xa7?\xd5[\xefj0.\xa6?v\xe4\x16\xd5\xe6L\xa7?\xfa\x0f\xf7\xeb\x8f\xdc\xad\xbf\x8c\xae\x80[\xa4>\x8a?\xad\x9c\x94\x9b\x001\x91?\x89\x89\xc0\xe8\x88\x97\xba\xbf\x98b\xdb\xc1HK\xb6?\x8c\xac\xe6\x1e:\xcc\xca\xbfK\xb4\xb2\xa8Fa\xd0?a\xf0\xfa\xc9L\xd9\xa7\xbf\x0b\xbaS\x9b\xd8\x92\xa2\xbf\x16[\xe6\x02\\<\xb3?\xf8\xfbxj\xdf\xe5\xa3\xbfT6\xf6a\xe5#\xab\xbf\x97gl\x8bQ\xff\xd0?xA[\xbe\xa95\xcb\xbf\x0f\xd3\x06\xe3>\xa4\xb2\xbf\x04\x9e\xa6\x95\x81\x08\xa4?\x84\x08g0\xfc?\xa1?@\xd2\xde\xa3-\x93\xb3?\xd8\x01\x8c\xf5e0\xc0?\x16k{\xc7\xfc\xf9\xc9\xbf\x97\xd1\xa2\xc9\x81E\x9e?\x06~:\xc0\xb1\xca\xbf?H\x99Q\x19\t\xae\xc3\xbf,Q\x81\xaa\x80\xa6\xba?\xe53\x8b\xc1^\x0e\xbe\xbfO\x17O\xb8\xf0>\x8b?\x8d\xbcuE\x08W\xc3\xbf\xcc\xb9\xab?6o\xba\xbf\xd5\xcc\xa5\xb2QG\xd0?Bg\x0c \xc6t\x84?\\Z\xd7\xcb\xa9\x1c\x80\xbf;6\xd4Pq`a\xbfrO\xfa\xa8\xb6\x19\xc8?;s\x14\xa46\xbb\x9b\xbf\xe5\xc0w\xd4O\xa2\xc4\xbfh\x9c\xcb\xc4\xc1\xb7\xcf?\x1a\xcc\xd6\xfa\xce\x05\xb5?6\x81\x1b\xa1T\x1d\xd5\xbfl\xcc\'M:|\xa5\xbf\xb3G\xd7qV\x1d\x80?t\xfa\xb1\xb0\xe4t\xa1?$\x175GO\xc0M\xbf\x8c\xa7\xe0\xec;)\xc1?\x95r\x99\x9d{\x0b\xc1\xbf\xf7a\xe2L\xb7\x8d\xc1\xbf\x04#\x15\x80\tN\xb4\xbf\x9c\xf3\xec\x0c\xbc\xb4\xcb?H\x80E&5\xc1t\xbf\x8d\x0cj\x16\x9a\x92\x90?\xe8X\xb1\x99\x99\xc4\x86\xbf\xbb]\xda\xb7\xfb.\x9c\xbf\xb4m\xfe\xb6\xb6\\\xcb\xbf\x88\xb9\xf9-\x96\xe2\xce?\xed\x0cC\xbfo\xb9\xbd?\xd1\xe9\xd6\x97\x05q\x92\xbfsRMY.\x1d\xb9\xbfQ"\xec\x9e\x90,\xd0\xbf\xf50\xe9\xc0\xac\x87\x98?M\x1e\xbb\xa5+H\xcd?\x07\xbe\xae\xe6k\xee\xa2\xbff\x1e\x0e7\xf3\x7f\xad\xbf\x1an\xde\x8e/7\xb8?\xc8\xe8C1\x9c\x85\xb9?\xe0\xde\xbaki\xeb\xa6?"\xac\x90s\xa8}\xc2\xbf\xa2;\xde\x05#\x97\xcd\xbf\x89\x02\xe1\xac\x9f\xcd\xb0\xbfQ^\'n\xf9\xfe\xd2?hEc\xde\xd9\xa6\xb4\xbf\xfe\n#\xd6\x11\xf7\x98?)\x05\xb5\xd1*\xd2\xac?\x08\x0b\t\xdbev\xb3\xbf\x8e\xbf} \xd3\xcb\xc4?\xd1s\xf2e@!\xb6\xbf\xd5h\x8fA"\x8a\x9e\xbf\xa8T@\xca\xe4\xfa\xb7?\x7fz\xdc9\\X\xb0\xbf\x83\xea_1Z\x84\xa8?\xf6\xbe\x9d\xd5l_\xa7?\xbd\xd4~\x83\xe3\xf1\xb7\xbfe\x9f\xa8\xdd\xa5p\xb7\xbfGD\xe4sI\x97\xc7?\x86\xe9\x1f\n\xed\xbd\xb7\xbf5\xb2\xafh@,\xab?Wy\xb8\x88\x16\x1c\xb1?\x8bR\x10\xbd6\xb2\xbe\xbf\x1e\xb4\x1d/\x9e@\xb5\xbfY\x88Ur\xbd\x14n?\xfb\x07\x8bC\xf8O\xb4?\nn\xc8\xcb\x88\n\x8c\xbf\xb9;\xc1\x10\x91\xfb\xc9\xbf\xa5\xc2}\x9d9\xbc\xcb?\x9d\xb1\x892$\xc2\xbb?+\xcf\t\xceK\xb2\x98?\xb7\x12\x06\x93[\xf7\xc0\xbf\x88\x85\x13\xdbP,\x8f?\xc6\xda|\x0c\x8f\x9c\xc5\xbfT\xa2\xcb\xfe\xc9\xa9\xc3?\x95\xb6\xc1\x00D\x8e\x9d\xbf\xab\x17h\xae!\xb8\xbb\xbf\xd4BLW\xd9\x8d\xc1? n\xce\xe8\xa2\xa9\x93\xbfr\x99,\xe4Ll\xaa?Kb\xc5o{\x97\xa0\xbfY\xf0\xe6\xc2jl\xb7\xbf\x94Q\xdf\xed\xdb\t\xb0\xbf\xd5 cX#\xbb\xc3?\xba@\xf7p\xeb\x1a\x94?\xbcK\xaa\xcc\x12q\xaf?\x0e\xf6\x92BD\xbf\xb4\xbf\xae\x00\xf1\xb8[\xa4\xc1\xbf\x84\xb6\r\xe0\xf8\xa3\xb0\xbf\xba\xdb\xf7(X\xf6\xc9?\x11r\xebBS3\xc3\xbf5)\x11\x82\xdb\t\xc2?\xa1\x8f\xa4\r|\x97\x82?{\xc8\xcf\x0e\xc7\x1d\xb0?I\xff\xb0\xebgi\xc0?\x80\xe3\x18sKx\xc8\xbf\xd4\x9c[\x00\xa1S\x94?~\x1a\xb6\x01\x1c\\\x96?\xbd\xdb\x08\x81\xdeW\xa5\xbf\x18\xb9\x1b\xf0\xba\xd2l\xbf\xb8\\q5:\x07\xb3?\xe0~\xf0]\xa4 \xb2\xbf\xb8nE\t^\x06\xb9\xbf\xfe\xf8\x03\xd8\xdcl\xc3\xbf9\xb0\xa6\xdc\x0b\xf0\xcf?Jj>\x1a~\xe6\x9e\xbf\xcc\xeb\xf1\xf2ND\xc3?\x16=T_\xfe\xce\xbe\xbfM\x81\xff\x0e\xd0\xdbv?$\xe5\'\xaa\x06x\xb0\xbf?\xdaoR\x93\x14\xae?)\x07!Y\xa7 \xac\xbfBF\xcb,e\x95\xc1?\xf0\x08\x06\xadv\x1a\xb5\xbf\xc6\x8eX\\&\x15\xb4?\xe51!\xd0\x94r\xbb?a\xe0<\x96\xdd\xc3\xc7\xbf\xa23X\x16ZQ\xbc\xbf\xa4\xfc\xd5~\x0b\xe4K?W\x87Z\xff\x91\x19\xbc?\xf0\xd2Jl@\xeb\xba?\xe9i!\x8e\xfb;\xc4\xbf\xbf\x01\xf0_m\x19\xab?\xe0\x9a\xc9^K`\xb0?\x84x\x1ex\x9e\x89\xcd?\xcd\xa2\xc1\x13\xe2\xdc\xd2\xbf\xc7\x81\xed~\xb7\xd4\x89\xbf\x8f\xba\x005}\xd6\xb1\xbf\x00k\xde$\x14\x11\xb5?\xce\x1cYf8H\xbe?\xfa\x12\xf4\xdb,\x84z?.^\x184{\xf0\xbf\xbfYS\xdc\x17{\x9d\xb0?\xc8\xdcr\x99q\x1f\xc9?F\x83\xb0\x92\x17\xb7\xd0\xbf\xe5\x0bsB\xcb\xa0\x9c\xbf5\x90dn\xacQu?\xbf\xe7\xd9&`L\x97?a\xacZ\xd9c^\xa0?\xe8\x00\xca\x8e\x1a\xb0\xb0\xbfTU9D\xd1\x01\xa1?\x9a@\xa4X\x81\xd0\xb7?\xf1!\xe9\xe6\xe8\xfb\xc7?\'\xa1\x9d\xc9\x14\xf2\xd1\xbf\xd0P\x8e\x00\xca3\xb0?\xb7\xaf\x82\xfe\xe1\xf2\x9b\xbf\x84I\xdb\x01#n\xa2\xbfn\'\x08\xdbm0\xca\xbfr\x16\xea\x9e\x8f\xdc\xb0\xbfF\x99>\xd5ZO\xd1?\xe4\xa4\xe3\x0b\x17\xd6\xb1\xbf\x05I\xe8/\x96@\x95?G%\xd3\xff\xe2\x0b\xa9?\xc9-\xc2\xb2!\xd0\xae?\xce\x02\xc1\xaf\x90\x80\xc0?7\x8eq\x1c\x994\xc8\xbf\x83\xfe\xb8\x883B\xbd?\x91\'\xc3.\'\xab\xb9?\xeb\x12\xbe[\xadv\xcb\xbf\xcdt\xaa\x8cD3\xb5\xbf\xbd\xbb\xaf\x9bi\x1d\xb7\xbf:\x18-\x14W(\xc6?\x93\xf3\r\x9f\x01\xa0\xbe?p\xe1e\xc54e\xa0\xbf\x9e\x02[<gm\xb6\xbf\xdaW\xc9\x9d\xbb\xa3\xa6\xbfs\x057\xd9\x011\x9f?\x8bT\xb7\xc4\xea,\x8c?Z\x12i#\xa1\xfc\xc1?B\xf9\x031\x1a\x0b\xbc?\x93\x87\xf5\x1d\x17\x01\xd0\xbfP\xf5>\x8f\x19\xc2\xc7\xbf$\x894\x87w\xcf\xb8\xbf\xdf\x9cl\xa9\xea\x14\xd2?\x8es\xe2|8\xb3\xb8?\xb2Y\xf35:\xc8\xd0\xbf\x05zu-\xd86\xc5?\x1daq_\xbb\x01\xb8\xbf\xe2\xcd\x80\x86\xc3\x95c?\x8cZ=C\re\xb7?\xa4\xaa}^\xd6\xd1\x9f\xbf\x10\xbf\xbdty\x94\xa7?<\xa7\xfb\x159\xae\x8e\xbf\x03\xf3\xbdMb\x08\xb2\xbf\xc1\x0c\xf2\xb9xw\x9d\xbf(v:|@f\xb9?\xbb\xf0\xcd\x92gH\xc0\xbf&778 \xd1\x93?\x8e\x13\x8e\x17\x87\x9c\xbb?\xe0c\xf2\'\xf2\xff\x81?\x96#.~+\x08\xa3?\xae\xbc*\x08(\x88\xa7\xbf\xba\xeb\xe8\xf2H\x0b\xa9\xbft\xe5\x81ev\xda\xb4?\x11\xdf\x1a\xd8\xa3\xa9\xa0\xbf\xbf\xad\xc6\xe9t%\xc4?m\xe0\x08\xa6-\x8f\xab?\xea\xe5HS@\t\xcb\xbf\x92\xbd{g\x80\xee\xbd?\xa6\xb2\xdd\xa5\x0e\x8d\xb3\xbf\x1d\x16<\x83\xe3\xc2\xa4\xbf/\x1b*\xd8\xe4\xf2\xac?l\xad\xf1ic\x84\x97?\xc1x\x91F\x8bZ\xb4\xbf\x16\x06\xc3\x1f\x9aW\xb9?\xa9\x9d~\xe0\x06\xb8\x99?\xab\xad\xe2\xd7\x9b\xc5\xbf\xbf\xb4\x0e@\x80.\xa0\xb4\xbf9\xab\xa3n\xc1\xb7\xbd\xbf\xf4\xdcq\xf7\xf7+\xc9?"\xd9\xceA\xa6\xaf\xa2?I\xf2v|\xcd\xc4\xa1?\xbc\xe5"\xdf9:\xb2\xbfX[\xe7\xdd@\xf5\xba\xbf\x85\x10.%\xa33\xb7\xbf\xe8\xb5\x8a\x01r\x14\xc9?\x02\x88KVp\xe0\xc4?\xee\xed\xf3\xd1-xE\xbf\xf6\x93y(\xf8\xca\xc4\xbf\xdcx\xb1\x00\x15\xfc\xb7\xbfo\xf8f\x97qy\xcd?"<\x0e\x17g{\xc1\xbf\x90\xef\xa8M\x95H\xb1?\xae\xa7\xca\xfa5\x94\xc1\xbf\xb7_\xec\xa7\xd6\xdf\xb1?\xfb$\x08\xce\xf7\x81\xc6\xbf\xcc\x99\xf0\xa5\xe6n\x8b?S\x1b\xa9c\t\xcb\xc4?\xfe\x01\x14\x13\x98\x0f\xb2?J\xab\x02\xd3\xbe\xde\x9a\xbf\x9e\xae\xa6\xbc\xd0\xaf\xa6\xbf\xfbB\xdf)\xb8\xa9\xc2\xbf\x00c\r\x1bX\r\xd2?\xe6\x82;\x0c\xf8p\xc1\xbf5\xd7u\xf6\xfd`\xb9?\xbeP}\x98\x97\x00\xad?\xbd?Z\xe1\xa4\xf0\xc3\xbf{3+\xa2\x1ck\xd1\xbfF\x12; \xce\xdc\xa0?P\xa2G\xbc\x05\x9f\xce?X\xf8\x98$\xf3\x89\xa1\xbf9\xba\xcc\xea\xf8\x99\x9c\xbf\x9cU\xff\x99\xef\xd6\xaf?J\xc7\x95\xbdL\\\xc7\xbf\xc6\x8eH>\xd1_\xac\xbf&\xeb\'\rAt\xce?h\xd7A2\x02\xdd\xc6?\xec\xaf\xdd\x9c9=\xb9?\x85WX\x80\xcf\xbd\xd1\xbfk\x88g\xdeO\xaa\xa8\xbfN\xda\xbf\x17\x04\xa5\xb8\xbfU\xcfy\x03\x16}\xc2?\xa2\xb5\xec\x1b p\xa7?\xdf(\xba\xa3\xeb\xf8n?\x11X(\xd6\xae_\xa9\xbf]\x89\xa6\xb7\xd6\xfe\xb3?$\xce\x02\xeb\xa7\xb8\xb0?\xcc\xabTQ\xbf[\xc2\xbf0\x1e\x18s\xb5\xff\xcd\xbf4;9\xcd97\xb2\xbf"^\xda,\xa9\x8d\xd3?\x9f^I\x03\xdaQ\x9a?\xb2\nGH\xea\xce\xb1\xbf\x08f\xe9\x8e\xe7t\xa6?\x90%\xbd\x86*\x8f\xb9?\xc8\xa1\xe5ZWR\xb1\xbf_\x07\xafW\xa6y\xa0\xbf\x17\x99f\x08\xe6j\xb3\xbfz\xaa\xf0Z`\xf4\x9a?\xba\xdcT\xe3\x9b[\xa9?'
tbasg54
I00
sg55
I00
sg28
g1
(g29
g3
NtRp475
(dp476
g32
(I00
I00
tp477
sg34
S'float64'
p478
sg36
g38
sg39
I00
sg40
Nsbsg60
Nsbsg407
I01
sg54
I00
sg408
I01
sg409
I00
sg410
g1
(g42
g3
NtRp479
(dp480
g11
Nsg45
g471
sg40
g470
sg12
(itheano.gof.utils
scratchpad
p481
(dp482
bsg10
Nsg28
g475
sbsg427
I01
sg60
Nsbag1
(g402
g3
NtRp483
(dp484
g40
g322
sg272
Nsg406
g320
sg407
I01
sg54
I00
sg408
I01
sg409
I00
sg410
g318
sg427
I01
sg60
Nsbasg147
g1
(ctheano.compile.io
SymbolicOutput
p485
g3
NtRp486
(dp487
g410
g1
(g7
g3
NtRp488
(dp489
g10
g1
(g95
g3
NtRp490
(dp491
g98
(lp492
g1
(g7
g3
NtRp493
(dp494
g10
g1
(g95
g3
NtRp495
(dp496
g98
(lp497
g1
(g7
g3
NtRp498
(dp499
g10
g1
(g95
g3
NtRp500
(dp501
g98
(lp502
g1
(g7
g3
NtRp503
(dp504
g10
g1
(g95
g3
NtRp505
(dp506
g98
(lp507
g1
(g7
g3
NtRp508
(dp509
g10
g1
(g95
g3
NtRp510
(dp511
g98
(lp512
g1
(g7
g3
NtRp513
(dp514
g10
g1
(g95
g3
NtRp515
(dp516
g98
(lp517
g1
(g7
g3
NtRp518
(dp519
g10
g1
(g95
g3
NtRp520
(dp521
g98
(lp522
g458
ag411
asg12
(itheano.gof.utils
scratchpad
p523
(dp524
g15
g283
sbsg147
(lp525
g518
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p526
(dp527
g15
g308
sbsg28
g313
sg40
Nsbag348
asg12
(itheano.gof.utils
scratchpad
p528
(dp529
g15
(lp530
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p531
I231
S'get_symbolic_expected_rewards'
p532
S'theano.tensor.dot(self.get_hidden_output(),'
tp533
a(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p534
I170
S'get_hidden_output'
p535
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp536
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p537
I4732
S'dot'
p538
S'return _dot(a, b)'
tp539
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp540
asbsg147
(lp541
g513
asg149
g1
(ctheano.tensor.basic
Dot
p542
g3
NtRp543
(dp544
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p545
(dp546
bsg28
g1
(g29
g3
NtRp547
(dp548
g32
(I00
I00
tp549
sg34
S'float64'
p550
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp551
(dp552
g10
g1
(g95
g3
NtRp553
(dp554
g98
(lp555
g43
asg12
(itheano.gof.utils
scratchpad
p556
(dp557
g15
(lp558
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p559
I117
S'__add__'
p560
S'return theano.tensor.basic.add(self, other)'
tp561
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp562
a(g219
I533
g161
S'inplace=False)(input))'
tp563
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp564
asbsg147
(lp565
g551
asg149
g1
(g373
g3
NtRp566
(dp567
g376
(lp568
sg378
(lp569
I0
asg380
(lp570
I0
asg382
g58
sg383
I00
sg384
(S'x'
I0
tp571
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p572
(dp573
bsg28
g1
(g29
g3
NtRp574
(dp575
g32
(I01
I00
tp576
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p577
(dp578
g15
(lp579
(g531
I231
g532
S'theano.tensor.dot(self.get_hidden_output(),'
tp580
a(g534
I171
g535
S'self.bias)'
tp581
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp582
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp583
asbsg147
(lp584
g508
asg149
g1
(g183
g3
NtRp585
(dp586
g186
g293
sg188
g1
(ctheano.scalar.basic
Add
p587
g3
NtRp588
(dp589
g192
g297
sg153
g154
sg40
S'add'
p590
sbsg40
S'Elemwise{add,no_inplace}'
p591
sg153
g154
sg206
(dp592
sg208
(g590
I2
I1
tp593
sg209
(dp594
sg304
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p595
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p596
(dp597
g15
(lp598
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp599
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp600
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp601
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp602
asbsg28
g1
(g29
g3
NtRp603
(dp604
g32
(I00
I00
tp605
sg34
S'float64'
p606
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p607
(dp608
g15
(lp609
(g417
I82
g418
S'outputs=self.get_symbolic_expected_rewards(),'
tp610
a(g531
I231
g532
S'theano.tensor.dot(self.get_hidden_output(),'
tp611
a(g534
I171
g535
S'self.bias)'
tp612
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp613
asbsg147
(lp614
g503
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p615
(dp616
g15
(lp617
(g534
I171
g535
S'self.bias)'
tp618
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp619
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp620
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp621
asbsg28
g1
(g29
g3
NtRp622
(dp623
g32
(I00
I00
tp624
sg34
S'float64'
p625
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag479
asg12
(itheano.gof.utils
scratchpad
p626
(dp627
g15
(lp628
(g417
I82
g418
S'outputs=self.get_symbolic_expected_rewards(),'
tp629
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp630
a(g537
I4732
g538
S'return _dot(a, b)'
tp631
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp632
asbsg147
(lp633
g498
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p634
(dp635
bsg28
g1
(g29
g3
NtRp636
(dp637
g32
(I00
I00
tp638
sg34
S'float64'
p639
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp640
(dp641
g10
g1
(g95
g3
NtRp642
(dp643
g98
(lp644
g318
asg12
(itheano.gof.utils
scratchpad
p645
(dp646
g15
(lp647
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp648
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp649
a(g219
I533
g161
S'inplace=False)(input))'
tp650
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp651
asbsg147
(lp652
g640
asg149
g1
(g373
g3
NtRp653
(dp654
g376
(lp655
sg378
(lp656
I0
asg380
(lp657
I0
asg382
g327
sg383
I00
sg384
(S'x'
I0
tp658
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p659
(dp660
bsg28
g1
(g29
g3
NtRp661
(dp662
g32
(I01
I00
tp663
sg34
g328
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p664
(dp665
g15
(lp666
(g417
I82
g418
S'outputs=self.get_symbolic_expected_rewards(),'
tp667
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp668
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp669
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp670
asbsg147
(lp671
g493
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p672
(dp673
g15
(lp674
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp675
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp676
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp677
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp678
asbsg28
g1
(g29
g3
NtRp679
(dp680
g32
(I00
I00
tp681
sg34
S'float64'
p682
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p683
(dp684
g15
(lp685
(g20
I76
g18
S'self.initialise_theano_functions()'
tp686
a(g417
I82
g418
S'outputs=self.get_symbolic_expected_rewards(),'
tp687
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp688
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp689
asbsg147
(lp690
g488
asg149
g1
(ctheano.tensor.nnet.nnet
Softmax
p691
g3
NtRp692
(dp693
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p694
(dp695
g15
(lp696
(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp697
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp698
a(S'/Library/Python/2.7/site-packages/theano/tensor/nnet/nnet.py'
p699
I359
g161
S'return Apply(self, [x], [x.type()])'
tp700
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp701
asbsg28
g679
sg40
Nsbsg407
I00
sbsS'mode'
p702
g1
(ctheano.compile.mode
Mode
p703
g3
NtRp704
(S'cvm'
p705
g1
(ctheano.gof.optdb
Query
p706
g3
NtRp707
(dp708
g40
S'OPT_FAST_RUN'
p709
sS'require'
p710
c__builtin__
set
p711
((ltRp712
sS'subquery'
p713
(dp714
sS'position_cutoff'
p715
NsS'exclude'
p716
g711
((ltRp717
sS'include'
p718
g711
((lp719
S'fast_run'
p720
atRp721
sbtbstRp722
(lp723
g1
(g46
g3
NtRp724
(dp725
S'provided'
p726
I1
sg40
g405
sS'required'
p727
I01
sg49
(lp728
Nasg408
I00
sg54
I00
sg55
I00
sg28
g424
sg60
Nsbag1
(g46
g3
NtRp729
(dp730
g726
I0
sg40
Nsg727
I00
sg49
g108
sg408
I01
sg54
I00
sg55
I00
sg28
g115
sg60
Nsbag1
(g46
g3
NtRp731
(dp732
g726
I0
sg40
S'W'
sg727
I00
sg49
g352
sg408
I01
sg54
I00
sg55
I00
sg28
g354
sg60
Nsbag1
(g46
g3
NtRp733
(dp734
g726
I0
sg40
S'b'
sg727
I00
sg49
g50
sg408
I01
sg54
I00
sg55
I00
sg28
g56
sg60
Nsbag1
(g46
g3
NtRp735
(dp736
g726
I0
sg40
g470
sg727
I00
sg49
g473
sg408
I01
sg54
I00
sg55
I00
sg28
g475
sg60
Nsbag1
(g46
g3
NtRp737
(dp738
g726
I0
sg40
g322
sg727
I00
sg49
g323
sg408
I01
sg54
I00
sg55
I00
sg28
g325
sg60
Nsba(lp739
Nag110
ag353
ag53
ag474
ag324
atRp740
sS'output_batch'
p741
Nsg102
g109
(tRp742
(g111
g51
(g52
(I0
tS'b'
tRp743
(I1
(I624
tg113
I00
S'B!\xe5\xa5\x1bn\xcdt\xd7x\x1b\x9e\x84\xee\xc5n@&\x93\xb1+\xbbVq\xe8\xdb\xd5x1\x1c\x0f\xb3\xde\x0c\xcc\x0f\xcf6\xe4ev)\xb5|\x86\xbeW\xea\xdcE\xbf\xce\xf8\xa1\n\x85\xe3\x1e\xbf\xef\x18\x99\xeaZ03 \xbc\x85V\x82$\xa0\nk\x1d\x1dl\xa6\xb3\xee\xab\xa5h\xfb\x12>\xe3Q\x97\xda\xe4\x12l\xfc\xdf\x99\xf4\x8f|>\x95<\xc2\xb0h\x7f\x03e\xfbu\x89V3{\x87\r\xd0\x06)\xd0\x8b\xae\x07\x87\x18\xa1\xdc]\xc5\x8d\xe4\t4\xaa\\\xe6,\xe4\x8c\xba\x88\x16V\x02/l\xb64\x1b8\x90q\xca2\x8f\x8dfZp\x03\xdd\xac\x95\xdf\xb0\x0b0\x14B\xab\xff\xd7\x12\n.\xdex\xbd\xb1$\xe0,;\x1a_\xe9\x0448A\x95\xe2\x91\x89\xefZ\x87\xc1e\x89Nc\\7\xc8Cv\xf6(\xc0cs\x08\x9fK\xa5\x8b\x95z\x83~\xaf\x82\x8d^\xdc\xe8x\x89)\x18U\xcf\x89-o\xfbU\xb5G.\xca\xc3~r\xad\xb8\xa2c\xf9\xa7b7\x95\xf1\xcbm\x93\xf2\xde\xba\x16\xdd\x06\x1e\xe7_\xc7\x88v\xb1\xd0o(\xe3\x8f\x992\xcd\xf6\x8aU\x949Gm#N,^f\xa6,\x89\x93\xbe\x0cf\xed\xf0\x87.\n\x9f\x8c\x02\x8a,\x86\xab4\xdb\x83v\x88.\xc8$\xdaw<\x13\xac\xdb?a\xf7#.\xfaR\xb1\xa3\xc4\xa0\xd9\xa1\xde\x91\xc9\xcd\xcb\x1eqE\x8eEc\x15\xcf\xc5\x0f\xc5\xd3\xcc\xef; \x96\x96F\xb0]21\xa7*\xbd3\xeb\xd6\xd7\xe7\x135k\xbes\xb8|\x9c\xd5\xb9\x1c\x83\x9a\xd4\xe4K_\xe8 \x0b0L\xefiR\xcbi.\xa5\x01\xdf\x07\x8d\x87R\x01\xb3T\x0fN\x9f\x87\xf9\xf8\x1e\xeb\xc1\xcft;\xe4\xe5,_]\x13\xfd(\\\x91\xe7[:\x06n>\x9a\xfc\xa9=Y5%\x16\xda)KE\xd3g\xc1z\x1d\x89\x91\xc2]\xe08\x86[\xc81\xcc$\t#\r\xa4\x05\xad\xcf\xbf\xbbn9\x81\xe1M/\xf3\xe8\xaf|\xb9\x93\x8d\xf2\xf9_\xc3\xf6,H@\x1f\r\xebo\xde\x93\x02\x05\xb1\xdcG\x07\xf0\x96\xfd\x1b5\xc1be\xd7y{\xbf\xc9YhS]\x92T\x82\xfef\xb4\xa1\xb0\x041\x9e\x03 \xb1f\xeeIYN4\xf1\x95\x96\xc1\xd7VY\xc8\xd9\xa1\x95dk\xa6\xb8\xe0\x16\xcb\xce&\xceO\x19\x05\x10*\x85\xc0`\x9e\xc5\xcb\xbf\xb9z\xbdM\x03\xca\x90\xc2z,\x17d\xd4v\xe9\xb4\x93\xd0k7\xa0\x88\xff8:\xc4\x0c\xe5\x06\x83#!_\x7f\x0e\xeb\x84\xf2\xb8:(\x93\xd0P|^I\x05{fw\x0c<\xfdh\r\x80\xe6\x9d\xed\x961g\xbd\x0f?A\x82DOHno\x8c\xb0U~\x0cr\x10\xb0\x1780\xac\xba\xeb\xa9\x06\xad\xc2\xf2\xcb\x04\xa7\xb7\x89\xc7{DI2\x16\xa07\xdcFf#\x94\x1b\x8d\xffl\xcc\xfe\xa1!\xea\xa2\xde\xf5\x9dNQ\x8c\x0c\x84\xee\x8f\xcc\xb1\x14|y-\x9d\x11h\xac:b^\xab\xdaz\x8c\x03\x8d\xb4\x91C&\xb6ZK\xdb\xe7b\xe4m\xc4g\xc5o\xd8\xfc[,\xaf"u\xe7\xb6*\x1c\xd0P\xdc*\xaeR\xb2\x8c\xb3\xa6\xb3\x9f\x8c\xcf\xbb\xa1\xe6j\x99\xd8\x94k02\x94R~\xdb\x19\xe7\'\xa4#\x04C\xa1$\xb6\xed\xf6\x15\xe8L\x8a\x85\x97\x88\xbb\x1c\x146\x00;\xd2\xc0\xffO\x87\x8bd\xa1\x14\x80\xa6\xdf\xc4vQ\xe7\x05\xbb\x1a\x1c\x9bAB\x1cv\xcb;5<\xcb\xae\xa3\xf5\xe9x\x80\xb6\x8b\xf7\x8d\xb3?m\x96\x9f\xce\x08~|\xd5\xc1\xbc\x89<C\x17\xb8\x8aH\xf2\xac\xec\xb6X\x0b\xab\xd6d\n\xf5JnH\xe9\xd4P\xb1\x87\xa1"\x80\xbao<\x8a\xaf\x94\xa4\n\xc8\xee\xb4\xc4\xea\xa2?[Q\xdf\xae\xd0aE\x07\x89\xd7\xd9\xadV\xf6\xf2+\xd0\xa9\xce\x84l\x16b\x07t%@\x8f\x85\xc9\x90Jn\xa5\xa6Ab\xae\xf1B\xe4\x17\xd2av6\x94\x1b\x07\\\xc3\xbc_(\x02\x9c\xdd52\x0b\xa3\xd0\xc7\x00\xf7K/\xc7\x10\x1dbrVW\xb5\x8c\xd1J+QG^\xb4\\\xdb\x7f\xfe\xe2rb\xdd\xdd\xa1*\xa65U\xa8\xe6\'\xfe\x03N\xc8=\xd93\xe1\x8eKU\x05Gm\x08?\xee\x86\x9f.\xca\x1d\xd1+\xa0E\xca\xea\x11\xdbh~\xe9?\x17B{\xfc\xecD\xd3\x1e\x04K\xb1\xbdU\xfc\r\xb3\'D":#\x14A\xf9\xc4\xd4\xd2\xb6\x02\xa8\xa9\r\x84TTk~M\xb3.\xd6R\xba\xe7\xa6ci\xcck\xc6\x00\xd7\x06\xcc\x99\xcf9\xad\x815\xdc5!\x84\xf0q\xa8~l\x9e.\xc2\xa53j\xf2P9\xb9\xaf\x91\xe68\x0e-\xed2\x88\xc0\xb9@\xd3\x0e\x00\xd4ot\xed\x8a\x1f\x06<w\x03\x17\xec\xd2\x87d\xcb\xff\x85\x13\x8eD\x96\xc2\xaa\xb8>Pp\x08\x8f\xf1\x16\xda\xf8C\xe8,%B\x7fw\xadd\xc2.\x1a2PX*\x8f\x16\xe9\xa3\xdc\xe8\xed\xcd) \xf0\x17\xc1\x11_[~\x19\xd7\x0fk\x9e\x98D<)y\x150\xef\x80s{\xf1\xf51P\xd8\xb3\xb4cGA\xd4\xf58\xa9\x10\xab\xc0^L#?\xc7CG`\xabw\x1f\x89\xa3o@(\x036?\xc0+H\x1f\x9c\xf7\x8bj\xbe\xea\x1bAo$\x84f\x1c+MML\x06\x05\xc8Y\xb2{\xf0HQ\xbf\x1b\xa9\xf6\xf5\xdd3Xtd\x1bc\x06\x05F\x81/\xb3\xbb\xfcY{\xc0v\xd4\xf1\x8e\xdf\x8f\'\x0e\xa0s\xaf"\xcf}\xcaQ|\xdb\xaf\x9f\xa4\xdf2\xdb\xed\xfc\t\x19\x01_F:?RE\x8c\x13P\x9bV\\\x0b\x18\xbd\xe0M\xdb{\xe7\xca\xb7\r\t{T\x98{>\x10\xb3\x99X \xb3R\xb8&\x95\xc5\x92\xde\x8d\x02/\xe6\x9f\x851\x181xL\x13\x9e\xad^\xc22\x98\x1e\x99\xae\xc1U\xf7\xe0\x01\\,\x1d\x18\xc1EC|!\xa8\'v\xa0n\xf3\xce\xffo\xd2\xb7\xc5\xc6\x92\xa1\x111]C\xbc\xf0\xd8M\x99\\\\,+qb\xccnn\x06\xa9cY\xa2\xac\xa3\x81NA\xd4\xb7\x9c\n\xad\x7f\x05\xeall\xd7\x05/\xb0\xd6Z\x95\x8a\x0e(\x04y\x1a\xf1\x8f\x1d\xcc\xb48J\x1b1-\x16s\xee\x12\xb1\x8co\x97*\xe1D|\xb9\xb60\x16\x0c\xaf\x12~B\xb6\x1d\x1f\x12Ry\xc3N\x02@\xb9\xa0q\x0b\xe7\x87\xa3\xb3k\xc3\xe5m\xf3s\x0bp[\x93\xb8\x03\x03\xb5\x02\xd0;\x1a\xdf\xb3F\xcf\xf0>\xf5?\x9f\xdd\xaeI\xbf_\x0f\xff\x8c\xa4\xd1<\xf5\r2 \x9e\x7f\xa2R=\xb1\xb6?X\x8f!\xcd2C\xa2\xce\xaf\xc2\xe2\xc2\xc2\x11\xd9\x99\x0c\xa7\xcaH#\xe1\x1f\x89\xdc\x88H-Cq\xf5;\xce\xfd\xcf\xfa\xcc%\xa8\x95\xeb]8\x97\xda\xca\xde\xe9hL\xefN/Xe\x8f\xf6\xear(\xcd\xfe7\x13"\x84:\xbd\xdaK\x9bS\xfda\x07\x80\xfdA\xc5\x9f\x812ip\xab[\xd0\x02I\x87[[\x9cAS\x046\xe3\xcb\x99/\x00\xee\xe2W\x17\xd9\xb3\x85t6\xca\xf0\xe3\x84\x84\x8a\xff\x8c\xde\x9b\xad\xb9tY\xd6\x81_\xc8)*\x08\x84\xca\xee\r,U\x96\x1f\xcc\x04\x16\x02\x0c\xde\x83>\xb3\xf4\x8c+!&Z\xbb\x8e\xe8\x05(A\x8f\xa0\xad\x9d\x96\x88\x9c*\x83\xf3\xe3u7\xc2\xa4+\x04i\x04\xf0\xa3\xffi7\x8f\x00$A\x1c\xbb\xa5Y\xdc\x02w\xb7\xfc\xc6\xab\xe8\x01\x0cW[\x91\xac,\x93\xc2\xb0=H7h\x8f[\x05\xa0k\x00=\xf8\x03<o\x04\x196\xbf\x04\x1c\xed\x1b\x84\xe7\xf8G\x01|A\xa2uV5\xf3\xbcG\xfd\xb0#\x8c\xdad\x9b\xf8\xa0/\xb3%\x05\x1a~a\xd9\x16R\x13\xfa@\xa4\xa7\xc4\xdf\xa89\xa4j4G#Xl\x89C\xb7\x11[\xf5;a\x01\xb3\xea\xeb\x1fh>\x83]CP2\xdc\x9b\x0cU~\x1c\x94\xbfz\x9e0\x9c\x03[\xf3\xbe%\x18\x82\x05\x11=\xf1\xfa\xf8Y\xfac\x01+\x1aP\x7f\x0f<\xc4`w\xd2yM\x07\x19\x9b\x14\xfc\xcd\xa9\xd6O\x00u16\xaa@\'*\xf5g\x94f\xab\xae\xfe\x17\xc5\xe1YjO;\xe2\x8bv\xae/\x88_\xdb-\xa9K\x83\x91\x8bT\xa8:\x88\xb6\xcc\xe1C~\xb1\xb9\xdf7\x11\xa5\x9b0O\x89\x9b\r!\xbcA\x89\x9a*O~\x85\xb0A\xf2WE"\xaa\xe1\x80\x95\xa4\xcd\xbf\x94\xeeg#\xdb\x88!\xf9\xb1\x87Z\xff\xf2\xa3d\x97Lq\xd1;E\xd2*\x9b\xf1\xfdn\xb2\xea\xdf}\x15\x9c\x8b\xe6\xcc\xbfQ\xd8E\x0f\xd9\xd4\x7f\xcb\x84;1\xec\xa8\xbd*_\xc0d=[\xe9\xb5\xa5\x8d\x9fa\xd6\xb4k\xe3\xce,\xaf"\xa9\n{\xda\x04\xc2}q&_S`\x95\x17\xf2\x97~OG\xa5I\xe8\xe8\xca\xf9]\xfd\xa5\x95\x12\xf7\x17\xf2\x93\x97\x0b\x8c\x88i^vX\x1d\xebxD\x87S\xb4\x12\xed\xba\xd4\xa7\xa8g&%\xa6^\xc8[\xd8\xe8\xd3\xab\x90r\xed[\xe2g\xb3\x9c\xae\xce*\xc2Q\xe8\xba4\x9cI\xe6\x8d\xb8\xdf\x8d\n\xf1>6\xe8Y\xe1\x92Q\x07\xd5\x06X}\xfe\xfd\xe0\x8f\x08\x9b>\x89\xbed\xcf_XB\xb8\x80W[\x85\xd4\xc0\xc3x\x1e\xffJW\xbd\xed\xf1K\xbd\xa6\x803\xe8%\xbbe\x1cYX\xc6eEb\xc8!g\xe4AHn\x19`\xee\x89"\x95\x8f\x89\x96\x08R\xa0s\x95\xe1\xb2\x8bQ\x9f6\x98\x96\x01\xbc\x12\t#~\xad\xe7b\x91o\xf7\xa5\x81L\x9e\xf2\xeb\x81%\x86Y\x1e%S\x87I\xd0\x7f\x8d\x9aef\x8fa\xa5\xa5m\xdf\x89Y0\xb8.@FB\xf6\xd5\xfb\xf0\x01\xdb\xcc\x88M6Z9\x8f\xddwA\xea\xeeeQ\xf1\x0bF\xba`\x99\xf8\xffd\x93\xc4\xe9\x1b\xe2Y\xef\x8d\x05~]\x80\xb6\xbe\x0b\x81\xb5\xee\xa8k\x0b\x82nj\xb6\xe4\xcdw\xa9\xc2\xc6\xae\xff\xcf \xb2\xf5\xb36\xe2\xcb\x8b\x89G\x7f\xa2\xf7k\x15X\xeb\xb3z\xaehj;\x95^\xe7\xf21 \xa3\x0e\xd3.\x03\xbfV`\x82# gg\xa1\x05\xe3\x93?;/\x1bP\xe7\xea\x10I1\x08\xa3\x80\xa2uA\xf1\x91\xba2N\x04H\xa6K;\xdd\xc1At\xbfip\xafM\x89lS\x0e\x1f\xfa\xf5\x92p\x92\xe8\x8b\xbe_\xd8P\x02\x14\x13\xd7\x85\xb4\xa7\x19,klDi\xb0\x93%\xad\xaf\x8c\xfd.\xa1v\x99Ti]o?0\xb0'
tbI313
I0
F0
tbsS'hidden_dimension'
p744
I429
sS'output_dimension'
p745
I3
sS'input_batch'
p746
NsS'theano_rng'
p747
g1
(ctheano.tensor.shared_randomstreams
RandomStreams
p748
g3
NtRp749
(dp750
S'state_updates'
p751
(lp752
g273
asS'gen_seedgen'
p753
g109
(tRp754
(g111
g51
(g52
(I0
tS'b'
tRp755
(I1
(I624
tg113
I00
S'\xf6\xe2\xb5\xe3\xf3\x94\x98\xef]\x82\xd9u{\xaa\xec\xc48\xea\x81\x8cE\x8a\x85E\xfd\xa5\xe6/=\x8a\xd7il\xbdpTC%\xf8jc\xbf\xd5\xf9\xd2\'\x069\xe6\x0c\xb0\x844\xfe\x9bM\xa7\xac.\xd8\x89\xec(\x97\xf3f!\xa7W\x94\xb1Q\xc0wI\x04\xfe\x85\xe0\xbc\x03\xdc\xee/R\xd4T\x93Gw\xa0\x90\xa4\'\xfcd|\xae\x01\xadM y\xd4\xe7\x83\xd1H\xf0\x8a\xddp\xc6\xb3;\x88\xe8\x10\xb0\x89?\x8f\xb2)\x97K\x00aq\r\xc8\xd0J+\xd8e\xef\x0bvN\x11mR\xd3\xe9\xd6\xf3k\xb6\xc1\x02\xea;\xd2\x98\xec\xd8\xeb\xd8\x89\x8f\xec\xa9`m\x9eI\x1cuQv\xc0!\x06\xb5\xb7\x8a\xf6\xa1\xb0*\xa3\xaf\xe8\x1f\x05\x13\xcb\x0c\xbe\xc1o\xa5\xcc\xea\x00\xbbQ\x06QQ\xfc\xcd\xc7\t;\x9fQ\xda\xcd\x02\x1b\x85\xdb@;m\x8f\x9bp\x8cQ\xa6Q\xb9\xc8\xff)\x15vcr\xbe=\xb8\xe1\x0b\xc1\\#\xe7\xcd\x97(&\xc0\x0c\x1cY6\x86\xa2\xb3\xe9\xd09\xf9A\xa4\xc8\x8e\xae\xd4\xc7\xbe\xe52# \x8d\xbb\x0b\x87\xb3\x1f\x9b\x8d\x93[mx\xb22\x82\xcao\x19\xcb\xa95\xe6:\x1b\xc8\x08\xb9\xee\xc8@\x17%\xbfH\x9e\xb4\x97i\x00\x8a\xca,\x89D\x964\xe0\xda\xe6\x9d\x83q\xad\x04\x93-;4\x013\xd8)qi\x10 P\x00\xc2*\xfa,\xca d\xe8\xfa\x9bLy\xda\x1cw\xe6\xd9\xa7\xc5`yg\xc6t\x82(\xf4@\xf7\xb7`\x14\xaf5K7\xe6\x05\xc4\x1b\xe3\x89~\x9f\x1e\xe8\xa4%\xb8X\t\xe0\x16\xa8\xa2\xa4\xe65\xf0a@o\x08\xc8\xb1\xb9\xd1t\xb32\xabFy\x93\x81\x1cjc:6\xc1\xc0=\xc80l\x85\xc6e\x13\xab\x0b\xce,(\xe9y\x91M\xfc\x11\xad\xd8\x99\x14\x1d\x191\x80J`\xfak\x8a\xb3?\x81\xd5\x8d\xb9\x84\x16\xd0\xa0B\x8ap\x12\x01\xb3\xab\xce9\xb5G3\xdf\x19\x98X\xbe\x9fmx\xa9\x8e\x81\x1c\x182\x1e<v\x91)\xba(\x06N=\xce\xcb\xec\xd2A\x11\xfb-\xa3\x85\x96\xd7?2;\xb8\x8c\x9d\xea\xe9*\xbc\x97\x06!\xfc\xafW\x94\xe0?r\xb9\x0f\xfa0\xcd3\xd7\xa3\xe14\xbf\xf0\xbe-\xa4\xea\xd5D\x0b^\xbf*\xb5y\x8dk\xdb=3C\x90\rPw\x0c\x1c\xf4\xf6h\xe7\x07xb&\x94_9\xc0(\xadR\xba\x12\xd9$s\x14%\x1eI\x0c\x00B@\xe3P\x0c\t\xbd\x86G\x84\xff\x0b\x8e\xba\xc8\xca\x90\xdd\x8a\xa8\xf4\x83\xcdPh\xc7\xa1^^\xa9\x81v\\\xad\xc4\xcf\xb1\xddCt\xeb\xe9B\xa8\x08\xc1\x11!\x18\x81\xa0\xa7\xf2\xef\xcc<\xf5\x16Rn\xe7\xeb\x9d:\xea\xa7\xe0\xf0\x83\xcb\x81L\x98\x9bi\x00\xe612\xedg\xc8\x0b\x11o\x96(\xcc\xe2Zr\x07\xed\xfeA6hd\x18E<\xee\x92\x88Ea\xf6D\xb2c\xf5\xaa6\x10F+\xc89u.2g\x08\xe7 MM|+\x82I\xb0\xa2\xd2\x90\xcf=\xbbK\x08\xb6\xed\xc0!\x90a\x90r*\x8d\xd3l,\xfd\xcc\xc5\xfc\xd1\x16\xce\xa0\xb8\xf7j\xa2\xfd\xbd\xd6\xca\xfeS\xe2\xd6%\xb7\x8c\xd2\x0e\xc2\x0e$\xe9o\x96|\x03\\\x1f\xd7Wg\xca\x86GO\x80\xbeI\xa8\xe5A\x87\x12w@b@\xc3\x9b\xeb<\xd8\xec\x13\x82\xf8\tG`\xeb\xc8\xd6\x15~\xc0\xc4\x14\xddA\x9ft\xe2\xfc_\x8bFx\x86\x04\nz_/\xce\x9dcv\xcd\xc5\x07\x10EN\xec\x9b\x1cG3R\x1f&M\x12\xa1\x12\xe4\xf9E\x12`V\xd5f+\xe7\xe1\xa1\x87\xcf\x8f\xde\xf9\xd0\xe8\x94\xd5kw\xc60\xf8\xff\x97\x848E\xeai\xc05z\\\xba\x93#\x05\xfb#\x00\xbe\xa43aK2\xd6\x9d\xb7\xba\x99\xec;\xbf\x10{\xbav\xb0\xe2\xd8\x9a\x99\x9d\xfb\x819\x96do6\x9a\xe0<\x05\xfa*\x10\xae9H,y\x06\x93\x84\x86\xa3\xa8\x88\xffOVhz\x94\xb9~\xfd\xaa\x92E\xc4l\xd1\xbf\x98D\xfd\xd2O\xce\xcd\xder\x8c_\xb9\xef(\xa5\x9d\xc5\xd8n\x9f?\x96"#\xd6\x89\x9ac\x84FE\x91\x0bU\xc5h\x00c\xbf\x94\xac\xa9\x9a\x91i\r\x86\xcd\x91\xbaZ\x15\x87\xea\xef\x922l\xc4e\xc4JM`p\xc0\x8a\xaf\xce\xde}N!\xc8\xab{\xec\xf2\x9b\xd0\xc5\xe64 fK\xee\xa4/\xf2b\x04+\xac\x12S\xbd\xce\xbd@\xd5\x9c\xd0@IJ"\x8a1gUd\x1d<\xdc\xe3O.\\Q\x8dt\xe2\x0f|\xdaH4f\x02E\x8fX\x17\xde\xc2)\xe7\xc7e\xe5\xa9$\xfa\x99\xa3n\xd5NZ\xf5\xe3; \xe0@\xcbc\x0b\xd3\x9bqcu\xc6\x99\xf3\r\x1c\xf4\x1f\x90\x8bIRl\xf7F\x9d\xeai\xf07g\xf4\xb2\xefJ\x94b\x16\x91y\x1a\r\x05\xd0\xa7\xaf\xd1\xcbyk\x80\x0c:\xcb\x92\xa3\x15*w;A\x01\xb3\xe7\xa3\xa8#\x96^\xdc\x85Sa\xa2bi#\xcd\n\xc5`\xabh\x98d\x9ef\x87\xcfp8\xa7\xb0\x05:]\xd4\x9c\x03\xa8\xf5\xc5L\x99 \xb8\xecX\xa9\xf5\xc4\x08_\xe2\x94\x80C\xd2B)\x0bzYjC\x1b\xc2\xc5\xda\xbds20\x85\xbc:\x0f8tX\xc8\x12{\x1b\xd3\xf8\xa1;#I\x18,\xaf/8\xb9\xea\tJ\x84\xfdggT\x02\x9d\x03\x1a\xb5\x93\x8eY\xd9\xea\x0e,\x83E\xaf\x08\x8d\x15\x06tZ\xb7j\x9e\x83\xf4Z\x9a@\xf5DJ\xd5\xa5\xbd#\x10u,\xca|%8\x95\r\xbb\x9b\xdb\xf4J\xbeCT\xb2\xbd\xb2\x94\xa2NO\x03\x1cU\xeaq\x86\x9f\xefw\x036\xb3\x1d3\xb2\xe55O\x0b{\xc9\xf9\x9c\x1c\xa6\xa3bK4d\xb2\xd3\xd9#\x81\xdbA\x1d\x149\x8d\xbf_b\xb0\xdf\xd1M\x13\x02\x863m\xd4\xf3\x8e\x9e\x07\xf6-\xd4\x933\x05\x04\xed\x8c\xa4\x02[\xb0\xc2\xe6\x80\x1d\x88|\x18\x1e\xb4\x8bl\x14\xfe\x9a*\xf9\xc6\xaf\x87\xf2\xf2\xa8\xfcI\x96r\xc79\xdf\xb6\xa6\xc8e(?\x15\x9d\xcf&0\x1e\x97\xb6?\xa1\x83W\xf5\x02K\'O\xf3\xec~E\xbb\xa3:\xb6\x07\xaa\x90U\x06\xc8\xf8q\x9c\x9fz\xa1\x18\x1cyC\xb8\x8d\xb4\xd8$%\xb8\x02\xc1C\x91=\x90\x1a\xe7\xcf\x82\xeb)\xb2O\xdf\x9bB\xfd0\x844\xd5\xa9*L\xb9\xb0\xe7\x7f\xd8\xde\xa4\x86\xe3}\xe1\xf67\x0bXU\xbd?l\xe8N\xe4\xb6\xb8\xa1\xce\xe2\xdc\xa7k\xe9}\x04\xb17\\*\xc7\xfd\xe5v\x95\xf1%\xecB\xd4m\xff\xe7\t"%\x01/SV\xac/\xfdl\xb8`\xd2\xa7\x86i5\xa3\x1a\xc2\xeda\xe3\x1f\xb4`\xdbM3\x1c\xf8\xd4\xb4\x16\xb3q\xe0\xb0\xe1\x92\x12\x97S\xf0l5V\xddA\x17\xf0\xbf\xe0\x0cO\xa5\x1e\x94\x06\xa9\x1dd\x86:]\xe8\x93\xed\xe6\xd6\xe0[l\x99\xf3W{v\x06\xca\xea/=\xbe\x16E\xd6\x8f\x89ur\x8d\xa5T\xb4\x92\xba\x91f\xf1\xa1\x0c\'\'\xa4\x1c\x05\xa4\x14\x9f:7\x87\xcb\xd84\x0e~]\x8f-\xbel|\xc6I>(?\x07\xe2\xd7g%~CK\xd7\xf9\xd2,K\xab\xea\x90)\xe6\x1d[\n\xcc+\xadGr\xee\n\xf3\xa11\xd7\xeeM\xd1\xa0\xfa/rI\x8a\xbf-\\$\xd9\xa6\x7f\x86q\xffb^iDI/\xca\x1b\x89q\xdb\xa7\n\x15\x8c|\xb8\x9dg\xc1\n\x17\xba\xcd\xde\xac\x14|"&+\xcc:H\x05\xfa\x10\xa3X\xf3\x01\xbc\xaa\x06\x12x&\xc4\xee\xc9\xc3\xe0\xf4\xec+P3Jxe\xeb\x06\xc7\x06\xddy)\x85$,\x93L\xc1\xcbKu\xa1\xd7\xe3\x8f\xdd\xbd\xcc\xce\xe1\xe8\x98bA\xd9%\xbf0\xcc\x83\x8e\x149\xb5V\x97\xa4\xa7K\x89\x96\x8e%\x8fa|L\xe3\xbdk\xdeo\x1a\xbfM\xd3\xf4W\x8a\x84e\xf6\xe1\xd6E\xe0\xdf\x1d\xb2\xe1\xbf;\xd1\xca\xfac\xf9\xcbK\xf7\x1eP\x96\xa3^\xb3\xb7N/\xeb\x8e\x01:5\xe6\x8a\xd5<\xc5w\x8c\x96\x0e"\xe9\xd052&;\x96\xc5\xc3\x18\xe7\xaa\x9e\x96\\@\x82\xc5\xc9\x98\xd1\x92_\xe1\x98\x06\x03\x02\n_\xc6\xc2\xf2\t\x0b\x90\xc6um\xa1[\xfd"\xbbm\xc2\\P\xb3\xb5\r!\xac\x04\xa5\x8dAu.K\x9a\xfa\xd0k:K\xbc\xdb\x11\xcb\xd7\xca\x0e\xc3a\x99\x17\xb8\x14v\xf1=c\x10\xe8\x91X\xa8\x0b\x9c\xe9\xde\xa6c\xe0\x8e\x03\x98\xd9!\x92\xac@|\t\xdb\xd5\xb9\x8a7VEC\xa4\xdc\xd7\x9az\xf3\x1d\xb4lm\xb4\x10\xda\xdd\x15v;\\\x18nB\xd4y\xbca\xf5\xd2\xee\xa5x\xd9;\x10dw;\x80\x11A2\x0f\x18\xbe%\xb1X\x89\xec\x1c\xb5t\xce\x1b\x1e\x86\x1c\x14\x83,y2lA\xccL\xf3\xcaG\xf9\ry\xd4K\xaba\x8f\x9c\xdf\xf5\x81\x1f\xbe\xe9V\x13\x83V\x91-^\x04V\x98\x82\xeb(;\x11\x99\xdd\xf3y 6\xbc)$T_\xb3(*\xd2\x10)\x90\xef\xb2\x97\x14Q\xd1?2\xd5\x12\xf9\x96\xe9O:\x08\xf0B\x9b\xf2\x87X\xf1\xbb(\x03Q\x08c|r\xd4bl^\xb4\x81%\t\xf4\x81\xcc\x16\x13\xf50\xb7t\xacZ:\r\xd3\xc1U\x13\x9eG\xb2\xc2\xbb\x01+\xdc\xacbB\xd6dq\xbc\x11-\xe2\xbb"\xe3\x01\xc0q.!\xd6G\x88\xa8\xf00)\xe6\x8cf\x07\xe8)4\xc0\xe6L\xb5\xbe]>xJ\xf4@\x1b[\xf0\xff\xe2\xda\xbc\x1b\x81h\xc8f&\xe7T-:\xe1ZGFGi\xb0\x86\xe0p1)\xa8\x98\x80\xf0$\x1e\xdd\x7f\xbf\xa4\xd2\xb6\xb5\xd6"\xf7R\xa3\xb2\x14\x92\x13r\x08\xd0IR\n\x9eZ\\\xbc\xe5\xae\xb2/}\x93\xbe\xa9\xafJ\xdf\xd0\x85\x8f\xa5\x84\xfcL\x96\x15\x81M\r,\x18*\x11\xf4\xa0}\xabJ>\x14\xacH%\xf9\x93,\x8d\xbc\xa3\x82\x06\xc7\x9c\x98\\\xb1\xc5\xb0\x03\xc0.1\xc4\x81A\xd1\x91\xf7\xaazR\xe6\xea\x064 \xee\xb2\xb9l\xcf\xc3$*\t\xa9\t4\xcc\x10K8\xee\xc1\xc5g\xb9\xc0FFj/\xb2\xb8\xfb\xc3\x10H\x9b\xfb\xce\xb0Z\xe7>l\x87G9\xa7\x15N\xe2X\xc7\x1c\xe7RU\xe1\x194\x8d\x9ba}w_W\xcf\xa3\x86\xc3\xb6c\xc6\x8c\xe2\xfb\x95\x98\xee]E\x98/9\xc1\xb2\xd6\xf5\x93\x16M\x92\x1d\xc6O\\\xaf\x19\xfa\x1bw\xa4+}\x83S\x1b#}\xb7'
tbI1
I0
F0
tbsS'default_instance_seed'
p756
I97070007
sbsS'label_weights'
p757
g479
sS'input_dimension'
p758
I20
sS'corruption'
p759
F0.29999999999999999
sS'weights'
p760
g348
sS'train_model_once'
p761
g394
(g395
((dp762
g397
Nsg398
g399
sg400
I00
sg98
(lp763
g1
(g402
g3
NtRp764
(dp765
g40
g405
sg272
Nsg406
Nsg407
Nsg54
I00
sg408
I00
sg409
I00
sg410
g411
sg427
I00
sg60
I01
sbag1
(g402
g3
NtRp766
(dp767
g40
S'av'
p768
sg272
Nsg406
Nsg407
Nsg54
I00
sg408
I00
sg409
I00
sg410
g1
(g7
g3
NtRp769
(dp770
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p771
(dp772
g15
(lp773
(g17
I32
g18
S'super(Cart_Pole_DA, self).__init__(*args, **kwargs)'
tp774
a(g20
I76
g18
S'self.initialise_theano_functions()'
tp775
a(g417
I69
g418
S'action_vector = theano.tensor.ivector("av")'
tp776
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp777
asbsg28
g1
(g29
g3
NtRp778
(dp779
g32
(I00
tp780
sg34
g200
sg36
g225
sg39
I00
sg40
Nsbsg40
g768
sbsg427
I00
sg60
I01
sbag1
(g402
g3
NtRp781
(dp782
g40
S'ox'
p783
sg272
Nsg406
Nsg407
Nsg54
I00
sg408
I00
sg409
I00
sg410
g1
(g7
g3
NtRp784
(dp785
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p786
(dp787
g15
(lp788
(g17
I32
g18
S'super(Cart_Pole_DA, self).__init__(*args, **kwargs)'
tp789
a(g20
I76
g18
S'self.initialise_theano_functions()'
tp790
a(g417
I68
g418
S'output_vector = theano.tensor.dvector("ox")'
tp791
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp792
asbsg28
g30
sg40
g783
sbsg427
I00
sg60
I01
sbag1
(g402
g3
NtRp793
(dp794
g40
Nsg272
g1
(g119
g3
NtRp795
(dp796
g10
g1
(g95
g3
NtRp797
(dp798
g98
(lp799
g104
ag1
(g7
g3
NtRp800
(dp801
g10
g1
(g95
g3
NtRp802
(dp803
g98
(lp804
g1
(g7
g3
NtRp805
(dp806
g10
g1
(g95
g3
NtRp807
(dp808
g98
(lp809
g411
asg12
(itheano.gof.utils
scratchpad
p810
(dp811
g15
g137
sbsg147
(lp812
g805
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p813
(dp814
g15
g157
sbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p815
(dp816
g15
g171
sbsg147
(lp817
g800
asg149
g184
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p818
(dp819
g15
g216
sbsg28
g222
sg40
Nsbag227
ag239
asg12
(itheano.gof.utils
scratchpad
p820
(dp821
g15
g249
sbsg147
(lp822
g795
ag1
(g7
g3
NtRp823
(dp824
g10
g797
sg11
I1
sg12
(itheano.gof.utils
scratchpad
p825
(dp826
g15
g276
sbsg28
g261
sg40
Nsbasg149
g259
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p827
(dp828
g15
g266
sbsg28
g115
sg40
Nsbsg406
g106
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g104
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp829
(dp830
g40
S'W'
sg272
g1
(g7
g3
NtRp831
(dp832
g10
g1
(g95
g3
NtRp833
(dp834
g98
(lp835
g348
ag1
(g7
g3
NtRp836
(dp837
g10
g1
(g95
g3
NtRp838
(dp839
g98
(lp840
g1
(g7
g3
NtRp841
(dp842
g10
g1
(g95
g3
NtRp843
(dp844
g98
(lp845
g1
(g226
g3
NtRp846
(dp847
g11
Nsg12
(itheano.gof.utils
scratchpad
p848
(dp849
g235
Nsbsg28
g1
(g29
g3
NtRp850
(dp851
g32
(tsg34
S'float64'
p852
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp853
(I1
(tg38
I00
S'\x9a\x99\x99\x99\x99\x99\xb9?'
tbsbasg12
(itheano.gof.utils
scratchpad
p854
(dp855
g15
(lp856
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p857
I219
S'__rmul__'
p858
S'return theano.tensor.basic.mul(other, self)'
tp859
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp860
a(g219
I533
g161
S'inplace=False)(input))'
tp861
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp862
asbsg147
(lp863
g841
asg149
g1
(g373
g3
NtRp864
(dp865
g376
(lp866
sg378
(lp867
sg380
(lp868
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp869
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p870
(dp871
bsg28
g1
(g29
g3
NtRp872
(dp873
g32
(I01
I01
tp874
sg34
g852
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp875
(dp876
g10
g1
(g95
g3
NtRp877
(dp878
g98
(lp879
g1
(g7
g3
NtRp880
(dp881
g10
g1
(g95
g3
NtRp882
(dp883
g98
(lp884
g1
(g7
g3
NtRp885
(dp886
g10
g1
(g95
g3
NtRp887
(dp888
g98
(lp889
g1
(g7
g3
NtRp890
(dp891
g10
g1
(g95
g3
NtRp892
(dp893
g98
(lp894
g823
ag411
asg12
(itheano.gof.utils
scratchpad
p895
(dp896
g15
g283
sbsg147
(lp897
g890
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p898
(dp899
g15
g308
sbsg28
g313
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p900
(dp901
g15
(lp902
(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p903
I4578
S'grad'
p904
S'ygrad = dot(x.T, gz)'
tp905
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp906
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp907
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp908
asbsg147
(lp909
g885
asg149
g1
(g373
g3
NtRp910
(dp911
g376
(lp912
sg378
(lp913
I1
aI0
asg380
(lp914
sg382
g315
sg383
I00
sg384
(I1
I0
tp915
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p916
(dp917
bsg28
g1
(g29
g3
NtRp918
(dp919
g32
(I00
I00
tp920
sg34
g316
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp921
(dp922
g10
g1
(g95
g3
NtRp923
(dp924
g98
(lp925
g1
(g7
g3
NtRp926
(dp927
g10
g1
(g95
g3
NtRp928
(dp929
g98
(lp930
g1
(g7
g3
NtRp931
(dp932
g10
g1
(g95
g3
NtRp933
(dp934
g98
(lp935
g1
(g7
g3
NtRp936
(dp937
g10
g1
(g95
g3
NtRp938
(dp939
g98
(lp940
g1
(g7
g3
NtRp941
(dp942
g10
g1
(g95
g3
NtRp943
(dp944
g98
(lp945
g1
(g7
g3
NtRp946
(dp947
g10
g1
(g95
g3
NtRp948
(dp949
g98
(lp950
g1
(g7
g3
NtRp951
(dp952
g10
g1
(g95
g3
NtRp953
(dp954
g98
(lp955
g1
(g7
g3
NtRp956
(dp957
g10
g1
(g95
g3
NtRp958
(dp959
g98
(lp960
g1
(g7
g3
NtRp961
(dp962
g10
g1
(g95
g3
NtRp963
(dp964
g98
(lp965
g1
(g7
g3
NtRp966
(dp967
g10
g1
(g95
g3
NtRp968
(dp969
g98
(lp970
g1
(g7
g3
NtRp971
(dp972
g10
g1
(g95
g3
NtRp973
(dp974
g98
(lp975
g411
ag1
(g7
g3
NtRp976
(dp977
g10
g1
(g95
g3
NtRp978
(dp979
g98
(lp980
g1
(g7
g3
NtRp981
(dp982
g10
g1
(g95
g3
NtRp983
(dp984
g98
(lp985
g1
(g7
g3
NtRp986
(dp987
g10
g1
(g95
g3
NtRp988
(dp989
g98
(lp990
g1
(g7
g3
NtRp991
(dp992
g10
g1
(g95
g3
NtRp993
(dp994
g98
(lp995
g1
(g7
g3
NtRp996
(dp997
g10
g1
(g95
g3
NtRp998
(dp999
g98
(lp1000
g1
(g7
g3
NtRp1001
(dp1002
g10
g1
(g95
g3
NtRp1003
(dp1004
g98
(lp1005
g1
(g7
g3
NtRp1006
(dp1007
g10
g1
(g95
g3
NtRp1008
(dp1009
g98
(lp1010
g890
ag348
asg12
(itheano.gof.utils
scratchpad
p1011
(dp1012
g15
(lp1013
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1014
I179
S'get_reconstructed_input'
p1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1016
a(g534
I170
g535
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp1017
a(g537
I4732
g538
S'return _dot(a, b)'
tp1018
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1019
asbsg147
(lp1020
g1006
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1021
(dp1022
bsg28
g1
(g29
g3
NtRp1023
(dp1024
g32
(I00
I00
tp1025
sg34
S'float64'
p1026
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1027
(dp1028
g10
g1
(g95
g3
NtRp1029
(dp1030
g98
(lp1031
g43
asg12
(itheano.gof.utils
scratchpad
p1032
(dp1033
g15
(lp1034
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1035
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1036
a(g219
I533
g161
S'inplace=False)(input))'
tp1037
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1038
asbsg147
(lp1039
g1027
asg149
g1
(g373
g3
NtRp1040
(dp1041
g376
(lp1042
sg378
(lp1043
I0
asg380
(lp1044
I0
asg382
g58
sg383
I00
sg384
(S'x'
I0
tp1045
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1046
(dp1047
bsg28
g1
(g29
g3
NtRp1048
(dp1049
g32
(I01
I00
tp1050
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1051
(dp1052
g15
(lp1053
(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1054
a(g534
I171
g535
S'self.bias)'
tp1055
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1056
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1057
asbsg147
(lp1058
g1001
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1059
(dp1060
g15
(lp1061
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1062
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1063
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1064
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1065
asbsg28
g1
(g29
g3
NtRp1066
(dp1067
g32
(I00
I00
tp1068
sg34
S'float64'
p1069
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1070
(dp1071
g15
(lp1072
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1073
I197
S'get_cost'
p1074
S'y = self.get_reconstructed_input()'
tp1075
a(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1076
a(g534
I171
g535
S'self.bias)'
tp1077
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1078
asbsg147
(lp1079
g996
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1080
(dp1081
g15
(lp1082
(g534
I171
g535
S'self.bias)'
tp1083
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1084
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1085
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1086
asbsg28
g1
(g29
g3
NtRp1087
(dp1088
g32
(I00
I00
tp1089
sg34
S'float64'
p1090
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1091
(dp1092
g10
g1
(g95
g3
NtRp1093
(dp1094
g98
(lp1095
g348
asg12
(itheano.gof.utils
scratchpad
p1096
(dp1097
g15
g362
sbsg147
(lp1098
g1091
asg149
g374
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1099
(dp1100
bsg28
g388
sg40
g391
sbasg12
(itheano.gof.utils
scratchpad
p1101
(dp1102
g15
(lp1103
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp1104
a(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp1105
a(g537
I4732
g538
S'return _dot(a, b)'
tp1106
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1107
asbsg147
(lp1108
g991
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1109
(dp1110
bsg28
g1
(g29
g3
NtRp1111
(dp1112
g32
(I00
I00
tp1113
sg34
S'float64'
p1114
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1115
(dp1116
g10
g1
(g95
g3
NtRp1117
(dp1118
g98
(lp1119
g64
asg12
(itheano.gof.utils
scratchpad
p1120
(dp1121
g15
(lp1122
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1123
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1124
a(g219
I533
g161
S'inplace=False)(input))'
tp1125
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1126
asbsg147
(lp1127
g1115
asg149
g1
(g373
g3
NtRp1128
(dp1129
g376
(lp1130
sg378
(lp1131
I0
asg380
(lp1132
I0
asg382
g73
sg383
I00
sg384
(S'x'
I0
tp1133
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1134
(dp1135
bsg28
g1
(g29
g3
NtRp1136
(dp1137
g32
(I01
I00
tp1138
sg34
g74
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1139
(dp1140
g15
(lp1141
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp1142
a(g1014
I180
g1015
S'self.reverse_bias)'
tp1143
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1144
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1145
asbsg147
(lp1146
g986
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1147
(dp1148
g15
(lp1149
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1150
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1151
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1152
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1153
asbsg28
g1
(g29
g3
NtRp1154
(dp1155
g32
(I00
I00
tp1156
sg34
S'float64'
p1157
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1158
(dp1159
g15
(lp1160
(S'/Users/matthew/Repos/Reinforcement-Learning/rl/denoising_autoencoder.py'
p1161
I241
S'get_updates'
p1162
S'da_cost = self.get_cost()'
tp1163
a(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp1164
a(g1014
I180
g1015
S'self.reverse_bias)'
tp1165
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1166
asbsg147
(lp1167
g981
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1168
(dp1169
g15
(lp1170
(g1014
I180
g1015
S'self.reverse_bias)'
tp1171
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1172
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1173
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1174
asbsg28
g1
(g29
g3
NtRp1175
(dp1176
g32
(I00
I00
tp1177
sg34
S'float64'
p1178
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1179
(dp1180
g15
(lp1181
(g417
I74
g418
S'updates=self.get_updates(),'
tp1182
a(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1183
a(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1184
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1185
asbsg147
(lp1186
g976
asg149
g1
(g183
g3
NtRp1187
(dp1188
g186
g293
sg188
g1
(ctheano.scalar.basic
Log
p1189
g3
NtRp1190
(dp1191
g192
g338
sg153
g154
sg40
S'log'
p1192
sbsg40
S'Elemwise{log,no_inplace}'
p1193
sg153
g154
sg206
(dp1194
sg208
(g1192
I1
I1
tp1195
sg209
(dp1196
sg304
S"base e logarithm of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1197
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1198
(dp1199
g15
(lp1200
(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1201
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1202
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1203
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1204
asbsg28
g1
(g29
g3
NtRp1205
(dp1206
g32
(I00
I00
tp1207
sg34
S'float64'
p1208
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1209
(dp1210
g15
(lp1211
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1212
a(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp1213
a(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp1214
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1215
asbsg147
(lp1216
g971
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1217
(dp1218
g15
(lp1219
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp1220
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1221
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1222
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1223
asbsg28
g1
(g29
g3
NtRp1224
(dp1225
g32
(I00
I00
tp1226
sg34
S'float64'
p1227
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1228
(dp1229
g10
g1
(g95
g3
NtRp1230
(dp1231
g98
(lp1232
g1
(g7
g3
NtRp1233
(dp1234
g10
g1
(g95
g3
NtRp1235
(dp1236
g98
(lp1237
g1
(g7
g3
NtRp1238
(dp1239
g10
g1
(g95
g3
NtRp1240
(dp1241
g98
(lp1242
g227
asg12
(itheano.gof.utils
scratchpad
p1243
(dp1244
g15
(lp1245
(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1246
I216
S'__rsub__'
p1247
S'return theano.tensor.basic.sub(other, self)'
tp1248
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1249
a(g219
I533
g161
S'inplace=False)(input))'
tp1250
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1251
asbsg147
(lp1252
g1238
asg149
g1
(g373
g3
NtRp1253
(dp1254
g376
(lp1255
sg378
(lp1256
sg380
(lp1257
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp1258
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1259
(dp1260
bsg28
g1
(g29
g3
NtRp1261
(dp1262
g32
(I01
I01
tp1263
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p1264
(dp1265
g15
(lp1266
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1267
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1268
a(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1269
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1270
asbsg147
(lp1271
g1233
asg149
g1
(g183
g3
NtRp1272
(dp1273
g186
g293
sg188
g1
(ctheano.scalar.basic
Sub
p1274
g3
NtRp1275
(dp1276
g192
g297
sg153
g154
sg40
S'sub'
p1277
sbsg40
S'Elemwise{sub,no_inplace}'
p1278
sg153
g154
sg206
(dp1279
sg208
(S'subtract'
p1280
I2
I1
tp1281
sg209
(dp1282
sg304
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1283
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1284
(dp1285
g15
(lp1286
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1287
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1288
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1289
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1290
asbsg28
g1
(g29
g3
NtRp1291
(dp1292
g32
(I00
I00
tp1293
sg34
S'float64'
p1294
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1295
(dp1296
g10
g1
(g95
g3
NtRp1297
(dp1298
g98
(lp1299
g1
(g7
g3
NtRp1300
(dp1301
g10
g1
(g95
g3
NtRp1302
(dp1303
g98
(lp1304
g1
(g7
g3
NtRp1305
(dp1306
g10
g1
(g95
g3
NtRp1307
(dp1308
g98
(lp1309
g227
asg12
(itheano.gof.utils
scratchpad
p1310
(dp1311
g15
(lp1312
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1313
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1314
a(g219
I533
g161
S'inplace=False)(input))'
tp1315
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1316
asbsg147
(lp1317
g1305
asg149
g1
(g373
g3
NtRp1318
(dp1319
g376
(lp1320
sg378
(lp1321
sg380
(lp1322
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp1323
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1324
(dp1325
bsg28
g1
(g29
g3
NtRp1326
(dp1327
g32
(I01
I01
tp1328
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag981
asg12
(itheano.gof.utils
scratchpad
p1329
(dp1330
g15
(lp1331
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1332
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1333
a(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1334
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1335
asbsg147
(lp1336
g1300
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1337
(dp1338
g15
(lp1339
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp1340
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1341
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1342
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1343
asbsg28
g1
(g29
g3
NtRp1344
(dp1345
g32
(I00
I00
tp1346
sg34
S'float64'
p1347
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1348
(dp1349
g15
(lp1350
(g417
I74
g418
S'updates=self.get_updates(),'
tp1351
a(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1352
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1353
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1354
asbsg147
(lp1355
g1295
asg149
g1187
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1356
(dp1357
g15
(lp1358
(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1359
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1360
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1361
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1362
asbsg28
g1
(g29
g3
NtRp1363
(dp1364
g32
(I00
I00
tp1365
sg34
S'float64'
p1366
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1367
(dp1368
g15
(lp1369
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1370
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1371
a(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp1372
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1373
asbsg147
(lp1374
g1228
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1375
(dp1376
g15
(lp1377
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp1378
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1379
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1380
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1381
asbsg28
g1
(g29
g3
NtRp1382
(dp1383
g32
(I00
I00
tp1384
sg34
S'float64'
p1385
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1386
(dp1387
g15
(lp1388
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1389
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1390
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1391
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1392
asbsg147
(lp1393
g966
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1394
(dp1395
g15
(lp1396
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1397
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1398
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1399
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1400
asbsg28
g1
(g29
g3
NtRp1401
(dp1402
g32
(I00
I00
tp1403
sg34
S'float64'
p1404
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1405
(dp1406
g10
g1
(g95
g3
NtRp1407
(dp1408
g98
(lp1409
g1
(g7
g3
NtRp1410
(dp1411
g10
g1
(g95
g3
NtRp1412
(dp1413
g98
(lp1414
g1
(g7
g3
NtRp1415
(dp1416
g10
g1
(g95
g3
NtRp1417
(dp1418
g98
(lp1419
g1
(g7
g3
NtRp1420
(dp1421
g10
g1
(g95
g3
NtRp1422
(dp1423
g98
(lp1424
g1
(g7
g3
NtRp1425
(dp1426
g10
g1
(g95
g3
NtRp1427
(dp1428
g98
(lp1429
g966
asg12
(itheano.gof.utils
scratchpad
p1430
(dp1431
g15
(lp1432
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1433
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1434
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1435
I2670
S'sum'
p1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp1437
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1438
asbsg147
(lp1439
g1425
asg149
g1
(ctheano.tensor.elemwise
Sum
p1440
g3
NtRp1441
(dp1442
S'acc_dtype'
p1443
g1404
sg34
g1404
sg153
g154
sg188
g588
sS'axis'
p1444
(I1
tp1445
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1446
(dp1447
g15
(lp1448
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1449
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp1451
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1452
I1299
g161
S'broadcastable=broadcastable)()'
tp1453
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1454
asbsg28
g1
(g29
g3
NtRp1455
(dp1456
g32
(I00
tp1457
sg34
g1404
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1458
(dp1459
g15
(lp1460
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1461
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp1462
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1463
I27
S'__neg__'
p1464
S'return theano.tensor.basic.neg(self)'
tp1465
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1466
asbsg147
(lp1467
g1420
asg149
g1
(g183
g3
NtRp1468
(dp1469
g186
g293
sg188
g1
(ctheano.scalar.basic
Neg
p1470
g3
NtRp1471
(dp1472
g192
ctheano.scalar.basic
same_out
p1473
sg153
g154
sg40
S'neg'
p1474
sbsg40
S'Elemwise{neg,no_inplace}'
p1475
sg153
g154
sg206
(dp1476
sg208
(S'negative'
p1477
I1
I1
tp1478
sg209
(dp1479
sg304
S"-a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1480
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1481
(dp1482
g15
(lp1483
(g1463
I27
g1464
S'return theano.tensor.basic.neg(self)'
tp1484
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1485
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1486
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1487
asbsg28
g1
(g29
g3
NtRp1488
(dp1489
g32
(I00
tp1490
sg34
g1404
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1491
(dp1492
g10
g1
(g95
g3
NtRp1493
(dp1494
g98
(lp1495
g1
(g7
g3
NtRp1496
(dp1497
g10
g1
(g95
g3
NtRp1498
(dp1499
g98
(lp1500
g1
(g7
g3
NtRp1501
(dp1502
g10
g1
(g95
g3
NtRp1503
(dp1504
g98
(lp1505
g1
(g7
g3
NtRp1506
(dp1507
g10
g1
(g95
g3
NtRp1508
(dp1509
g98
(lp1510
g1
(g7
g3
NtRp1511
(dp1512
g10
g1
(g95
g3
NtRp1513
(dp1514
g98
(lp1515
g1420
asg12
(itheano.gof.utils
scratchpad
p1516
(dp1517
g15
(lp1518
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1519
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1520
I2802
S'mean'
p1521
S'acc_dtype=acc_dtype)'
tp1522
a(g1435
I2670
g1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp1523
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1524
asbsg147
(lp1525
g1511
asg149
g1
(g1440
g3
NtRp1526
(dp1527
g1443
g1404
sg34
g1404
sg153
g154
sg188
g588
sg1444
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1528
(dp1529
g15
(lp1530
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1531
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp1532
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp1533
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1534
asbsg28
g1
(g29
g3
NtRp1535
(dp1536
g32
(tsg34
g1404
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1537
(dp1538
g10
g1
(g95
g3
NtRp1539
(dp1540
g98
(lp1541
g1
(g7
g3
NtRp1542
(dp1543
g10
g1
(g95
g3
NtRp1544
(dp1545
g98
(lp1546
g1
(g7
g3
NtRp1547
(dp1548
g10
g1
(g95
g3
NtRp1549
(dp1550
g98
(lp1551
g1420
asg12
(itheano.gof.utils
scratchpad
p1552
(dp1553
g15
(lp1554
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1555
a(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1556
a(g1520
I2803
g1521
S'shp = shape(input)'
tp1557
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1558
asbsg147
(lp1559
g1547
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1560
(dp1561
g15
(lp1562
(g1520
I2803
g1521
S'shp = shape(input)'
tp1563
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1564
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp1565
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1566
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1567
(dp1568
g15
(lp1569
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1570
a(g1520
I2811
g1521
S"shp = cast(shp, 'float64')"
tp1571
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp1572
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1573
asbsg147
(lp1574
g1542
asg149
g1
(g183
g3
NtRp1575
(dp1576
g186
g187
sg40
Nsg188
g1
(g189
g3
NtRp1577
(dp1578
g192
g1
(g193
g3
NtRp1579
(dp1580
g196
(g1
(g197
g3
NtRp1581
(dp1582
g34
g35
sbtp1583
sbsg153
g154
sg202
g1581
sg40
S'convert_to_float64'
p1584
sg204
cnumpy
float64
p1585
sbsg206
(dp1586
sg208
Nsg209
(dp1587
sg211
(lp1588
g213
asg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1589
(dp1590
g15
(lp1591
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp1592
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1593
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1594
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1595
asbsg28
g1
(g29
g3
NtRp1596
(dp1597
g32
(I00
tp1598
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1599
(dp1600
g15
(lp1601
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1602
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp1603
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p1604
I407
S'__getitem__'
p1605
S'lambda entry: isinstance(entry, Variable)))'
tp1606
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1607
asbsg147
(lp1608
g1537
asg149
g1
(ctheano.tensor.subtensor
Subtensor
p1609
g3
NtRp1610
(dp1611
S'idx_list'
p1612
(cnumpy.core.multiarray
scalar
p1613
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp1614
tp1615
sS'perform_cache_cdata'
p1616
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1617
(dp1618
bsg28
g1
(g29
g3
NtRp1619
(dp1620
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1621
(dp1622
g15
(lp1623
(g1161
I241
g1162
S'da_cost = self.get_cost()'
tp1624
a(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp1625
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp1626
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1627
asbsg147
(lp1628
g1506
asg149
g1
(g183
g3
NtRp1629
(dp1630
g186
g293
sg188
g1
(ctheano.scalar.basic
TrueDiv
p1631
g3
NtRp1632
(dp1633
g192
g297
sg153
g154
sg40
S'true_div'
p1634
sbsg40
S'Elemwise{true_div,no_inplace}'
p1635
sg153
g154
sg206
(dp1636
sg208
(S'true_divide'
p1637
I2
I1
tp1638
sg209
(dp1639
sg304
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1640
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1641
(dp1642
g15
(lp1643
(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp1644
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1645
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1646
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1647
asbsg28
g1
(g29
g3
NtRp1648
(dp1649
g32
(tsg34
S'float64'
p1650
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g226
g3
NtRp1651
(dp1652
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp1653
(I1
(tg38
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
tbsg12
(itheano.gof.utils
scratchpad
p1654
(dp1655
g235
Nsbsg28
g1
(g29
g3
NtRp1656
(dp1657
g32
(tsg34
S'float64'
p1658
sg36
g38
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p1659
(dp1660
g15
(lp1661
(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp1663
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1664
I1124
S'_float_ones_like'
p1665
S'rval = tensor.ones_like(x)'
tp1666
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p1667
I2070
S'ones_like'
p1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp1669
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1670
asbsg147
(lp1671
g1501
asg149
g1
(g183
g3
NtRp1672
(dp1673
g186
g293
sg188
g1
(ctheano.scalar.basic
Second
p1674
g3
NtRp1675
(dp1676
g192
g1
(ctheano.scalar.basic
transfer_type
p1677
g3
NtRp1678
(dp1679
S'transfer'
p1680
(I1
tp1681
sbsg153
g154
sg40
S'second'
p1682
sbsg40
S'Elemwise{second,no_inplace}'
p1683
sg153
g154
sg206
(dp1684
sg208
Nsg209
(dp1685
sg304
S"Create a matrix by filling the shape of a with b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1686
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1687
(dp1688
g15
(lp1689
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp1690
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1691
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1692
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1693
asbsg28
g1
(g29
g3
NtRp1694
(dp1695
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1537
asg12
(itheano.gof.utils
scratchpad
p1696
(dp1697
g15
(lp1698
(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1700
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1701
I763
S'_bgrad'
p1702
S'ret.append(transform(scalar_igrad))'
tp1703
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1704
I755
S'transform'
p1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1706
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1707
asbsg147
(lp1708
g1496
asg149
g1
(g183
g3
NtRp1709
(dp1710
g40
Nsg188
g1632
sg206
(dp1711
sg208
Nsg209
(dp1712
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1713
(dp1714
g15
(lp1715
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1716
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1717
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1718
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1719
asbsg28
g1
(g29
g3
NtRp1720
(dp1721
g32
(tsg34
S'float64'
p1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1723
(dp1724
g15
(lp1725
(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1726
I1063
S'access_grad_cache'
p1727
S'term = access_term_cache(node)[idx]'
tp1728
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1729
I924
S'access_term_cache'
p1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1731
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1733
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1734
asbsg147
(lp1735
g1491
asg149
g1
(g373
g3
NtRp1736
(dp1737
g376
(lp1738
sg378
(lp1739
sg380
(lp1740
I0
asg382
(tsg383
I00
sg384
(S'x'
tp1741
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1742
(dp1743
bsg28
g1
(g29
g3
NtRp1744
(dp1745
g32
(I01
tp1746
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1747
(dp1748
g15
(lp1749
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp1750
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1751
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1752
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1753
asbsg147
(lp1754
g1415
asg149
g1
(g183
g3
NtRp1755
(dp1756
g40
Nsg188
g1675
sg206
(dp1757
sg208
Nsg209
(dp1758
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1759
(dp1760
g15
(lp1761
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1762
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1763
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1764
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1765
asbsg28
g1
(g29
g3
NtRp1766
(dp1767
g32
(I00
tp1768
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1769
(dp1770
g15
(lp1771
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1772
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1773
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1774
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1775
asbsg147
(lp1776
g1410
asg149
g1
(g183
g3
NtRp1777
(dp1778
g40
Nsg188
g1471
sg206
(dp1779
sg208
Nsg209
(dp1780
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1781
(dp1782
g15
(lp1783
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1784
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1785
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1786
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1787
asbsg28
g1
(g29
g3
NtRp1788
(dp1789
g32
(I00
tp1790
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1791
(dp1792
g15
(lp1793
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp1794
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1795
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1796
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1797
asbsg147
(lp1798
g1405
asg149
g1
(g373
g3
NtRp1799
(dp1800
g376
(lp1801
sg378
(lp1802
I0
asg380
(lp1803
I1
asg382
g1790
sg383
I00
sg384
(I0
S'x'
tp1804
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1805
(dp1806
bsg28
g1
(g29
g3
NtRp1807
(dp1808
g32
(I00
I01
tp1809
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1810
(dp1811
g15
(lp1812
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp1813
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp1814
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1815
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1816
asbsg147
(lp1817
g961
asg149
g1
(g183
g3
NtRp1818
(dp1819
g40
Nsg188
g1675
sg206
(dp1820
sg208
Nsg209
(dp1821
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1822
(dp1823
g15
(lp1824
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp1825
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1826
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1827
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1828
asbsg28
g1
(g29
g3
NtRp1829
(dp1830
g32
(I00
I00
tp1831
sg34
g1722
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p1832
(dp1833
g15
(lp1834
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1835
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1836
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1837
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1838
asbsg147
(lp1839
g956
asg149
g1
(g183
g3
NtRp1840
(dp1841
g40
Nsg188
g295
sg206
(dp1842
sg208
Nsg209
(dp1843
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1844
(dp1845
g15
(lp1846
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1847
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1848
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1849
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1850
asbsg28
g1
(g29
g3
NtRp1851
(dp1852
g32
(I00
I00
tp1853
sg34
S'float64'
p1854
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag981
asg12
(itheano.gof.utils
scratchpad
p1855
(dp1856
g15
(lp1857
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1858
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1859
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1860
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1861
asbsg147
(lp1862
g951
asg149
g1
(g183
g3
NtRp1863
(dp1864
g40
Nsg188
g1632
sg206
(dp1865
sg208
Nsg209
(dp1866
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1867
(dp1868
g15
(lp1869
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1870
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1871
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1872
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1873
asbsg28
g1
(g29
g3
NtRp1874
(dp1875
g32
(I00
I00
tp1876
sg34
S'float64'
p1877
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1878
(dp1879
g10
g1
(g95
g3
NtRp1880
(dp1881
g98
(lp1882
g1
(g7
g3
NtRp1883
(dp1884
g10
g1
(g95
g3
NtRp1885
(dp1886
g98
(lp1887
g1
(g7
g3
NtRp1888
(dp1889
g10
g1
(g95
g3
NtRp1890
(dp1891
g98
(lp1892
g961
ag1233
asg12
(itheano.gof.utils
scratchpad
p1893
(dp1894
g15
(lp1895
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1896
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1897
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1898
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1899
asbsg147
(lp1900
g1888
asg149
g1
(g183
g3
NtRp1901
(dp1902
g40
Nsg188
g295
sg206
(dp1903
sg208
Nsg209
(dp1904
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1905
(dp1906
g15
(lp1907
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1908
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1909
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1910
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1911
asbsg28
g1
(g29
g3
NtRp1912
(dp1913
g32
(I00
I00
tp1914
sg34
S'float64'
p1915
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1300
asg12
(itheano.gof.utils
scratchpad
p1916
(dp1917
g15
(lp1918
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1919
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1920
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1921
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1922
asbsg147
(lp1923
g1883
asg149
g1
(g183
g3
NtRp1924
(dp1925
g40
Nsg188
g1632
sg206
(dp1926
sg208
Nsg209
(dp1927
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1928
(dp1929
g15
(lp1930
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1931
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1932
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1933
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1934
asbsg28
g1
(g29
g3
NtRp1935
(dp1936
g32
(I00
I00
tp1937
sg34
S'float64'
p1938
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1939
(dp1940
g15
(lp1941
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp1942
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp1943
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1944
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1945
asbsg147
(lp1946
g1878
asg149
g1
(g183
g3
NtRp1947
(dp1948
g40
Nsg188
g1471
sg206
(dp1949
sg208
Nsg209
(dp1950
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1951
(dp1952
g15
(lp1953
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1954
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1955
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1956
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1957
asbsg28
g1
(g29
g3
NtRp1958
(dp1959
g32
(I00
I00
tp1960
sg34
g1938
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p1961
(dp1962
g15
(lp1963
(g1726
I1090
g1727
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp1964
a(S'/Library/Python/2.7/site-packages/theano/gradient.py'
p1965
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp1966
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1967
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1968
asbsg147
(lp1969
g946
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1970
(dp1971
g15
(lp1972
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp1973
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp1974
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp1975
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp1976
asbsg28
g1
(g29
g3
NtRp1977
(dp1978
g32
(I00
I00
tp1979
sg34
S'float64'
p1980
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp1981
(dp1982
g10
g1
(g95
g3
NtRp1983
(dp1984
g98
(lp1985
g986
asg12
(itheano.gof.utils
scratchpad
p1986
(dp1987
g15
(lp1988
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1989
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1990
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp1991
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp1992
asbsg147
(lp1993
g1981
asg149
g1
(g183
g3
NtRp1994
(dp1995
g40
Nsg188
g336
sg206
(dp1996
sg208
Nsg209
(dp1997
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p1998
(dp1999
g15
(lp2000
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2001
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2002
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2003
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2004
asbsg28
g1
(g29
g3
NtRp2005
(dp2006
g32
(I00
I00
tp2007
sg34
S'float64'
p2008
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2009
(dp2010
g15
(lp2011
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2012
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2013
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2014
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2015
asbsg147
(lp2016
g941
asg149
g1
(g183
g3
NtRp2017
(dp2018
g40
Nsg188
g295
sg206
(dp2019
sg208
Nsg209
(dp2020
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2021
(dp2022
g15
(lp2023
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2024
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2025
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2026
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2027
asbsg28
g1
(g29
g3
NtRp2028
(dp2029
g32
(I00
I00
tp2030
sg34
S'float64'
p2031
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2032
(dp2033
g10
g1
(g95
g3
NtRp2034
(dp2035
g98
(lp2036
g1
(g7
g3
NtRp2037
(dp2038
g10
g1
(g95
g3
NtRp2039
(dp2040
g98
(lp2041
g1
(g226
g3
NtRp2042
(dp2043
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp2044
(I1
(tg37
(S'f4'
I0
I1
tRp2045
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?'
tbsg12
(itheano.gof.utils
scratchpad
p2046
(dp2047
g235
Nsbsg28
g1
(g29
g3
NtRp2048
(dp2049
g32
(tsg34
S'float32'
p2050
sg36
g2045
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p2051
(dp2052
g15
(lp2053
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2054
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2055
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp2056
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2057
asbsg147
(lp2058
g2037
asg149
g1
(g373
g3
NtRp2059
(dp2060
g376
(lp2061
sg378
(lp2062
sg380
(lp2063
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp2064
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2065
(dp2066
bsg28
g1
(g29
g3
NtRp2067
(dp2068
g32
(I01
I01
tp2069
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2070
(dp2071
g10
g1
(g95
g3
NtRp2072
(dp2073
g98
(lp2074
g986
asg12
(itheano.gof.utils
scratchpad
p2075
(dp2076
g15
(lp2077
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2078
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2079
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2080
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2081
asbsg147
(lp2082
g2070
asg149
g1
(g183
g3
NtRp2083
(dp2084
g40
Nsg188
g336
sg206
(dp2085
sg208
Nsg209
(dp2086
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2087
(dp2088
g15
(lp2089
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2090
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2091
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2092
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2093
asbsg28
g1
(g29
g3
NtRp2094
(dp2095
g32
(I00
I00
tp2096
sg34
S'float64'
p2097
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2098
(dp2099
g15
(lp2100
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2101
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2102
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2103
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2104
asbsg147
(lp2105
g2032
asg149
g1
(g183
g3
NtRp2106
(dp2107
g40
Nsg188
g1275
sg206
(dp2108
sg208
Nsg209
(dp2109
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2110
(dp2111
g15
(lp2112
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2113
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2114
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2115
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2116
asbsg28
g1
(g29
g3
NtRp2117
(dp2118
g32
(I00
I00
tp2119
sg34
S'float64'
p2120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2121
(dp2122
g15
(lp2123
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2124
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2125
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2126
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2127
asbsg147
(lp2128
g936
asg149
g1
(g183
g3
NtRp2129
(dp2130
g40
Nsg188
g295
sg206
(dp2131
sg208
Nsg209
(dp2132
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2133
(dp2134
g15
(lp2135
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2136
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2137
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2138
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2139
asbsg28
g1
(g29
g3
NtRp2140
(dp2141
g32
(I00
I00
tp2142
sg34
S'float64'
p2143
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2144
(dp2145
g10
g1
(g95
g3
NtRp2146
(dp2147
g98
(lp2148
g1091
asg12
(itheano.gof.utils
scratchpad
p2149
(dp2150
g15
(lp2151
(g903
I4577
g904
S'xgrad = dot(gz, y.T)'
tp2152
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp2153
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp2154
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2155
asbsg147
(lp2156
g2144
asg149
g1
(g373
g3
NtRp2157
(dp2158
g376
(lp2159
sg378
(lp2160
I1
aI0
asg380
(lp2161
sg382
g390
sg383
I00
sg384
(I1
I0
tp2162
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2163
(dp2164
bsg28
g1
(g29
g3
NtRp2165
(dp2166
g32
(I00
I00
tp2167
sg34
g357
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T.T'
p2168
sbasg12
(itheano.gof.utils
scratchpad
p2169
(dp2170
g15
(lp2171
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2172
a(g903
I4577
g904
S'xgrad = dot(gz, y.T)'
tp2173
a(g537
I4732
g538
S'return _dot(a, b)'
tp2174
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2175
asbsg147
(lp2176
g931
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2177
(dp2178
bsg28
g1
(g29
g3
NtRp2179
(dp2180
g32
(I00
I00
tp2181
sg34
S'float64'
p2182
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2183
(dp2184
g10
g1
(g95
g3
NtRp2185
(dp2186
g98
(lp2187
g1001
asg12
(itheano.gof.utils
scratchpad
p2188
(dp2189
g15
(lp2190
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2191
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2192
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2193
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2194
asbsg147
(lp2195
g2183
asg149
g1
(g183
g3
NtRp2196
(dp2197
g40
Nsg188
g336
sg206
(dp2198
sg208
Nsg209
(dp2199
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2200
(dp2201
g15
(lp2202
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2203
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2204
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2205
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2206
asbsg28
g1
(g29
g3
NtRp2207
(dp2208
g32
(I00
I00
tp2209
sg34
S'float64'
p2210
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2211
(dp2212
g15
(lp2213
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2214
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2215
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2216
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2217
asbsg147
(lp2218
g926
asg149
g1
(g183
g3
NtRp2219
(dp2220
g40
Nsg188
g295
sg206
(dp2221
sg208
Nsg209
(dp2222
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2223
(dp2224
g15
(lp2225
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2226
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2227
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2228
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2229
asbsg28
g1
(g29
g3
NtRp2230
(dp2231
g32
(I00
I00
tp2232
sg34
S'float64'
p2233
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2234
(dp2235
g10
g1
(g95
g3
NtRp2236
(dp2237
g98
(lp2238
g1
(g7
g3
NtRp2239
(dp2240
g10
g1
(g95
g3
NtRp2241
(dp2242
g98
(lp2243
g2042
asg12
(itheano.gof.utils
scratchpad
p2244
(dp2245
g15
(lp2246
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2247
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2248
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp2249
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2250
asbsg147
(lp2251
g2239
asg149
g1
(g373
g3
NtRp2252
(dp2253
g376
(lp2254
sg378
(lp2255
sg380
(lp2256
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp2257
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2258
(dp2259
bsg28
g1
(g29
g3
NtRp2260
(dp2261
g32
(I01
I01
tp2262
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2263
(dp2264
g10
g1
(g95
g3
NtRp2265
(dp2266
g98
(lp2267
g1001
asg12
(itheano.gof.utils
scratchpad
p2268
(dp2269
g15
(lp2270
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2271
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2272
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2273
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2274
asbsg147
(lp2275
g2263
asg149
g1
(g183
g3
NtRp2276
(dp2277
g40
Nsg188
g336
sg206
(dp2278
sg208
Nsg209
(dp2279
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2280
(dp2281
g15
(lp2282
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2283
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2284
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2285
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2286
asbsg28
g1
(g29
g3
NtRp2287
(dp2288
g32
(I00
I00
tp2289
sg34
S'float64'
p2290
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2291
(dp2292
g15
(lp2293
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2294
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2295
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2296
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2297
asbsg147
(lp2298
g2234
asg149
g1
(g183
g3
NtRp2299
(dp2300
g40
Nsg188
g1275
sg206
(dp2301
sg208
Nsg209
(dp2302
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2303
(dp2304
g15
(lp2305
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2306
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2307
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2308
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2309
asbsg28
g1
(g29
g3
NtRp2310
(dp2311
g32
(I00
I00
tp2312
sg34
S'float64'
p2313
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2314
(dp2315
g15
(lp2316
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2317
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2318
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2319
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2320
asbsg147
(lp2321
g921
asg149
g1
(g183
g3
NtRp2322
(dp2323
g40
Nsg188
g295
sg206
(dp2324
sg208
Nsg209
(dp2325
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2326
(dp2327
g15
(lp2328
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2329
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2330
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2331
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2332
asbsg28
g1
(g29
g3
NtRp2333
(dp2334
g32
(I00
I00
tp2335
sg34
S'float64'
p2336
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2337
(dp2338
g15
(lp2339
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2340
a(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp2341
a(g537
I4732
g538
S'return _dot(a, b)'
tp2342
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2343
asbsg147
(lp2344
g880
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2345
(dp2346
bsg28
g1
(g29
g3
NtRp2347
(dp2348
g32
(I00
I00
tp2349
sg34
S'float64'
p2350
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2351
(dp2352
g10
g1
(g95
g3
NtRp2353
(dp2354
g98
(lp2355
g1
(g7
g3
NtRp2356
(dp2357
g10
g1
(g95
g3
NtRp2358
(dp2359
g98
(lp2360
g1
(g7
g3
NtRp2361
(dp2362
g10
g1
(g95
g3
NtRp2363
(dp2364
g98
(lp2365
g1
(g7
g3
NtRp2366
(dp2367
g10
g1
(g95
g3
NtRp2368
(dp2369
g98
(lp2370
g996
asg12
(itheano.gof.utils
scratchpad
p2371
(dp2372
g15
(lp2373
(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp2374
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp2375
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp2376
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2377
asbsg147
(lp2378
g2366
asg149
g1
(g373
g3
NtRp2379
(dp2380
g376
(lp2381
sg378
(lp2382
I1
aI0
asg380
(lp2383
sg382
g1089
sg383
I00
sg384
(I1
I0
tp2384
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2385
(dp2386
bsg28
g1
(g29
g3
NtRp2387
(dp2388
g32
(I00
I00
tp2389
sg34
g1090
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag936
asg12
(itheano.gof.utils
scratchpad
p2390
(dp2391
g15
(lp2392
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2393
a(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp2394
a(g537
I4732
g538
S'return _dot(a, b)'
tp2395
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2396
asbsg147
(lp2397
g2361
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2398
(dp2399
bsg28
g1
(g29
g3
NtRp2400
(dp2401
g32
(I00
I00
tp2402
sg34
S'float64'
p2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2404
(dp2405
g15
(lp2406
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2407
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2408
a(S'/Library/Python/2.7/site-packages/theano/tensor/elemwise.py'
p2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp2410
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2411
asbsg147
(lp2412
g2356
asg149
g1
(g183
g3
NtRp2413
(dp2414
g40
Nsg188
g1
(ctheano.scalar.basic
Identity
p2415
g3
NtRp2416
(dp2417
g192
g1473
sg153
g154
sg40
S'identity'
p2418
sbsg206
(dp2419
sg208
Nsg209
(dp2420
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2421
(dp2422
g15
(lp2423
(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp2424
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2425
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2426
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2427
asbsg28
g1
(g29
g3
NtRp2428
(dp2429
g32
(I00
I00
tp2430
sg34
g2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2431
(dp2432
g15
(lp2433
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2434
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2435
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp2436
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2437
asbsg147
(lp2438
g2351
asg149
g1
(g373
g3
NtRp2439
(dp2440
g376
(lp2441
sg378
(lp2442
I1
aI0
asg380
(lp2443
sg382
g2402
sg383
I00
sg384
(I1
I0
tp2444
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2445
(dp2446
bsg28
g1
(g29
g3
NtRp2447
(dp2448
g32
(I00
I00
tp2449
sg34
g2403
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2450
(dp2451
g15
(lp2452
(g1726
I1090
g1727
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2453
a(g1965
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2454
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp2455
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2456
asbsg147
(lp2457
g875
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2458
(dp2459
g15
(lp2460
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp2461
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2462
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2463
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2464
asbsg28
g1
(g29
g3
NtRp2465
(dp2466
g32
(I00
I00
tp2467
sg34
S'float64'
p2468
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2469
(dp2470
g15
(lp2471
(g417
I74
g418
S'updates=self.get_updates(),'
tp2472
a(g1161
I252
g1162
S'(self.weights, self.weights - self.learning_rate*weight_gradient),'
tp2473
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp2474
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2475
asbsg147
(lp2476
g836
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2477
(dp2478
g15
(lp2479
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp2480
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2481
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2482
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2483
asbsg28
g1
(g29
g3
NtRp2484
(dp2485
g32
(I00
I00
tp2486
sg34
S'float64'
p2487
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2488
(dp2489
g15
(lp2490
(g417
I74
g418
S'updates=self.get_updates(),'
tp2491
a(g1161
I252
g1162
S'(self.weights, self.weights - self.learning_rate*weight_gradient),'
tp2492
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p2493
I136
S'__sub__'
p2494
S'return theano.tensor.basic.sub(self, other)'
tp2495
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2496
asbsg147
(lp2497
g831
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2498
(dp2499
g15
(lp2500
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp2501
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2502
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2503
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2504
asbsg28
g1
(g29
g3
NtRp2505
(dp2506
g32
(I00
I00
tp2507
sg34
S'float64'
p2508
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g350
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g348
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp2509
(dp2510
g40
S'b'
sg272
g1
(g7
g3
NtRp2511
(dp2512
g10
g1
(g95
g3
NtRp2513
(dp2514
g98
(lp2515
g43
ag1
(g7
g3
NtRp2516
(dp2517
g10
g1
(g95
g3
NtRp2518
(dp2519
g98
(lp2520
g1
(g7
g3
NtRp2521
(dp2522
g10
g1
(g95
g3
NtRp2523
(dp2524
g98
(lp2525
g1
(g226
g3
NtRp2526
(dp2527
g11
Nsg12
(itheano.gof.utils
scratchpad
p2528
(dp2529
g235
Nsbsg28
g1
(g29
g3
NtRp2530
(dp2531
g32
(tsg34
S'float64'
p2532
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp2533
(I1
(tg38
I00
S'\x9a\x99\x99\x99\x99\x99\xb9?'
tbsbasg12
(itheano.gof.utils
scratchpad
p2534
(dp2535
g15
(lp2536
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp2537
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2538
a(g219
I533
g161
S'inplace=False)(input))'
tp2539
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2540
asbsg147
(lp2541
g2521
asg149
g1
(g373
g3
NtRp2542
(dp2543
g376
(lp2544
sg378
(lp2545
sg380
(lp2546
I0
asg382
(tsg383
I00
sg384
(S'x'
tp2547
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2548
(dp2549
bsg28
g1
(g29
g3
NtRp2550
(dp2551
g32
(I01
tp2552
sg34
g2532
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2553
(dp2554
g10
g1
(g95
g3
NtRp2555
(dp2556
g98
(lp2557
g1
(g7
g3
NtRp2558
(dp2559
g10
g1
(g95
g3
NtRp2560
(dp2561
g98
(lp2562
g1
(g7
g3
NtRp2563
(dp2564
g10
g1
(g95
g3
NtRp2565
(dp2566
g98
(lp2567
g1
(g7
g3
NtRp2568
(dp2569
g10
g1
(g95
g3
NtRp2570
(dp2571
g98
(lp2572
g1
(g7
g3
NtRp2573
(dp2574
g10
g1
(g95
g3
NtRp2575
(dp2576
g98
(lp2577
g1
(g7
g3
NtRp2578
(dp2579
g10
g1
(g95
g3
NtRp2580
(dp2581
g98
(lp2582
g1
(g7
g3
NtRp2583
(dp2584
g10
g1
(g95
g3
NtRp2585
(dp2586
g98
(lp2587
g1
(g7
g3
NtRp2588
(dp2589
g10
g1
(g95
g3
NtRp2590
(dp2591
g98
(lp2592
g1
(g7
g3
NtRp2593
(dp2594
g10
g1
(g95
g3
NtRp2595
(dp2596
g98
(lp2597
g1
(g7
g3
NtRp2598
(dp2599
g10
g1
(g95
g3
NtRp2600
(dp2601
g98
(lp2602
g1
(g7
g3
NtRp2603
(dp2604
g10
g1
(g95
g3
NtRp2605
(dp2606
g98
(lp2607
g1
(g7
g3
NtRp2608
(dp2609
g10
g1
(g95
g3
NtRp2610
(dp2611
g98
(lp2612
g1
(g7
g3
NtRp2613
(dp2614
g10
g1
(g95
g3
NtRp2615
(dp2616
g98
(lp2617
g966
ag1
(g7
g3
NtRp2618
(dp2619
g10
g1
(g95
g3
NtRp2620
(dp2621
g98
(lp2622
g1
(g7
g3
NtRp2623
(dp2624
g10
g1
(g95
g3
NtRp2625
(dp2626
g98
(lp2627
g1
(g7
g3
NtRp2628
(dp2629
g10
g1
(g95
g3
NtRp2630
(dp2631
g98
(lp2632
g1420
ag1
(g7
g3
NtRp2633
(dp2634
g10
g1
(g95
g3
NtRp2635
(dp2636
g98
(lp2637
g1
(g7
g3
NtRp2638
(dp2639
g10
g1
(g95
g3
NtRp2640
(dp2641
g98
(lp2642
g1
(g7
g3
NtRp2643
(dp2644
g10
g1
(g95
g3
NtRp2645
(dp2646
g98
(lp2647
g1506
ag1651
asg12
(itheano.gof.utils
scratchpad
p2648
(dp2649
g15
(lp2650
(g1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp2651
a(g1664
I1124
g1665
S'rval = tensor.ones_like(x)'
tp2652
a(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp2653
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2654
asbsg147
(lp2655
g2643
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2656
(dp2657
g15
(lp2658
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp2659
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2660
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2661
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2662
asbsg28
g1
(g29
g3
NtRp2663
(dp2664
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1537
asg12
(itheano.gof.utils
scratchpad
p2665
(dp2666
g15
(lp2667
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2668
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2669
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2670
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2671
asbsg147
(lp2672
g2638
asg149
g1
(g183
g3
NtRp2673
(dp2674
g40
Nsg188
g1632
sg206
(dp2675
sg208
Nsg209
(dp2676
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2677
(dp2678
g15
(lp2679
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2680
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2681
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2682
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2683
asbsg28
g1
(g29
g3
NtRp2684
(dp2685
g32
(tsg34
S'float64'
p2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2687
(dp2688
g15
(lp2689
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2690
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2691
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2692
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2693
asbsg147
(lp2694
g2633
asg149
g1
(g373
g3
NtRp2695
(dp2696
g376
(lp2697
sg378
(lp2698
sg380
(lp2699
I0
asg382
(tsg383
I00
sg384
(S'x'
tp2700
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2701
(dp2702
bsg28
g1
(g29
g3
NtRp2703
(dp2704
g32
(I01
tp2705
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2706
(dp2707
g15
(lp2708
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2709
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2710
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2711
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2712
asbsg147
(lp2713
g2628
asg149
g1
(g183
g3
NtRp2714
(dp2715
g40
Nsg188
g1675
sg206
(dp2716
sg208
Nsg209
(dp2717
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2718
(dp2719
g15
(lp2720
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2721
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2722
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2723
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2724
asbsg28
g1
(g29
g3
NtRp2725
(dp2726
g32
(I00
tp2727
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2728
(dp2729
g15
(lp2730
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2731
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2732
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2733
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2734
asbsg147
(lp2735
g2623
asg149
g1
(g183
g3
NtRp2736
(dp2737
g40
Nsg188
g1471
sg206
(dp2738
sg208
Nsg209
(dp2739
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2740
(dp2741
g15
(lp2742
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2743
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2744
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2745
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2746
asbsg28
g1
(g29
g3
NtRp2747
(dp2748
g32
(I00
tp2749
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2750
(dp2751
g15
(lp2752
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2753
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2754
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2755
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2756
asbsg147
(lp2757
g2618
asg149
g1
(g373
g3
NtRp2758
(dp2759
g376
(lp2760
sg378
(lp2761
I0
asg380
(lp2762
I1
asg382
g2749
sg383
I00
sg384
(I0
S'x'
tp2763
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2764
(dp2765
bsg28
g1
(g29
g3
NtRp2766
(dp2767
g32
(I00
I01
tp2768
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2769
(dp2770
g15
(lp2771
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp2772
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp2773
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2774
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2775
asbsg147
(lp2776
g2613
asg149
g1
(g183
g3
NtRp2777
(dp2778
g40
Nsg188
g1675
sg206
(dp2779
sg208
Nsg209
(dp2780
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2781
(dp2782
g15
(lp2783
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp2784
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2785
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2786
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2787
asbsg28
g1
(g29
g3
NtRp2788
(dp2789
g32
(I00
I00
tp2790
sg34
g2686
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p2791
(dp2792
g15
(lp2793
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2794
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2795
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2796
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2797
asbsg147
(lp2798
g2608
asg149
g1
(g183
g3
NtRp2799
(dp2800
g40
Nsg188
g295
sg206
(dp2801
sg208
Nsg209
(dp2802
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2803
(dp2804
g15
(lp2805
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2806
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2807
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2808
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2809
asbsg28
g1
(g29
g3
NtRp2810
(dp2811
g32
(I00
I00
tp2812
sg34
S'float64'
p2813
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag981
asg12
(itheano.gof.utils
scratchpad
p2814
(dp2815
g15
(lp2816
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2817
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2818
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2819
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2820
asbsg147
(lp2821
g2603
asg149
g1
(g183
g3
NtRp2822
(dp2823
g40
Nsg188
g1632
sg206
(dp2824
sg208
Nsg209
(dp2825
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2826
(dp2827
g15
(lp2828
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2829
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2830
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2831
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2832
asbsg28
g1
(g29
g3
NtRp2833
(dp2834
g32
(I00
I00
tp2835
sg34
S'float64'
p2836
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2837
(dp2838
g10
g1
(g95
g3
NtRp2839
(dp2840
g98
(lp2841
g1
(g7
g3
NtRp2842
(dp2843
g10
g1
(g95
g3
NtRp2844
(dp2845
g98
(lp2846
g1
(g7
g3
NtRp2847
(dp2848
g10
g1
(g95
g3
NtRp2849
(dp2850
g98
(lp2851
g2613
ag1233
asg12
(itheano.gof.utils
scratchpad
p2852
(dp2853
g15
(lp2854
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2855
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2856
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2857
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2858
asbsg147
(lp2859
g2847
asg149
g1
(g183
g3
NtRp2860
(dp2861
g40
Nsg188
g295
sg206
(dp2862
sg208
Nsg209
(dp2863
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2864
(dp2865
g15
(lp2866
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2867
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2868
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2869
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2870
asbsg28
g1
(g29
g3
NtRp2871
(dp2872
g32
(I00
I00
tp2873
sg34
S'float64'
p2874
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1300
asg12
(itheano.gof.utils
scratchpad
p2875
(dp2876
g15
(lp2877
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2878
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2879
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2880
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2881
asbsg147
(lp2882
g2842
asg149
g1
(g183
g3
NtRp2883
(dp2884
g40
Nsg188
g1632
sg206
(dp2885
sg208
Nsg209
(dp2886
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2887
(dp2888
g15
(lp2889
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2890
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2891
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2892
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2893
asbsg28
g1
(g29
g3
NtRp2894
(dp2895
g32
(I00
I00
tp2896
sg34
S'float64'
p2897
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2898
(dp2899
g15
(lp2900
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp2901
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2902
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2903
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2904
asbsg147
(lp2905
g2837
asg149
g1
(g183
g3
NtRp2906
(dp2907
g40
Nsg188
g1471
sg206
(dp2908
sg208
Nsg209
(dp2909
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2910
(dp2911
g15
(lp2912
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2913
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2914
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2915
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2916
asbsg28
g1
(g29
g3
NtRp2917
(dp2918
g32
(I00
I00
tp2919
sg34
g2897
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2920
(dp2921
g15
(lp2922
(g1726
I1090
g1727
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2923
a(g1965
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp2924
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp2925
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2926
asbsg147
(lp2927
g2598
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2928
(dp2929
g15
(lp2930
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp2931
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2932
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2933
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2934
asbsg28
g1
(g29
g3
NtRp2935
(dp2936
g32
(I00
I00
tp2937
sg34
S'float64'
p2938
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2939
(dp2940
g10
g1
(g95
g3
NtRp2941
(dp2942
g98
(lp2943
g986
asg12
(itheano.gof.utils
scratchpad
p2944
(dp2945
g15
(lp2946
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2947
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2948
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2949
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2950
asbsg147
(lp2951
g2939
asg149
g1
(g183
g3
NtRp2952
(dp2953
g40
Nsg188
g336
sg206
(dp2954
sg208
Nsg209
(dp2955
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2956
(dp2957
g15
(lp2958
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2959
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2960
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2961
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2962
asbsg28
g1
(g29
g3
NtRp2963
(dp2964
g32
(I00
I00
tp2965
sg34
S'float64'
p2966
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p2967
(dp2968
g15
(lp2969
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp2970
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2971
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2972
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp2973
asbsg147
(lp2974
g2593
asg149
g1
(g183
g3
NtRp2975
(dp2976
g40
Nsg188
g295
sg206
(dp2977
sg208
Nsg209
(dp2978
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p2979
(dp2980
g15
(lp2981
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp2982
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp2983
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp2984
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp2985
asbsg28
g1
(g29
g3
NtRp2986
(dp2987
g32
(I00
I00
tp2988
sg34
S'float64'
p2989
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp2990
(dp2991
g10
g1
(g95
g3
NtRp2992
(dp2993
g98
(lp2994
g1
(g7
g3
NtRp2995
(dp2996
g10
g1
(g95
g3
NtRp2997
(dp2998
g98
(lp2999
g2042
asg12
(itheano.gof.utils
scratchpad
p3000
(dp3001
g15
(lp3002
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3003
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3004
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3005
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3006
asbsg147
(lp3007
g2995
asg149
g1
(g373
g3
NtRp3008
(dp3009
g376
(lp3010
sg378
(lp3011
sg380
(lp3012
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp3013
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3014
(dp3015
bsg28
g1
(g29
g3
NtRp3016
(dp3017
g32
(I01
I01
tp3018
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3019
(dp3020
g10
g1
(g95
g3
NtRp3021
(dp3022
g98
(lp3023
g986
asg12
(itheano.gof.utils
scratchpad
p3024
(dp3025
g15
(lp3026
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3027
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3028
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3029
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3030
asbsg147
(lp3031
g3019
asg149
g1
(g183
g3
NtRp3032
(dp3033
g40
Nsg188
g336
sg206
(dp3034
sg208
Nsg209
(dp3035
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3036
(dp3037
g15
(lp3038
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3039
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3040
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3041
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3042
asbsg28
g1
(g29
g3
NtRp3043
(dp3044
g32
(I00
I00
tp3045
sg34
S'float64'
p3046
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3047
(dp3048
g15
(lp3049
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3050
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3051
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3052
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3053
asbsg147
(lp3054
g2990
asg149
g1
(g183
g3
NtRp3055
(dp3056
g40
Nsg188
g1275
sg206
(dp3057
sg208
Nsg209
(dp3058
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3059
(dp3060
g15
(lp3061
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3062
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3063
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3064
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3065
asbsg28
g1
(g29
g3
NtRp3066
(dp3067
g32
(I00
I00
tp3068
sg34
S'float64'
p3069
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3070
(dp3071
g15
(lp3072
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3073
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3074
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3075
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3076
asbsg147
(lp3077
g2588
asg149
g1
(g183
g3
NtRp3078
(dp3079
g40
Nsg188
g295
sg206
(dp3080
sg208
Nsg209
(dp3081
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3082
(dp3083
g15
(lp3084
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3085
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3086
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3087
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3088
asbsg28
g1
(g29
g3
NtRp3089
(dp3090
g32
(I00
I00
tp3091
sg34
S'float64'
p3092
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3093
(dp3094
g10
g1
(g95
g3
NtRp3095
(dp3096
g98
(lp3097
g1091
asg12
(itheano.gof.utils
scratchpad
p3098
(dp3099
g15
(lp3100
(g903
I4577
g904
S'xgrad = dot(gz, y.T)'
tp3101
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp3102
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp3103
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3104
asbsg147
(lp3105
g3093
asg149
g1
(g373
g3
NtRp3106
(dp3107
g376
(lp3108
sg378
(lp3109
I1
aI0
asg380
(lp3110
sg382
g390
sg383
I00
sg384
(I1
I0
tp3111
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3112
(dp3113
bsg28
g1
(g29
g3
NtRp3114
(dp3115
g32
(I00
I00
tp3116
sg34
g357
sg36
g38
sg39
I00
sg40
Nsbsg40
S'W.T.T'
p3117
sbasg12
(itheano.gof.utils
scratchpad
p3118
(dp3119
g15
(lp3120
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3121
a(g903
I4577
g904
S'xgrad = dot(gz, y.T)'
tp3122
a(g537
I4732
g538
S'return _dot(a, b)'
tp3123
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3124
asbsg147
(lp3125
g2583
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3126
(dp3127
bsg28
g1
(g29
g3
NtRp3128
(dp3129
g32
(I00
I00
tp3130
sg34
S'float64'
p3131
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3132
(dp3133
g10
g1
(g95
g3
NtRp3134
(dp3135
g98
(lp3136
g1001
asg12
(itheano.gof.utils
scratchpad
p3137
(dp3138
g15
(lp3139
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3140
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3141
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3142
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3143
asbsg147
(lp3144
g3132
asg149
g1
(g183
g3
NtRp3145
(dp3146
g40
Nsg188
g336
sg206
(dp3147
sg208
Nsg209
(dp3148
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3149
(dp3150
g15
(lp3151
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3152
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3153
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3154
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3155
asbsg28
g1
(g29
g3
NtRp3156
(dp3157
g32
(I00
I00
tp3158
sg34
S'float64'
p3159
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3160
(dp3161
g15
(lp3162
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3163
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3164
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3165
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3166
asbsg147
(lp3167
g2578
asg149
g1
(g183
g3
NtRp3168
(dp3169
g40
Nsg188
g295
sg206
(dp3170
sg208
Nsg209
(dp3171
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3172
(dp3173
g15
(lp3174
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3175
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3176
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3177
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3178
asbsg28
g1
(g29
g3
NtRp3179
(dp3180
g32
(I00
I00
tp3181
sg34
S'float64'
p3182
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3183
(dp3184
g10
g1
(g95
g3
NtRp3185
(dp3186
g98
(lp3187
g1
(g7
g3
NtRp3188
(dp3189
g10
g1
(g95
g3
NtRp3190
(dp3191
g98
(lp3192
g2042
asg12
(itheano.gof.utils
scratchpad
p3193
(dp3194
g15
(lp3195
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3196
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3197
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3198
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3199
asbsg147
(lp3200
g3188
asg149
g1
(g373
g3
NtRp3201
(dp3202
g376
(lp3203
sg378
(lp3204
sg380
(lp3205
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp3206
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3207
(dp3208
bsg28
g1
(g29
g3
NtRp3209
(dp3210
g32
(I01
I01
tp3211
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3212
(dp3213
g10
g1
(g95
g3
NtRp3214
(dp3215
g98
(lp3216
g1001
asg12
(itheano.gof.utils
scratchpad
p3217
(dp3218
g15
(lp3219
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3220
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3221
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3222
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3223
asbsg147
(lp3224
g3212
asg149
g1
(g183
g3
NtRp3225
(dp3226
g40
Nsg188
g336
sg206
(dp3227
sg208
Nsg209
(dp3228
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3229
(dp3230
g15
(lp3231
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3232
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3233
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3234
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3235
asbsg28
g1
(g29
g3
NtRp3236
(dp3237
g32
(I00
I00
tp3238
sg34
S'float64'
p3239
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3240
(dp3241
g15
(lp3242
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3243
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3244
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3245
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3246
asbsg147
(lp3247
g3183
asg149
g1
(g183
g3
NtRp3248
(dp3249
g40
Nsg188
g1275
sg206
(dp3250
sg208
Nsg209
(dp3251
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3252
(dp3253
g15
(lp3254
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3255
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3256
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3257
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3258
asbsg28
g1
(g29
g3
NtRp3259
(dp3260
g32
(I00
I00
tp3261
sg34
S'float64'
p3262
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3263
(dp3264
g15
(lp3265
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3266
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3267
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3268
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3269
asbsg147
(lp3270
g2573
asg149
g1
(g183
g3
NtRp3271
(dp3272
g40
Nsg188
g295
sg206
(dp3273
sg208
Nsg209
(dp3274
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3275
(dp3276
g15
(lp3277
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3278
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3279
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3280
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3281
asbsg28
g1
(g29
g3
NtRp3282
(dp3283
g32
(I00
I00
tp3284
sg34
S'float64'
p3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3286
(dp3287
g15
(lp3288
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3289
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3290
a(g1699
I700
g904
S'sr = Sum(axis=to_sum)(rval[i])'
tp3291
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3292
asbsg147
(lp3293
g2568
asg149
g1
(g1440
g3
NtRp3294
(dp3295
g1443
g3285
sg34
g3285
sg153
g154
sg188
g588
sg1444
(I0
tp3296
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3297
(dp3298
g15
(lp3299
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3300
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp3301
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp3302
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3303
asbsg28
g1
(g29
g3
NtRp3304
(dp3305
g32
(I00
tp3306
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3307
(dp3308
g15
(lp3309
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3310
a(g1699
I701
g904
S'sr = sr.dimshuffle(shuffle)'
tp3311
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p3312
I324
S'dimshuffle'
p3313
S'return op(self)'
tp3314
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3315
asbsg147
(lp3316
g2563
asg149
g1
(g373
g3
NtRp3317
(dp3318
g376
(lp3319
sg378
(lp3320
I0
asg380
(lp3321
I0
asg382
(I00
tp3322
sg383
I00
sg384
(S'x'
I0
tp3323
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3324
(dp3325
bsg28
g1
(g29
g3
NtRp3326
(dp3327
g32
(I01
I00
tp3328
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3329
(dp3330
g15
(lp3331
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3332
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3333
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp3334
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3335
asbsg147
(lp3336
g2558
asg149
g1
(g183
g3
NtRp3337
(dp3338
g40
Nsg188
g2416
sg206
(dp3339
sg208
Nsg209
(dp3340
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3341
(dp3342
g15
(lp3343
(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp3344
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3345
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3346
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3347
asbsg28
g1
(g29
g3
NtRp3348
(dp3349
g32
(I01
I00
tp3350
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3351
(dp3352
g15
(lp3353
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3354
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3355
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp3356
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3357
asbsg147
(lp3358
g2553
asg149
g1
(g373
g3
NtRp3359
(dp3360
g376
(lp3361
I0
asg378
(lp3362
I1
asg380
(lp3363
sg382
g3328
sg383
I00
sg384
(I1
tp3364
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3365
(dp3366
bsg28
g1
(g29
g3
NtRp3367
(dp3368
g32
(I00
tp3369
sg34
g3285
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3370
(dp3371
g15
(lp3372
(g417
I74
g418
S'updates=self.get_updates(),'
tp3373
a(g1161
I253
g1162
S'(self.bias, self.bias - self.learning_rate*bias_gradient),'
tp3374
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp3375
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3376
asbsg147
(lp3377
g2516
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3378
(dp3379
g15
(lp3380
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp3381
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3382
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3383
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3384
asbsg28
g1
(g29
g3
NtRp3385
(dp3386
g32
(I00
tp3387
sg34
S'float64'
p3388
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3389
(dp3390
g15
(lp3391
(g417
I74
g418
S'updates=self.get_updates(),'
tp3392
a(g1161
I253
g1162
S'(self.bias, self.bias - self.learning_rate*bias_gradient),'
tp3393
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp3394
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3395
asbsg147
(lp3396
g2511
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3397
(dp3398
g15
(lp3399
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp3400
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3401
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3402
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3403
asbsg28
g1
(g29
g3
NtRp3404
(dp3405
g32
(I00
tp3406
sg34
S'float64'
p3407
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g47
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g43
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp3408
(dp3409
g40
g68
sg272
g1
(g7
g3
NtRp3410
(dp3411
g10
g1
(g95
g3
NtRp3412
(dp3413
g98
(lp3414
g64
ag1
(g7
g3
NtRp3415
(dp3416
g10
g1
(g95
g3
NtRp3417
(dp3418
g98
(lp3419
g1
(g7
g3
NtRp3420
(dp3421
g10
g1
(g95
g3
NtRp3422
(dp3423
g98
(lp3424
g1
(g226
g3
NtRp3425
(dp3426
g11
Nsg12
(itheano.gof.utils
scratchpad
p3427
(dp3428
g235
Nsbsg28
g1
(g29
g3
NtRp3429
(dp3430
g32
(tsg34
S'float64'
p3431
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp3432
(I1
(tg38
I00
S'\x9a\x99\x99\x99\x99\x99\xb9?'
tbsbasg12
(itheano.gof.utils
scratchpad
p3433
(dp3434
g15
(lp3435
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp3436
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3437
a(g219
I533
g161
S'inplace=False)(input))'
tp3438
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3439
asbsg147
(lp3440
g3420
asg149
g1
(g373
g3
NtRp3441
(dp3442
g376
(lp3443
sg378
(lp3444
sg380
(lp3445
I0
asg382
(tsg383
I00
sg384
(S'x'
tp3446
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3447
(dp3448
bsg28
g1
(g29
g3
NtRp3449
(dp3450
g32
(I01
tp3451
sg34
g3431
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3452
(dp3453
g10
g1
(g95
g3
NtRp3454
(dp3455
g98
(lp3456
g1
(g7
g3
NtRp3457
(dp3458
g10
g1
(g95
g3
NtRp3459
(dp3460
g98
(lp3461
g1
(g7
g3
NtRp3462
(dp3463
g10
g1
(g95
g3
NtRp3464
(dp3465
g98
(lp3466
g1
(g7
g3
NtRp3467
(dp3468
g10
g1
(g95
g3
NtRp3469
(dp3470
g98
(lp3471
g1
(g7
g3
NtRp3472
(dp3473
g10
g1
(g95
g3
NtRp3474
(dp3475
g98
(lp3476
g1
(g7
g3
NtRp3477
(dp3478
g10
g1
(g95
g3
NtRp3479
(dp3480
g98
(lp3481
g1
(g7
g3
NtRp3482
(dp3483
g10
g1
(g95
g3
NtRp3484
(dp3485
g98
(lp3486
g1
(g7
g3
NtRp3487
(dp3488
g10
g1
(g95
g3
NtRp3489
(dp3490
g98
(lp3491
g1
(g7
g3
NtRp3492
(dp3493
g10
g1
(g95
g3
NtRp3494
(dp3495
g98
(lp3496
g1
(g7
g3
NtRp3497
(dp3498
g10
g1
(g95
g3
NtRp3499
(dp3500
g98
(lp3501
g966
ag1
(g7
g3
NtRp3502
(dp3503
g10
g1
(g95
g3
NtRp3504
(dp3505
g98
(lp3506
g1
(g7
g3
NtRp3507
(dp3508
g10
g1
(g95
g3
NtRp3509
(dp3510
g98
(lp3511
g1
(g7
g3
NtRp3512
(dp3513
g10
g1
(g95
g3
NtRp3514
(dp3515
g98
(lp3516
g1420
ag1
(g7
g3
NtRp3517
(dp3518
g10
g1
(g95
g3
NtRp3519
(dp3520
g98
(lp3521
g1
(g7
g3
NtRp3522
(dp3523
g10
g1
(g95
g3
NtRp3524
(dp3525
g98
(lp3526
g1
(g7
g3
NtRp3527
(dp3528
g10
g1
(g95
g3
NtRp3529
(dp3530
g98
(lp3531
g1506
ag1651
asg12
(itheano.gof.utils
scratchpad
p3532
(dp3533
g15
(lp3534
(g1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp3535
a(g1664
I1124
g1665
S'rval = tensor.ones_like(x)'
tp3536
a(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp3537
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3538
asbsg147
(lp3539
g3527
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3540
(dp3541
g15
(lp3542
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp3543
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3544
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3545
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3546
asbsg28
g1
(g29
g3
NtRp3547
(dp3548
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1537
asg12
(itheano.gof.utils
scratchpad
p3549
(dp3550
g15
(lp3551
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3552
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3553
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3554
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3555
asbsg147
(lp3556
g3522
asg149
g1
(g183
g3
NtRp3557
(dp3558
g40
Nsg188
g1632
sg206
(dp3559
sg208
Nsg209
(dp3560
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3561
(dp3562
g15
(lp3563
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3564
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3565
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3566
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3567
asbsg28
g1
(g29
g3
NtRp3568
(dp3569
g32
(tsg34
S'float64'
p3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3571
(dp3572
g15
(lp3573
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3574
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3575
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3576
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3577
asbsg147
(lp3578
g3517
asg149
g1
(g373
g3
NtRp3579
(dp3580
g376
(lp3581
sg378
(lp3582
sg380
(lp3583
I0
asg382
(tsg383
I00
sg384
(S'x'
tp3584
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3585
(dp3586
bsg28
g1
(g29
g3
NtRp3587
(dp3588
g32
(I01
tp3589
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3590
(dp3591
g15
(lp3592
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3593
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3594
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3595
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3596
asbsg147
(lp3597
g3512
asg149
g1
(g183
g3
NtRp3598
(dp3599
g40
Nsg188
g1675
sg206
(dp3600
sg208
Nsg209
(dp3601
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3602
(dp3603
g15
(lp3604
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3605
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3606
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3607
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3608
asbsg28
g1
(g29
g3
NtRp3609
(dp3610
g32
(I00
tp3611
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3612
(dp3613
g15
(lp3614
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3615
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3616
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3617
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3618
asbsg147
(lp3619
g3507
asg149
g1
(g183
g3
NtRp3620
(dp3621
g40
Nsg188
g1471
sg206
(dp3622
sg208
Nsg209
(dp3623
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3624
(dp3625
g15
(lp3626
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3627
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3628
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3629
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3630
asbsg28
g1
(g29
g3
NtRp3631
(dp3632
g32
(I00
tp3633
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3634
(dp3635
g15
(lp3636
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3637
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3638
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3639
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3640
asbsg147
(lp3641
g3502
asg149
g1
(g373
g3
NtRp3642
(dp3643
g376
(lp3644
sg378
(lp3645
I0
asg380
(lp3646
I1
asg382
g3633
sg383
I00
sg384
(I0
S'x'
tp3647
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3648
(dp3649
bsg28
g1
(g29
g3
NtRp3650
(dp3651
g32
(I00
I01
tp3652
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3653
(dp3654
g15
(lp3655
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3656
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3657
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3658
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3659
asbsg147
(lp3660
g3497
asg149
g1
(g183
g3
NtRp3661
(dp3662
g40
Nsg188
g1675
sg206
(dp3663
sg208
Nsg209
(dp3664
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3665
(dp3666
g15
(lp3667
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp3668
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3669
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3670
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3671
asbsg28
g1
(g29
g3
NtRp3672
(dp3673
g32
(I00
I00
tp3674
sg34
g3570
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p3675
(dp3676
g15
(lp3677
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3678
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3679
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3680
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3681
asbsg147
(lp3682
g3492
asg149
g1
(g183
g3
NtRp3683
(dp3684
g40
Nsg188
g295
sg206
(dp3685
sg208
Nsg209
(dp3686
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3687
(dp3688
g15
(lp3689
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3690
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3691
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3692
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3693
asbsg28
g1
(g29
g3
NtRp3694
(dp3695
g32
(I00
I00
tp3696
sg34
S'float64'
p3697
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag981
asg12
(itheano.gof.utils
scratchpad
p3698
(dp3699
g15
(lp3700
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3701
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3702
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3703
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3704
asbsg147
(lp3705
g3487
asg149
g1
(g183
g3
NtRp3706
(dp3707
g40
Nsg188
g1632
sg206
(dp3708
sg208
Nsg209
(dp3709
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3710
(dp3711
g15
(lp3712
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3713
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3714
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3715
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3716
asbsg28
g1
(g29
g3
NtRp3717
(dp3718
g32
(I00
I00
tp3719
sg34
S'float64'
p3720
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3721
(dp3722
g10
g1
(g95
g3
NtRp3723
(dp3724
g98
(lp3725
g1
(g7
g3
NtRp3726
(dp3727
g10
g1
(g95
g3
NtRp3728
(dp3729
g98
(lp3730
g1
(g7
g3
NtRp3731
(dp3732
g10
g1
(g95
g3
NtRp3733
(dp3734
g98
(lp3735
g3497
ag1233
asg12
(itheano.gof.utils
scratchpad
p3736
(dp3737
g15
(lp3738
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3739
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3740
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3741
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3742
asbsg147
(lp3743
g3731
asg149
g1
(g183
g3
NtRp3744
(dp3745
g40
Nsg188
g295
sg206
(dp3746
sg208
Nsg209
(dp3747
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3748
(dp3749
g15
(lp3750
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3751
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3752
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3753
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3754
asbsg28
g1
(g29
g3
NtRp3755
(dp3756
g32
(I00
I00
tp3757
sg34
S'float64'
p3758
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1300
asg12
(itheano.gof.utils
scratchpad
p3759
(dp3760
g15
(lp3761
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3762
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3763
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3764
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3765
asbsg147
(lp3766
g3726
asg149
g1
(g183
g3
NtRp3767
(dp3768
g40
Nsg188
g1632
sg206
(dp3769
sg208
Nsg209
(dp3770
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3771
(dp3772
g15
(lp3773
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3774
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3775
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3776
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3777
asbsg28
g1
(g29
g3
NtRp3778
(dp3779
g32
(I00
I00
tp3780
sg34
S'float64'
p3781
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3782
(dp3783
g15
(lp3784
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3785
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3786
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3787
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3788
asbsg147
(lp3789
g3721
asg149
g1
(g183
g3
NtRp3790
(dp3791
g40
Nsg188
g1471
sg206
(dp3792
sg208
Nsg209
(dp3793
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3794
(dp3795
g15
(lp3796
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3797
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3798
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3799
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3800
asbsg28
g1
(g29
g3
NtRp3801
(dp3802
g32
(I00
I00
tp3803
sg34
g3781
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3804
(dp3805
g15
(lp3806
(g1726
I1090
g1727
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp3807
a(g1965
I1090
g143
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
tp3808
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp3809
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3810
asbsg147
(lp3811
g3482
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3812
(dp3813
g15
(lp3814
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp3815
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3816
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3817
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3818
asbsg28
g1
(g29
g3
NtRp3819
(dp3820
g32
(I00
I00
tp3821
sg34
S'float64'
p3822
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3823
(dp3824
g10
g1
(g95
g3
NtRp3825
(dp3826
g98
(lp3827
g986
asg12
(itheano.gof.utils
scratchpad
p3828
(dp3829
g15
(lp3830
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3831
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3832
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3833
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3834
asbsg147
(lp3835
g3823
asg149
g1
(g183
g3
NtRp3836
(dp3837
g40
Nsg188
g336
sg206
(dp3838
sg208
Nsg209
(dp3839
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3840
(dp3841
g15
(lp3842
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3843
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3844
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3845
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3846
asbsg28
g1
(g29
g3
NtRp3847
(dp3848
g32
(I00
I00
tp3849
sg34
S'float64'
p3850
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3851
(dp3852
g15
(lp3853
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3854
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3855
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3856
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3857
asbsg147
(lp3858
g3477
asg149
g1
(g183
g3
NtRp3859
(dp3860
g40
Nsg188
g295
sg206
(dp3861
sg208
Nsg209
(dp3862
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3863
(dp3864
g15
(lp3865
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3866
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3867
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3868
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3869
asbsg28
g1
(g29
g3
NtRp3870
(dp3871
g32
(I00
I00
tp3872
sg34
S'float64'
p3873
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3874
(dp3875
g10
g1
(g95
g3
NtRp3876
(dp3877
g98
(lp3878
g1
(g7
g3
NtRp3879
(dp3880
g10
g1
(g95
g3
NtRp3881
(dp3882
g98
(lp3883
g2042
asg12
(itheano.gof.utils
scratchpad
p3884
(dp3885
g15
(lp3886
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3887
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3888
a(g1704
I753
g1705
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
tp3889
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3890
asbsg147
(lp3891
g3879
asg149
g1
(g373
g3
NtRp3892
(dp3893
g376
(lp3894
sg378
(lp3895
sg380
(lp3896
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp3897
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3898
(dp3899
bsg28
g1
(g29
g3
NtRp3900
(dp3901
g32
(I01
I01
tp3902
sg34
g2050
sg36
g2045
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp3903
(dp3904
g10
g1
(g95
g3
NtRp3905
(dp3906
g98
(lp3907
g986
asg12
(itheano.gof.utils
scratchpad
p3908
(dp3909
g15
(lp3910
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3911
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3912
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3913
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3914
asbsg147
(lp3915
g3903
asg149
g1
(g183
g3
NtRp3916
(dp3917
g40
Nsg188
g336
sg206
(dp3918
sg208
Nsg209
(dp3919
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3920
(dp3921
g15
(lp3922
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3923
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3924
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3925
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3926
asbsg28
g1
(g29
g3
NtRp3927
(dp3928
g32
(I00
I00
tp3929
sg34
S'float64'
p3930
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3931
(dp3932
g15
(lp3933
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3934
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3935
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3936
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3937
asbsg147
(lp3938
g3874
asg149
g1
(g183
g3
NtRp3939
(dp3940
g40
Nsg188
g1275
sg206
(dp3941
sg208
Nsg209
(dp3942
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3943
(dp3944
g15
(lp3945
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3946
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3947
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3948
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3949
asbsg28
g1
(g29
g3
NtRp3950
(dp3951
g32
(I00
I00
tp3952
sg34
S'float64'
p3953
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3954
(dp3955
g15
(lp3956
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp3957
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp3958
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3959
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3960
asbsg147
(lp3961
g3472
asg149
g1
(g183
g3
NtRp3962
(dp3963
g40
Nsg188
g295
sg206
(dp3964
sg208
Nsg209
(dp3965
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3966
(dp3967
g15
(lp3968
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp3969
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3970
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp3971
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3972
asbsg28
g1
(g29
g3
NtRp3973
(dp3974
g32
(I00
I00
tp3975
sg34
S'float64'
p3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3977
(dp3978
g15
(lp3979
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp3980
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp3981
a(g1699
I700
g904
S'sr = Sum(axis=to_sum)(rval[i])'
tp3982
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp3983
asbsg147
(lp3984
g3467
asg149
g1
(g1440
g3
NtRp3985
(dp3986
g1443
g3976
sg34
g3976
sg153
g154
sg188
g588
sg1444
(I0
tp3987
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p3988
(dp3989
g15
(lp3990
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp3991
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp3992
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp3993
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp3994
asbsg28
g1
(g29
g3
NtRp3995
(dp3996
g32
(I00
tp3997
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p3998
(dp3999
g15
(lp4000
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4001
a(g1699
I701
g904
S'sr = sr.dimshuffle(shuffle)'
tp4002
a(g3312
I324
g3313
S'return op(self)'
tp4003
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4004
asbsg147
(lp4005
g3462
asg149
g1
(g373
g3
NtRp4006
(dp4007
g376
(lp4008
sg378
(lp4009
I0
asg380
(lp4010
I0
asg382
(I00
tp4011
sg383
I00
sg384
(S'x'
I0
tp4012
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4013
(dp4014
bsg28
g1
(g29
g3
NtRp4015
(dp4016
g32
(I01
I00
tp4017
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4018
(dp4019
g15
(lp4020
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4021
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4022
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp4023
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4024
asbsg147
(lp4025
g3457
asg149
g1
(g183
g3
NtRp4026
(dp4027
g40
Nsg188
g2416
sg206
(dp4028
sg208
Nsg209
(dp4029
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4030
(dp4031
g15
(lp4032
(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp4033
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4034
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4035
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4036
asbsg28
g1
(g29
g3
NtRp4037
(dp4038
g32
(I01
I00
tp4039
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4040
(dp4041
g15
(lp4042
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4043
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4044
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp4045
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4046
asbsg147
(lp4047
g3452
asg149
g1
(g373
g3
NtRp4048
(dp4049
g376
(lp4050
I0
asg378
(lp4051
I1
asg380
(lp4052
sg382
g4017
sg383
I00
sg384
(I1
tp4053
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4054
(dp4055
bsg28
g1
(g29
g3
NtRp4056
(dp4057
g32
(I00
tp4058
sg34
g3976
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4059
(dp4060
g15
(lp4061
(g417
I74
g418
S'updates=self.get_updates(),'
tp4062
a(g1161
I255
g1162
S'self.learning_rate*reverse_bias_gradient),'
tp4063
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4064
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4065
asbsg147
(lp4066
g3415
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4067
(dp4068
g15
(lp4069
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4070
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4071
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4072
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4073
asbsg28
g1
(g29
g3
NtRp4074
(dp4075
g32
(I00
tp4076
sg34
S'float64'
p4077
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4078
(dp4079
g15
(lp4080
(g417
I74
g418
S'updates=self.get_updates(),'
tp4081
a(g1161
I255
g1162
S'self.learning_rate*reverse_bias_gradient),'
tp4082
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4083
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4084
asbsg147
(lp4085
g3410
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4086
(dp4087
g15
(lp4088
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4089
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4090
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4091
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4092
asbsg28
g1
(g29
g3
NtRp4093
(dp4094
g32
(I00
tp4095
sg34
S'float64'
p4096
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g66
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g64
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp4097
(dp4098
g40
g470
sg272
g1
(g7
g3
NtRp4099
(dp4100
g10
g1
(g95
g3
NtRp4101
(dp4102
g98
(lp4103
g479
ag1
(g7
g3
NtRp4104
(dp4105
g10
g1
(g95
g3
NtRp4106
(dp4107
g98
(lp4108
g1
(g7
g3
NtRp4109
(dp4110
g10
g1
(g95
g3
NtRp4111
(dp4112
g98
(lp4113
g1
(g226
g3
NtRp4114
(dp4115
g11
Nsg12
(itheano.gof.utils
scratchpad
p4116
(dp4117
g235
Nsbsg28
g1
(g29
g3
NtRp4118
(dp4119
g32
(tsg34
S'float64'
p4120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp4121
(I1
(tg38
I00
S'\x9a\x99\x99\x99\x99\x99\xb9?'
tbsbasg12
(itheano.gof.utils
scratchpad
p4122
(dp4123
g15
(lp4124
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4125
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4126
a(g219
I533
g161
S'inplace=False)(input))'
tp4127
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4128
asbsg147
(lp4129
g4109
asg149
g1
(g373
g3
NtRp4130
(dp4131
g376
(lp4132
sg378
(lp4133
sg380
(lp4134
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp4135
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4136
(dp4137
bsg28
g1
(g29
g3
NtRp4138
(dp4139
g32
(I01
I01
tp4140
sg34
g4120
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4141
(dp4142
g10
g1
(g95
g3
NtRp4143
(dp4144
g98
(lp4145
g1
(g7
g3
NtRp4146
(dp4147
g10
g1
(g95
g3
NtRp4148
(dp4149
g98
(lp4150
g1
(g7
g3
NtRp4151
(dp4152
g10
g1
(g95
g3
NtRp4153
(dp4154
g98
(lp4155
g1
(g7
g3
NtRp4156
(dp4157
g10
g1
(g95
g3
NtRp4158
(dp4159
g98
(lp4160
g1
(g7
g3
NtRp4161
(dp4162
g10
g1
(g95
g3
NtRp4163
(dp4164
g98
(lp4165
g890
ag348
asg12
(itheano.gof.utils
scratchpad
p4166
(dp4167
g15
(lp4168
(g531
I231
g532
S'theano.tensor.dot(self.get_hidden_output(),'
tp4169
a(g534
I170
g535
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp4170
a(g537
I4732
g538
S'return _dot(a, b)'
tp4171
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4172
asbsg147
(lp4173
g4161
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4174
(dp4175
bsg28
g1
(g29
g3
NtRp4176
(dp4177
g32
(I00
I00
tp4178
sg34
S'float64'
p4179
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4180
(dp4181
g10
g1
(g95
g3
NtRp4182
(dp4183
g98
(lp4184
g43
asg12
(itheano.gof.utils
scratchpad
p4185
(dp4186
g15
(lp4187
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4188
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4189
a(g219
I533
g161
S'inplace=False)(input))'
tp4190
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4191
asbsg147
(lp4192
g4180
asg149
g1
(g373
g3
NtRp4193
(dp4194
g376
(lp4195
sg378
(lp4196
I0
asg380
(lp4197
I0
asg382
g58
sg383
I00
sg384
(S'x'
I0
tp4198
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4199
(dp4200
bsg28
g1
(g29
g3
NtRp4201
(dp4202
g32
(I01
I00
tp4203
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4204
(dp4205
g15
(lp4206
(g531
I231
g532
S'theano.tensor.dot(self.get_hidden_output(),'
tp4207
a(g534
I171
g535
S'self.bias)'
tp4208
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4209
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4210
asbsg147
(lp4211
g4156
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4212
(dp4213
g15
(lp4214
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4215
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4216
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4217
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4218
asbsg28
g1
(g29
g3
NtRp4219
(dp4220
g32
(I00
I00
tp4221
sg34
S'float64'
p4222
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4223
(dp4224
g15
(lp4225
(S'denoising_autoencoder_cart_pole.py'
p4226
I47
S'get_lr_cost'
p4227
S'expected_reward = self.get_symbolic_expected_rewards()['
tp4228
a(g531
I231
g532
S'theano.tensor.dot(self.get_hidden_output(),'
tp4229
a(g534
I171
g535
S'self.bias)'
tp4230
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4231
asbsg147
(lp4232
g4151
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4233
(dp4234
g15
(lp4235
(g534
I171
g535
S'self.bias)'
tp4236
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4237
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4238
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4239
asbsg28
g1
(g29
g3
NtRp4240
(dp4241
g32
(I00
I00
tp4242
sg34
S'float64'
p4243
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4244
(dp4245
g15
(lp4246
(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp4247
a(g366
I231
g143
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
tp4248
a(g368
I3084
g369
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
tp4249
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4250
asbsg147
(lp4251
g4146
asg149
g1
(g373
g3
NtRp4252
(dp4253
g376
(lp4254
sg378
(lp4255
I1
aI0
asg380
(lp4256
sg382
g4242
sg383
I00
sg384
(I1
I0
tp4257
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4258
(dp4259
bsg28
g1
(g29
g3
NtRp4260
(dp4261
g32
(I00
I00
tp4262
sg34
g4243
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4263
(dp4264
g10
g1
(g95
g3
NtRp4265
(dp4266
g98
(lp4267
g1
(g7
g3
NtRp4268
(dp4269
g10
g1
(g95
g3
NtRp4270
(dp4271
g98
(lp4272
g1
(g7
g3
NtRp4273
(dp4274
g10
g1
(g95
g3
NtRp4275
(dp4276
g98
(lp4277
g1
(g7
g3
NtRp4278
(dp4279
g10
g1
(g95
g3
NtRp4280
(dp4281
g98
(lp4282
g1
(g7
g3
NtRp4283
(dp4284
g10
g1
(g95
g3
NtRp4285
(dp4286
g98
(lp4287
g1
(g7
g3
NtRp4288
(dp4289
g10
g1
(g95
g3
NtRp4290
(dp4291
g98
(lp4292
g4151
ag479
asg12
(itheano.gof.utils
scratchpad
p4293
(dp4294
g15
(lp4295
(g4226
I47
g4227
S'expected_reward = self.get_symbolic_expected_rewards()['
tp4296
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp4297
a(g537
I4732
g538
S'return _dot(a, b)'
tp4298
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4299
asbsg147
(lp4300
g4288
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4301
(dp4302
bsg28
g1
(g29
g3
NtRp4303
(dp4304
g32
(I00
I00
tp4305
sg34
S'float64'
p4306
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4307
(dp4308
g10
g1
(g95
g3
NtRp4309
(dp4310
g98
(lp4311
g318
asg12
(itheano.gof.utils
scratchpad
p4312
(dp4313
g15
(lp4314
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4315
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4316
a(g219
I533
g161
S'inplace=False)(input))'
tp4317
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4318
asbsg147
(lp4319
g4307
asg149
g1
(g373
g3
NtRp4320
(dp4321
g376
(lp4322
sg378
(lp4323
I0
asg380
(lp4324
I0
asg382
g327
sg383
I00
sg384
(S'x'
I0
tp4325
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4326
(dp4327
bsg28
g1
(g29
g3
NtRp4328
(dp4329
g32
(I01
I00
tp4330
sg34
g328
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4331
(dp4332
g15
(lp4333
(g4226
I47
g4227
S'expected_reward = self.get_symbolic_expected_rewards()['
tp4334
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp4335
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4336
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4337
asbsg147
(lp4338
g4283
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4339
(dp4340
g15
(lp4341
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp4342
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4343
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4344
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4345
asbsg28
g1
(g29
g3
NtRp4346
(dp4347
g32
(I00
I00
tp4348
sg34
S'float64'
p4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4350
(dp4351
g15
(lp4352
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4353
a(g4226
I47
g4227
S'expected_reward = self.get_symbolic_expected_rewards()['
tp4354
a(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp4355
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4356
asbsg147
(lp4357
g4278
asg149
g692
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4358
(dp4359
g15
(lp4360
(g531
I232
g532
S'self.label_weights) + self.label_bias)'
tp4361
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4362
a(g699
I359
g161
S'return Apply(self, [x], [x.type()])'
tp4363
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4364
asbsg28
g4346
sg40
Nsbag1
(g7
g3
NtRp4365
(dp4366
g10
g1
(g95
g3
NtRp4367
(dp4368
g98
(lp4369
g1
(g226
g3
NtRp4370
(dp4371
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp4372
(I1
(tg38
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg12
(itheano.gof.utils
scratchpad
p4373
(dp4374
g235
Nsbsg28
g1
(g29
g3
NtRp4375
(dp4376
g32
(tsg34
S'float64'
p4377
sg36
g38
sg39
I00
sg40
Nsbsbasg12
(itheano.gof.utils
scratchpad
p4378
(dp4379
g15
(lp4380
(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p4381
I2079
S'zeros_like'
p4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp4383
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4384
a(g219
I533
g161
S'inplace=False)(input))'
tp4385
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4386
asbsg147
(lp4387
g4365
asg149
g1
(g373
g3
NtRp4388
(dp4389
g376
(lp4390
sg378
(lp4391
sg380
(lp4392
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp4393
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4394
(dp4395
bsg28
g1
(g29
g3
NtRp4396
(dp4397
g32
(I01
I01
tp4398
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4399
(dp4400
g15
(lp4401
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4402
a(S'/Library/Python/2.7/site-packages/theano/tensor/subtensor.py'
p4403
I1824
g904
S'return [advanced_inc_subtensor(theano.tensor.zeros_like(x), gz,'
tp4404
a(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp4405
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4406
asbsg147
(lp4407
g4273
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4408
(dp4409
g15
(lp4410
(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp4411
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4412
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4413
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4414
asbsg28
g1
(g29
g3
NtRp4415
(dp4416
g32
(I00
I00
tp4417
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4418
(dp4419
g10
g1
(g95
g3
NtRp4420
(dp4421
g98
(lp4422
g1
(g7
g3
NtRp4423
(dp4424
g10
g1
(g95
g3
NtRp4425
(dp4426
g98
(lp4427
g1
(g7
g3
NtRp4428
(dp4429
g10
g1
(g95
g3
NtRp4430
(dp4431
g98
(lp4432
g1
(g7
g3
NtRp4433
(dp4434
g10
g1
(g95
g3
NtRp4435
(dp4436
g98
(lp4437
g1
(g7
g3
NtRp4438
(dp4439
g10
g1
(g95
g3
NtRp4440
(dp4441
g98
(lp4442
g1
(g7
g3
NtRp4443
(dp4444
g10
g1
(g95
g3
NtRp4445
(dp4446
g98
(lp4447
g784
ag1
(g7
g3
NtRp4448
(dp4449
g10
g1
(g95
g3
NtRp4450
(dp4451
g98
(lp4452
g4278
ag1
(g7
g3
NtRp4453
(dp4454
g10
g1
(g95
g3
NtRp4455
(dp4456
g98
(lp4457
g1
(g226
g3
NtRp4458
(dp4459
g11
Nsg40
Nsg229
I01
sg230
g51
(g52
(I0
tS'b'
tRp4460
(I1
(tg232
I00
S'\x00'
tbsg12
(itheano.gof.utils
scratchpad
p4461
(dp4462
g235
Nsbsg28
g1
(g29
g3
NtRp4463
(dp4464
g32
(tsg34
S'int8'
p4465
sg36
g232
sg39
I00
sg40
Nsbsbag1
(g7
g3
NtRp4466
(dp4467
g10
g1
(g95
g3
NtRp4468
(dp4469
g98
(lp4470
g1
(g7
g3
NtRp4471
(dp4472
g10
g1
(g95
g3
NtRp4473
(dp4474
g98
(lp4475
g769
asg12
(itheano.gof.utils
scratchpad
p4476
(dp4477
g15
(lp4478
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4479
a(g4226
I48
g4227
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4480
a(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp4481
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4482
asbsg147
(lp4483
g4471
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4484
(dp4485
g15
(lp4486
(g142
I255
g143
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
tp4487
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4488
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp4489
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4490
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4491
(dp4492
g15
(lp4493
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4494
a(g4226
I48
g4227
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4495
a(g1604
I407
g1605
S'lambda entry: isinstance(entry, Variable)))'
tp4496
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4497
asbsg147
(lp4498
g4466
asg149
g1
(g1609
g3
NtRp4499
(dp4500
g1612
(g1613
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp4501
tp4502
sg1616
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4503
(dp4504
bsg28
g1
(g29
g3
NtRp4505
(dp4506
g32
(tsg34
g167
sg36
g168
sg39
I00
sg40
Nsbsg40
Nsbag227
asg12
(itheano.gof.utils
scratchpad
p4507
(dp4508
g15
(lp4509
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4510
a(g4226
I48
g4227
S'theano.tensor.arange(self.action_vector.shape[0]),'
tp4511
a(S'/Library/Python/2.7/site-packages/theano/tensor/basic.py'
p4512
I4272
S'arange'
p4513
S'return _arange[dtype](start, stop, step)'
tp4514
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4515
asbsg147
(lp4516
g4453
asg149
g1
(ctheano.tensor.basic
ARange
p4517
g3
NtRp4518
(dp4519
g34
S'int64'
p4520
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4521
(dp4522
bsg28
g1
(g29
g3
NtRp4523
(dp4524
g32
(I00
tp4525
sg34
g4520
sg36
g168
sg39
I00
sg40
Nsbsg40
Nsbag769
asg12
(itheano.gof.utils
scratchpad
p4526
(dp4527
g15
(lp4528
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4529
a(g4226
I49
g4227
S'self.action_vector]'
tp4530
a(g1604
I381
g1605
S'return theano.tensor.subtensor.AdvancedSubtensor()(self, *args)'
tp4531
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4532
asbsg147
(lp4533
g4448
asg149
g1
(ctheano.tensor.subtensor
AdvancedSubtensor
p4534
g3
NtRp4535
(dp4536
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4537
(dp4538
bsg28
g1
(g29
g3
NtRp4539
(dp4540
g32
(I00
tp4541
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4542
(dp4543
g15
(lp4544
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4545
a(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4546
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4547
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4548
asbsg147
(lp4549
g4443
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4550
(dp4551
g15
(lp4552
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4553
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4554
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4555
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4556
asbsg28
g1
(g29
g3
NtRp4557
(dp4558
g32
(I00
tp4559
sg34
S'float64'
p4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4561
(dp4562
g15
(lp4563
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4564
a(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4565
a(S'/Library/Python/2.7/site-packages/theano/tensor/var.py'
p4566
I24
S'__abs__'
p4567
S'return theano.tensor.basic.abs_(self)'
tp4568
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4569
asbsg147
(lp4570
g4438
asg149
g1
(g183
g3
NtRp4571
(dp4572
g186
g293
sg188
g1
(ctheano.scalar.basic
Abs
p4573
g3
NtRp4574
(dp4575
g192
g1473
sg153
g154
sg40
Nsbsg40
S'Elemwise{abs_,no_inplace}'
p4576
sg153
g154
sg206
(dp4577
sg208
(S'abs'
p4578
I1
I1
tp4579
sg209
(dp4580
sg304
S"|`a`|\n\n    TensorVariable overloads the `TensorVariable.__abs__` operator so that\n    this function is called when you type abs(a).\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p4581
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4582
(dp4583
g15
(lp4584
(g4566
I24
g4567
S'return theano.tensor.basic.abs_(self)'
tp4585
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4586
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4587
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4588
asbsg28
g1
(g29
g3
NtRp4589
(dp4590
g32
(I00
tp4591
sg34
g4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4592
(dp4593
g10
g1
(g95
g3
NtRp4594
(dp4595
g98
(lp4596
g1
(g7
g3
NtRp4597
(dp4598
g10
g1
(g95
g3
NtRp4599
(dp4600
g98
(lp4601
g1
(g7
g3
NtRp4602
(dp4603
g10
g1
(g95
g3
NtRp4604
(dp4605
g98
(lp4606
g1
(g7
g3
NtRp4607
(dp4608
g10
g1
(g95
g3
NtRp4609
(dp4610
g98
(lp4611
g1
(g7
g3
NtRp4612
(dp4613
g10
g1
(g95
g3
NtRp4614
(dp4615
g98
(lp4616
g4438
asg12
(itheano.gof.utils
scratchpad
p4617
(dp4618
g15
(lp4619
(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4620
a(g1520
I2802
g1521
S'acc_dtype=acc_dtype)'
tp4621
a(g1435
I2670
g1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp4622
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4623
asbsg147
(lp4624
g4612
asg149
g1
(g1440
g3
NtRp4625
(dp4626
g1443
g4560
sg34
g4560
sg153
g154
sg188
g588
sg1444
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4627
(dp4628
g15
(lp4629
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4630
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp4631
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp4632
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4633
asbsg28
g1
(g29
g3
NtRp4634
(dp4635
g32
(tsg34
g4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4636
(dp4637
g10
g1
(g95
g3
NtRp4638
(dp4639
g98
(lp4640
g1
(g7
g3
NtRp4641
(dp4642
g10
g1
(g95
g3
NtRp4643
(dp4644
g98
(lp4645
g1
(g7
g3
NtRp4646
(dp4647
g10
g1
(g95
g3
NtRp4648
(dp4649
g98
(lp4650
g4438
asg12
(itheano.gof.utils
scratchpad
p4651
(dp4652
g15
(lp4653
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4654
a(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4655
a(g1520
I2803
g1521
S'shp = shape(input)'
tp4656
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4657
asbsg147
(lp4658
g4646
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4659
(dp4660
g15
(lp4661
(g1520
I2803
g1521
S'shp = shape(input)'
tp4662
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4663
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp4664
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4665
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4666
(dp4667
g15
(lp4668
(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4669
a(g1520
I2811
g1521
S"shp = cast(shp, 'float64')"
tp4670
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp4671
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4672
asbsg147
(lp4673
g4641
asg149
g1575
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4674
(dp4675
g15
(lp4676
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp4677
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4678
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4679
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4680
asbsg28
g1
(g29
g3
NtRp4681
(dp4682
g32
(I00
tp4683
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4684
(dp4685
g15
(lp4686
(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4687
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp4688
a(g1604
I407
g1605
S'lambda entry: isinstance(entry, Variable)))'
tp4689
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4690
asbsg147
(lp4691
g4636
asg149
g1
(g1609
g3
NtRp4692
(dp4693
g1612
(g1613
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp4694
tp4695
sg1616
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4696
(dp4697
bsg28
g1
(g29
g3
NtRp4698
(dp4699
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4700
(dp4701
g15
(lp4702
(g1161
I247
g1162
S'lr_cost = self.get_lr_cost()'
tp4703
a(g4226
I52
g4227
S'abs(actual_reward - expected_reward))'
tp4704
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp4705
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4706
asbsg147
(lp4707
g4607
asg149
g1629
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4708
(dp4709
g15
(lp4710
(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp4711
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4712
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4713
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4714
asbsg28
g1
(g29
g3
NtRp4715
(dp4716
g32
(tsg34
S'float64'
p4717
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1651
asg12
(itheano.gof.utils
scratchpad
p4718
(dp4719
g15
(lp4720
(g1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp4721
a(g1664
I1124
g1665
S'rval = tensor.ones_like(x)'
tp4722
a(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp4723
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4724
asbsg147
(lp4725
g4602
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4726
(dp4727
g15
(lp4728
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp4729
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4730
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4731
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4732
asbsg28
g1
(g29
g3
NtRp4733
(dp4734
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4636
asg12
(itheano.gof.utils
scratchpad
p4735
(dp4736
g15
(lp4737
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp4738
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4739
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4740
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4741
asbsg147
(lp4742
g4597
asg149
g1
(g183
g3
NtRp4743
(dp4744
g40
Nsg188
g1632
sg206
(dp4745
sg208
Nsg209
(dp4746
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4747
(dp4748
g15
(lp4749
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4750
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4751
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4752
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4753
asbsg28
g1
(g29
g3
NtRp4754
(dp4755
g32
(tsg34
S'float64'
p4756
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4757
(dp4758
g15
(lp4759
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4760
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4761
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4762
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4763
asbsg147
(lp4764
g4592
asg149
g1
(g373
g3
NtRp4765
(dp4766
g376
(lp4767
sg378
(lp4768
sg380
(lp4769
I0
asg382
(tsg383
I00
sg384
(S'x'
tp4770
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4771
(dp4772
bsg28
g1
(g29
g3
NtRp4773
(dp4774
g32
(I01
tp4775
sg34
g4756
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4776
(dp4777
g15
(lp4778
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4779
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4780
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4781
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4782
asbsg147
(lp4783
g4433
asg149
g1
(g183
g3
NtRp4784
(dp4785
g40
Nsg188
g1675
sg206
(dp4786
sg208
Nsg209
(dp4787
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4788
(dp4789
g15
(lp4790
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp4791
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4792
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4793
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4794
asbsg28
g1
(g29
g3
NtRp4795
(dp4796
g32
(I00
tp4797
sg34
g4756
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4443
asg12
(itheano.gof.utils
scratchpad
p4798
(dp4799
g15
(lp4800
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4801
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4802
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4803
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4804
asbsg147
(lp4805
g4428
asg149
g1
(g183
g3
NtRp4806
(dp4807
g40
Nsg188
g295
sg206
(dp4808
sg208
Nsg209
(dp4809
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4810
(dp4811
g15
(lp4812
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4813
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4814
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4815
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4816
asbsg28
g1
(g29
g3
NtRp4817
(dp4818
g32
(I00
tp4819
sg34
S'float64'
p4820
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4821
(dp4822
g10
g1
(g95
g3
NtRp4823
(dp4824
g98
(lp4825
g4443
asg12
(itheano.gof.utils
scratchpad
p4826
(dp4827
g15
(lp4828
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4829
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4830
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4831
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4832
asbsg147
(lp4833
g4821
asg149
g1
(g183
g3
NtRp4834
(dp4835
g40
Nsg188
g4574
sg206
(dp4836
sg208
Nsg209
(dp4837
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4838
(dp4839
g15
(lp4840
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4841
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4842
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4843
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4844
asbsg28
g1
(g29
g3
NtRp4845
(dp4846
g32
(I00
tp4847
sg34
g4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4848
(dp4849
g15
(lp4850
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp4851
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4852
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4853
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4854
asbsg147
(lp4855
g4423
asg149
g1
(g183
g3
NtRp4856
(dp4857
g40
Nsg188
g1632
sg206
(dp4858
sg208
Nsg209
(dp4859
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4860
(dp4861
g15
(lp4862
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4863
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4864
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4865
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4866
asbsg28
g1
(g29
g3
NtRp4867
(dp4868
g32
(I00
tp4869
sg34
S'float64'
p4870
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4871
(dp4872
g15
(lp4873
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp4874
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp4875
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4876
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4877
asbsg147
(lp4878
g4418
asg149
g1
(g183
g3
NtRp4879
(dp4880
g40
Nsg188
g1471
sg206
(dp4881
sg208
Nsg209
(dp4882
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4883
(dp4884
g15
(lp4885
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp4886
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4887
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4888
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4889
asbsg28
g1
(g29
g3
NtRp4890
(dp4891
g32
(I00
tp4892
sg34
g4870
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4453
ag769
asg12
(itheano.gof.utils
scratchpad
p4893
(dp4894
g15
(lp4895
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4896
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4897
a(g4403
I1825
g904
S'*rest)] + \\'
tp4898
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4899
asbsg147
(lp4900
g4268
asg149
g1
(ctheano.tensor.subtensor
AdvancedIncSubtensor
p4901
g3
NtRp4902
(dp4903
S'allow_legacy_perform'
p4904
I01
sg153
g154
sS'set_instead_of_inc'
p4905
I00
sg383
I00
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4906
(dp4907
bsg28
g1
(g29
g3
NtRp4908
(dp4909
g32
(I00
I00
tp4910
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp4911
(dp4912
g10
g1
(g95
g3
NtRp4913
(dp4914
g98
(lp4915
g4283
asg12
(itheano.gof.utils
scratchpad
p4916
(dp4917
g15
(lp4918
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4919
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4920
a(S'/Library/Python/2.7/site-packages/theano/tensor/nnet/nnet.py'
p4921
I370
g904
S'sm = softmax(x)'
tp4922
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4923
asbsg147
(lp4924
g4911
asg149
g692
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4925
(dp4926
g15
(lp4927
(g4921
I370
g904
S'sm = softmax(x)'
tp4928
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4929
a(g699
I359
g161
S'return Apply(self, [x], [x.type()])'
tp4930
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4931
asbsg28
g4346
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4932
(dp4933
g15
(lp4934
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp4935
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4936
a(g4921
I371
g904
S'return [softmax_grad(g_sm, sm)]'
tp4937
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4938
asbsg147
(lp4939
g4263
asg149
g1
(ctheano.tensor.nnet.nnet
SoftmaxGrad
p4940
g3
NtRp4941
(dp4942
g153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4943
(dp4944
bsg28
g4346
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4945
(dp4946
g15
(lp4947
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp4948
a(g903
I4578
g904
S'ygrad = dot(x.T, gz)'
tp4949
a(g537
I4732
g538
S'return _dot(a, b)'
tp4950
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4951
asbsg147
(lp4952
g4141
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4953
(dp4954
bsg28
g1
(g29
g3
NtRp4955
(dp4956
g32
(I00
I00
tp4957
sg34
S'float64'
p4958
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4959
(dp4960
g15
(lp4961
(g417
I74
g418
S'updates=self.get_updates(),'
tp4962
a(g1161
I257
g1162
S'self.learning_rate*lr_weight_gradient),'
tp4963
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4964
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4965
asbsg147
(lp4966
g4104
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4967
(dp4968
g15
(lp4969
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp4970
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4971
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4972
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4973
asbsg28
g1
(g29
g3
NtRp4974
(dp4975
g32
(I00
I00
tp4976
sg34
S'float64'
p4977
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p4978
(dp4979
g15
(lp4980
(g417
I74
g418
S'updates=self.get_updates(),'
tp4981
a(g1161
I257
g1162
S'self.learning_rate*lr_weight_gradient),'
tp4982
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4983
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp4984
asbsg147
(lp4985
g4099
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p4986
(dp4987
g15
(lp4988
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp4989
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp4990
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp4991
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp4992
asbsg28
g1
(g29
g3
NtRp4993
(dp4994
g32
(I00
I00
tp4995
sg34
S'float64'
p4996
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g471
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g479
sg427
I01
sg60
Nsbag1
(g402
g3
NtRp4997
(dp4998
g40
g322
sg272
g1
(g7
g3
NtRp4999
(dp5000
g10
g1
(g95
g3
NtRp5001
(dp5002
g98
(lp5003
g318
ag1
(g7
g3
NtRp5004
(dp5005
g10
g1
(g95
g3
NtRp5006
(dp5007
g98
(lp5008
g1
(g7
g3
NtRp5009
(dp5010
g10
g1
(g95
g3
NtRp5011
(dp5012
g98
(lp5013
g1
(g226
g3
NtRp5014
(dp5015
g11
Nsg12
(itheano.gof.utils
scratchpad
p5016
(dp5017
g235
Nsbsg28
g1
(g29
g3
NtRp5018
(dp5019
g32
(tsg34
S'float64'
p5020
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsg230
g51
(g52
(I0
tS'b'
tRp5021
(I1
(tg38
I00
S'\x9a\x99\x99\x99\x99\x99\xb9?'
tbsbasg12
(itheano.gof.utils
scratchpad
p5022
(dp5023
g15
(lp5024
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp5025
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5026
a(g219
I533
g161
S'inplace=False)(input))'
tp5027
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5028
asbsg147
(lp5029
g5009
asg149
g1
(g373
g3
NtRp5030
(dp5031
g376
(lp5032
sg378
(lp5033
sg380
(lp5034
I0
asg382
(tsg383
I00
sg384
(S'x'
tp5035
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5036
(dp5037
bsg28
g1
(g29
g3
NtRp5038
(dp5039
g32
(I01
tp5040
sg34
g5020
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5041
(dp5042
g10
g1
(g95
g3
NtRp5043
(dp5044
g98
(lp5045
g1
(g7
g3
NtRp5046
(dp5047
g10
g1
(g95
g3
NtRp5048
(dp5049
g98
(lp5050
g1
(g7
g3
NtRp5051
(dp5052
g10
g1
(g95
g3
NtRp5053
(dp5054
g98
(lp5055
g1
(g7
g3
NtRp5056
(dp5057
g10
g1
(g95
g3
NtRp5058
(dp5059
g98
(lp5060
g1
(g7
g3
NtRp5061
(dp5062
g10
g1
(g95
g3
NtRp5063
(dp5064
g98
(lp5065
g1
(g7
g3
NtRp5066
(dp5067
g10
g1
(g95
g3
NtRp5068
(dp5069
g98
(lp5070
g1
(g7
g3
NtRp5071
(dp5072
g10
g1
(g95
g3
NtRp5073
(dp5074
g98
(lp5075
g4278
ag1
(g7
g3
NtRp5076
(dp5077
g10
g1
(g95
g3
NtRp5078
(dp5079
g98
(lp5080
g4370
asg12
(itheano.gof.utils
scratchpad
p5081
(dp5082
g15
(lp5083
(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp5084
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5085
a(g219
I533
g161
S'inplace=False)(input))'
tp5086
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5087
asbsg147
(lp5088
g5076
asg149
g1
(g373
g3
NtRp5089
(dp5090
g376
(lp5091
sg378
(lp5092
sg380
(lp5093
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp5094
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5095
(dp5096
bsg28
g1
(g29
g3
NtRp5097
(dp5098
g32
(I01
I01
tp5099
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5100
(dp5101
g15
(lp5102
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5103
a(g4403
I1824
g904
S'return [advanced_inc_subtensor(theano.tensor.zeros_like(x), gz,'
tp5104
a(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp5105
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5106
asbsg147
(lp5107
g5071
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5108
(dp5109
g15
(lp5110
(g4381
I2079
g4382
S'return fill(model, constant(0.0, dtype=dtype))'
tp5111
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5112
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5113
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5114
asbsg28
g1
(g29
g3
NtRp5115
(dp5116
g32
(I00
I00
tp5117
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5118
(dp5119
g10
g1
(g95
g3
NtRp5120
(dp5121
g98
(lp5122
g1
(g7
g3
NtRp5123
(dp5124
g10
g1
(g95
g3
NtRp5125
(dp5126
g98
(lp5127
g1
(g7
g3
NtRp5128
(dp5129
g10
g1
(g95
g3
NtRp5130
(dp5131
g98
(lp5132
g1
(g7
g3
NtRp5133
(dp5134
g10
g1
(g95
g3
NtRp5135
(dp5136
g98
(lp5137
g4438
ag1
(g7
g3
NtRp5138
(dp5139
g10
g1
(g95
g3
NtRp5140
(dp5141
g98
(lp5142
g1
(g7
g3
NtRp5143
(dp5144
g10
g1
(g95
g3
NtRp5145
(dp5146
g98
(lp5147
g1
(g7
g3
NtRp5148
(dp5149
g10
g1
(g95
g3
NtRp5150
(dp5151
g98
(lp5152
g4607
ag1651
asg12
(itheano.gof.utils
scratchpad
p5153
(dp5154
g15
(lp5155
(g1662
I450
g904
S'g_cost = _float_ones_like(cost)'
tp5156
a(g1664
I1124
g1665
S'rval = tensor.ones_like(x)'
tp5157
a(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp5158
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5159
asbsg147
(lp5160
g5148
asg149
g1672
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5161
(dp5162
g15
(lp5163
(g1667
I2070
g1668
S'ret = fill(model, constant(1.0, dtype=dtype))'
tp5164
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5165
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5166
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5167
asbsg28
g1
(g29
g3
NtRp5168
(dp5169
g32
(tsg34
g1658
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4636
asg12
(itheano.gof.utils
scratchpad
p5170
(dp5171
g15
(lp5172
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp5173
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5174
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5175
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5176
asbsg147
(lp5177
g5143
asg149
g1
(g183
g3
NtRp5178
(dp5179
g40
Nsg188
g1632
sg206
(dp5180
sg208
Nsg209
(dp5181
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5182
(dp5183
g15
(lp5184
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5185
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5186
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5187
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5188
asbsg28
g1
(g29
g3
NtRp5189
(dp5190
g32
(tsg34
S'float64'
p5191
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5192
(dp5193
g15
(lp5194
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5195
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5196
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5197
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5198
asbsg147
(lp5199
g5138
asg149
g1
(g373
g3
NtRp5200
(dp5201
g376
(lp5202
sg378
(lp5203
sg380
(lp5204
I0
asg382
(tsg383
I00
sg384
(S'x'
tp5205
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5206
(dp5207
bsg28
g1
(g29
g3
NtRp5208
(dp5209
g32
(I01
tp5210
sg34
g5191
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5211
(dp5212
g15
(lp5213
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5214
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5215
a(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5216
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5217
asbsg147
(lp5218
g5133
asg149
g1
(g183
g3
NtRp5219
(dp5220
g40
Nsg188
g1675
sg206
(dp5221
sg208
Nsg209
(dp5222
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5223
(dp5224
g15
(lp5225
(g1732
I1861
g904
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
tp5226
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5227
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5228
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5229
asbsg28
g1
(g29
g3
NtRp5230
(dp5231
g32
(I00
tp5232
sg34
g5191
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4443
asg12
(itheano.gof.utils
scratchpad
p5233
(dp5234
g15
(lp5235
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5236
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5237
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5238
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5239
asbsg147
(lp5240
g5128
asg149
g1
(g183
g3
NtRp5241
(dp5242
g40
Nsg188
g295
sg206
(dp5243
sg208
Nsg209
(dp5244
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5245
(dp5246
g15
(lp5247
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5248
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5249
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5250
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5251
asbsg28
g1
(g29
g3
NtRp5252
(dp5253
g32
(I00
tp5254
sg34
S'float64'
p5255
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5256
(dp5257
g10
g1
(g95
g3
NtRp5258
(dp5259
g98
(lp5260
g4443
asg12
(itheano.gof.utils
scratchpad
p5261
(dp5262
g15
(lp5263
(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5264
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5265
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5266
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5267
asbsg147
(lp5268
g5256
asg149
g1
(g183
g3
NtRp5269
(dp5270
g40
Nsg188
g4574
sg206
(dp5271
sg208
Nsg209
(dp5272
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5273
(dp5274
g15
(lp5275
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5276
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5277
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5278
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5279
asbsg28
g1
(g29
g3
NtRp5280
(dp5281
g32
(I00
tp5282
sg34
g4560
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5283
(dp5284
g15
(lp5285
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp5286
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5287
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5288
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5289
asbsg147
(lp5290
g5123
asg149
g1
(g183
g3
NtRp5291
(dp5292
g40
Nsg188
g1632
sg206
(dp5293
sg208
Nsg209
(dp5294
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5295
(dp5296
g15
(lp5297
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5298
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5299
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5300
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5301
asbsg28
g1
(g29
g3
NtRp5302
(dp5303
g32
(I00
tp5304
sg34
S'float64'
p5305
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5306
(dp5307
g15
(lp5308
(g1699
I650
g904
S'rval = self._bgrad(inputs, ograds)'
tp5309
a(g1701
I763
g1702
S'ret.append(transform(scalar_igrad))'
tp5310
a(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5311
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5312
asbsg147
(lp5313
g5118
asg149
g1
(g183
g3
NtRp5314
(dp5315
g40
Nsg188
g1471
sg206
(dp5316
sg208
Nsg209
(dp5317
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5318
(dp5319
g15
(lp5320
(g1704
I755
g1705
S'*[transform(ipt) for ipt in node.inputs])'
tp5321
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5322
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5323
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5324
asbsg28
g1
(g29
g3
NtRp5325
(dp5326
g32
(I00
tp5327
sg34
g5305
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag4453
ag769
asg12
(itheano.gof.utils
scratchpad
p5328
(dp5329
g15
(lp5330
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5331
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5332
a(g4403
I1825
g904
S'*rest)] + \\'
tp5333
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5334
asbsg147
(lp5335
g5066
asg149
g1
(g4901
g3
NtRp5336
(dp5337
g4904
I01
sg153
g154
sg4905
I00
sg383
I00
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5338
(dp5339
bsg28
g1
(g29
g3
NtRp5340
(dp5341
g32
(I00
I00
tp5342
sg34
g4377
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5343
(dp5344
g10
g1
(g95
g3
NtRp5345
(dp5346
g98
(lp5347
g4283
asg12
(itheano.gof.utils
scratchpad
p5348
(dp5349
g15
(lp5350
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5351
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5352
a(g4921
I370
g904
S'sm = softmax(x)'
tp5353
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5354
asbsg147
(lp5355
g5343
asg149
g692
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5356
(dp5357
g15
(lp5358
(g4921
I370
g904
S'sm = softmax(x)'
tp5359
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5360
a(g699
I359
g161
S'return Apply(self, [x], [x.type()])'
tp5361
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5362
asbsg28
g4346
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5363
(dp5364
g15
(lp5365
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5366
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5367
a(g4921
I371
g904
S'return [softmax_grad(g_sm, sm)]'
tp5368
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5369
asbsg147
(lp5370
g5061
asg149
g4941
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5371
(dp5372
bsg28
g4346
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5373
(dp5374
g15
(lp5375
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5376
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5377
a(g1699
I700
g904
S'sr = Sum(axis=to_sum)(rval[i])'
tp5378
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5379
asbsg147
(lp5380
g5056
asg149
g1
(g1440
g3
NtRp5381
(dp5382
g1443
g4349
sg34
g4349
sg153
g154
sg188
g588
sg1444
(I0
tp5383
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5384
(dp5385
g15
(lp5386
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5387
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5388
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp5389
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5390
asbsg28
g1
(g29
g3
NtRp5391
(dp5392
g32
(I00
tp5393
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5394
(dp5395
g15
(lp5396
(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5397
a(g1699
I701
g904
S'sr = sr.dimshuffle(shuffle)'
tp5398
a(g3312
I324
g3313
S'return op(self)'
tp5399
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5400
asbsg147
(lp5401
g5051
asg149
g1
(g373
g3
NtRp5402
(dp5403
g376
(lp5404
sg378
(lp5405
I0
asg380
(lp5406
I0
asg382
(I00
tp5407
sg383
I00
sg384
(S'x'
I0
tp5408
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5409
(dp5410
bsg28
g1
(g29
g3
NtRp5411
(dp5412
g32
(I01
I00
tp5413
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5414
(dp5415
g15
(lp5416
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5417
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5418
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp5419
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5420
asbsg147
(lp5421
g5046
asg149
g1
(g183
g3
NtRp5422
(dp5423
g40
Nsg188
g2416
sg206
(dp5424
sg208
Nsg209
(dp5425
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5426
(dp5427
g15
(lp5428
(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp5429
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5430
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5431
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5432
asbsg28
g1
(g29
g3
NtRp5433
(dp5434
g32
(I01
I00
tp5435
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5436
(dp5437
g15
(lp5438
(g1726
I1063
g1727
S'term = access_term_cache(node)[idx]'
tp5439
a(g1729
I924
g1730
S'input_grads = node.op.grad(inputs, new_output_grads)'
tp5440
a(g2409
I389
g904
S'Elemwise(scalar.identity)(gz))]'
tp5441
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5442
asbsg147
(lp5443
g5041
asg149
g1
(g373
g3
NtRp5444
(dp5445
g376
(lp5446
I0
asg378
(lp5447
I1
asg380
(lp5448
sg382
g5413
sg383
I00
sg384
(I1
tp5449
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5450
(dp5451
bsg28
g1
(g29
g3
NtRp5452
(dp5453
g32
(I00
tp5454
sg34
g4349
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5455
(dp5456
g15
(lp5457
(g417
I74
g418
S'updates=self.get_updates(),'
tp5458
a(g1161
I259
g1162
S'self.learning_rate*lr_bias_gradient)]'
tp5459
a(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp5460
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5461
asbsg147
(lp5462
g5004
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5463
(dp5464
g15
(lp5465
(g857
I219
g858
S'return theano.tensor.basic.mul(other, self)'
tp5466
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5467
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5468
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5469
asbsg28
g1
(g29
g3
NtRp5470
(dp5471
g32
(I00
tp5472
sg34
S'float64'
p5473
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5474
(dp5475
g15
(lp5476
(g417
I74
g418
S'updates=self.get_updates(),'
tp5477
a(g1161
I259
g1162
S'self.learning_rate*lr_bias_gradient)]'
tp5478
a(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp5479
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5480
asbsg147
(lp5481
g4999
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5482
(dp5483
g15
(lp5484
(g2493
I136
g2494
S'return theano.tensor.basic.sub(self, other)'
tp5485
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5486
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5487
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5488
asbsg28
g1
(g29
g3
NtRp5489
(dp5490
g32
(I00
tp5491
sg34
S'float64'
p5492
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg406
g320
sg407
I01
sg54
I00
sg408
I01
sg409
I01
sg410
g318
sg427
I01
sg60
Nsbasg147
g1
(g485
g3
NtRp5493
(dp5494
g410
g1
(g7
g3
NtRp5495
(dp5496
g10
g1
(g95
g3
NtRp5497
(dp5498
g98
(lp5499
g1
(g7
g3
NtRp5500
(dp5501
g10
g1
(g95
g3
NtRp5502
(dp5503
g98
(lp5504
g1
(g7
g3
NtRp5505
(dp5506
g10
g1
(g95
g3
NtRp5507
(dp5508
g98
(lp5509
g1
(g7
g3
NtRp5510
(dp5511
g10
g1
(g95
g3
NtRp5512
(dp5513
g98
(lp5514
g1
(g7
g3
NtRp5515
(dp5516
g10
g1
(g95
g3
NtRp5517
(dp5518
g98
(lp5519
g1
(g7
g3
NtRp5520
(dp5521
g10
g1
(g95
g3
NtRp5522
(dp5523
g98
(lp5524
g411
ag1
(g7
g3
NtRp5525
(dp5526
g10
g1
(g95
g3
NtRp5527
(dp5528
g98
(lp5529
g1
(g7
g3
NtRp5530
(dp5531
g10
g1
(g95
g3
NtRp5532
(dp5533
g98
(lp5534
g1
(g7
g3
NtRp5535
(dp5536
g10
g1
(g95
g3
NtRp5537
(dp5538
g98
(lp5539
g1
(g7
g3
NtRp5540
(dp5541
g10
g1
(g95
g3
NtRp5542
(dp5543
g98
(lp5544
g1
(g7
g3
NtRp5545
(dp5546
g10
g1
(g95
g3
NtRp5547
(dp5548
g98
(lp5549
g1
(g7
g3
NtRp5550
(dp5551
g10
g1
(g95
g3
NtRp5552
(dp5553
g98
(lp5554
g1
(g7
g3
NtRp5555
(dp5556
g10
g1
(g95
g3
NtRp5557
(dp5558
g98
(lp5559
g890
ag348
asg12
(itheano.gof.utils
scratchpad
p5560
(dp5561
g15
(lp5562
(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5563
a(g534
I170
g535
S'theano.tensor.dot(self.symbolic_corrupted_input, self.weights) +'
tp5564
a(g537
I4732
g538
S'return _dot(a, b)'
tp5565
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5566
asbsg147
(lp5567
g5555
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5568
(dp5569
bsg28
g1
(g29
g3
NtRp5570
(dp5571
g32
(I00
I00
tp5572
sg34
S'float64'
p5573
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5574
(dp5575
g10
g1
(g95
g3
NtRp5576
(dp5577
g98
(lp5578
g43
asg12
(itheano.gof.utils
scratchpad
p5579
(dp5580
g15
(lp5581
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5582
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5583
a(g219
I533
g161
S'inplace=False)(input))'
tp5584
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5585
asbsg147
(lp5586
g5574
asg149
g1
(g373
g3
NtRp5587
(dp5588
g376
(lp5589
sg378
(lp5590
I0
asg380
(lp5591
I0
asg382
g58
sg383
I00
sg384
(S'x'
I0
tp5592
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5593
(dp5594
bsg28
g1
(g29
g3
NtRp5595
(dp5596
g32
(I01
I00
tp5597
sg34
g59
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5598
(dp5599
g15
(lp5600
(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5601
a(g534
I171
g535
S'self.bias)'
tp5602
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5603
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5604
asbsg147
(lp5605
g5550
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5606
(dp5607
g15
(lp5608
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5609
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5610
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5611
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5612
asbsg28
g1
(g29
g3
NtRp5613
(dp5614
g32
(I00
I00
tp5615
sg34
S'float64'
p5616
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5617
(dp5618
g15
(lp5619
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp5620
a(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5621
a(g534
I171
g535
S'self.bias)'
tp5622
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5623
asbsg147
(lp5624
g5545
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5625
(dp5626
g15
(lp5627
(g534
I171
g535
S'self.bias)'
tp5628
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5629
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5630
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5631
asbsg28
g1
(g29
g3
NtRp5632
(dp5633
g32
(I00
I00
tp5634
sg34
S'float64'
p5635
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1091
asg12
(itheano.gof.utils
scratchpad
p5636
(dp5637
g15
(lp5638
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp5639
a(g1014
I179
g1015
S'theano.tensor.dot(self.get_hidden_output(), self.reverse_weights) +'
tp5640
a(g537
I4732
g538
S'return _dot(a, b)'
tp5641
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5642
asbsg147
(lp5643
g5540
asg149
g543
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5644
(dp5645
bsg28
g1
(g29
g3
NtRp5646
(dp5647
g32
(I00
I00
tp5648
sg34
S'float64'
p5649
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5650
(dp5651
g10
g1
(g95
g3
NtRp5652
(dp5653
g98
(lp5654
g64
asg12
(itheano.gof.utils
scratchpad
p5655
(dp5656
g15
(lp5657
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5658
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5659
a(g219
I533
g161
S'inplace=False)(input))'
tp5660
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5661
asbsg147
(lp5662
g5650
asg149
g1
(g373
g3
NtRp5663
(dp5664
g376
(lp5665
sg378
(lp5666
I0
asg380
(lp5667
I0
asg382
g73
sg383
I00
sg384
(S'x'
I0
tp5668
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5669
(dp5670
bsg28
g1
(g29
g3
NtRp5671
(dp5672
g32
(I01
I00
tp5673
sg34
g74
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5674
(dp5675
g15
(lp5676
(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp5677
a(g1014
I180
g1015
S'self.reverse_bias)'
tp5678
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5679
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5680
asbsg147
(lp5681
g5535
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5682
(dp5683
g15
(lp5684
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5685
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5686
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5687
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5688
asbsg28
g1
(g29
g3
NtRp5689
(dp5690
g32
(I00
I00
tp5691
sg34
S'float64'
p5692
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5693
(dp5694
g15
(lp5695
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5696
a(g1073
I197
g1074
S'y = self.get_reconstructed_input()'
tp5697
a(g1014
I180
g1015
S'self.reverse_bias)'
tp5698
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5699
asbsg147
(lp5700
g5530
asg149
g332
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5701
(dp5702
g15
(lp5703
(g1014
I180
g1015
S'self.reverse_bias)'
tp5704
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5705
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5706
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5707
asbsg28
g1
(g29
g3
NtRp5708
(dp5709
g32
(I00
I00
tp5710
sg34
S'float64'
p5711
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5712
(dp5713
g15
(lp5714
(g20
I76
g18
S'self.initialise_theano_functions()'
tp5715
a(g417
I73
g418
S'outputs=self.get_cost(),'
tp5716
a(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5717
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5718
asbsg147
(lp5719
g5525
asg149
g1187
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5720
(dp5721
g15
(lp5722
(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5723
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5724
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5725
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5726
asbsg28
g1
(g29
g3
NtRp5727
(dp5728
g32
(I00
I00
tp5729
sg34
S'float64'
p5730
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5731
(dp5732
g15
(lp5733
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5734
a(g1073
I199
g1074
S'negative_log_loss = -theano.tensor.sum(x*theano.tensor.log(y) +'
tp5735
a(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp5736
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5737
asbsg147
(lp5738
g5520
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5739
(dp5740
g15
(lp5741
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp5742
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5743
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5744
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5745
asbsg28
g1
(g29
g3
NtRp5746
(dp5747
g32
(I00
I00
tp5748
sg34
S'float64'
p5749
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5750
(dp5751
g10
g1
(g95
g3
NtRp5752
(dp5753
g98
(lp5754
g1
(g7
g3
NtRp5755
(dp5756
g10
g1
(g95
g3
NtRp5757
(dp5758
g98
(lp5759
g1
(g7
g3
NtRp5760
(dp5761
g10
g1
(g95
g3
NtRp5762
(dp5763
g98
(lp5764
g227
asg12
(itheano.gof.utils
scratchpad
p5765
(dp5766
g15
(lp5767
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5768
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5769
a(g219
I533
g161
S'inplace=False)(input))'
tp5770
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5771
asbsg147
(lp5772
g5760
asg149
g1
(g373
g3
NtRp5773
(dp5774
g376
(lp5775
sg378
(lp5776
sg380
(lp5777
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp5778
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5779
(dp5780
bsg28
g1
(g29
g3
NtRp5781
(dp5782
g32
(I01
I01
tp5783
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag411
asg12
(itheano.gof.utils
scratchpad
p5784
(dp5785
g15
(lp5786
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5787
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5788
a(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5789
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5790
asbsg147
(lp5791
g5755
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5792
(dp5793
g15
(lp5794
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5795
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5796
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5797
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5798
asbsg28
g1
(g29
g3
NtRp5799
(dp5800
g32
(I00
I00
tp5801
sg34
S'float64'
p5802
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5803
(dp5804
g10
g1
(g95
g3
NtRp5805
(dp5806
g98
(lp5807
g1
(g7
g3
NtRp5808
(dp5809
g10
g1
(g95
g3
NtRp5810
(dp5811
g98
(lp5812
g1
(g7
g3
NtRp5813
(dp5814
g10
g1
(g95
g3
NtRp5815
(dp5816
g98
(lp5817
g227
asg12
(itheano.gof.utils
scratchpad
p5818
(dp5819
g15
(lp5820
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5821
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5822
a(g219
I533
g161
S'inplace=False)(input))'
tp5823
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5824
asbsg147
(lp5825
g5813
asg149
g1
(g373
g3
NtRp5826
(dp5827
g376
(lp5828
sg378
(lp5829
sg380
(lp5830
I0
aI1
asg382
(tsg383
I00
sg384
(S'x'
S'x'
tp5831
sg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5832
(dp5833
bsg28
g1
(g29
g3
NtRp5834
(dp5835
g32
(I01
I01
tp5836
sg34
g238
sg36
g232
sg39
I00
sg40
Nsbsg40
Nsbag5530
asg12
(itheano.gof.utils
scratchpad
p5837
(dp5838
g15
(lp5839
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5840
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5841
a(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5842
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5843
asbsg147
(lp5844
g5808
asg149
g1272
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5845
(dp5846
g15
(lp5847
(g1246
I216
g1247
S'return theano.tensor.basic.sub(other, self)'
tp5848
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5849
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5850
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5851
asbsg28
g1
(g29
g3
NtRp5852
(dp5853
g32
(I00
I00
tp5854
sg34
S'float64'
p5855
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5856
(dp5857
g15
(lp5858
(g20
I76
g18
S'self.initialise_theano_functions()'
tp5859
a(g417
I73
g418
S'outputs=self.get_cost(),'
tp5860
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5861
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5862
asbsg147
(lp5863
g5803
asg149
g1187
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5864
(dp5865
g15
(lp5866
(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5867
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5868
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5869
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5870
asbsg28
g1
(g29
g3
NtRp5871
(dp5872
g32
(I00
I00
tp5873
sg34
S'float64'
p5874
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5875
(dp5876
g15
(lp5877
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5878
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5879
a(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp5880
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5881
asbsg147
(lp5882
g5750
asg149
g291
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5883
(dp5884
g15
(lp5885
(g286
I144
g287
S'return theano.tensor.mul(self, other)'
tp5886
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5887
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5888
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5889
asbsg28
g1
(g29
g3
NtRp5890
(dp5891
g32
(I00
I00
tp5892
sg34
S'float64'
p5893
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5894
(dp5895
g15
(lp5896
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5897
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5898
a(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5899
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5900
asbsg147
(lp5901
g5515
asg149
g585
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5902
(dp5903
g15
(lp5904
(g559
I117
g560
S'return theano.tensor.basic.add(self, other)'
tp5905
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5906
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5907
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5908
asbsg28
g1
(g29
g3
NtRp5909
(dp5910
g32
(I00
I00
tp5911
sg34
S'float64'
p5912
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5913
(dp5914
g15
(lp5915
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5916
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5917
a(g1435
I2670
g1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp5918
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5919
asbsg147
(lp5920
g5510
asg149
g1
(g1440
g3
NtRp5921
(dp5922
g1443
g5912
sg34
g5912
sg153
g154
sg188
g588
sg1444
(I1
tp5923
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5924
(dp5925
g15
(lp5926
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5927
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5928
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp5929
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5930
asbsg28
g1
(g29
g3
NtRp5931
(dp5932
g32
(I00
tp5933
sg34
g5912
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5934
(dp5935
g15
(lp5936
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5937
a(g1073
I200
g1074
S'(1-x)*theano.tensor.log(1-y), axis=1)'
tp5938
a(g1463
I27
g1464
S'return theano.tensor.basic.neg(self)'
tp5939
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5940
asbsg147
(lp5941
g5505
asg149
g1468
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5942
(dp5943
g15
(lp5944
(g1463
I27
g1464
S'return theano.tensor.basic.neg(self)'
tp5945
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5946
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp5947
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5948
asbsg28
g1
(g29
g3
NtRp5949
(dp5950
g32
(I00
tp5951
sg34
g5912
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p5952
(dp5953
g15
(lp5954
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp5955
a(g1520
I2802
g1521
S'acc_dtype=acc_dtype)'
tp5956
a(g1435
I2670
g1436
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
tp5957
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5958
asbsg147
(lp5959
g5500
asg149
g1
(g1440
g3
NtRp5960
(dp5961
g1443
g5912
sg34
g5912
sg153
g154
sg188
g588
sg1444
Nsbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5962
(dp5963
g15
(lp5964
(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5965
a(g1450
I1797
g161
S'return CAReduce.make_node(op, input)'
tp5966
a(g1452
I1299
g161
S'broadcastable=broadcastable)()'
tp5967
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp5968
asbsg28
g1
(g29
g3
NtRp5969
(dp5970
g32
(tsg34
g5912
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbag1
(g7
g3
NtRp5971
(dp5972
g10
g1
(g95
g3
NtRp5973
(dp5974
g98
(lp5975
g1
(g7
g3
NtRp5976
(dp5977
g10
g1
(g95
g3
NtRp5978
(dp5979
g98
(lp5980
g1
(g7
g3
NtRp5981
(dp5982
g10
g1
(g95
g3
NtRp5983
(dp5984
g98
(lp5985
g5505
asg12
(itheano.gof.utils
scratchpad
p5986
(dp5987
g15
(lp5988
(g417
I73
g418
S'outputs=self.get_cost(),'
tp5989
a(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp5990
a(g1520
I2803
g1521
S'shp = shape(input)'
tp5991
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp5992
asbsg147
(lp5993
g5981
asg149
g151
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p5994
(dp5995
g15
(lp5996
(g1520
I2803
g1521
S'shp = shape(input)'
tp5997
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp5998
a(g160
I1140
g161
S'return Apply(self, [x], [lvector()])'
tp5999
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6000
asbsg28
g164
sg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6001
(dp6002
g15
(lp6003
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6004
a(g1520
I2811
g1521
S"shp = cast(shp, 'float64')"
tp6005
a(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp6006
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6007
asbsg147
(lp6008
g5976
asg149
g1575
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6009
(dp6010
g15
(lp6011
(g178
I1110
g179
S'return _cast_mapping[dtype](x)'
tp6012
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp6013
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp6014
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6015
asbsg28
g1
(g29
g3
NtRp6016
(dp6017
g32
(I00
tp6018
sg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6019
(dp6020
g15
(lp6021
(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6022
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp6023
a(g1604
I407
g1605
S'lambda entry: isinstance(entry, Variable)))'
tp6024
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6025
asbsg147
(lp6026
g5971
asg149
g1
(g1609
g3
NtRp6027
(dp6028
g1612
(g1613
(g168
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp6029
tp6030
sg1616
Nsg153
g154
sbsbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6031
(dp6032
bsg28
g1
(g29
g3
NtRp6033
(dp6034
g32
(tsg34
g35
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbasg12
(itheano.gof.utils
scratchpad
p6035
(dp6036
g15
(lp6037
(g417
I73
g418
S'outputs=self.get_cost(),'
tp6038
a(g1073
I202
g1074
S'mean_loss = theano.tensor.mean(negative_log_loss)'
tp6039
a(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp6040
a(g145
I401
g26
S'self.add_tag_trace(node)'
tp6041
asbsg147
(lp6042
g5495
asg149
g1629
sbsg11
I0
sg12
(itheano.gof.utils
scratchpad
p6043
(dp6044
g15
(lp6045
(g1520
I2824
g1521
S's = true_div(s, shp[i])'
tp6046
a(g145
I399
g26
S'node = self.make_node(*inputs, **kwargs)'
tp6047
a(g219
I567
g161
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
tp6048
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6049
asbsg28
g1
(g29
g3
NtRp6050
(dp6051
g32
(tsg34
S'float64'
p6052
sg36
g38
sg39
I00
sg40
Nsbsg40
Nsbsg407
I00
sbsg702
g704
stRp6053
(lp6054
g1
(g46
g3
NtRp6055
(dp6056
g726
I1
sg40
g405
sg727
I01
sg49
(lp6057
Nasg408
I00
sg54
I00
sg55
I00
sg28
g424
sg60
I01
sbag1
(g46
g3
NtRp6058
(dp6059
g726
I1
sg40
g768
sg727
I01
sg49
(lp6060
Nasg408
I00
sg54
I00
sg55
I00
sg28
g778
sg60
I01
sbag1
(g46
g3
NtRp6061
(dp6062
g726
I1
sg40
g783
sg727
I01
sg49
(lp6063
Nasg408
I00
sg54
I00
sg55
I00
sg28
g30
sg60
I01
sbag1
(g46
g3
NtRp6064
(dp6065
g726
I0
sg40
Nsg727
I00
sg49
g108
sg408
I01
sg54
I00
sg55
I00
sg28
g115
sg60
Nsbag1
(g46
g3
NtRp6066
(dp6067
g726
I0
sg40
S'W'
sg727
I00
sg49
g352
sg408
I01
sg54
I00
sg55
I00
sg28
g354
sg60
Nsbag1
(g46
g3
NtRp6068
(dp6069
g726
I0
sg40
S'b'
sg727
I00
sg49
g50
sg408
I01
sg54
I00
sg55
I00
sg28
g56
sg60
Nsbag1
(g46
g3
NtRp6070
(dp6071
g726
I0
sg40
g68
sg727
I00
sg49
g69
sg408
I01
sg54
I00
sg55
I00
sg28
g71
sg60
Nsbag1
(g46
g3
NtRp6072
(dp6073
g726
I0
sg40
g470
sg727
I00
sg49
g473
sg408
I01
sg54
I00
sg55
I00
sg28
g475
sg60
Nsbag1
(g46
g3
NtRp6074
(dp6075
g726
I0
sg40
g322
sg727
I00
sg49
g323
sg408
I01
sg54
I00
sg55
I00
sg28
g325
sg60
Nsba(lp6076
NaNaNag110
ag353
ag53
ag70
ag474
ag324
atRp6077
sS'action_vector'
p6078
g1
(g7
g3
NtRp6079
(dp6080
g10
Nsg11
Nsg12
(itheano.gof.utils
scratchpad
p6081
(dp6082
g15
(lp6083
(S'denoising_autoencoder_cart_pole.py'
p6084
I96
S'<module>'
p6085
S'agent = Cart_Pole_DA(input_dimension, hidden_dimension, output_dimension, gamma=0.9)'
tp6086
a(g17
I31
g18
S'self.action_vector = theano.tensor.ivector("av")'
tp6087
a(g25
I317
g26
S'return utils.add_tag_trace(self.make_variable(name))'
tp6088
asbsg28
g778
sg40
g768
sbsS'gamma'
p6089
F0.90000000000000002
sb.